# Created 3. April 2022 um 18:53:40 by Gemstone Transform(1.4.0.7,chaider)
FileFormat UTF8
IfErr 1 list dictionaries
IfErr 2 stk
IfErr 3 display oops
IfErr 4 omit classoops
IfErr 5 stack
IfErr 6 Exit
DoIt
	| package |
	UserGlobals at: #FileInStartingTimestamp put: DateAndTime now.
	(UserGlobals includesKey: #FileInSymbolDictionary) ifTrue: [
		nil error: 'Previous file-in did not complete'].
	(GsSession currentSession resolveSymbol: #PDFtalkTesting) ifNil: [
		package := GsPackageLibrary createPackageNamed: #PDFtalkTesting.
		package initialize.
		package addPrereq: PDFtalkLibrary.
		GsPackageLibrary installPackage: package].
%
DoIt
	UserGlobals at: #FileInSymbolDictionary put: PDFtalkTesting.
%
DoIt
	FileInSymbolDictionary at: #codeComponents put: Dictionary new.	"Add root of pundle structure"
	FileInSymbolDictionary at: #namespacePathsAtClasses put: Dictionary new.	"Add registry for namespace paths of classes"
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'Values Testing'.
	dict at: #comment put: 'Values are simple immutable literal objects.

Tests for Values.

Includes conformance tests for all leaf classes of Value.'.
	dict at: #developmentPrerequisites put: #(#(#any 'SUnitToo' '')).
	dict at: #notice put: ''.
	dict at: #packageName put: 'Values Testing'.
	dict at: #padded put: true.
	dict at: #prerequisiteDescriptions put: #(#(#name 'SUnitToo' #componentType #package)).
	dict at: #prerequisiteParcels put: #(#('SUnitToo' '')).
	dict at: #storeVersion put: '3.0.1.0'.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components at: dict name put: dict.
%
# Define class ValuemapTests
DoIt
TestCase
	subclass: 'ValuemapTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalkTesting
%
DoIt
	ValuemapTests category: 'Values Testing'.
	ValuemapTests comment: 'Tests for the behavior of OrderedDictionary as Dictionary and as Value'.
%
# Define class ValuePrinterTests
DoIt
TestCase
	subclass: 'ValuePrinterTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalkTesting
%
DoIt
	ValuePrinterTests category: 'Values Testing'.
	ValuePrinterTests comment: 'Tests for the source strings of Values'.
%
# Define class Testvalue
DoIt
Value
	subclass: 'Testvalue'
	instVarNames: #(constant optional array dictionary)
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalkTesting
%
DoIt
	Testvalue category: 'Values Testing'.
	Testvalue comment: 'Testvalue is a resource class for testing values'.
%
category: 'instance creation'
classmethod: Testvalue
constant: constantSymbol optional: optionalSymbol array: arrayArray dictionary: dictionaryDictionary
	| inst |
	inst := self new.
	inst
		initializeConstant: constantSymbol
		optional: optionalSymbol
		array: arrayArray
		dictionary: dictionaryDictionary.
	^inst
%
category: 'instance creation optional'
classmethod: Testvalue
constant: constantSymbol
	| inst |
	inst := self new.
	inst initializeConstant: constantSymbol optional: nil array: nil dictionary: nil.
	^inst
%
classmethod: Testvalue
constant: constantSymbol array: arrayArray
	| inst |
	inst := self new.
	inst initializeConstant: constantSymbol optional: nil array: arrayArray dictionary: nil.
	^inst
%
classmethod: Testvalue
constant: constantSymbol array: arrayArray dictionary: dictionaryDictionary
	| inst |
	inst := self new.
	inst
		initializeConstant: constantSymbol
		optional: nil
		array: arrayArray
		dictionary: dictionaryDictionary.
	^inst
%
classmethod: Testvalue
constant: constantSymbol dictionary: dictionaryDictionary
	| inst |
	inst := self new.
	inst
		initializeConstant: constantSymbol
		optional: nil
		array: nil
		dictionary: dictionaryDictionary.
	^inst
%
classmethod: Testvalue
constant: constantSymbol optional: optionalSymbol
	| inst |
	inst := self new.
	inst initializeConstant: constantSymbol optional: optionalSymbol array: nil dictionary: nil.
	^inst
%
classmethod: Testvalue
constant: constantSymbol optional: optionalSymbol array: arrayArray
	| inst |
	inst := self new.
	inst
		initializeConstant: constantSymbol
		optional: optionalSymbol
		array: arrayArray
		dictionary: nil.
	^inst
%
classmethod: Testvalue
constant: constantSymbol optional: optionalSymbol dictionary: dictionaryDictionary
	| inst |
	inst := self new.
	inst
		initializeConstant: constantSymbol
		optional: optionalSymbol
		array: nil
		dictionary: dictionaryDictionary.
	^inst
%
category: 'specification'
classmethod: Testvalue
localSpecification
	<constant: #constant class: #(#Symbol)>
	<optional: #optional class: #(#Symbol) default: '#none'>
	<sequence: #array>
	<map: #dictionary>
%
category: 'test instances'
classmethod: Testvalue
example
	^Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x 'name')
		dictionary: (Valuemap
			with: 1 -> #symbol
			with: #key -> 'string')
%
category: 'accessing'
method: Testvalue
array
	"<Array>"

	^array ifNil: [#()]
%
method: Testvalue
constant
	"<Symbol>"

	^constant
%
method: Testvalue
dictionary
	"<Dictionary>"

	^dictionary ifNil: [Dictionary new beImmutable]
%
method: Testvalue
optional
	"<Symbol>"

	^optional ifNil: [#none]
%
category: 'initialize-release'
method: Testvalue
initializeConstant: constantSymbol optional: optionalSymbol array: arrayArray dictionary: dictionaryDictionary
	constant := constantSymbol.
	(optionalSymbol notNil and: [
	self optional ~= optionalSymbol]) ifTrue: [
			optional := optionalSymbol].
	(arrayArray notNil and: [
	arrayArray notEmpty]) ifTrue: [
			array := (Array withAll: arrayArray) beImmutable].
	(dictionaryDictionary notNil and: [
	dictionaryDictionary notEmpty]) ifTrue: [
			dictionary := (Valuemap withAll: dictionaryDictionary) beImmutable].
	self beImmutable
%
category: 'marshaling'
method: Testvalue
passInstVars
	"for OpenTalk StSt"

	^#(#default #default #default #value)
%
category: 'printing'
method: Testvalue
printvalueWith: printer
	| args |
	args := OrderedCollection new.
	args add: (printer constant: 'constant' value: self constant).
	args add: (printer optional: 'optional' value: optional).
	args add: (printer array: 'array' value: self array).
	args add: (printer dictionary: 'dictionary' value: self dictionary).
	^printer printvalue: self arguments: args
%
category: 'Testing'
method: ValuemapTests
testAdding
	| od od1 |
	od := Valuemap new.
	self assert: od isEmpty.
	od add: #foo -> 'bar'.
	self assert: od size = 1.
	self assert: (od atIndex: 1) = (#foo -> 'bar').
	self assert: (od at: #foo) = 'bar'.
	od at: #baz put: 'xxx'.
	self assert: od size = 2.
	self assert: (od atIndex: 2) = (#baz -> 'xxx').
	self assert: (od at: #baz) = 'xxx'.
	od1 := Valuemap new.
	od1 add: #foo -> 'baz'.
	od1 at: #baz put: 'yyy'.
	od addAll: od1.
	self assert: od size = 2.
	self assert: (od at: #foo) = 'baz'.
	self assert: (od at: #baz) = 'yyy'.
%
method: ValuemapTests
testAddingWithGrowth
	"add iteratively elements, so that the dictionary must grow"

	| letters od od1 |
	letters := #(#a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q #r #s #t #u #v #w #x #y #z).
	od := Valuemap new.
	self shouldnt: [letters do: [:symbol | od add: symbol -> symbol asString]] raise: Error.
	self assert: od keys asArray = #(#a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q #r #s #t #u #v #w #x #y #z).
	od1 := Valuemap new.
	self shouldnt: [letters do: [:symbol | od1 at: symbol put: symbol asString]] raise: Error.
	self assert: od1 keys asArray = #(#a #b #c #d #e #f #g #h #i #j #k #l #m #n #o #p #q #r #s #t #u #v #w #x #y #z).
%
method: ValuemapTests
testComparing
	self assert: (Valuemap with: #foo -> 'bar') = (Valuemap with: #foo -> 'bar').
	self deny: (Valuemap with: #foo -> 'bar') == (Valuemap with: #foo -> 'bar').
	self deny: (Valuemap with: #foo -> 'bar') = (Dictionary with: #foo -> 'bar').
	self deny: (Dictionary with: #foo -> 'bar') = (Valuemap with: #foo -> 'bar').
	self assert: (Valuemap with: #foo -> 'bar' with: $a -> 123) = (Valuemap with: #foo -> 'bar' with: $a -> 123).
	self deny: (Valuemap with: #foo -> 'bar' with: $a -> 123) = (Valuemap with: $a -> 123 with: #foo -> 'bar' ).
	self deny: (Valuemap with: #foo -> 'bar' with: $a -> 123) = (Valuemap with: #foo -> 123 with: $a -> 'bar' ).
	self deny: (Valuemap with: #foo -> 'bar' with: $a -> 123) = (Valuemap with: #foo -> 'bar' with: $a -> 1234).
	self deny: (Valuemap with: #foo -> 'bar' with: $a -> 123) = (Valuemap with: #foo -> 'bars' with: $a -> 123).
	self deny: (Valuemap with: #foo -> 'bar' with: $a -> 123) = (Valuemap with: #foo -> 'bar' with: $a -> 123 with: '' -> 0).
%
method: ValuemapTests
testDescribeAndReadBackNew
	| inst |
	inst := Valuemap new.
	self assert: inst asDescription = inst asSource evaluate asDescription
%
method: ValuemapTests
testEnumeration
	| od keys |
	od := Valuemap new.
	od add: #foo -> 'bar'.
	od at: #baz put: 'xxx'.
	od associationsDo: [:assoc |
		self assert: (assoc isKindOf: Association).
		self assert: assoc key isSymbol.
		self assert: assoc value isString].
	self assert: od keys asArray = #(#foo #baz).
	self assert: od values asArray = #('bar' 'xxx').
	keys := OrderedCollection new.
	od keysDo: [:k | keys add: k].
	self assert: keys asArray = #(#foo #baz).
%
method: ValuemapTests
testExampleSource
	self assert: Valuemap example asSource = '((Valuemap new: 17)
	add: #title -> ''Valuemap class example with examples of all basic values'';
	add: #boolean -> true;
	add: #character -> $A;
	add: #symbol -> #mySymbol;
	add: #string -> ''with umlauts and euro: äöüß€'';
	add: #schluessel -> nil;
	add: #integer -> 42;
	add: #number -> 3.14;
	add: #date -> (Date d: 27 m: 3 y: 2022);
	add: #time -> (Time h: 12 m: 18);
	add: #timestamp -> (Timestamp d: 27 m: 3 y: 2022 h: 12 m: 18);
	add: #duration -> (Duration nanoseconds: 300000000000);
	add: #color -> (ColorValue fromBytesRed: 127 green: 0 blue: 0);
	add: #knownColor -> ColorValue red;
	add: #array -> #(#one ''two'' 3);
	add: #bytearray -> #[1 2 3];
	add: #valuemap -> (Valuemap
		with: #test -> true
		with: #two -> 2
		with: #none -> nil);
	yourself)'
%
method: ValuemapTests
testIndexedAccess
	| od |
	od := Valuemap new.
	od add: #foo -> 'bar'.
	self assert: od size = 1.
	self assert: (od atIndex: 1) = (#foo -> 'bar').
	self should: [od atIndex: 0] raise: OffsetError.
	self should: [od atIndex: 2] raise: OffsetError.
	self should: [od atIndex: #key] raise: ArgumentError.
	self should: [od atIndex: '1'] raise: ArgumentError.
%
method: ValuemapTests
testIndexOf
	| od |
	od := Valuemap new.
	self assert: od isEmpty.
	self assert: (od indexOf: #foo) isZero.
	od add: #foo -> 'bar'.
	self assert: od size = 1.
	self assert: (od indexOf: #foo) = 1.
	self assert: (od indexOf: #baz) isZero.
	od at: #baz put: 'xxx'.
	self assert: od size = 2.
	self assert: (od indexOf: #baz) = 2.
%
method: ValuemapTests
testKeyedAccess
	| od |
	od := Valuemap new.
	od add: #foo -> 'bar'.
	od at: #baz put: 'xxx'.
	self assert: od size = 2.
	self assert: (od at: #foo) = 'bar'.
	self assert: (od at: #baz) = 'xxx'.
	self should: [od at: #bar] raise: LookupError.
	self assert: (od at: #bar ifAbsent: [nil]) isNil.
%
method: ValuemapTests
testReadBackAllTestInstances
	(Valuemap class organization listAtCategoryNamed: (Valuemap class whichCategoryIncludesSelector: #example)) do: [:sel |
		| inst readInst |
		inst := Valuemap perform: sel.
		self shouldnt: [readInst := inst asSource evaluate] raise: Error.
		self assert: inst asSource = readInst asSource]
%
method: ValuemapTests
testRemoving
	| od |
	od := Valuemap new.
	self assert: od isEmpty.
	self should: [od removeKey: #foo] raise: LookupError.
	self shouldnt: [od removeKey: #foo ifAbsent: nil] raise: LookupError.
	self assert: (od removeKey: #foo ifAbsent: nil) isNil.
	od add: #foo -> 'bar'.
	self assert: od size = 1.
	self assert: od keys asArray = #(#foo).
	self assert: (od removeKey: #foo) = 'bar'.
	self assert: od size = 0.
	self assert: od keys asArray = #().
	od add: #foo -> 'bar'.
	od at: #baz put: 'xxx'.
	self assert: od size = 2.
	self assert: od keys asArray = #(#foo #baz).
	self should: [od removeKey: #zzz] raise: LookupError.
	self shouldnt: [od removeKey: #zzz ifAbsent: nil] raise: LookupError.
	self assert: od size = 2.
	self assert: od keys asArray = #(#foo #baz).
	self assert: (od removeKey: #foo) = 'bar'.
	self assert: od size = 1.
	self assert: od keys asArray = #(#baz)
%
category: 'Testing'
method: ValuePrinterTests
testArray
	self assert: Array new asSource = '#()'.
	self assert: #(1 2 3 4) asSource = '#(1 2 3 4)'.
	self assert: #(1 2 3 4 5 6 7 8 9 10) asSource = '#(1 2 3 4 5 6 7 8 9 10)'.
	self assert: (Array with: 1 with: 2 with: 3 with: 4) asSource = '#(1 2 3 4)'.
	self assert: (Array with: 1 with: (Date d: 7 m: 7 y: 2007) with: ColorValue red) asSource = '(Array
	with: 1
	with: (Date d: 7 m: 7 y: 2007)
	with: ColorValue red)'.
	self assert: (#(1 2 3 4) , (Array with: (Date d: 7 m: 7 y: 2007))) asSource = '((OrderedCollection new: 5)
	add: 1;
	add: 2;
	add: 3;
	add: 4;
	add: (Date d: 7 m: 7 y: 2007);
	yourself)'.
	self assert: (Array with: Testvalue example with: (Date d: 7 m: 7 y: 2007) with: ColorValue red) asSource = '(Array
	with: (Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x ''name'')
		dictionary: (Valuemap
			with: 1 -> #symbol
			with: #key -> ''string''))
	with: (Date d: 7 m: 7 y: 2007)
	with: ColorValue red)'.
%
method: ValuePrinterTests
testArraySource
	self assert: (Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x 'name')
		dictionary: (Valuemap
			with: 1 -> #symbol
			with: #key -> 'string')) asSource = '(Testvalue
	constant: #constantSymbol
	optional: #optionalSymbol
	array: #(1 #a $x ''name'')
	dictionary: (Valuemap
		with: 1 -> #symbol
		with: #key -> ''string''))'.
%
method: ValuePrinterTests
testBoolean
	self assert: true asSource = 'true'.
	self assert: false asSource = 'false'.
%
method: ValuePrinterTests
testColorValue
	self assert: ColorValue new isEmpty.
	self assert: ColorValue red asSource = 'ColorValue red'.
	self assert: (ColorValue fromBytesRed: 255 green: 0 blue: 0) asSource = 'ColorValue red'.
	self assert: (ColorValue fromBytesRed: 255 green: 0 blue: 10) asSource = '(ColorValue fromBytesRed: 255 green: 0 blue: 10)'
%
method: ValuePrinterTests
testDate
	self assert: (Date d: 7 m: 7 y: 2007) asSource = '(Date d: 7 m: 7 y: 2007)'
%
method: ValuePrinterTests
testDictionary
	| dict |
	self assert: Valuemap new asSource = 'Valuemap new'.
	dict := Valuemap
		with: 1 -> 75
		with: #b -> $x.
	self assert: dict asSource = '(Valuemap
	with: 1 -> 75
	with: #b -> $x)'
%
method: ValuePrinterTests
testDictionarySource
	self assert: (Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x 'name')
		dictionary: (Valuemap
			with: 1 -> #symbol
			with: #key -> 'string')) asSource = '(Testvalue
	constant: #constantSymbol
	optional: #optionalSymbol
	array: #(1 #a $x ''name'')
	dictionary: (Valuemap
		with: 1 -> #symbol
		with: #key -> ''string''))'.
	self assert: (Testvalue constant: #Haider) asSource = '(Testvalue constant: #Haider)'
%
method: ValuePrinterTests
testDictionaryWithValues
	| dict |
	dict := Valuemap
		with: 1 -> Testvalue example
		with: Testvalue example -> $x.
	self assert: dict asSource = '(Valuemap
	with: 1 -> (Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x ''name'')
		dictionary: (Valuemap
			with: 1 -> #symbol
			with: #key -> ''string''))
	with: (Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x ''name'')
		dictionary: (Valuemap
			with: 1 -> #symbol
			with: #key -> ''string'')) -> $x)'
%
method: ValuePrinterTests
testDuration
	self assert: 5 minutes asSource = '(Duration nanoseconds: 300000000000)'
%
method: ValuePrinterTests
testLiteralArrays
	self assert: #(1 2 10 20 100) asSource = '#(1 2 10 20 100)'
%
method: ValuePrinterTests
testLongDictionary
	| dict |
	dict := Valuemap new.
	dict at: 1 put: 75.
	dict at: #b put: $x.
	dict at: 42 put: 'Hello'.
	dict at: 'abc' put: 32.
	dict at: 2 put: #(#String).
	dict at: true put: #hi.
	self assert: dict asSource = '((Valuemap new: 6)
	add: 1 -> 75;
	add: #b -> $x;
	add: 42 -> ''Hello'';
	add: ''abc'' -> 32;
	add: 2 -> #(#String);
	add: true -> #hi;
	yourself)'
%
method: ValuePrinterTests
testNumbers
	self assert: 42 asSource = '42'.
	self assert: 429999999939333 asSource = '429999999939333'.
	self assert: 2.5 asSource = '2.5'.
	"only VW, not Gemstone
	self assert: 2.5e7 asSource = '2.5e7'.
	self assert: 2.5e-7 asSource = '2.5e-7'.
	self assert: 2.5d137 asSource = '2.5d137'.
	self assert: 2.5d-137 asSource = '2.5d-137'.
	self assert: 25s7 asSource = '25.0000000s'.
	self assert: (2 / 5) asSource = '(2 / 5)'.
	"
%
method: ValuePrinterTests
testOptionalConstantSource
	self assert: (Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x 'name')
		dictionary: (Valuemap
			with: 1 -> #symbol
			with: #key -> 'string')) asSource = '(Testvalue
	constant: #constantSymbol
	optional: #optionalSymbol
	array: #(1 #a $x ''name'')
	dictionary: (Valuemap
		with: 1 -> #symbol
		with: #key -> ''string''))'.
	self assert: (Testvalue
		constant: #constantSymbol
		optional: #optionalSymbol
		array: #(1 #a $x 'name')) asSource = '(Testvalue constant: #constantSymbol optional: #optionalSymbol array: #(1 #a $x ''name''))'.
	self assert: (Testvalue constant: #constantSymbol optional: #optionalSymbol) asSource = '(Testvalue constant: #constantSymbol optional: #optionalSymbol)'.
	self assert: (Testvalue constant: #constantSymbol) asSource = '(Testvalue constant: #constantSymbol)'
%
method: ValuePrinterTests
testPoint
	self assert: (1 @ 2) asSource = '1 @ 2'.
	self assert: (1 @ (Date d: 7 m: 7 y: 2007)) asSource = '1 @ (Date d: 7 m: 7 y: 2007)'
%
method: ValuePrinterTests
testTime
	self assert: (Time h: 7 m: 27 s: 13) asSource = '(Time h: 7 m: 27 s: 13)'.
	self assert: (Time h: 7 m: 27 s: 0) asSource = '(Time h: 7 m: 27)'.
	self assert: (Time h: 7 m: 27) asSource = '(Time h: 7 m: 27)'.
	self assert: (Time h: 7 m: 0 s: 0) asSource = '(Time h: 7)'.
	self assert: (Time h: 7 m: 0) asSource = '(Time h: 7)'.
	self assert: (Time h: 7) asSource = '(Time h: 7)'.
	self assert: (Time h: 0) asSource = 'Time zero'.
	self assert: Time zero asSource = 'Time zero'
%
method: ValuePrinterTests
testTimestamp
	self assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27 s: 13) asSource = '(Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27 s: 13)'.
	self assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27 s: 0) asSource = '(Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27)'.
	self assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27) asSource = '(Timestamp d: 15 m: 7 y: 2007 h: 7 m: 27)'.
	self assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 0 s: 0) asSource = '(Timestamp d: 15 m: 7 y: 2007 h: 7)'.
	self assert: (Timestamp d: 15 m: 7 y: 2007 h: 7 m: 0) asSource = '(Timestamp d: 15 m: 7 y: 2007 h: 7)'.
	self assert: (Timestamp d: 15 m: 7 y: 2007 h: 7) asSource = '(Timestamp d: 15 m: 7 y: 2007 h: 7)'.
	self assert: (Timestamp d: 15 m: 7 y: 2007 h: 0) asSource = '(Timestamp d: 15 m: 7 y: 2007)'.
	self assert: (Timestamp d: 15 m: 7 y: 2007) asSource = '(Timestamp d: 15 m: 7 y: 2007)'
%
DoIt
	| package policy |
	package := GsPackageLibrary createPackageNamed: #SessionMethods.
	GsPackageLibrary installPackage: package.
	policy := GsPackagePolicy current.
	policy homeSymbolDict: FileInSymbolDictionary.
	policy externalSymbolList: (GsSession currentSession symbolList asArray copyWithout: FileInSymbolDictionary).
	policy enable.
%
category: '*Values Testing-test instances'
classmethod: Valuemap
example
	"self example"

	| map |
	map := Valuemap new.
	map at: #title put: self class name , ' example with examples of all basic values'.
	map at: #boolean put: true.
	map at: #character put: $A.
	map at: #symbol put: #mySymbol.
	map at: #string put: 'with umlauts and euro: äöüß€'.
	map at: #schluessel put: nil.
	map at: #integer put: 42.
	map at: #number put: 3.14.
	map at: #date put: (Date d: 27 m: 3 y: 2022).
	map at: #time put: (Time h: 12 m: 18).
	map at: #timestamp put: (Timestamp d: 27 m: 3 y: 2022 h: 12 m: 18).
	map at: #duration put: 5 minutes.
	map at: #color put: (ColorValue fromBytesRed: 127 green: 0 blue: 0).
	map at: #knownColor put: ColorValue red.
	map at: #array put: #(#one 'two' 3).
	map at: #bytearray put: #[1 2 3].
	map
		at: #valuemap
		put: (Valuemap
			with: #test -> true
			with: #two -> 2
			with: #none -> nil).
	^map
%
DoIt
	| dict policy |
	dict := SymbolDictionary new.
	dict at: #UNWRITABLE put: dict.
	dict immediateInvariant.
	policy := GsPackagePolicy current.
	policy homeSymbolDict: dict.
	policy externalSymbolList: Array new.
	policy enable.
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'PDFtalk Testing'.
	dict at: #comment put: 'Tests and test recources for PDF'.
	dict at: #developmentPrerequisites put: #(#(#any 'PostScript' '') #(#any 'PDFtalk' '') #(#any 'SUnitToo' '') #(#any 'AT Profiling UI' '')).
	dict at: #notice put: ''.
	dict at: #packageName put: 'PDFtalk Testing'.
	dict at: #padded put: true.
	dict at: #parcelName put: 'PDFtalkTesting'.
	dict at: #prerequisiteDescriptions put: #(#(#name 'PostScript' #componentType #package) #(#name 'PDFtalk' #componentType #bundle) #(#name 'SUnitToo') #(#name 'AT Profiling UI' #componentType #package)).
	dict at: #prerequisiteParcels put: #(#('PostScript' '') #('PDFtalk' '') #('SUnitToo' '') #('AT Profiling UI' '')).
	dict at: #storeVersion put: '2.5.0.7'.
	dict at: #codeComponents put: SymbolDictionary new.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components at: dict name put: dict.
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'PDFtalk test resources'.
	dict at: #comment put: 'Example objects for test purposes'.
	dict at: #isFunctional put: false.
	dict at: #notice put: ''.
	dict at: #packageName put: 'PDFtalk test resources'.
	dict at: #storeVersion put: '2.5.0.5'.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components := (components at:  #'PDFtalk Testing') at: #codeComponents.
	components at: dict name put: dict.
%
DoIt
System myUserProfile insertDictionary: PDFtalk at: 1.
%
# Define class Tests
DoIt
TestCase
	subclass: 'Tests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	Tests category: 'PDFtalk test resources'.
	Tests comment: 'Super class of PDF tests.
Useful for switching between SUnit and SUnitToo.'.
	Tests namespacePath: #(#PDFtalk).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
	| package policy |
	package := GsPackageLibrary createPackageNamed: #SessionMethods.
	GsPackageLibrary installPackage: package.
	policy := GsPackagePolicy current.
	policy homeSymbolDict: FileInSymbolDictionary.
	policy externalSymbolList: (GsSession currentSession symbolList asArray copyWithout: FileInSymbolDictionary).
	policy enable.
%
category: '*PDFtalk test resources-converting'
method: CharacterCollection
withLf
	"<String>
	line ends are replaced by line feeds.
	For testing"

	^self copyReplaceAll: (String with: Character cr) with: (String with: Character lf)
%
category: '*PDFtalk test resources-instance creation'
classmethod: CmykColor
example
	^self name: 'BN Gray01' cyan: 0.09 magenta: 0.05 yellow: 0.05 black: 0 rgb: #[232 234 231]
%
category: '*PDFtalk test resources-named instances'
classmethod: CmykColor
gray55
	"obsolete - was used by the old Handelsblatt charts"

	^self gray: 0.55
%
classmethod: CmykColor
hks42
	"obsolete - was used by the old Handelsblatt charts"

	^self name: 'HKS42' cyan: 1 magenta: 0.55 yellow: 0 black: 0
%
classmethod: CmykColor
hks8
	"obsolete - was used by the old Handelsblatt charts"

	^self name: 'HKS8' cyan: 0 magenta: 0.5 yellow: 1 black: 0
%
category: '*PDFtalk test resources-comparing'
method: CmykColor
isSameColor: anObject 
	^self class == anObject class and: [
	self cyan = anObject cyan and: [
	self magenta = anObject magenta and: [
	self yellow = anObject yellow and: [
	self black = anObject black]]]]
%
DoIt
	| dict policy |
	dict := SymbolDictionary new.
	dict at: #UNWRITABLE put: dict.
	dict immediateInvariant.
	policy := GsPackagePolicy current.
	policy homeSymbolDict: dict.
	policy externalSymbolList: Array new.
	policy enable.
%
DoIt
System myUserProfile insertDictionary: PDFtalk at: 1.
%
category: 'accessing'
method: Tests
stringLf
	^String with: Character lf
%
category: 'evaluating'
method: Tests
evaluate: sourceString
	^(sourceString
		_compileInContext: nil
		symbolList: (SymbolList with: PDFtalk) , GsSession currentSession symbolList
		oldLitVars: nil
		environmentId: 0
		flags: 0) _executeInContext: nil
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: PDFtalk at: 1.
%
category: '*PDFtalk test resources-test instances'
classmethod: ASCII85Decode
exampleEncodedString
	"from http://en.wikipedia.org/wiki/Ascii85
	Should decode into #exampleDecodedString"

	^'9jqo^BlbD-BleB1DJ+*+F(f,q/0JhKF<GL>Cj@.4Gp$d7F!,L7@<6@)/0JDEF<G%<+EV:2F!,O<DJ+*.@<*K0@<6L(Df-\0Ec5e;DffZ(EZee.Bl.9pF"AGXBPCsi+DGm>@3BB/F*&OCAfu2/AKYi(DIb:@FD,*)+C]U=@3BN#EcYf8ATD3s@q?d$AftVqCh[NqF<G:8+EV:.+Cf>-FD5W8ARlolDIal(DId<j@<?3r@:F%a+D58''ATD4$Bl@l3De:,-DJs`8ARoFb/0JMK@qB4^F!,R<AKZ&-DfTqBG%G>uD.RTpAKYo''+CT/5+Cei#DII?(E,9)oF*2M7/c~>'
%
category: '*PDFtalk test resources-test instances'
classmethod: ASCIIHexDecode
exampleEncodedString
	"from http://en.wikipedia.org/wiki/Ascii85
	Should decode into #exampleDecodedString"

	^'4D616E2069732064697374696E677569736865642C206E6F74206F6E6C792062
792068697320726561736F6E2C2062757420627920746869732073696E67756C
61722070617373696F6E2066726F6D206F7468657220616E696D616C732C20
77686963682069732061206C757374206F6620746865206D696E642C20746861
742062792061207065727365766572616E6365206F662064656C6967687420
696E2074686520636F6E74696E75656420616E6420696E646566617469676162
6C652067656E65726174696F6E206F66206B6E6F776C656467652C20657863
65656473207468652073686F727420766568656D656E6365206F6620616E7920
6361726E616C20706C6561737572652E>' withLf
%
category: '*PDFtalk test resources-instance creation'
classmethod: Catalog
newMinimal
	"<Catalog>
	a legal but minimal PDF conforming catalog.
	The starting point for creating new documents"
	"self newMinimal"

	| page pages resources |
	resources := PDF Dictionary
		with: #ProcSet -> #(#PDF).
	page := PDF Page
		with: #Type -> #Page
		with: #Resources -> resources.
	pages := (PDF classAt: #Pages)
		with: #Type -> #Pages
		with: #MediaBox -> #(0 0 792 612)
		with: #Kids -> (Array with: page) asPDF
		with: #Count -> 1.
	page at: #Parent put: pages.
	^(PDF classAt: #Catalog)
		with: #Type -> #Catalog
		with: #Pages -> pages
%
category: '*PDFtalk test resources-test instances'
classmethod: Catalog
example
	^self
		with: #Type -> #Catalog
		with: #Pages -> (PDF classAt: #Pages) new newReference
		with: #PageLabels -> (PDF classAt: #NumberTree) nodeClass new
%
classmethod: Catalog
exampleFull
	^self on: ((Dictionary new)
		at: #AA put: Dictionary new;
		at: #AcroForm put: Dictionary new;
		at: #Collection put: Dictionary new;
		at: #Dests put: Dictionary new asPDF newReference;
		at: #Extensions put: Dictionary new;
		at: #Lang put: 'en';
		at: #Legal put: Dictionary new;
		at: #MarkInfo put: Dictionary new;
		at: #Metadata put: nil;
		at: #Names put: Dictionary new;
		at: #NeedsRendering put: false;
		at: #OCProperties put: Dictionary new;
		at: #OpenAction put: Dictionary new;
		at: #Outlines put: (Dictionary with: #Type -> #Outlines) asPDF newReference;
		at: #OutputIntents put: #();
		at: #PageLabels put: nil;
		at: #PageLayout put: #OneColumn;
		at: #PageMode put: #UseOutlines;
		at: #Pages put: (Dictionary with: #Type -> #Pages) asPDF newReference;
		at: #Perms put: Dictionary new;
		at: #PieceInfo put: Dictionary new;
		at: #Requirements put: #();
		at: #SpiderInfo put: Dictionary new;
		at: #StructTreeRoot put: Dictionary new;
		at: #Threads put: #();
		at: #Type put: #Catalog;
		at: #URI put: Dictionary new;
		at: #Version put: #'1.4';
		at: #ViewerPreferences put: Dictionary new;
		yourself)
%
category: '*PDFtalk test resources-test instances'
classmethod: ClippingPathOperation
example
	^Clip empty
%
category: '*PDFtalk test resources-test instances'
classmethod: CMap
example
	^self
		on: ((Valuemap new)
			at: #Type put: #CMap;
			at: #CMapName put: #'90ms-RKSJ-H';
			at: #CIDSystemInfo
				put: (Valuemap
					with: #Registry -> 'Adobe'
					with: #Ordering -> 'Japan1'
					with: #Supplement -> 2);
			at: #WMode put: 0;
			at: #Length put: 972;
			yourself)
		external: (String fromASCII85: ',p?)`/O<oc@V%,I/heDGATMd4EarZ46VV!.%4*;gDe!p,ASuTbAS#C`A5Zu[Dfp)1ATKmT:i^Ja;e:%n-ppQo8T&6a.1IRL8T&$SF_#&]ATMd4EarZA+Ad)s@oHr\+=KTK6qM91F=@YF,sl0UBl6g[F)Q2A@q@\D6VV!.+=K6(D0%:,92eG781=uo,ueT#Ch5XM-oituF"L9_;bAW4+@0OV@V$ZS@;oXm0d&5#%4*<$ATDj+Df.TY0eb460JO"_,suTiH#dV3BQQ9X6Z6phEbT0"F<E:u3A<$?0JG4(6"FnCAKXosF*(u1F!+%l@kJ3:,suTiH#dV3BQQ9X6#:?[;JBcWFE8R&ATMF''G%G2:%4*;hDIc+QD/Ej%FE7m#01/<!8T&6a+>6Q3Ddu^WF<G10DIdd!F)Q2A@q?clAS5^p%5BU\A8,Oq+C\npBl4AhAS5^p@r5Xn%51(?6rSAPFCf;\DJ!er1E^4B@rri(F`8I4AS5^p%51UjB5)F/Ed8cU6"FnCALSa4AS)B):NBuWEbTE(+=KijE+*W=.3N/4AdpClF`;;9ASl!rF<E=]A7]?^ASu$$A7]?^%51(C@;ntMD.OhC3A>;k/Q,5?8hERVA7]?^01/HBE)pOjF(oQ1+>GQ&0JG4(A7]?^01/HBE)_+%AKW]MA7]?^03(S3:M+3[ATT%T2)$.`AS)B)=B.p\+BpQC0ea_*2)@''F>p*ZhAdpCp9lFQR+>=pKAS)A\1a$7=B5)6nDe*F#E+*6fEa`iuAIUaU0KqTY0Koq.3&*6D5!1hp7RK?K4@(Yb4@DY&%6R''51b_*U7RKX44q2(@A7KOgATMg!@qB[hDJ*Mi%5Au7AS5^pDJsW-AS,skDJ*Mi4>8HQ4>B;h1,CWoASu$rDffN$Ao_<tB4VM]3?VdBB5)6nBk26mDJ*Mi4>JTS4?#Yl1,CWo4?#\m4?#\m2D[&s4?,&P0KqTY0fMNb2D[,u4?,&T0KqTY0gS/j2E<Z)4?,&^3''KGa0g\>n2`*5u4?,&_3''KGa0geAn2`*N(4@VXo0KqTg68q=s3&NEM%6R*H3&!NY7RBR34ubDZ0b$676SpJ\4@V[p69[@f0K''AODId6kA9)*rB4VN`DId6o@;lZC9jr!9@;TQu@s)g4ASuU#Bk)6-01/HBE$/\&Anc-oEb0<1F`Lu''+E27<%:sEf%:sEf%4*;hDIcXVF)Q2A@q?)q,t1U!~>')
%
category: '*PDFtalk test resources-test instances'
classmethod: ColourOperation
example
	^SetStrokingCMYK with: 0.5 with: 0 with: 1 with: 0.2
%
category: '*PDFtalk test resources-test instances'
classmethod: CompatibilityOperation
example
	^BeginCompatibility empty
%
category: '*PDFtalk test resources-test instances'
classmethod: ContentParser
example
	^'<< /Length 568 >>
stream
2 J
BT
/F1 12 Tf
0 Tc
0 Tw
72.5 712 TD
[(Unfiltered streams can be read easily) 65 (, )] TJ
0 -14 TD
[(b) 20 (ut generally tak) 10 (e more space than \311)] TJ
T* (compressed streams.) Tj
0 -28 TD
[(Se) 25 (v) 15 (eral encoding methods are a) 20 (v) 25 (ailable in PDF) 80 (.)] TJ
0 -14 TD
(Some are used for compression and others simply) Tj
T* [(to represent binary data in an ) 55 (ASCII format.)] TJ
T* (Some of the compression filters are \
suitable ) Tj
T* (for both data and images, while others are \
suitable only ) Tj
T* (for continuous-tone images.) Tj
ET
endstream'
%
category: '*PDFtalk test resources-test instances'
classmethod: Contents
example
	^(File readTesterOn: '<< /Length 564 >>
stream' , self stringLf , '2 J
BT
/F1 12 Tf
0 Tc
0 Tw
72.5 712 TD
[(Unfiltered streams can be read easily) 65 (,)] TJ
0 -14 TD
[(b) 20 (ut generally tak) 10 (e more space than \311)] TJ
T* (compressed streams.) Tj
0 -28 TD
[(Se) 25 (v) 15 (eral encoding methods are a) 20 (v) 25 (ailable in PDF) 80 (.)] TJ
0 -14 TD
(Some are used for compression and others simply) Tj
T* [(to represent binary data in an) 55 (ASCII format.) ] TJ
T* (Some of the compression filters are \
suitable) Tj
T* (for both data and images , while others are \
suitable only) Tj
T* (for continuous-tone images.) Tj
ET' , self stringLf , 'endstream') readObject typed: (Array with: (ObjectType onSymbol: #Contents))
%
category: '*PDFtalk test resources-test instances'
classmethod: CrossReferences
example
	^self
		crossReferenceSection: (CrossReferenceSection subsections: (Array
			with: (CrossReferenceSubsection
				firstNumber: 0
				entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
			with: (CrossReferenceSubsection
				firstNumber: 3
				entries: (Array with: (UsedReference id: (ObjectId number: 3) value: 25325)))
			with: (CrossReferenceSubsection
				firstNumber: 23
				entries: (Array
					with: (UsedReference id: (ObjectId number: 23 generation: 2) value: 25518)
					with: (UsedReference id: (ObjectId number: 24) value: 25635)))
			with: (CrossReferenceSubsection
				firstNumber: 30
				entries: (Array with: (UsedReference id: (ObjectId number: 30) value: 25777)))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 22
			with: #Root -> (PDF Dictionary with: #Type -> #Catalog) newReference
			with: #Info -> PDF Dictionary new newReference
			with: #ID -> (Array
				with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject
				with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject) asPDF)
%
category: '*PDFtalk test resources-test instances'
classmethod: CrossReferenceSection
example
	^self subsections: (Array
		with: (CrossReferenceSubsection
			firstNumber: 0
			entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
		with: (CrossReferenceSubsection
			firstNumber: 3
			entries: (Array with: (UsedReference id: (ObjectId number: 3) value: 25325)))
		with: (CrossReferenceSubsection
			firstNumber: 23
			entries: (Array
				with: (UsedReference id: (ObjectId number: 23 generation: 2) value: 25518)
				with: (UsedReference id: (ObjectId number: 24) value: 25635)))
		with: (CrossReferenceSubsection
			firstNumber: 30
			entries: (Array with: (UsedReference id: (ObjectId number: 30) value: 25777))))
%
classmethod: CrossReferenceSection
exampleString
	"The following shows a cross-reference section with four subsections, containing a total of five entries. The first subsection contains one entry, for object number 0, which is free. The second subsection contains one entry, for object number 3, which is in use. The third subsection contains two entries, for objects number 23 and 24, both of which are in use. Object number 23 has been reused, as can be seen from the fact that it has a generation number of 2. The fourth subsection contains one entry, for object number 30, which is in use."

	^'xref
0 1
0000000000 65535 f 
3 1
0000025325 00000 n 
23 2
0000025518 00002 n 
0000025635 00000 n 
30 1
0000025777 00000 n 
'
%
category: '*PDFtalk test resources-test instances'
classmethod: CrossReferenceSubsection
example
	^self
		firstNumber: 0
		entries: ((OrderedCollection new)
			add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 3);
			add: (UsedReference id: (ObjectId number: 1) value: 17);
			add: (UsedReference id: (ObjectId number: 2) value: 81);
			add: (FreeReference id: (ObjectId number: 3 generation: 7) value: 0);
			add: (UsedReference id: (ObjectId number: 4) value: 331);
			add: (UsedReference id: (ObjectId number: 5) value: 409);
			asArray)
%
classmethod: CrossReferenceSubsection
exampleString
	"The following shows a cross-reference section consisting of a single subsection with six entries: four that are in use (objects number 1, 2, 4, and 5) and two that are free (objects number 0 and 3). Object number 3 has been deleted, and the next object created with that object number is given a generation number of 7."

	^'0 6
0000000003 65535 f 
0000000017 00000 n 
0000000081 00000 n 
0000000000 00007 f 
0000000331 00000 n 
0000000409 00000 n 
'
%
category: '*PDFtalk test resources-test instances'
classmethod: Dash
example
	^self array: #(1 1) offset: 0.5
%
category: '*PDFtalk test resources-test instances'
classmethod: Document
exampleHelloWorld
	"self exampleHelloWorld>"

	| document page |
	document := self new.
	page := PDF Page newInBounds: (0 @ 0 corner: 70 @ 20) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer fillColor: CmykColor black.
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 10.
			renderer add: (NextLineRelative operands: #(10 5)).
			renderer showString: 'Hello World']].
	document root addPage: page.
	^document
%
classmethod: Document
exampleNestedPages
	"self exampleNestedPages"

	| pdf catalog pages |
	pdf := self new.
	catalog := pdf root.
	catalog addPageTree: (PDF Page newNumbered: 1).
	pages := (PDF classAt: #Pages) empty.
	pages addPageTree: (PDF Page newNumbered: 2).
	pages addPageTree: (PDF Page newNumbered: 3).
	catalog Pages addPageTree: pages.
	pages addPageTree: (PDF Page newNumbered: 4).
	catalog Pages addPageTree: (PDF Page newNumbered: 5).
	^pdf
%
classmethod: Document
exampleWithTypeMismatch
	"This example is from a bug report from Bob Nemec from the 1. August 2018.
	An TypeMismatched object with references is not traced when writing to a new document"
	"self exampleWithTypeMismatch"

	| document page font |
	document := self new.
	page := PDF Page newInBounds: (0 @ 0 corner: 612 @ 792) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
		renderer fillColor: CmykColor black.
		renderer textObjectDo: [
			renderer setFont: #FreeSansBold size: 10.
			renderer add: (NextLineRelative operands: #(10 5)).
			renderer showString: 'Hello World']].
	"create the bug: inline the font descriptor directly instead of having a reference as specified"
	font := (page Resources at: #Font) objectAt: #F1. 
	[font at: #FontDescriptor put: (font objectAt: #FontDescriptor)] on: TypeError do: [:ex | ex resume].
	document root addPage: page.
	^document
%
category: '*PDFtalk test resources-test instances'
classmethod: DocumentInformation
example
	^(File readTesterOn: '<<
	/Title (PostScript Language Reference, Third Edition)
	/Author (Adobe Systems Incorporated)
	/Creator (Adobe FrameMaker 5.5.3 for Power Macintosh®)
	/Producer (Acrobat Distiller 3.01 for Power Macintosh)
	/CreationDate (D:19970915110347-08''00'')
	/ModDate (D:19990209153925-08''00'')
>>') readObject
%
category: '*PDFtalk test resources-test instances'
classmethod: Encryption
example
	^(File readTesterOn: '<<
	/Filter 	/MySecurityHandlerName
	/V 4 								% Version 4: allow crypt filters
	/CF 								% List of crypt filters
		<< 	/MyFilter0
			<< 	/Type /CryptFilter
				/CFM /V2 	>> 			% Uses the standard algorithm
		>>
	/StrF /MyFilter0 						% Strings are decrypted using /MyFilter0
	/StmF /MyFilter0 					% Streams are decrypted using /MyFilter0
	 									% Private data for /MySecurityHandlerName
	/MyUnsecureKey (12345678)
	/EncryptMetadata false
>>') readObject
%
category: '*PDFtalk test resources-accessing'
classmethod: Entity
stringLf
	^String with: Character lf
%
category: '*PDFtalk test resources-test instances'
classmethod: Entity
example
	"<PDFEntity>"

	^self subclassResponsibility
%
category: '*PDFtalk test resources-test instances'
classmethod: ExponentialInterpolationFunction
example

	| function |
	function := (PDF classAt: #ExponentialInterpolationFunction) empty.
	function at: #Domain put: #(0 1.0).
	function at: #N put: 1.
	function at: #C0 put: (CmykColor cyan: 0 magenta: 0.36 yellow: 0.6 black: 0) asPDFArray.
	function at: #C1 put: (CmykColor cyan: 0.6 magenta: 0 yellow: 0.6 black: 0) asPDFArray.
	^function
%
category: '*PDFtalk test resources-test instances'
classmethod: File
example
	"from Bruce Badger's PDF example 2"

	^self readFrom: self exampleByteArray readStream
%
classmethod: File
exampleByteArray
	"from Bruce Badger's PDF example 2"

	^#[37 80 68 70 45 49 46 50 10 37 226 227 207 211 10 49 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 47 80 97 103 101 115 32 50 32 48 32 82 10 62 62 10 101 110 100 111 98 106 10 50 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 80 97 103 101 115 10 47 77 101 100 105 97 66 111 120 32 91 48 32 48 32 55 57 50 32 54 49 50 93 10 47 75 105 100 115 32 91 32 51 32 48 32 82 32 93 10 47 67 111 117 110 116 32 49 10 62 62 10 101 110 100 111 98 106 10 51 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 80 97 103 101 10 47 80 97 114 101 110 116 32 50 32 48 32 82 10 47 82 101 115 111 117 114 99 101 115 32 52 32 48 32 82 10 47 67 111 110 116 101 110 116 115 32 91 53 32 48 32 82 32 93 10 62 62 10 101 110 100 111 98 106 10 53 32 48 32 111 98 106 10 37 67 111 110 116 101 110 116 115 10 60 60 10 47 76 101 110 103 116 104 32 56 50 10 62 62 10 115 116 114 101 97 109 10 66 84 10 49 32 48 32 48 32 49 32 51 48 32 53 53 48 32 84 109 10 47 70 49 32 56 32 84 102 10 49 48 32 84 76 10 48 46 48 32 103 10 40 72 101 108 108 111 44 32 87 111 114 108 100 33 32 92 40 70 114 111 109 32 80 68 70 84 101 115 116 101 114 92 41 41 84 106 10 69 84 10 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 52 32 48 32 111 98 106 10 37 82 101 115 111 117 114 99 101 115 10 60 60 47 80 114 111 99 83 101 116 32 91 47 80 68 70 32 47 84 101 120 116 93 10 47 70 111 110 116 10 60 60 10 47 70 49 32 54 32 48 32 82 10 62 62 10 47 88 79 98 106 101 99 116 10 60 60 10 62 62 10 62 62 10 101 110 100 111 98 106 10 54 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 70 111 110 116 10 47 83 117 98 116 121 112 101 32 47 84 121 112 101 49 10 47 66 97 115 101 70 111 110 116 32 47 67 111 117 114 105 101 114 10 62 62 10 101 110 100 111 98 106 10 120 114 101 102 10 48 32 55 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 49 53 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 54 52 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 52 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 55 50 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 50 51 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 54 50 32 48 48 48 48 48 32 110 32 10 116 114 97 105 108 101 114 10 60 60 10 47 83 105 122 101 32 55 10 47 82 111 111 116 32 49 32 48 32 82 10 62 62 10 115 116 97 114 116 120 114 101 102 10 53 51 48 10 37 37 69 79 70 10]
%
classmethod: File
exampleByteArray2
	"from Bruce Badger's PDF example 10"

	^#[37 80 68 70 45 49 46 50 10 37 226 227 207 211 10 49 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 47 80 97 103 101 115 32 50 32 48 32 82 10 62 62 10 101 110 100 111 98 106 10 50 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 80 97 103 101 115 10 47 77 101 100 105 97 66 111 120 32 91 48 32 48 32 55 57 50 32 54 49 50 93 10 47 75 105 100 115 32 91 32 51 32 48 32 82 32 93 10 47 67 111 117 110 116 32 49 10 62 62 10 101 110 100 111 98 106 10 51 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 80 97 103 101 10 47 80 97 114 101 110 116 32 50 32 48 32 82 10 47 82 101 115 111 117 114 99 101 115 32 52 32 48 32 82 10 47 67 111 110 116 101 110 116 115 32 91 53 32 48 32 82 32 93 10 62 62 10 101 110 100 111 98 106 10 53 32 48 32 111 98 106 10 37 67 111 110 116 101 110 116 115 10 60 60 10 47 76 101 110 103 116 104 32 51 48 10 62 62 10 115 116 114 101 97 109 10 113 10 49 48 49 32 48 32 48 32 53 49 32 48 32 48 32 32 99 109 47 73 77 49 32 68 111 10 81 10 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 52 32 48 32 111 98 106 10 37 82 101 115 111 117 114 99 101 115 10 60 60 47 80 114 111 99 83 101 116 32 91 47 80 68 70 32 47 84 101 120 116 93 10 47 70 111 110 116 10 60 60 10 62 62 10 47 88 79 98 106 101 99 116 10 60 60 10 47 73 77 49 32 54 32 48 32 82 10 62 62 10 62 62 10 101 110 100 111 98 106 10 54 32 48 32 111 98 106 10 60 60 10 47 84 121 112 101 32 47 88 79 98 106 101 99 116 10 47 83 117 98 116 121 112 101 32 47 73 109 97 103 101 10 47 87 105 100 116 104 32 49 48 49 10 47 72 101 105 103 104 116 32 53 49 10 47 66 105 116 115 80 101 114 67 111 109 112 111 110 101 110 116 32 49 10 47 67 111 108 111 114 83 112 97 99 101 32 47 68 101 118 105 99 101 71 114 97 121 10 47 76 101 110 103 116 104 32 10 55 32 48 32 82 62 62 10 115 116 114 101 97 109 10 0 0 0 0 0 0 0 0 0 0 0 0 0 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 0 0 0 0 0 0 0 0 0 0 0 0 0 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 0 0 0 0 0 0 0 0 0 0 0 0 0 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 0 0 0 0 0 0 0 0 0 0 0 0 0 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 0 0 0 0 0 0 0 0 0 0 0 0 0 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 127 223 247 253 255 127 223 247 253 255 127 223 240 0 0 0 0 0 0 0 0 0 0 0 0 0 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 55 32 48 32 111 98 106 10 54 54 51 10 101 110 100 111 98 106 10 120 114 101 102 10 48 32 56 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 49 53 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 54 52 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 52 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 50 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 50 51 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 49 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 50 50 52 32 48 48 48 48 48 32 110 32 10 116 114 97 105 108 101 114 10 60 60 10 47 83 105 122 101 32 56 10 47 82 111 111 116 32 49 32 48 32 82 10 62 62 10 115 116 97 114 116 120 114 101 102 10 49 50 52 51 10 37 37 69 79 70 10]
%
classmethod: File
exampleHelloWorld
	"self exampleHelloWorld"

	^self readFrom: (Document exampleHelloWorld bytesForFile: 'HelloWorld.pdf') readStream
%
classmethod: File
exampleMinimalByteArray
	"from PDF 32000_2008.pdf p. 699"

	^#[37 80 68 70 45 49 46 52 10 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 9 9 47 79 117 116 108 105 110 101 115 32 50 32 48 32 82 10 9 9 47 80 97 103 101 115 32 51 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 47 79 117 116 108 105 110 101 115 10 9 9 47 67 111 117 110 116 32 48 10 9 62 62 10 101 110 100 111 98 106 10 10 51 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 115 10 9 9 47 75 105 100 115 32 91 32 52 32 48 32 82 32 93 10 9 9 47 67 111 117 110 116 32 49 10 9 62 62 10 101 110 100 111 98 106 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 62 62 10 101 110 100 111 98 106 10 10 53 32 48 32 111 98 106 10 9 60 60 32 47 76 101 110 103 116 104 32 50 53 32 62 62 10 115 116 114 101 97 109 10 40 80 97 103 101 45 109 97 114 107 105 110 103 32 111 112 101 114 97 116 111 114 115 41 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 54 32 48 32 111 98 106 10 9 91 32 47 80 68 70 32 93 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 55 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 56 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 51 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 57 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 50 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 48 53 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 55 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 52 51 49 10 37 37 69 79 70 10]
%
classmethod: File
exampleMinimalByteArrayWithFreeReference
	"The object number '2 0' points to a free reference.
	Although, the object is in the file, it cannot be referenced and is, therfore, a missing object"

	^ByteArray fromASCII85String: 
	',u@!!/MSk7$8EYW+E(_($4/gW#qo8''E+L.F6Xb(FCi<qn#mi7\F`_G6DIml31*A7n;@3^:02Q(iATJ
	tM+>=p9$4/m[$>"*cDdmGg$8N_X+E(_($4/gW#qo8''E+L[uF`_G6DImkr#mi7PDfor>+>=-/5!B<bDI
	dZpC''k;(+>=pV@VQ5V4?Np''<-`Fo+>6Q"B4Z,k#mi7XBk29->9GaF0Ha79>m^lE010Z#DKI!U$4/m[
	$>"*cDdmGg$8`kZ+E(_($4/gW#qo8''E+L.F:gn!J$4."l:gnBUDKI!W+>=p9$4."l9k@jL@7"mW+Bos
	B+>=or0esk13AM^_$4."l6Z6jaASuU2+>k8q+ArOQ#qo1fF)Q2A@qB^(4?O`>:i^Ja;e:%n2BX[r;BS.
	e$4/m[$>"*cDdmGg$8iq[+E(_($4/gW+>6E"DJ+'')+>Pes5!B<pFE1r$D$h[f@:s.''D..I#Bl7Q+Df
	B9.@<?F.F"%H-DIdg1Eb/Zr$>"*cDdmGg$8s"\+E(_($40oZ02P&++C,=cDIdZpC''k;mEb/hi0H`:]0
	JG170JG170JFV-2)R0I+D)`''0JG170JG170KC700JG17+Dr;/0JG170JG170JFV-2)R0I+D)`''0JG1
	70JG181GL"+0JG17+Dr;/0JG170JG183B&''70JG17+Dr;/0JG170JG1:1-$I20JG17+Dr;/0JG170JG
	1;0Jst,0JG17+Dr;/$?U;sBl%@$$4/gW#qo4kH=\3X$4."l;K$Jq+>Fum+ArOQ5!B<pFCB33G]IA-$8a
	On$7-ue:IYZ~>'
%
classmethod: File
exampleObjectStreamByteArray
	"adapted from PDF 32000_2008.pdf p. 48"

	^#[37 80 68 70 45 49 46 53 10 37 97 100 111 112 116 101 100 32 102 114 111 109 32 80 68 70 32 51 50 48 48 48 95 50 48 48 56 46 112 100 102 32 112 112 46 32 52 56 46 10 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 9 9 47 79 117 116 108 105 110 101 115 32 50 32 48 32 82 10 9 9 47 80 97 103 101 115 32 51 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 47 79 117 116 108 105 110 101 115 10 9 9 47 67 111 117 110 116 32 48 10 9 62 62 10 101 110 100 111 98 106 10 10 51 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 115 10 9 9 47 75 105 100 115 32 91 32 52 32 48 32 82 32 93 10 9 9 47 67 111 117 110 116 32 49 10 9 62 62 10 101 110 100 111 98 106 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 62 62 10 101 110 100 111 98 106 10 10 53 32 48 32 111 98 106 10 9 60 60 32 47 76 101 110 103 116 104 32 50 53 32 62 62 10 115 116 114 101 97 109 10 40 80 97 103 101 45 109 97 114 107 105 110 103 32 111 112 101 114 97 116 111 114 115 41 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 54 32 48 32 111 98 106 10 9 91 32 47 80 68 70 32 93 10 101 110 100 111 98 106 10 10 49 48 32 48 32 111 98 106 9 9 9 9 37 32 84 104 101 32 111 98 106 101 99 116 32 115 116 114 101 97 109 10 9 60 60 9 47 84 121 112 101 32 47 79 98 106 83 116 109 10 9 9 47 76 101 110 103 116 104 32 49 57 49 10 9 9 47 78 32 51 32 9 9 9 37 32 84 104 101 32 110 117 109 98 101 114 32 111 102 32 111 98 106 101 99 116 115 32 105 110 32 116 104 101 32 115 116 114 101 97 109 10 9 9 47 70 105 114 115 116 32 49 53 9 9 37 32 84 104 101 32 98 121 116 101 32 111 102 102 115 101 116 32 105 110 32 116 104 101 32 100 101 99 111 100 101 100 32 115 116 114 101 97 109 32 111 102 32 116 104 101 32 102 105 114 115 116 32 111 98 106 101 99 116 10 37 32 84 104 101 32 111 98 106 101 99 116 32 110 117 109 98 101 114 115 32 97 110 100 32 111 102 102 115 101 116 115 32 111 102 32 116 104 101 32 111 98 106 101 99 116 115 44 32 114 101 108 97 116 105 118 101 32 116 111 32 116 104 101 32 102 105 114 115 116 32 97 114 101 32 115 104 111 119 110 32 111 110 32 116 104 101 32 102 105 114 115 116 32 108 105 110 101 32 111 102 10 37 32 116 104 101 32 115 116 114 101 97 109 32 40 105 46 101 46 44 32 55 32 48 32 56 32 54 51 32 57 32 49 50 49 41 46 10 9 62 62 10 115 116 114 101 97 109 10 55 32 48 32 56 32 54 51 32 57 32 49 50 51 10 60 60 9 47 84 121 112 101 32 47 70 111 110 116 10 9 47 83 117 98 116 121 112 101 32 47 84 114 117 101 84 121 112 101 10 9 47 70 111 110 116 68 101 115 99 114 105 112 116 111 114 32 49 50 32 48 32 82 10 62 62 10 10 60 60 9 47 84 121 112 101 32 47 70 111 110 116 68 101 115 99 114 105 112 116 111 114 10 9 47 65 115 99 101 110 116 32 56 57 49 10 9 47 70 111 110 116 70 105 108 101 50 32 50 50 32 48 32 82 10 62 62 10 60 60 9 47 84 121 112 101 32 47 70 111 110 116 10 9 47 83 117 98 116 121 112 101 32 47 84 121 112 101 48 10 9 47 84 111 85 110 105 99 111 100 101 32 49 48 32 48 32 82 10 62 62 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 57 57 32 48 32 111 98 106 9 9 9 9 9 37 32 84 104 101 32 99 114 111 115 115 45 114 101 102 101 114 101 110 99 101 32 115 116 114 101 97 109 10 9 60 60 9 47 84 121 112 101 32 47 88 82 101 102 10 9 9 47 73 110 100 101 120 32 91 48 32 49 49 93 9 9 9 37 32 84 104 105 115 32 115 101 99 116 105 111 110 32 104 97 115 32 111 110 101 32 115 117 98 115 101 99 116 105 111 110 32 119 105 116 104 32 51 50 32 111 98 106 101 99 116 115 10 9 9 47 87 32 91 49 32 50 32 50 93 9 9 9 37 32 69 97 99 104 32 101 110 116 114 121 32 104 97 115 32 51 32 102 105 101 108 100 115 58 32 49 44 32 50 32 97 110 100 32 50 32 98 121 116 101 115 32 105 110 32 119 105 100 116 104 44 10 9 9 9 9 9 9 37 32 114 101 115 112 101 99 116 105 118 101 108 121 10 9 9 47 70 105 108 116 101 114 32 47 65 83 67 73 73 72 101 120 68 101 99 111 100 101 9 9 37 32 70 111 114 32 114 101 97 100 97 98 105 108 105 116 121 32 105 110 32 116 104 105 115 32 101 120 97 109 112 108 101 10 9 9 47 83 105 122 101 32 49 49 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 76 101 110 103 116 104 32 49 53 51 10 9 62 62 10 115 116 114 101 97 109 10 9 48 48 32 48 48 48 48 32 70 70 70 70 10 9 48 49 32 48 48 51 50 32 48 48 48 48 10 9 48 49 32 48 48 55 65 32 48 48 48 48 10 9 48 49 32 48 48 65 67 32 48 48 48 48 10 9 48 49 32 48 48 69 69 32 48 48 48 48 10 9 48 49 32 48 49 55 50 32 48 48 48 48 10 9 48 49 32 48 49 66 69 32 48 48 48 48 10 9 48 50 32 48 48 48 65 32 48 48 48 48 10 9 48 50 32 48 48 48 65 32 48 48 48 49 10 9 48 50 32 48 48 48 65 32 48 48 48 50 10 9 48 49 32 48 49 68 56 32 48 48 48 48 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 115 116 97 114 116 120 114 101 102 10 49 48 49 55 10 37 37 69 79 70]
%
classmethod: File
exampleUpdate1ByteArray
	"from PDF 32000_2008.pdf p. 711"

	^#[37 80 68 70 45 49 46 52 10 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 9 9 47 79 117 116 108 105 110 101 115 32 50 32 48 32 82 10 9 9 47 80 97 103 101 115 32 51 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 47 79 117 116 108 105 110 101 115 10 9 9 47 67 111 117 110 116 32 48 10 9 62 62 10 101 110 100 111 98 106 10 10 51 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 115 10 9 9 47 75 105 100 115 32 91 32 52 32 48 32 82 32 93 10 9 9 47 67 111 117 110 116 32 49 10 9 62 62 10 101 110 100 111 98 106 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 62 62 10 101 110 100 111 98 106 10 10 53 32 48 32 111 98 106 10 9 60 60 32 47 76 101 110 103 116 104 32 50 53 32 62 62 10 115 116 114 101 97 109 10 40 80 97 103 101 45 109 97 114 107 105 110 103 32 111 112 101 114 97 116 111 114 115 41 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 54 32 48 32 111 98 106 10 9 91 32 47 80 68 70 32 93 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 55 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 56 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 51 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 57 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 50 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 48 53 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 55 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 52 51 49 10 37 37 69 79 70 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 9 47 65 110 110 111 116 115 32 55 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 55 32 48 32 111 98 106 10 9 91 9 56 32 48 32 82 10 9 9 57 32 48 32 82 10 9 9 49 48 32 48 32 82 10 9 9 49 49 32 48 32 82 10 9 93 10 101 110 100 111 98 106 10 10 56 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 52 52 32 54 49 54 32 49 54 50 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 49 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 57 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 50 52 32 54 54 56 32 52 53 55 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 50 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 48 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 51 57 32 51 57 51 32 51 50 56 32 54 50 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 51 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 51 52 32 51 57 56 32 50 50 53 32 53 55 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 52 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 52 32 49 10 48 48 48 48 48 48 48 54 52 48 32 48 48 48 48 48 32 110 32 10 55 32 53 10 48 48 48 48 48 48 48 55 56 56 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 56 52 50 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 57 54 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 48 56 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 50 48 48 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 52 51 49 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 51 50 48 10 37 37 69 79 70 10]
%
classmethod: File
exampleUpdate2ByteArray
	"from PDF 32000_2008.pdf p. 712"

	^#[37 80 68 70 45 49 46 52 10 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 9 9 47 79 117 116 108 105 110 101 115 32 50 32 48 32 82 10 9 9 47 80 97 103 101 115 32 51 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 47 79 117 116 108 105 110 101 115 10 9 9 47 67 111 117 110 116 32 48 10 9 62 62 10 101 110 100 111 98 106 10 10 51 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 115 10 9 9 47 75 105 100 115 32 91 32 52 32 48 32 82 32 93 10 9 9 47 67 111 117 110 116 32 49 10 9 62 62 10 101 110 100 111 98 106 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 62 62 10 101 110 100 111 98 106 10 10 53 32 48 32 111 98 106 10 9 60 60 32 47 76 101 110 103 116 104 32 50 53 32 62 62 10 115 116 114 101 97 109 10 40 80 97 103 101 45 109 97 114 107 105 110 103 32 111 112 101 114 97 116 111 114 115 41 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 54 32 48 32 111 98 106 10 9 91 32 47 80 68 70 32 93 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 55 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 56 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 51 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 57 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 50 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 48 53 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 55 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 52 51 49 10 37 37 69 79 70 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 9 47 65 110 110 111 116 115 32 55 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 55 32 48 32 111 98 106 10 9 91 9 56 32 48 32 82 10 9 9 57 32 48 32 82 10 9 9 49 48 32 48 32 82 10 9 9 49 49 32 48 32 82 10 9 93 10 101 110 100 111 98 106 10 10 56 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 52 52 32 54 49 54 32 49 54 50 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 49 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 57 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 50 52 32 54 54 56 32 52 53 55 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 50 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 48 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 51 57 32 51 57 51 32 51 50 56 32 54 50 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 51 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 51 52 32 51 57 56 32 50 50 53 32 53 55 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 52 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 52 32 49 10 48 48 48 48 48 48 48 54 52 48 32 48 48 48 48 48 32 110 32 10 55 32 53 10 48 48 48 48 48 48 48 55 56 56 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 56 52 50 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 57 54 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 48 56 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 50 48 48 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 52 51 49 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 51 50 48 10 37 37 69 79 70 10 10 49 48 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 51 57 32 51 57 51 32 51 50 56 32 54 50 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 77 111 100 105 102 105 101 100 32 84 101 120 116 32 35 51 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 49 48 32 49 10 48 48 48 48 48 48 49 53 53 49 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 49 51 50 48 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 54 56 48 10 37 37 69 79 70]
%
classmethod: File
exampleUpdate3ByteArray
	"from PDF 32000_2008.pdf p. 713"

	^#[37 80 68 70 45 49 46 52 10 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 9 9 47 79 117 116 108 105 110 101 115 32 50 32 48 32 82 10 9 9 47 80 97 103 101 115 32 51 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 47 79 117 116 108 105 110 101 115 10 9 9 47 67 111 117 110 116 32 48 10 9 62 62 10 101 110 100 111 98 106 10 10 51 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 115 10 9 9 47 75 105 100 115 32 91 32 52 32 48 32 82 32 93 10 9 9 47 67 111 117 110 116 32 49 10 9 62 62 10 101 110 100 111 98 106 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 62 62 10 101 110 100 111 98 106 10 10 53 32 48 32 111 98 106 10 9 60 60 32 47 76 101 110 103 116 104 32 50 53 32 62 62 10 115 116 114 101 97 109 10 40 80 97 103 101 45 109 97 114 107 105 110 103 32 111 112 101 114 97 116 111 114 115 41 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 54 32 48 32 111 98 106 10 9 91 32 47 80 68 70 32 93 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 55 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 56 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 51 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 57 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 50 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 48 53 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 55 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 52 51 49 10 37 37 69 79 70 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 9 47 65 110 110 111 116 115 32 55 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 55 32 48 32 111 98 106 10 9 91 9 56 32 48 32 82 10 9 9 57 32 48 32 82 10 9 9 49 48 32 48 32 82 10 9 9 49 49 32 48 32 82 10 9 93 10 101 110 100 111 98 106 10 10 56 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 52 52 32 54 49 54 32 49 54 50 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 49 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 57 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 50 52 32 54 54 56 32 52 53 55 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 50 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 48 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 51 57 32 51 57 51 32 51 50 56 32 54 50 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 51 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 51 52 32 51 57 56 32 50 50 53 32 53 55 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 52 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 52 32 49 10 48 48 48 48 48 48 48 54 52 48 32 48 48 48 48 48 32 110 32 10 55 32 53 10 48 48 48 48 48 48 48 55 56 56 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 56 52 50 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 57 54 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 48 56 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 50 48 48 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 52 51 49 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 51 50 48 10 37 37 69 79 70 10 10 49 48 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 51 57 32 51 57 51 32 51 50 56 32 54 50 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 77 111 100 105 102 105 101 100 32 84 101 120 116 32 35 51 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 49 48 32 49 10 48 48 48 48 48 48 49 53 53 49 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 49 51 50 48 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 54 56 48 10 37 37 69 79 70 10 10 55 32 48 32 111 98 106 10 9 91 9 49 48 32 48 32 82 10 9 9 49 49 32 48 32 82 10 9 93 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 56 32 54 53 53 51 53 32 102 32 10 55 32 51 10 48 48 48 48 48 48 49 56 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 49 32 102 32 10 48 48 48 48 48 48 48 48 48 48 32 48 48 48 48 49 32 102 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 49 54 56 48 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 56 52 55 10 37 37 69 79 70 10]
%
classmethod: File
exampleUpdate4ByteArray
	"from PDF 32000_2008.pdf p. 714"

	^#[37 80 68 70 45 49 46 52 10 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 9 9 47 79 117 116 108 105 110 101 115 32 50 32 48 32 82 10 9 9 47 80 97 103 101 115 32 51 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 47 79 117 116 108 105 110 101 115 10 9 9 47 67 111 117 110 116 32 48 10 9 62 62 10 101 110 100 111 98 106 10 10 51 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 115 10 9 9 47 75 105 100 115 32 91 32 52 32 48 32 82 32 93 10 9 9 47 67 111 117 110 116 32 49 10 9 62 62 10 101 110 100 111 98 106 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 62 62 10 101 110 100 111 98 106 10 10 53 32 48 32 111 98 106 10 9 60 60 32 47 76 101 110 103 116 104 32 50 53 32 62 62 10 115 116 114 101 97 109 10 40 80 97 103 101 45 109 97 114 107 105 110 103 32 111 112 101 114 97 116 111 114 115 41 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 54 32 48 32 111 98 106 10 9 91 32 47 80 68 70 32 93 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 55 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 56 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 51 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 57 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 50 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 48 53 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 55 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 52 51 49 10 37 37 69 79 70 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 9 47 65 110 110 111 116 115 32 55 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 55 32 48 32 111 98 106 10 9 91 9 56 32 48 32 82 10 9 9 57 32 48 32 82 10 9 9 49 48 32 48 32 82 10 9 9 49 49 32 48 32 82 10 9 93 10 101 110 100 111 98 106 10 10 56 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 52 52 32 54 49 54 32 49 54 50 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 49 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 57 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 50 52 32 54 54 56 32 52 53 55 32 55 51 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 50 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 48 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 51 57 32 51 57 51 32 51 50 56 32 54 50 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 51 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 51 52 32 51 57 56 32 50 50 53 32 53 55 53 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 84 101 120 116 32 35 52 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 52 32 49 10 48 48 48 48 48 48 48 54 52 48 32 48 48 48 48 48 32 110 32 10 55 32 53 10 48 48 48 48 48 48 48 55 56 56 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 56 52 50 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 57 54 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 48 56 48 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 49 50 48 48 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 52 51 49 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 51 50 48 10 37 37 69 79 70 10 10 49 48 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 50 51 57 32 51 57 51 32 51 50 56 32 54 50 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 77 111 100 105 102 105 101 100 32 84 101 120 116 32 35 51 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 49 48 32 49 10 48 48 48 48 48 48 49 53 53 49 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 49 51 50 48 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 54 56 48 10 37 37 69 79 70 10 10 55 32 48 32 111 98 106 10 9 91 9 49 48 32 48 32 82 10 9 9 49 49 32 48 32 82 10 9 93 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 56 32 54 53 53 51 53 32 102 32 10 55 32 51 10 48 48 48 48 48 48 49 56 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 49 32 102 32 10 48 48 48 48 48 48 48 48 48 48 32 48 48 48 48 49 32 102 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 50 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 49 54 56 48 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 49 56 52 55 10 37 37 69 79 70 10 10 55 32 48 32 111 98 106 10 9 91 9 49 48 32 48 32 82 10 9 9 49 49 32 48 32 82 10 9 9 56 32 49 32 82 10 9 9 57 32 49 32 82 10 9 9 49 50 32 48 32 82 10 9 93 10 101 110 100 111 98 106 10 10 56 32 49 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 53 56 32 54 53 55 32 49 55 50 32 55 52 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 78 101 119 32 84 101 120 116 32 35 49 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 57 32 49 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 51 56 57 32 52 53 57 32 53 55 48 32 53 51 55 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 78 101 119 32 84 101 120 116 32 35 50 32 41 10 9 9 47 79 112 101 110 32 102 97 108 115 101 10 9 62 62 10 101 110 100 111 98 106 10 10 49 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 65 110 110 111 116 10 9 9 47 83 117 98 116 121 112 101 32 47 84 101 120 116 10 9 9 47 82 101 99 116 32 91 32 52 52 32 50 53 51 32 52 55 51 32 51 51 55 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 40 32 78 101 119 32 84 101 120 116 32 35 51 92 50 48 51 97 32 108 111 110 103 101 114 32 116 101 120 116 32 97 110 110 111 116 97 116 105 111 110 32 119 104 105 99 104 32 119 101 32 119 105 108 108 32 99 111 110 116 105 110 117 101 32 92 10 111 110 116 111 32 97 32 115 101 99 111 110 100 32 108 105 110 101 32 41 10 9 9 47 79 112 101 110 32 116 114 117 101 10 9 62 62 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 49 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 55 32 51 10 48 48 48 48 48 48 50 48 49 53 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 50 48 55 56 32 48 48 48 48 49 32 110 32 10 48 48 48 48 48 48 50 50 48 48 32 48 48 48 48 49 32 110 32 10 49 50 32 49 10 48 48 48 48 48 48 50 51 50 52 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 49 51 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 9 47 80 114 101 118 32 49 56 52 55 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 50 53 49 57 10 37 37 69 79 70 10]
%
classmethod: File
exampleWithReferenceToReference
	^#[37 80 68 70 45 49 46 52 10 49 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 67 97 116 97 108 111 103 10 9 9 47 79 117 116 108 105 110 101 115 32 50 32 48 32 82 10 9 9 47 80 97 103 101 115 32 51 32 48 32 82 10 9 62 62 10 101 110 100 111 98 106 10 10 50 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 47 79 117 116 108 105 110 101 115 10 9 9 47 67 111 117 110 116 32 48 10 9 62 62 10 101 110 100 111 98 106 10 10 51 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 115 10 9 9 47 75 105 100 115 32 91 32 52 32 48 32 82 32 93 10 9 9 47 67 111 117 110 116 32 49 10 9 62 62 10 101 110 100 111 98 106 10 10 52 32 48 32 111 98 106 10 9 60 60 9 47 84 121 112 101 32 47 80 97 103 101 10 9 9 47 80 97 114 101 110 116 32 51 32 48 32 82 10 9 9 47 77 101 100 105 97 66 111 120 32 91 32 48 32 48 32 54 49 50 32 55 57 50 32 93 10 9 9 47 67 111 110 116 101 110 116 115 32 53 32 48 32 82 10 9 9 47 82 101 115 111 117 114 99 101 115 32 60 60 32 47 80 114 111 99 83 101 116 32 54 32 48 32 82 32 62 62 10 9 62 62 10 101 110 100 111 98 106 10 10 53 32 48 32 111 98 106 10 9 60 60 32 47 76 101 110 103 116 104 32 50 53 32 62 62 10 115 116 114 101 97 109 10 40 80 97 103 101 45 109 97 114 107 105 110 103 32 111 112 101 114 97 116 111 114 115 41 10 101 110 100 115 116 114 101 97 109 10 101 110 100 111 98 106 10 10 54 32 48 32 111 98 106 10 9 91 32 47 80 68 70 32 93 10 101 110 100 111 98 106 10 10 37 32 116 104 97 116 115 32 105 108 108 101 103 97 108 10 55 32 48 32 111 98 106 10 9 49 32 48 32 82 10 101 110 100 111 98 106 10 10 120 114 101 102 10 48 32 56 10 48 48 48 48 48 48 48 48 48 48 32 54 53 53 51 53 32 102 32 10 48 48 48 48 48 48 48 48 48 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 48 56 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 51 49 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 49 57 55 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 51 50 57 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 48 53 32 48 48 48 48 48 32 110 32 10 48 48 48 48 48 48 48 52 52 55 32 48 48 48 48 48 32 110 32 10 10 116 114 97 105 108 101 114 10 9 60 60 9 47 83 105 122 101 32 56 10 9 9 47 82 111 111 116 32 49 32 48 32 82 10 9 62 62 10 115 116 97 114 116 120 114 101 102 10 52 55 48 10 37 37 69 79 70 10]
%
classmethod: File
exampleWithTypeMismatch
	"self exampleWithTypeMismatch"

	^self readFrom: (Document exampleWithTypeMismatch bytesForFile: 'example.pdf') readStream
%
classmethod: File
readEncryptedTesterOn: aString
	| inst |
	inst := self new.
	inst initializeOnlyEncryptedParserFrom: aString asByteArray readStream.
	^inst
%
classmethod: File
readTesterOn: aString
	"sending #asString to aString to convert from Unicode16 to a (Byte)String"

	| inst |
	inst := self new.
	inst initializeOnlyParserFrom: aString asString asByteArray readStream.
	^inst
%
category: '*PDFtalk test resources-initialize-release'
method: File
initializeOnlyEncryptedParserFrom: aBinaryReadStream
	parser := EncryptedFileParser onStream: aBinaryReadStream
%
method: File
initializeOnlyParserFrom: aBinaryReadStream
	parser := FileParser onStream: aBinaryReadStream
%
category: '*PDFtalk test resources-instance creation'
classmethod: Filter
testerWith: aPDFDictionaryOrNil
	^self new
%
category: '*PDFtalk test resources-test instances'
classmethod: Filter
example
	^self new
%
classmethod: Filter
exampleString
	"from http://en.wikipedia.org/wiki/Ascii85
	Should encode into #exampleEncodedString"

	^'Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.'
%
category: '*PDFtalk test resources-test instances'
classmethod: FlateDecode
exampleEncodedString
	"from http://en.wikipedia.org/wiki/Ascii85
	Should decode into #exampleDecodedString"

	^#[120 218 45 143 209 145 196 32 12 67 91 81 1 153 235 228 138 112 64 1 207 17 147 193 176 187 233 126 33 115 191 178 244 36 255 138 65 29 81 189 171 165 161 158 25 55 88 237 168 86 110 236 55 242 60 55 138 87 219 176 143 190 164 190 52 95 254 34 13 151 184 107 53 28 173 158 168 61 179 65 76 79 41 190 225 157 53 228 85 32 40 195 39 244 152 97 226 84 155 45 61 203 131 19 92 108 206 23 155 88 224 242 68 22 77 185 67 237 177 135 106 115 221 96 156 224 56 197 200 67 186 38 217 11 145 104 51 215 215 128 25 252 179 250 46 140 137 27 248 9 100 244 7 224 185 182 142 23 51 79 254 87 136 221 8 210 76 10 174 50 223 27 141 63 95 136 192 98 45] asString
%
classmethod: FlateDecode
exampleEncodedStringNoChecksum
	^#[120 218 45 143 209 145 196 32 12 67 91 81 1 153 235 228 138 112 64 1 207 17 147 193 176 187 233 126 33 115 191 178 244 36 255 138 65 29 81 189 171 165 161 158 25 55 88 237 168 86 110 236 55 242 60 55 138 87 219 176 143 190 164 190 52 95 254 34 13 151 184 107 53 28 173 158 168 61 179 65 76 79 41 190 225 157 53 228 85 32 40 195 39 244 152 97 226 84 155 45 61 203 131 19 92 108 206 23 155 88 224 242 68 22 77 185 67 237 177 135 106 115 221 96 156 224 56 197 200 67 186 38 217 11 145 104 51 215 215 128 25 252 179 250 46 140 137 27 248 9 100 244 7 224 185 182 142 23 51 79 254 87 136 221 8 210 76 10 174 50 223 27 141 63 95] asString
%
classmethod: FlateDecode
exampleEncodedStringNoHeader
	^#[45 143 209 145 196 32 12 67 91 81 1 153 235 228 138 112 64 1 207 17 147 193 176 187 233 126 33 115 191 178 244 36 255 138 65 29 81 189 171 165 161 158 25 55 88 237 168 86 110 236 55 242 60 55 138 87 219 176 143 190 164 190 52 95 254 34 13 151 184 107 53 28 173 158 168 61 179 65 76 79 41 190 225 157 53 228 85 32 40 195 39 244 152 97 226 84 155 45 61 203 131 19 92 108 206 23 155 88 224 242 68 22 77 185 67 237 177 135 106 115 221 96 156 224 56 197 200 67 186 38 217 11 145 104 51 215 215 128 25 252 179 250 46 140 137 27 248 9 100 244 7 224 185 182 142 23 51 79 254 87 136 221 8 210 76 10 174 50 223 27 141 63 95 136 192 98 45] asString
%
classmethod: FlateDecode
exampleEncodedStringWrongChecksum
	^#[120 218 45 143 209 145 196 32 12 67 91 81 1 153 235 228 138 112 64 1 207 17 147 193 176 187 233 126 33 115 191 178 244 36 255 138 65 29 81 189 171 165 161 158 25 55 88 237 168 86 110 236 55 242 60 55 138 87 219 176 143 190 164 190 52 95 254 34 13 151 184 107 53 28 173 158 168 61 179 65 76 79 41 190 225 157 53 228 85 32 40 195 39 244 152 97 226 84 155 45 61 203 131 19 92 108 206 23 155 88 224 242 68 22 77 185 67 237 177 135 106 115 221 96 156 224 56 197 200 67 186 38 217 11 145 104 51 215 215 128 25 252 179 250 46 140 137 27 248 9 100 244 7 224 185 182 142 23 51 79 254 87 136 221 8 210 76 10 174 50 223 27 141 63 95 136 192 98 46] asString
%
classmethod: FlateDecode
exampleEncodedStringWrongHeader
	^#[120 219 45 143 209 145 196 32 12 67 91 81 1 153 235 228 138 112 64 1 207 17 147 193 176 187 233 126 33 115 191 178 244 36 255 138 65 29 81 189 171 165 161 158 25 55 88 237 168 86 110 236 55 242 60 55 138 87 219 176 143 190 164 190 52 95 254 34 13 151 184 107 53 28 173 158 168 61 179 65 76 79 41 190 225 157 53 228 85 32 40 195 39 244 152 97 226 84 155 45 61 203 131 19 92 108 206 23 155 88 224 242 68 22 77 185 67 237 177 135 106 115 221 96 156 224 56 197 200 67 186 38 217 11 145 104 51 215 215 128 25 252 179 250 46 140 137 27 248 9 100 244 7 224 185 182 142 23 51 79 254 87 136 221 8 210 76 10 174 50 223 27 141 63 95 136 192 98 45] asString
%
category: '*PDFtalk test resources-test instances'
classmethod: FreeReference
example
	^self id: (ObjectId number: 7 generation: 15) value: 3
%
category: '*PDFtalk test resources-test instances'
classmethod: GraphicsStateOperation
example
	^SetDash
		with: #(0 1)
		with: 0
%
category: '*PDFtalk test resources-test instances'
classmethod: Header
example
	^self version: Version pdf1_7
%
category: '*PDFtalk test resources-instance creation'
classmethod: ImageXObject
pixelByPixelFrom: anImage
	| inst |
	inst := self empty.
	inst initializePixelByPixelFrom: anImage.
	^inst
%
category: '*PDFtalk test resources-test instances'
classmethod: ImageXObject
depth10Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 2078;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhRS3CMZr4)96#@D;''b>PI=I3KJElcFGiW!''pPjQh,LYe''/5DDC&P81qp;Jq''k=<[KE+T?-#maV
Ua-@P)PCbT#mhq%#u4/,?]mC/Dt2rA:1D9<q^mg]kOtKkcZ.+)PrR>>la>''dn,1N3rBJUg70XPMQ.1D
M%VF@JL''^Iab0,aS+^Jtn3o*#klI.#TPHeG*\47.@1[=:hHYsA+^DL/<*XbdYLG?[$s#B,_*op,W&7-
t5.$?.BMn*(FS''>P#R8c;2JI7`-4s+,thdX>ah9p.&pX*RJW$W-KdO_^/?ggA^>pG"O(/kVocs30Z3K
dSri_4nrk>="\-#tEJKOPfoC5d@?n`b5QV(5hTSL''`K0GIfYn"EmM/!1E8j!)GW8.9IIQY_4)_=7jm]
#6l<dqk(+G#?;nH^?m@flZ=Zmu6*1pK6i9FRC?GW(0''tj[Bsa!Tbi;PKPqJj^QCq5E\=K1j<^pF]-5m
E<@;oK)XC^F1"q]R''ieIfi@jso6HXq(ku*u1''H\G.%A,R!X<m3[mF\"A2]N9JL&i"p&EucqPZAuUi,
_LC$Vb<_121fHTXTW>3-O,:(#M5.0R''Z5=KVN$1E%/F"E58Fu[J2j:^77i4O%dfN%.I8`%%K].P6GKg
a\7>@rdVQS/COEqOp0@Yo<hOl7EEPNA''Z7CGG&q@^jgB,;5_/&j-Yn9gV.8$ULX2E'':S)`qYRZcfnr
j*\7_M(DIgL4)bYR7,/\pbE4;!I,_SKi6-"PTrNUW$OB3ad`7M).hqSN$CaDK32^GR[\,+0=4JL)m[Z+
a8MF5`X2k^4@tfYP0>+H%V2LMq;d[5a!rSi"^h0''G@#c.b6JtmCj8U#2h(ROe/:Nu37\)-cnf.9V<3B
*`6UZn=.0f56CuLp(<&)RMC3:Ko\#j94o''a!IJ:j@GFSFjmY1M]Wf$Q&rU>JJl\A[`mWaH!0oI-ArNo
I`KgO/D;N<tRN9-@l5Vq%*8`OcYrh@#C_oBqtcQ@D<WQWmWPjkP0D[QNH[q>RDJr2V*X%dLk9;=E\9-t
aUemX]^>]]mR3W?N3]U[53qh-^Q]Yo5=mIOtkG3mqjB@H"C`iajeDUb#mSi#V*EJ&pe_hWi''%>#[mq0
mB\UA]Pri1\/M[&D[SaT#98Ea8rSK?m,D;bcM#ms=Du"#''\!gQoU3LP>K>NX-Xri5Gh>`GoaeYi;bBk
pHBF5X/@]E&/.`W4CT$VQR$#Eijh:.2th:5`45rrSjM<LOd-Vqjs[sOk]0f@M4o8<t`j"n;06i.R"J]O
pEtr#loFZ0;3N0.QqMZ=k<(L2XS\`PJIBKoB,FI^%UdL]_;2^TC$m,E<)MKL9W[o?#eF5a$^V+=''tWB
K4+9s_3T/gLjP:dL6<GkWAL8[a]eQl;nISK:8"A#rZ:@__1Stuc-kZQ=k])#jq;o&Nbi\ll_c\5H=E(7
nB>IrhfjbJia&"cAq<sL<qMa''s,^tMR>=.1mbPMDf[43DpuSQA5M[p()gPgD/0mJ@E^l-JJrb,HXgfM
+eABgocN]i7@>+eZcBHU^68@Q!XT*p1Kg[-INcC/KUVGjb#7eL#PXZ*gAj4?uU=^AR#!Z8\G6)VWX''g
;A::PWE%&KE1.OR+QAcBm8Vglo&O$sg./B%,KDia8B?[]S$&.#Tc7)Z>^KInAFhX0$V[ADrS?3ea*g7J
NCW"Z5ubd[Z[`RZg]7-42l%iqoWA1g:=gKT+$aQkLoo^c.E]Hc[#&g;(LE7P$?qK!B!f57T&5lLN-cf!
6h"B%5+L]`W@Bp`h#s#''YRJ&E+^L5?2jnS&g#ZhfAjf\_GOYhYPN#4[Y5XK(*frepjBXXbJ\/3?An@n
usKM2*,HTp8ImOf6B&;dVFIdKaB/G2)p/b`b3%?\!)r<c6[harC"tVZ(]/,g<WnhA9umZh)\+&Q*K5\t
T2Z.^roU*=icr`(#=Wju)rt%uen4d,mhf5;VV:YP"o>m]ZW@\%hag?Nf\UJ"s%+q3*bu0JfD2V1uiS#7
&BP5&B86Cj<n:6@XRdCWt,]!IZ*O[sAVh`o*O"DGn6b%@QI1:#o^mGKR8Je"k4-Nk6u`$\;ka<^u"r)t
(%OK<r4>aFDH[d=b!(._iUQ)"NGJ\^&A9gdpmCVqhb<cI;olSthNkoXKNYWDOTDL<H\&R>$gM;T#j5J;
I7Ar*4<WFnb2bJY6nCd4\D/H),R[;_D,2A1!g;4bj_p>%)''a$"hE(N`mmBKp8!n6(UaZQl,V\r=KX&k
1_BagXSCEot,aXFYUZ:ZA,%&F0qBD<!90GGlFXqO^$HM1\8CU%[lM]EtQLfF]?,I!PV)qeCO0c>[CE[N
ugE:`t4aI@8lAmKor!bco=k+*n.GL`*a(j\$GY(;TC2.r8a9qiQ`lA/@*e`[);Ju=*hT1V)gYsT6+8jY
KfZk9sh@.>MCtdD/)Y3Whi/3,$%$%7/T@q).-ORLt/U?=A4TU`l/RE=KE-BZsW+nggY9ao;hZHnO3Y:''
Q?D;5<ag=Jtt[g_S"tH/*jdp\k`1bi]Ou17;Z=7m5[ad_`oes>TXe[^oK,rgA;VP#)A-Q@Rb.\BP02$V
Fdn`<$ng`8u"71p84]]P>aq13]1WAQnJ?u&''`D`9Laq''i/+OOm`HLGIfRlSNAL~>')
%
classmethod: ImageXObject
depth15Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 14;
			add: #Height -> 14;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 291;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhPS]TsDTZ&Gr>;:HjW:`)]o>efp5I/@#nFXK=UA>e:Wj9=B''9Ahocj2H`"3&#Y*P*=B<3C(.!H\Iu
s78PN[u,WAFtd\Y&R^6E<n!*)DRO^/Ep1`hKJT7"1=]''NDFUZujAcA/(_$6Ap3r3YB,$*iX,B(;_p$n
^eE>OEHB\eX1p8qGAYq+^E!`MNPKZ4QC!X:PbB?U2u1.''Fc?(06dP-$<cMK`Xi7BtTV=3#IPUUFUCWa
@r5HP/hlDY[_6RjYD(*Qp;guF`*J''Uc1P''!WN<)>FW7pd6;knQ>BTObf^(>gi)b''cZ#A^''t<peN4
pILM9on>ij7>\[L:$C*4l5''X759C1&DL%p,Rq-LrJP62ZEc@As_r~>')
%
classmethod: ImageXObject
depth1Mask
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 1;
			add: #ImageMask -> true;
			add: #Decode -> #(1 0);
			add: #Length -> 88;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 77 205 193 13 192 32 8 5 208 223 120 240 232 8 142 226 104 140 208 17 58 74 59 138 35 112 228 96 248 98 140 73 33 239 242 9 144 0 212 15 104 61 40 32 139 253 232 206 107 204 139 39 131 220 3 242 56 132 60 178 188 108 209 162 141 212 186 56 173 132 60 104 87 103 236 243 220 238 251 223 169 9 106 19 56 46]
%
classmethod: ImageXObject
depth1Mono
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 20;
			add: #Height -> 20;
			add: #BitsPerComponent -> 1;
			add: #ColorSpace -> #DeviceGray;
			add: #Length -> 54;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 69 201 161 13 0 32 20 196 80 20 115 49 42 146 113 16 12 82 197 33 8 7 95 145 60 209 164 54 54 36 102 14 47 116 208 70 11 13 212 80 71 21 21 102 138 107 127 23 223 69 50 73]
%
classmethod: ImageXObject
depth24Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 137;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 205 206 49 14 64 64 20 132 225 233 92 67 169 85 42 93 65 169 116 5 165 242 149 218 189 138 82 185 87 81 186 194 51 60 68 98 197 234 200 95 200 230 219 205 40 84 255 93 89 58 43 18 171 170 247 42 50 197 92 161 33 254 228 41 89 85 13 89 214 199 239 127 197 77 3 230 28 206 19 151 36 86 16 235 250 193 123 116 29 12 175 7 34 115 158 223 175 108 30 230 235 250 240 34 79 158 51 40 25 127 138 98 247 148 108 76 211 22 184 79 226 12 190 108 248 186 63 136 255 211 2 149 94 209 35]
%
classmethod: ImageXObject
depth24Masked
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 137;
			add: #Filter -> #FlateDecode;
			add: #Mask -> (ImageXObject
				on: ((Valuemap new: 9)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 16;
					add: #Height -> 16;
					add: #BitsPerComponent -> 1;
					add: #ImageMask -> true;
					add: #Decode -> #(1 0);
					add: #Length -> 29;
					add: #Filter -> #FlateDecode;
					yourself)
				externalBytes: #[120 218 99 96 0 1 230 6 246 3 32 200 220 32 83 96 247 3 4 101 10 192 18 12 0 123 162 8 22]) newReference;
			yourself)
		externalBytes: #[120 218 205 206 49 14 64 64 20 132 225 233 92 67 169 85 42 93 65 169 116 5 165 242 149 218 189 138 82 185 87 81 186 194 51 60 68 98 197 234 200 95 200 230 219 205 40 84 255 93 89 58 43 18 171 170 247 42 50 197 92 161 33 254 228 41 89 85 13 89 214 199 239 127 197 77 3 230 28 206 19 151 36 86 16 235 250 193 123 116 29 12 175 7 34 115 158 223 175 108 30 230 235 250 240 34 79 158 51 40 25 127 138 98 247 148 108 76 211 22 184 79 226 12 190 108 248 186 63 136 255 211 2 149 94 209 35]
%
classmethod: ImageXObject
depth2Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 2;
			add: #Height -> 2;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 17;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 251 255 255 255 127 6 6 6 48 1 0 50 217 5 251]
%
classmethod: ImageXObject
depth2Mapped
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 24;
			add: #Height -> 24;
			add: #BitsPerComponent -> 2;
			add: #ColorSpace -> (Indexed base: #DeviceRGB number: 3 bytes: #[0 0 0 255 255 0 170 170 170 0 128 0]);
			add: #Length -> 47;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 91 181 10 25 172 255 255 255 21 140 68 23 95 0 37 65 96 65 23 152 92 4 38 25 150 134 134 102 65 200 85 96 145 85 93 196 154 137 41 14 0 23 168 99 91]
%
classmethod: ImageXObject
depth2Mapped2
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 2;
			add: #ColorSpace -> (Indexed base: #DeviceRGB number: 3 bytes: #[128 0 0 255 255 255 0 0 191 0 128 0]);
			add: #Length -> 19;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 11 13 197 13 178 2 196 191 194 48 46 53 0 217 161 22 151]
%
classmethod: ImageXObject
depth32FixedAlpha
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 64;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 1148;
			add: #SMask -> (ImageXObject
				on: ((Valuemap new: 7)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 64;
					add: #Height -> 32;
					add: #BitsPerComponent -> 8;
					add: #ColorSpace -> #DeviceGray;
					add: #Length -> 2048;
					yourself)
				externalBytes: (ByteArray fromASCII85String: 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!"sKfDYaLs8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W&LSMpNKzz"-!3Ys8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W
-!s8W-!s8W-!s8W-!s8W-!s8W-!s8@lYzzN;rqXs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s
8W-!s8W-!s8W-!s8W-!s8W+Xz!!!!XrVuots8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W,t2ZNgX!!!"is8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!SH&Wi!!!#Ns8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!f)PdN!!!#ts8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!r;Zft!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!rr<$!!!!#ts8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!r;Zft!!!#Ns8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!f)PdN!!!"is8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!SH&Wi!!!!XrVuots8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W,t2ZNgXzN;rqXs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W+Xzz"-!3Ys8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8
W-!s8@lYzz!!"sKfDYaLs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W&LSMpNK
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz~>')) newReference;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhVQ;lVeI0''F+&VXFl*Q8.fP=9@4qs''cfS1W("''-/]A*L"cHD6K??GjU=Q[Q%Ord6c";%3LLcTC+
=''51P9]064aRf/68m">6QJ@0jr#KJI/)gIoBs95g=ku]c?>6"CSe^&Li:<ZjoO+HG,^P2qRlNuBOk]9
6R3Z@mA+sBL:46VV4$uFf-''*[?!W$5d=or-P''btrRtWW]<$X2dWAa6aX8dWZnVc@sdN"=uC"Jg_KN9
n*PY\rAqg*Y^V+gS6h%''[I0$_9@.$)Dcd?5E%>VYo44?`6a"[jM86Bhfl7&>R8eLCiu<YL-i6P(.F6#
&5%WR6m)<_H=o/OaAr''W''8UHC[g7LZf0O2FaGB@PSfEB!VeQZ''Z\8Ws)sbT*?>/DIW6VRIl2TBR"4
KnN[V_J*#^Gje[6If74ZF<hl(5Y[B>==YknH/Xe+Fldj;b1`Hl02B''tZ6F.QS(,T642MfUqLY*UWLr2
dslG4j]ID+GI]''jcbgu^"Lm/L#I@IpI+1b1T2,au,SVU2D;R.Y,f?S\''%BXV)R9BIuk+\n@3ic;s*]
/oE;^!k]hdbNX-aQZJG_ifkpP''MtJ]OW8-P!9\6"^;RTF.h3s_<codVl(]e*m_4V`q=-!)D>I#^NcIG
*5=_UP.?LEk:VKl?np*FD?Q`&*A7m3F6R/Yq/^2_4&oGRD)o?qjn+BYL08mY2Ct7"UR=TXO7pEbI=@R+
''?A;23EgI!\EH`i^L''5\`10"QJfV#=bVYc:B_J3h@3>sl?ii%$LC4J"k2l$ScJG&0n''A@O,PUH/MI
1Br0kagt&!uWQ0SA:K+;fb7B4`8B1Vcb=h_4&q*''8T.Ma=6WK@sWBU7%QTS5=$Tqh78#PJCjTDl";\j
BufGZY0iBGqLq/''?5k7pM]Nbj"A?k--*J7(S`u''Nkik/k$]%f(PMZS4dIlWfq5uhY$rY0)9!1%K,J;
6-Q7sOpPX>KEtooBU_r($FRhmWbS&4lo!35LW5l3R@UrY_$@1Ht4Mq&$5(/iW&`G0.-Ld?"U)qLGMNN;
_;TU-,M$\lJfDU''%3:G0"^Rt3,Ik5M9N&7bXF7P9NNUcJ0?N6g5ES([@O"8""S>U;[Mm;O/!ABQLoC!
bb5<9ehZVa)PEg>YOjL`eu@t2X-NCZPDLBdV\qL="eY`$2G\&E:D<uUAi0%JOCY<I$=Wj:VdH!0AD8b&
LkK"M2rac"mPm)dDqrds_d0VNeW2*!kj7eZ\^k:`D;s"XHHaZrYjUYiZOGBC4L\omTKHNV#$^O`#Z5''
=02iqTdaUEu)@7>2!<&+%Kmqu=en3F([&IsWB)^3Vdpo''GW!e%Ygq#7nFrmC[Y@m<2.GcV7+u2Dk>.Q
[Algqmo2d<Dh_Aq>55S4p*mTH,,c4QL]M1eC2ll^T5&]XnCg0f:.9$g3D`VqRR''B2.rscT<(YrJ`l4X
IPs*6D0BQ9[QOQj=^HaJ~>')
%
classmethod: ImageXObject
depth3Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 4;
			add: #Height -> 2;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 22;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 251 255 31 8 24 128 240 63 3 3 3 152 197 0 198 0 191 88 11 245]
%
classmethod: ImageXObject
depth3Mapped
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 24;
			add: #Height -> 24;
			add: #BitsPerComponent -> 4;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 7
				bytes: #[0 0 0 136 136 136 204 204 204 119 119 119 255 255 255 0 255 255 255 255 0 0 0 255]);
			add: #Length -> 147;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 77 144 219 13 195 32 12 69 145 161 124 135 13 92 43 158 160 85 6 0 6 32 150 58 65 164 174 208 245 107 30 33 57 95 232 220 43 11 155 232 2 205 4 80 20 102 18 249 0 218 169 1 205 111 240 0 44 246 242 136 223 142 122 1 223 223 234 217 225 75 57 182 230 163 203 239 116 108 205 175 53 232 253 18 163 59 61 230 26 244 126 201 26 164 62 7 87 13 210 240 164 129 29 125 170 65 235 72 209 191 196 232 235 76 230 103 8 198 97 243 117 151 176 128 111 158 89 100 95 140 204 29 247 69 253 109 247 219 73 232 15 231 106 44 227]
%
classmethod: ImageXObject
depth3Mapped2
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 4;
			add: #ColorSpace -> (Indexed base: #DeviceRGB number: 4 bytes: #[0 0 0 128 0 0 255 255 255 0 0 191 0 128 0]);
			add: #Length -> 36;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 83 82 130 2 5 6 16 2 210 112 108 108 132 157 134 97 65 33 236 52 12 187 56 97 167 161 24 98 31 0 61 54 17 3]
%
classmethod: ImageXObject
depth3Mapped3
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 26;
			add: #Height -> 26;
			add: #BitsPerComponent -> 4;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 5
				bytes: #[0 0 0 204 204 204 119 119 119 255 255 255 0 0 255 255 102 51]);
			add: #Length -> 107;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 117 144 201 13 128 48 12 4 87 24 23 64 7 17 21 88 74 3 60 40 32 159 244 223 10 14 57 236 112 204 111 180 242 9 56 40 26 129 54 227 41 163 162 200 122 86 142 87 210 251 201 45 32 157 128 38 115 226 101 74 162 0 38 144 72 93 68 69 23 110 13 20 78 84 133 83 202 156 97 137 210 107 180 122 108 80 38 209 199 208 233 132 191 31 44 187 17 252 15 113 1 181 111 30 150]
%
classmethod: ImageXObject
depth4Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 4;
			add: #Height -> 4;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 36;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 29 138 49 13 0 0 12 131 48 89 147 53 201 154 65 248 208 193 20 170 149 98 33 26 9 6 248 131 239 0 189 142 23 233]
%
classmethod: ImageXObject
depth4Mapped
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 4;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 10
				bytes: #[0 0 0 132 132 132 255 255 189 255 255 132 107 107 82 255 255 255 181 181 132 156 156 107 173 173 123 66 66 66 206 206 148]);
			add: #Length -> 69;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 11 13 13 13 96 8 5 3 86 32 68 162 103 2 1 144 17 217 105 108 217 0 164 39 48 48 48 176 3 233 73 92 171 184 220 145 233 5 12 171 192 244 170 85 56 105 7 81 32 157 150 150 198 24 10 178 141 129 65 52 20 14 0 39 245 41 217]
%
classmethod: ImageXObject
depth4Mapped2
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 4;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 13
				bytes: #[0 204 0 255 255 255 255 199 0 102 51 255 153 51 51 159 32 223 255 0 0 128 255 0 255 128 0 170 170 170 255 255 0 0 171 171 255 87 0 51 51 255]);
			add: #Length -> 99;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 19 20 132 1 201 153 51 39 130 232 233 229 171 86 130 184 12 229 171 148 128 2 19 64 180 166 160 228 110 6 246 69 74 29 19 37 119 111 96 95 164 1 162 119 111 208 232 0 210 119 239 94 206 57 115 6 72 95 54 117 203 1 210 151 141 77 221 210 114 38 10 78 54 14 117 73 203 4 154 3 164 221 64 6 79 13 117 241 68 182 7 2 0 67 234 40 127]
%
classmethod: ImageXObject
depth5Mapped
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 17
				bytes: #[189 0 0 189 189 0 255 255 255 156 156 255 0 0 165 66 0 0 0 0 255 0 255 0 255 0 0 123 123 0 132 132 255 0 132 0 132 0 0 255 132 132 255 255 0 123 0 0 165 255 165 0 0 99]);
			add: #Length -> 92;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 141 207 193 18 128 32 8 4 80 164 68 36 212 248 255 159 141 73 205 142 238 129 153 183 167 5 113 39 217 179 68 116 167 116 169 78 30 226 5 0 232 32 121 160 148 81 56 10 179 248 133 216 237 196 42 66 203 88 107 16 210 215 104 220 125 118 78 211 52 54 118 6 178 111 144 114 8 205 126 123 99 206 182 245 24 62 61 108 4 121]
%
classmethod: ImageXObject
depth6Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 8;
			add: #Height -> 8;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 86;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 29 142 219 21 0 0 8 65 239 146 150 180 164 200 143 78 30 149 20 78 148 48 182 99 197 108 33 71 138 168 18 28 20 152 101 166 106 204 59 200 102 161 178 100 209 116 23 70 134 213 172 177 69 172 111 238 154 88 241 166 130 94 104 168 44 224 255 224 175 242 55 248 70 62 207 187 121 141 159 14 152 118 95 161]
%
classmethod: ImageXObject
depth6Mapped
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 34
				bytes: #[117 116 77 255 255 255 210 210 131 237 236 147 237 237 237 216 216 134 100 99 62 167 167 114 224 224 224 126 125 89 97 96 61 173 172 123 134 133 83 243 242 170 103 102 64 138 137 85 161 160 103 252 252 252 142 141 87 223 222 139 230 230 230 177 176 128 92 91 57 106 105 66 244 244 244 110 109 68 155 154 96 230 229 143 150 150 93 241 240 153 95 94 59 146 145 90 221 221 153 218 218 218 205 204 127]);
			add: #Length -> 87;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 133 207 73 10 128 48 16 68 81 203 1 149 24 53 206 243 116 255 67 218 65 176 178 203 131 94 252 134 38 4 240 234 45 39 101 180 254 23 234 250 40 75 58 117 79 115 160 198 78 1 176 152 136 102 96 155 86 26 129 51 110 169 4 154 46 33 233 42 11 73 186 184 31 58 228 205 193 225 255 220 11 139 222 9 244]
%
classmethod: ImageXObject
depth6Mapped2
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 8;
			add: #Height -> 8;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 44
				bytes: #[208 153 40 255 255 255 248 190 32 173 138 41 243 168 0 249 237 144 169 133 33 187 154 90 112 97 67 241 171 24 175 126 12 153 106 0 213 158 43 140 131 116 217 179 55 254 251 224 177 138 23 175 131 0 246 201 46 230 204 150 185 147 38 196 158 53 255 200 43 208 147 30 220 213 198 246 182 21 215 171 68 218 188 53 248 210 65 249 203 49 250 207 54 112 95 63 243 175 7 122 120 119 181 181 181 247 230 172 120 109 88 172 126 19 244 232 173 223 190 54 120 104 71 174 141 39 252 229 82 226 160 0 154 119 32]);
			add: #Length -> 64;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 21 197 69 18 128 48 0 0 49 22 247 226 238 110 255 127 31 211 92 2 164 103 131 116 108 109 32 215 170 252 2 235 142 194 120 53 241 11 97 36 250 142 226 12 253 83 187 148 175 58 117 153 13 222 55 206 11 63 113 56 3 242]
%
classmethod: ImageXObject
depth7Mapped
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 68
				bytes: (ByteArray fromASCII85String: '!!!#bmEj8/\\c;9nF?POosD<Df!i9Bb0.-Qkl8`GZF.3nj5p<H[as3is4H#?r;F4diM>GlV"ODg^r"[
9^t-`S[JBXQj6$Buho)b+f(8OckNAi!huDB__#=2Cq>%PVgn;s=\+f[OeC0iYp=\$Os8)Q$f@p8mn''f
\8s7,^\bgHIHh4X9-Z,Y&ga3=SHl2T8_RG[$(s8Te4s8VTYe_AlrfA$>Vf"TS`s2;q.a3FY:fUTh"s0T
;eb0%''Vm&dS$f&5QfhrF_~>'));
			add: #Length -> 140;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 133 206 199 22 193 80 20 133 225 141 40 33 72 4 247 42 81 18 209 78 116 209 187 188 255 51 137 147 137 129 197 63 251 214 218 131 237 251 255 194 103 111 11 33 28 215 4 17 105 145 215 237 65 114 11 82 229 49 178 222 169 161 5 146 65 130 237 132 36 64 9 10 101 182 107 134 99 82 86 86 191 194 110 76 139 80 229 211 26 142 83 236 205 125 15 13 216 29 188 52 123 212 52 38 232 97 225 157 174 236 88 169 123 94 102 32 103 151 60 219 136 219 213 91 22 243 220 163 142 47 127 127 247 2 129 32 32 253]
%
classmethod: ImageXObject
depth7Mapped2
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 111
				bytes: (ByteArray fromASCII85String: 'iSibV&eas5p\g&0Erc=<,9up.cY`aao()?c!<K7%X22Wgqr[%R]Y)\@df07Fkih6W!s?$A\)ZN/rCp#
^q>''t:-i;??qeBmEYct_?!VH$V5<hB7Xf_Oc52$APn*f_r#RJr0e@rZ2rdB4P!<N1kT&o(qqtp9j:J]
.7!JlPfp@e4WM2AF>YM7gdg^4Co!<I-?!G_]:WiE(`Pa&u!_!LFSgC"C$!<N"sX5F!ZqS0eAV5<Ps);>
/mrVc]lS"$(DTXM;;q"XX$!<N,%YHb@;a2c6loCK9h!N`B(mdBMB!<N.''>Q&qs]tM*#*Zi]3"JVWbs8
W+W!<N&nqM#"Oa8l>>e''l28!WB4*p%A"8hr"?IC\b''5EWH3DY-.NEcLi;&nF5q2PER:=-"?rV^V@OV
!<N%BH251gk2tgY!<LXM!W;ln~>'));
			add: #Length -> 199;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 99 98 98 82 210 147 245 150 245 246 246 214 139 101 2 3 101 166 24 5 5 243 156 140 216 68 125 38 166 92 85 107 251 60 45 87 41 67 95 91 166 88 19 125 166 60 86 177 100 59 70 11 193 168 76 109 38 166 88 111 117 47 121 3 3 11 197 160 8 169 80 39 109 109 211 96 190 112 150 4 35 118 99 78 203 116 75 159 156 88 143 84 94 160 121 25 76 49 49 49 89 108 10 10 10 62 124 206 96 62 16 72 36 49 233 40 72 75 235 193 248 241 241 76 76 58 76 76 222 32 190 3 144 136 147 3 187 5 194 207 207 231 241 179 17 201 182 18 135 243 85 34 163 221 28 117 253 161 252 72 102 201 124 32 96 114 112 128 240 53 213 248 193 32 36 4 194 231 231 135 241 185 128 252 0 153 52 40 8 148 17 2 0 207 58 45 182]
%
classmethod: ImageXObject
depth8Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 369;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhO1$5nudb#XSi-)$:Gf1<(F:AIQJh5H\72J4oH.#nuB_;iWlVM%qg92HaUZ74&m`QpEcIV3se&.A`E
K;[O3m^aC"*Gem\RFN6J5F4Qalgu_YH]Z!T_FMf&&k??KM``90``@F&p#9A'')B/=Sl^_`VjoYHP>Rl7
qLb"FBMn]4''.gi:M32dC@E72K9>6O"!IdA%.0fZTl[\;,4X>''#\ZltVm!fZB.s\:a0bCRa)2b*KKGL
"G<N$SLr!),3*,>iml`3K,cFQt+?P<jS=89P--!),+[He""EWVDQ7@4>I!J35C:tlEGoToVmn"BW%sjg
ZVA8HJ+4JoVdO.kYAUufo<.VWJb&,Zl<baJId*,@0LeQ;]Y1#:0D.o;4Cb>Z5,<s;%7;;SSD02)HEb7''
s$g><)A,LHrGn6i]ec[E5Wh\/=?3"_?rs6$cNB=r55:`-N6J364n]E5QK^9"0lfoO8~>')
%
classmethod: ImageXObject
depth8Mapped
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 235
				bytes: (ByteArray fromASCII85String: 's7?NmrW''i-!$Vs_s7cXR''GL#o!;b7HqXjjaoE+s^!<)Hgp$_t\rWiN*#o*FTs5F1]ird1V!;Kh"qV
_FtT*kPj#Q=T$f=V+`q>p1Y&F!X(p"TQEnHAm^!<2Nhj$*PBo)S\W!;Ok?cm\tpS-/.N!<,k#oA0ig$3
B$;!8LEOg<C&t=TJ<N!!EN8R;2g%o)Sa[!i:>G*#\hJQiQa.!9RGd!!NZ*rX-uT!oCHnJ7/u_joG8<!;
kaUs0Vjfi",f_!<(IKrq$2]BE8#(!;D]Xcr:#=h#RK;$M`!KrosLXnGrUR!2Oc<]3bPV6iafJ!7oU7$N
L:FY7^].!#c"N1(ObdDZJHR"M6Plk=>UKmf<#`!:\eLi]$r7?3&oC!;HBkq"k''gp]0\J!;TUpau]Xm<
<2sk!)FdBr9XLah@''>]$MD17qFC\M9aBi[!;>XWs4da;J-4(a!7F(3rODq.dKKRC!"''8;q>1/IJ,h,
/!J`67CaBVip]/!i(A7>#qsOO;6NL^p!7bZ]r8[hZ"9@u\!<)j"WG)A,=TGcd!73\*%fd"J$32Xb!;lT
mrV-B^<WK%h!UJSEmG@pBmK!,s"98?-jZ`k''9G?td"O^Zbp$;Y\!!N5]!;uj#rVm$#r<2n*!<;$Ys4.
8Mq#LHh!7\U\q3D$SR/m9\!WMEes6Tgcm/d.S!;c6dkfjV2l2peG!;t^ZcohW`5QK!E$N&udmm@-T9aB
of$:#m;s3q4U495BV!<;fos7ZQX5lg_I!;f:jPYD/Vd/Z9m!;u?es6]m4\,cI,&^W`RrpKi]2$!U;!<5
dus4@DNqZ6]m!<;ipqj%6S]E%BR#Og%Nr(I.foDnj[!80UBk;WM?nc6Zk!;l?fmV2q4!<E)s$2=H,Sp1
70/-*8I"TI*V~>'));
			add: #Length -> 267;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhN/u!WW.pURM_TDUfL&KH1>C]l>;XA''X6<W<qAf$alX.^6RVeI+B+1W\KnG?^I-hT)t%[(_u<l0L]
,?K$?B4SWC9C<S@k6ASa+rMEQ5()S)J>ISo;DgHJB\U9Hn''/`28/M(bQa&!F\^F])%ZjBQmp;_5MGIE
FAqjZ!`OOTPcjKQA#pM]T,OX,P,LJ888?hQe6/ZHK[O5;en$+Bi".7,]:4>oXFAW2s=G]O9_g_rF3Uj#
2!(^a3F<Ah),Qf>IfuZOnh>afVEf-H-UsJJZ0Fbg6U(91N\_B5#\WC3gsqL_N3nDoRb\E9X!p7[1("]1
Jnmg"6tnSA@/MKQ`s~>')
%
classmethod: ImageXObject
depth8Mapped2
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 248
				bytes: (ByteArray fromASCII85String: 'P`)];RAmEiZ`g@8]!oZ2eB(unNG`<jIsdKLQ*d0JYc"/!URns1]XutQ^uXMDL4GnVLS^8rXIto^W1UB
3^:DG-]A)#V>#B_?n,<1]ra8f^G&!P%H_lLKSrSZ''WM?W,ZFRKN]"u"lbfIBVilC?Jjn86@C0dNK?_2
FXRYZEdLOc%YN1lSuXI#''KT9ld]TX(l(ZamBQ_7dM"_6q4r\(9*?eBu&0rV_7nR"''1NLOGt[MPHi2Y
e%3O]!]#a]tD7r]>;,/hVGqM;1SWErGcP5E+G8PA=.LSTRV6WIW_?HLo$]4YGe,%`4rk"]Y;>"\:8[pI
W_B5F/=\ETUM%BT9ln$]>2:u][bHGA6a_"?]\o)Q2^a^H#B''nC8-6''Srnf,UReEt[^Z88s*/LOGA`s
pCS?Q9U54AqR$+P<OKPXZZEpU@ZDtIJ[COT+]@GBHkN9eQn&f-CLk9iCJ9mfJM5l\rVN?Y6R?O\>O0>m
j\@oA\AQbQ''s8Q_:QYBfiDe,AiGb9M1U5=>sO,''j#N2;l%ZCm\mURAB_SZJoiYft/*n*eJOG,''V6T
SS,rPDZ9*OKkRLZ)j_-Jp*o?H(g=YWLT9QXf/G1XLY^?\Al@te^2Cph8WPnG%4^6C1*6>?C#SDRX9"DG
]''4!D53;PWLT3RXeiA<\@H$JPAb!)I<1d''ELVW-T7V?_Mh.aaM4KfiVlcf&[]d-ecF_ZV`nAtYi8;L
pB:=EuU4e&cK7'';LJ>e?XVM^,''P)??3R&I0dZ*g^F`k]C:c+`f=p4%7NMh.gkMQ;qtXdkQYSsHCRTW
Q>T\]Mk$aMb]+@?l.YTR1aNKRKJPKVYK<Y-4b0^:Cnu`Oa+,^Y%5j>Z$DuAYPKMW2?,klKZK&>`ET2P&
k?-EbD"nF.@PrU5XZ''NJ"-hMk6N,XLGLE^q726g!f$C_<U:.DISiYEM.`&S;;ibN.S&~>'));
			add: #Length -> 267;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhN/u!WW/A:;7mZMiKSr,Mo%hnO>P53bipH%)sI3O.ZZf2;`u.L%kXM:RtA32tD''a3#*dEL[32=$ZA
=O7!4S;F'':E**R(POg&gah%cm5TaULN.R),$6dG&Y!\[rY^h;%H=OgIha!H''ZB;UQ?166_r54$;3UX
5fP<5@ps:\-!jEVfsY$/ddOlXFA3/[uFqj@-Ou`c@+#&QK&\>'':ZsH#A<bGCP]nA077T$MOH-YUuuDb
^6?DG4c+K3H,I%5?7E''lel/!h&69i''&-rE5)h9?q8uV#SL9m%P9C4)o)m6>qV1e&@WDtG"GRn/4D-R
nsUP%)gVWLBc).jd(m<e''~>')
%
classmethod: ImageXObject
depth8MappedGray
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 140;
			add: #Height -> 133;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceGray
				number: 254
				bytes: (ByteArray fromASCII85String: '%M]s.0e,.I7SQik>A8&#IYEuER\?[`]sbl&db3RHkOn`Y!=oqd,V(l15Y"RL>\[bgG^kI4NLQZAYd_T
cbgY;)kk=KD!Y>YS*[N?n5rqP4<aB6VCO(GcNguB0Wj0(Kc,S8fip#t3pB(a>&K`>O1cn8q:fgt7F)6/
RLl[jtSZB'',^rP!NguI\iq#:I)&g/&>/i>a`6W$rmAo2m:Jr,SUSuecp]"uJ6h:CZQo(`Ft'',i8B0/
bs];G1/#B5VjEI#=&RT;Jut]>D\:hUglUoD/Xu''H8JF0K20a9NkA''BQ&''BMhI7]TVns*[DU/7f]M)
Yo_Sj~>'));
			add: #Length -> 5902;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhTQ14`Jm4rsr6@/:h;Mb7[Ao"W#Q>/hD`.HDEWh/qtur]/[%Yd9u0I3!P^%VC[cD",l+T!\A4+jMep
oriSTq$RU''i()Ib8lX8oh7JGU;qgB_;:?&`.ri=-u095sU^9=0tMbqs_Qau.''>?/3=T=\Fni/\i_5&
GH0jqi\#L8$A6&DD-7lAU$.f=Vq>q?"\leM/]n?I$)u!m\>Kr9ZPQ!!f?XDQp_fHgoq/$#FJ\f(''n98
'',8qs%Ok''+6U8])?''W/BX-o(`YcJk.$QKacqgEiigFQWLYid1Sh<q^-n*g`s-p&oTSsG7.NfSOZ=l
Lf\B0NIf7?/f>qGh''2Z0[OgOrA8>fUhif1)/h"%3VPWQc`=".<8MFt]C?3lCbI*PochJ3mK*hCm/Ke*
I%7<cUX6!`0;*''SD7#ZMF>Ne&?sYT"JQl]H@-]%L6Ee*p;>?;jsSS\lc,uh=(Vs5lSGF0hNjXiDZF*R
?d\3YKp5heTQ\;N5qM]+MhHaNa+/CN^_QT9]:$R<q;$\3\t?TT3/VJ5K!jHX%WPUh^kTbMqNRu1";7C6
q?+%N_^+:Z3Q#1e90<o:JXn*E[PpIbqCo''?]m\PAF[5U>^02g2L$P''dnRIuN$suYKBF$dgQf^8EaIc
nQ&Q?_9Lkf](qPqLnk+8:h:.,Z)X*rN,,5SMbB6V:AcT8!*`$l''6Xd8E=._<Yjg=0MW]ASo<"Y8n$F;
,uN^ZsGc_;-eBjH<$MP2QI=jUmQ*<tPs&e9-$A)R#]Mj`%A1R`X-@O$8r$h.dEKVDmW\?.gdcBZ-A[@!
K[?b?:#a*!;<$iWVE''6AK)E,e9%p>ZK+$6sI1?$#L@0E@J-,f>=nd[=?Rm;*UTbW4/@^P\<JksO]WHL
4C)SD%BCojP707ihkR?=+D]?gmo_[^V:!Nj'';$Ee+K8;!80*#nu^_Z+M@AQd"Y0R9hG)39&7KXFj?:T
5@$M!S''///gtu3`b3L/Q6C:f?n<o5''tflcOVba1q^<,:W26\E&+-*Kb1XBB<TsA$M]sKf5#s;\[rV[
G"WS&H%)F,5c+C,o]0BXKKZQ"%o"rYBDfr!aV1HIOs-uE*ip*C$RD\U%G,kuF+cfjs0hOsjY4$CEl[_@
([h#C,*eT!42G/NdfU^$krHQQe\tZ&@$VUSdMd0[nHbkkpD4lL=!.Og,*LR8i&ti4,JG*+<A(_eSRgC=
/IU"`][(q)td?`1X+hBHYRG[_-=Bo9rH]lj11\c.LRqV9D.O5CS"oH-Q:Di("O9C"]pY*L-%_<rHE?F)
V*U?baQ+%m,"9CCR,o>`!r#*L\7QU46GkKlgn.T;[\a87`@o-''YHfjSQ&ge@r-+tBO"ipbp!]mH]@UX
#)N2Yl)el8Q<HXSHCN<Or0rL=u#/[UoD@#6a`-B:Bm8''N_4g#*9&0GX0SOr7hK5)+[''/$:\]13B6HV
XFbJH1*\DEWI5.\&)oI"<PmR/<J#>URnB0?+r9*9FLV@L,TL(s1WkarV!WOrYB%nf$#f[-$#77m-5&)[
E#q<D''kiG_GGD\HbuMJ"h>aS;Wt[U0R;M^Q68K,9jVn3d5i&jgN?t`cO%EQFV$+:0aeJn@#"Tb%N=>A
3_PjC9?$fg2X?3\6P#L?0kL''O=Obta$P85j1gbs1^WO=lTA2p]*^`G*nBRHI//?\!J69ro^]I3I;Dp/
fpR1X2">ocY;S"kL`gJ!X%A60ecu]eQ-/DuH&/=WR,WG,f*@.<.9/X+8Nr&hFi0b8k$-7XsrubDdXNjY
))r\,epZf^,J@=r39phb5`XSdQT:epZ]7oi1iuhI^j99KJ"0i]R3e,Y4ql]jY`Y\q0d2QpSR0s5GIA*7
g.b^@sD"kcY-r$)Q((-HB20=7&1CXdBBM@3\S/9]+)K>)g?IX!#N)d^X7QRL`&5k":H=IhpbP@e1D-.I
iP5])0bnUr3,R-iG=W,7n_3@u#m:MQTSL>/f!X+<dnhHUg6`''mopI91@/4p3iUc"HkJcO)LjJ''*.#D
tjPT`MGGMq?H5#f!:g*<&/e/;"A2:C9bjM%#L^*"k+DIt5@Y[(Y,WlG(ZE?uQBa,$7,!l!(J<dGms)(*
 %ZPN\IllOP+\PkWrNdPJY1H^9!"+JK@IF7p#&!&sBdK)d&/p`Cp7>a4s]2Bg=LJ.j9*TQ4n-%&!VtX7J
+e4.r6S.^g>r9f924i+G^+8j=nKn2Sr_4#W9Aj@iCg^(86kL0<fuCP[4jG66T_3qnr\,!Sq5b%p39e]H
[sm8h-T]67oVO[>.EY9qEIC#PGn`GMnJc@U\/qNN?,aJ#r],LG2HqM.3_E+of2K/;/V[/m]Vc/buGS,n
''dH;dEuKeWF@qp$>t=)T%F/?ZC4ER^e[ICkV5;nVBol??i4OnQ&a"VX$H''pt7p)k*]"CP_''$HR2?]
Mr=2W!Yg%]@VdRj@6^[TDH*R_rU!Oqi`YCip9$rb;jVbdJ-mo0-=oh9*(aKsqrT6)7+WD;TH6''"/8ug
2l=C?TG^M`d''(eg<p&ug"iJ7DhMM&:t"HBhHbDoB]u^+h<*0G-<"-mJm5a."79Y5PoJBM^b`?N<MK;U
*l]5NB/*2SZu!M`4+H$+5ET_<dko#q$Jk_-%spl2f%>4=h[sfp/VR<rJG5a*_^ulX2F0qUP/(\C6dC!$
mY?G\.,C1IqO>D[''X2&3Pjcf$n,H(ON02@l+iSOfbX5V\n?A<]7_h/]s))V`K6hUMFUu*,5MM&iRRZ>
d09-kVA^J;I9*uM^N*T2fHt=)p^Af&d5LKN?OXm8Z6c4_!E\$!(-?#2MA<''Q*e88[e/Sm*#tHEE-.jj
]1UR5A^jLe$ha/$kpc%@mEehDr`/Ns"M\&g1epYbeT@:r)=K\@Z7Q"`;uct/C[H:ZPG]@D(_5"/6P1p`
V@;s0*RmCR.q^N#2;=V;Luh*:N*jabEm<mE1#ufIWj*m/@%iHb<EK3bBE2KHY5,K*mD?1*G_qNd.h*8G
IG5;@Ia@6"D!VkK2lb[k]BDE,k$#;L;]kBp*i-_-#i%,j_AW"2jXS0f#>"_p:Z-@_[Uiru&q3>/UDq8Z
a)":oWZSG)5frVfePhftT2%#''3l_nFpk_)O9lCI2>iTS5.)C7sNeWK=nV%,Y$I(N;lKfWtVe.4$T5JK
@Z5=$,\j=I92mG4@\9@=Q#>,\bd7''@AajsEnBT2@ZXK$0m#BP<[XPn!P;<o7M6j1i=QHef_Ps5b^e?R
bBF^pq<%KsJ)c],=$Jm,i"Qbj;$7*tTg2q#=''4b,%&.5<=<Me,"1fNS7jJuO8(F?QnRh<`T<5^l#?CU
^P+7@Mn2T''CQ\2gmKi@52''973E*#bP=f=Z$Q/5qViq`%aDu^i&J2A-_Jl''J<4N.8rlbhV[UcUjFuj
<?sR+D)6Qf%.VL"dUgpn&Lk%$#*@ar\V,Cf`m.8nSnFG8->h)L[g9a@ESG?7k,;XMhMSZuu,QgXndF)E
K(CPQ;`mZ^RAi)C&:-lr9Q4/k/X+rL1?S@F<Iqk%I#/p''KJZNN+G4J@6=9rQt/1>\lCt`[tiX2\4TH^
DW?-WVqCONGt?40T4-`^2Z.YOaZ4X$%"-3^0/n]]B_&h0&SV]8-PFQ3$T3"uH]*A"*IZ!@<%''WL&-._
qK(`"K:ufk\G*h,_o^E/''C=!]h+N_$3)fkYeiIAEAB#pXQG(L0(]3$/VL.NbUb&9#Hmh!7(dD1gP7hI
Jg5[%X"KRkN-*X$Bb>3H^MCpqN!g?Jt3kgH+Cbe$[HA!n''>X?.VEs<nobfW"G-Hrj:D\l[DEe.5I0W#
K2]5T#fr7G8=?)%]/JA8rEL#Be4qQ.lX5!2pP*rkbluBrnX2f<il,c:Samt]Y`oXXY),/]k08W''P/\8
k$s>32GIAL:p@J=\k[D)<HX''9rQ]`1-Q4gaQ$R[C!q,FGn<Wt&MF&I\QC''K=?>39tgTBJ_53b!arl,
QgmBp)oefHh=g[t,W6[,EM2])r7U/6''-j[0Hh:k)t6`"GYeeK2H?J3!#L(XDPAW(_+l;U8HWS-o&%r0
s''d11GD,>''r.K4Y&N=D?i9a?C$<dJ=P_X3UWol1=HJEjO?(Ebn121E_KRn+LdR<5rZeqpdAJQB]Es&
7d"_15h"j#Q!i2''7Ugn=E?5qWJ@/io8H`%s_E8O+&N/4ZjmfBtlq@K<E&.b[7J?BX7\_2Z?bB&d/UT)
''=''U-#p_J*ZC0sO^+MoBHVji):Ybg\+&72Lm_//,<sY[oK=qN''O50%,]X)bW6;=Kk9JmF.0`5_OX:
qHsVR,s:Y9!k(ltM,V8\Gjh4+e81E_^l>1$`SV6$(\/-J:c,?%V8;;>ZpBh<L=D2k9Pj>QcT0>YN>GJX
[973UHH3<!@_#W1b%hU#^>''ua6P24lK\R?W&D\P=J0Y/0U&4;"/:9rqRI48k6Sd5%T>CAu;=q;O16T,
hDfB''VYA]=TfLIbdoT(U)-L=j.`A@kM_^O+Vg6W/OAGDhUs54>#5]l*G6jHu/lD[c\?^5n%YefN^jT7
aB;+-pS\leIQ$B8_lVeXmf37]K/8%a;Z$aHK2)/#8`Vh]''d2S_R1BG@dU9l8&t`e>]VK!DD=Q`tZiC$
\R0Wt.._L)>d/^$51Vh^@F90P:b`D0=IEL6,%Crk(5n1nqZ,b/07RM7:B+"GQGY/*_3$SIid"-nOc#qd
]_ea1a7#rhT,pX\/qCfZX$(;/uoeXj+7"!MrH;N6k''<r&5]<MIp+uGu6P^_QoELmFnabg`mUXN[itjC
KpZh>;hLj<*:=V!&[K":.DPnp;T"q#aXSM+RaUnN3nYO6H65GLkNHDCtuk:GcPT<k+MA0[+F%gjZT`OL
6Sa?ic8Wl8N+M9)#sqSF_9lIqZ;qupH2n*jV"3qfYEnCGAi\MlA''''1JVU)M\$<n!d\%%I"Q&S?KGLN
V]*6EPa.:?r%qel>n;2DX[q^''b9(''IKDjjXA59]!GfA4OD)UASsJQS0#MQh1]7Eha^9RK3h!>;T>md
.)u(N@mgYE*GGQW)L2heU2?Yu^hBktHI,$WaVNBh!>''*+nW<1-QHpp76_:T2%N:r/ML6Paq:0c@AJ.=
''+_^=1;W>\uk4+EI9`9EOpgFjQ%hb<M4Di.VK?B2Qg<[>.Jd_;7uB.G;__Zns>3[HYn,a84r7IBU=lp
dcl-"YP\!5Ia*f#>ZkNF<JN''P\N+)#Y$1_B7pG2pTscL2MV!YqmR="8>jP^0&gOJ.R1]H1m<%(:.#!H
6\K<k*SRaIer2eB3r3a2)4k>(,j62UnU%2`"/8df"X;6nYUP?t^''l#/q\7Ha57kSFQ<Le@YO8p0>X;''
Ps0]!RJ`%''TB9C_2]loRPP,)o>''Ol#oYC8o^14"CX[?m@F+0Wp35G,D8A&tn;q@@8M!g.;Eg8u1SG\
5-T&W;FL"YC,=CZ_Xhs.(fbu''U90@S*3Ru''9]uLRMocSmBNi#!]U``:Ofj"KOEnl,g?\*$J1?*\_"H
c)j]<SX)''jfYBFF0T_#uoRMc$D9@HTgldhF>p6srJ833+DMU\8JG[4FRZb9j!$s-`:S6R.q7K/enV@M
PM.CplXi5%k_T4A+#P\dJ%gQn/7k#F9]W_oM1As6jMQAqUP7NYhdggPPo95#c96uLo''K-!"][i$aj3M
>$dF/$RaaUJG`OX_Ot+I;)C[21C.W(36g1cl/_ps#A3.aLs4Un*RHf^J*GVEn;m\QK`b#TNEZFAFqYp8
R<Rc1@KoKVnHQSDDHJoLr2?A24i,-*O_tf^-/uhQWsC==+\3CZ-JIa.mdiD>>(AF=R)+GN-[j`u^3$Rr
/PMlQp<4#toL8ePs-keX/EVD]sbrgOtCV1@;gE5V0`=1#]s`HXBe*hQVrD)0+/)s,o"\(jrfk&(N50&J
bmi?^&<X\Ij4fk,IH2T60\h-nNq9U.[.aqsB''@@!FJIpu#E''@UEP;/B6ktCo/5:-A+b:+uZI8rX1(2
ENu`DpUUa5l0QEcF;->MX08,i3,BMobIau0?PL,q!XiH5K^;.SQ.@^$?A6dHZ-^J7%I@"@-6sC3&?5<\
^REgAU1;B#T)EhRZSafnHP,R4R:RQMSi''!]$F/f-o7DU_''>S)NllBd^3b-*n*VXr5M55m^bN\";;[t
.@kb0MEncVo?U]"iG4dRm=9HhSQ(KV%*?s''-gV657FRP;0_/0/7d)YWO\IZWd0Y_XS*pi!0O&g*Io1R
@g0:bJfKQ<cL1((W`:XcO`9Y!19`G2+m/5$bdVK?@\eEA0Tih#TD37g^UOD!tK+3)8QOiBCl6mK%`>d/
JCppEt)E:0cIl:ENdW]Smgd;`^Qn@Ab=JI?f[YV")d=H-_aDLrJL_/B.<q02Z3hT6OXYqg6>eg!c(h4R
B_"0DuS(Y#aF#5LIbQF=&duC>/VkQ3eNeXh$r8L$]ZaURbC@.V*dd.+)5FY5?<L+0DD\e-P@2>a>\l?i
*A2h7$Vt2P90,$?/u9VGEuL0C.)6a"!R_h"^p]krZ,*4p%>Y5"U9;mh6''W.3kGO".%/<>`c(,3Hb)!\
Ln''e;DF;9p;sIMkHIVAjbmRaHJ^c8P''E,Di^"R)X8T773oTKd_]\1nbjV(ak\f-t''Li"A;.9[_9Dc
/''h,q0&2@!JcXk^aP*%VVDlNdqXF_8d%XYb%HW!A5/e+ih#JW(8drS%]bfP_5Rn*9R78ajFW%8J1tl7
I8BojtGPO''Kur7=7:Up<KK-N!93nF3Sj&NM=T[&OTEl?SBt0k-XEt[@?,]R?TG<Tr$nO%m!+`%X?qZS
,\;V@`5IMCIP=e.#tUM8"QpeKhiR_M_+f0l,(,]78-8b$`"4OCnfI0=FRk(S)"gs%!hXP!jU_(B''YY:
+%.ZE+s%ZDio(YU!bT*fA''6A:>Y:#u''Ko1f$6Of,-@ge*s.?YM$7t\&6B3OH*c:P''q%b>OXI618cW
Tm/e.">''"V)[K-P^r80FS]5Eg<kEiOZHu.8a5\@VC9;KSefBfkN8Qb,G@+bE7>_/D0[iZqGBn5X%.Cd
6o8M(e-SA2,..M3$AdDP9?-M=iT<H;8M)]r!CdMA\''Lu5\c''!U^J!iRB`Bs]Ltb>:;`//A!-J9+[T]
SQ7GH%BJS+I!NF1baX)V#,@)3s_1_Y=($K+8o&*VlI%F91c[Uq"!Y#Wbb-sPn-!cJBJj:gao[Pdcb3Fm
rM<Noc-%+Pj="r2T3>VTu!seQFnPg(fGc^r;pR2unH#''F.YAsJ7C$AC#RTaOBb''W&V[A0]9FR?;0*8
1dE[EI`U[^f0pTaSa+Q^)N[JqFG09:''"7aIGiWc`^g8bJ*_U,_oUGi<;-*!9!7A:1uW[RbS(E,q"b]1
i@2kEOkkB=r\O5jV''Z3''''gB=H(2h''r5WcX&iFPS-Pmcqh/;DNImV%q`5\jNe)(r?nn$0[5^VQ9Z^
CIbP''C6eR''^7gG]^iQ1NT1HBA0u8%XtP.BbCdi,$7Xp@uBn%dsBQ%[1]`9?S<(L<\&>Q(;#paZmi.m
iO,PViOjK/80hN\?M;%GFnel)rr?8Xo<S~>')
%
classmethod: ImageXObject
depth8Masked
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 1191;
			add: #Filter -> #FlateDecode;
			add: #Mask -> (ImageXObject
				on: ((Valuemap new: 9)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 32;
					add: #Height -> 32;
					add: #BitsPerComponent -> 1;
					add: #ImageMask -> true;
					add: #Decode -> #(1 0);
					add: #Length -> 42;
					add: #Filter -> #FlateDecode;
					yourself)
				externalBytes: #[120 218 99 96 0 2 251 255 32 220 80 255 255 255 1 32 126 0 196 31 128 248 7 16 255 1 226 127 64 252 31 25 3 213 82 13 3 0 144 20 79 228]) newReference;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhU-&D+ml0(rq%3psQ*kQtSf[[7rJI'',hElW"G>M5_?=i>aC4R#"(s"ZC0YUSb!d5\hB(\)H_C1(79
Wn91Y_F''/E`=NED+V&l>M@f$XV:JbIsDrk0*b_)bo6AH+bPH$\nl^ZV-M4Qi5Pf^OCUdH[OVl.3mnDJ
j&''ApQ`aO2pL*_Aj''+CL.)F"+%Z;ghZ?Ak]e%W-o''+qm+=j,d\oJeHMfa=7%llld*\V@#mpQMEIET
QpDuG1g:uMnQ2VqhFN)7Cm+V-ucCGJT@Tp3WCClCS^Albt1`?dWTR<4q_5+!8-Vnc\:,*V(rj9%8V/eU
Wfq"?aR@*3&bO(&pN?1&5,*`Z*fe^-b[j<B`ccF1?@e#Y<LrU]:>sq(\<L$Uc`H6]d(lXNJ:.^jN.VDX
XB2_`W77H"]''T@>4d$pZR9hrR\=0L=g13R+.2IeSXLlUoZ](P<b9uaEA*tb6M:@m#4naZ.B+aRZSLKm
"a+7DloE#gsud:`NMb0(1"(GBeB''+U97=K=iAFt>:B(r''3)mb,+t-kcJDeCN2oV7[4PiUqN!<bl>\k
>FLlpdu_Jg:)!&.^dE0j+W3(32^ZLE"j#%Go7RE\m/b.cCnfSY0!Ofe)nnN_S`uS+p64O6ms4SaC;Euc
-;pd&7T?Bh$jmE[XGbJ19rhgl?RLDleG`1T''t;Dn8iX.^WObgCYH(JEB7H=AN^M2HUQ@Pe4K:_kR%pe
Vkp5dU8"Bh[''[-E&oc%uP7mYU7)''=VnF-B0&t.4trD%!l8>I&YH?nC\ZONEhO/MJodaES16ASg%RYg
GGBo%joPKAJe"rrK:>%"m<;,''bZi."I#6ZeZnQDgD=*`3#XpD9o^n&1t^rjAATWel0K\jLS''W/sR&%
fQA)?t)3*j=S$KmbhFrJpk`[##difbhEq%T+_qOI7A=0kYiO&5kHdnROF6\/C?sUfgJTu5<Eb-G^*U^!
[$*BRgC#]W6@lqe''"'']?eElF^:)e`La)VRNK#H[%uZ3qG<m9Vb_["iOV,okghujqP^n!KaT(POT;?"
\PF''7Bgq5lfSCR+3Q4:uLZEejhAT.8M'',9.spqH(G)3l]8,688ZT<F_K>@#Ln`D-B5<l;tD&,ND8X_
(>#p/P1Lc@9nlI=6Noce*''hhS!Sik:^SaGZ6/G#\6N1kG"\_>?h+X5/an=ZPlPG(1UkRRMnYt7]g,D#
jO&l$(+m:$D3O*\MIkX>RImHIZ%cd3@kpm59E>[0.us(]=(JKh9KcCCfT#kLs+6+H-u*-I^`?A>@*<jF
1;Sp-<^/)hI(kd"%mO*m+e-,d^;/Krj&_acf$(sl*url`o4_D#<p3gl8(3Q]liL]p=UG`6mnKWKDrdDS
=@!+iN"j*1G`HUG;oHrHhHiUn:''>M:B3lj0G+A*iMR4jF2>k$htl>YJq4,Y!ueD"#dVg<Si0k9a)UG*
A,J;00kM9D8/GG0KoFtoJV//I_oDd;(P5[M5OhMLP8.!#<l9\CrpRg;=r2d0FoDhhap.e~>')
%
classmethod: ImageXObject
depth9Fixed
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 1186;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhU-&D+ml0(ru5Q^m@Lo`''b8JWbnIbRa?R%6]J<,";76dj0DAV1)NX+ONe1mka^Old!]nMe%jsI[_N
#6?:"_LS<2,ZBuF0pQ@K$7=A''%/"kn=,qtFE)"RC<sP5Y"5jQX5Lrgn2&o:0muqXslfLT?VFY?rBd\[
e,>fpN"h4<CED$$/''GY65:C$lBBW9<Y1eUZ63QTu=m3UIRh<P/`a/Z"(g^UIlhYL5m5k9M"B.MsEHHW
;"(.o=fW"RHtH`Zn"&CA*;-EGO2g]''@X70CP,#QnbopDPK@Jp#3FU(8iAi''4)oj:H''6Fnn>E,-WDk
[qamPt#WPh3&6=E*''E,>RR;4266p[5k'']<!_AImumkPt2rd6p+qG\ql0BW[aQ7LZnpN0c1usPEI]%;
U))9cD@E7MMh2nBc-a*JN#fcT:1ABY?\?SjkSoBCt<-C*Za(KA]p9s)bjaL59`L$SbB+B'',)$F6hJI]
 %Y\@952M]hi&Z8<UX]E*SX1.+03mE_-QQqZYTm$pg@;g<EVpT/Uh@RL''>s`5eCN2o\\&>diUqLe7RfF
#4.#N#`g9Tfd,)IR1>.Ig5#GE1NcY''nF[n^uS/8H8SBEd=p+0CujdKq!12kn=3''=jC@>mV3&>=c=,-
06$)JT6qQ<)M+nF3@1[TOe!H_[=,77Y,8bm!1]p?_lF-O9XobY5D+c''qk6o0l^2UTgtX6sW3O7/)Nj''
;9kY>$<C*.S<?,.k<+Na'':;IO^C]P)c;C[rpL8*8Pf(BSQuY6@$k9:pXs?bkK`$8r1::&?]Yhn<ha3#
HUM$]UtoiFUR2''PU9GD8DH''S6;\Sq5''@dZM+fZig-b;t#+P=@2CCiPsW(qU)B;0.8T87@uh&n0m''
":5XIm9=Q%N''JL+KR["(PuO,$AQB]&/>TH"juL$77<a[SL=855SXiY9V`iS,<A3a&Q(HKe+q=M)]g%A
=HLTop>0E@`X+,Q9(h8n-.*Mf[CEF-FuuFSIUcmJMW_n:iS\"''7hC%F\9E&EZQQa3]bi%<_%H:RqX\@
!\E)^^E?Ve6O@<e>I#d6=o%C)q?Wl''OrSdt!2AEmog,2p5%f/_L_nkO%k0I%/F)c1Us/OW=d0BR#YL0
SP:ALoj6g)4p`4irL^h7LBIa9(BU%9''X?T`''\63OT)0^qq:F02SE''d)GhgGuAo0T5I@In^BQd@aMp
&HqcnPQX[T$&-\U''`@4E4>)?A>//TK^Dp9)S"Gb9obSGAY$PB]heqV!3j,Jt=i=lcnN?8ake:7OT.;S
8J9foR/=W_ea''^a@_#YiC:j-a%I-K?*Z[^Z[`92-&l1KEr$L;Zhg]JX/*;(2;n(t^*/,N!MI\IKNQdP
;2DU+5G2t>E:pmIO(Y.GX%rS@>E5''Xj3r$R">"IKGq\G0!]K"59!Y&A`.4i''C9_#Y!I6j-ZZ7o,VgS
`fhAnM,K_O;Kb^A>BSbJ7?N;Xh_b7X5U7,!/C8/rWuu<@OfrDpi+4P]spc%64g<F^B*\4A''+~>')
%
category: '*PDFtalk test resources-initialize-release'
method: ImageXObject
initializePixelByPixelFrom: anImage
	self at: #Width put: anImage width.
	self at: #Height put: anImage height.
	anImage palette setImagePropertiesOf: self.
	anImage writePixelsByPixelTo: self.
	self filter: #FlateDecode
%
category: '*PDFtalk test resources-test instances'
classmethod: InlineImageOperation
example
	^BeginInlineImage empty
%
category: '*PDFtalk test resources-test instances'
classmethod: LineCap
example
	^self round
%
category: '*PDFtalk test resources-test instances'
classmethod: LineJoin
example
	^self round
%
category: '*PDFtalk test resources-test instances'
classmethod: MarkedContentOperation
example
	^MarkedContentPoint with: #mark
%
category: '*PDFtalk test resources-test instances'
classmethod: MissingObject
example
	^self at: (ObjectId number: 2) expected: (Array with: (DirectType onSymbol: #Catalog))
%
category: '*PDFtalk test resources-test instances'
classmethod: Name
example
	^self on: #Name
%
category: '*PDFtalk test resources-accessing'
classmethod: NativeValue
stringLf
	^String with: Character lf
%
category: '*PDFtalk test resources-test instances'
classmethod: NativeValue
example
	^self content: 3
%
category: '*PDFtalk test resources-test instances'
classmethod: Number
example
	^self on: 31
%
category: '*PDFtalk test resources-test instances'
classmethod: ObjectId
example
	^ObjectId number: 17 generation: 2
%
category: '*PDFtalk test resources-test instances'
classmethod: ObjectStream
example
	^self
		on: (Valuemap
			with: #Type -> #ObjStm
			with: #Length -> 191
			with: #N -> 3
			with: #First -> 15)
		internal: '7 0 8 63 9 123
<<	/Type /Font
	/Subtype /TrueType
	/FontDescriptor 12 0 R
>>

<<	/Type /FontDescriptor
	/Ascent 891
	/FontFile2 22 0 R
>>
<<	/Type /Font
	/Subtype /Type0
	/ToUnicode 10 0 R
>>'
%
category: '*PDFtalk test resources-instance creation'
classmethod: Page
newNumbered: anInteger
	| page |
	page := self empty.
	page at: #Number put: anInteger.
	^page
%
category: '*PDFtalk test resources-accessing'
method: Page
structureString
	^'#'
%
category: '*PDFtalk test resources-accessing'
method: Pages
structureString
	| wst |
	wst := String new writeStream.
	wst nextPut: $(.
	self Kids do: [:kid | wst nextPutAll: kid referent structureString].
	wst nextPut: $).
	^wst contents
%
category: '*PDFtalk test resources-accessing'
method: PageTree
structureString
	"<String>
	simple representation of the structure for testing"

	^self subclassResponsibility
%
category: '*PDFtalk test resources-test instances'
classmethod: PathConstructionOperation
example
	^Move with: 10 with: 5
%
category: '*PDFtalk test resources-test instances'
classmethod: PathPaintingOperation
example
	^Stroke empty
%
category: '*PDFtalk test resources-testing'
classmethod: PDF
runAllTests
	"All tests ordered from basic to specific
	Note: this method is horrible to maintain..."
	"self runAllTests"

	| testclasses |
	testclasses := (OrderedCollection new)
		add: (Smalltalk at: #ValuemapTests);
		add: (Smalltalk at: #ValuePrinterTests);
		add: (PostScript at: #InterpreterTests);
		add: (PostScript at: #NumberTokenTests);
		add: (PostScript at: #ObjectTests);
		add: (PostScript at: #OperatorTests);
		add: (PostScript at: #PostScriptTests);
		add: (PostScript at: #ScannerStringTests);
		add: (PostScript at: #ScannerTests);
		add: (PostScript at: #CIDTests);
		add: (PostScript at: #CMapTests);
		add: (PDFtalk at: #LibraryTests);
		add: (Smalltalk at: #ByteStreamTests);
		add: (PDFtalk at: #NameTests);
		add: (PDFtalk at: #ColorTests);
		add: (PDFtalk at: #TypecheckingTests);
		add: (PDFtalk at: #TypingTests);
		add: (PDFtalk at: #SimpleObjectTests);
		add: (PDFtalk at: #StringTests);
		add: (PDFtalk at: #StreamTests);
		add: (PDFtalk at: #ReferenceTests);
		add: (PDFtalk at: #CrossReferenceTests);
		add: (PDFtalk at: #ObjectStreamTests);
		add: (PDFtalk at: #PDFObjectTests);
		add: (PDFtalk at: #PagesTests);
		add: (PDFtalk at: #ContentsTests);
		add: (PDFtalk at: #AttributeTests);
		add: (PDFtalk at: #CatalogTests);
		add: (PDFtalk at: #TrailerTests);
		add: (PDFtalk at: #MatrixTests);
		add: (PDFtalk at: #FileTests);
		add: (PDFtalk at: #DocumentTests);
		add: (PDFtalk at: #ImageXTests);
		add: (PDFtalk at: #FontEncodingTests);
		add: (PDFtalk at: #BugReportTests);
		add: ((PDFtalk at: #Fonts) at: #FontMetricsTests);
		add: ((PDFtalk at: #Fonts) at: #FontProgramTests);
		add: ((PDFtalk at: #Fonts) at: #PFMTests);
		add: ((PDFtalk at: #Fonts) at: #AfmParsingTest);
		add: ((PDFtalk at: #Fonts) at: #CharacterDecodingTests);
		add: ((PDFtalk at: #Fonts) at: #FontEncodingTest);
		add: (((PDFtalk at: #Fonts) at: #CFF) at: #CFFTests);
		add: (((PDFtalk at: #Fonts) at: #OpenType) at: #OpenTypeTests);
		yourself.
	^(TestSuite newForClassesSelected: testclasses) run
%
category: '*PDFtalk test resources-test instances'
classmethod: PDFArray
example
	^(File readTesterOn: '[ 549 3.14 false (Ralph) /SomeName ]') readObject
%
category: '*PDFtalk test resources-test instances'
classmethod: PDFDate
example
	^self fromPdf: 'D:20090919165000+02'
%
category: '*PDFtalk test resources-test instances'
classmethod: PDFDictionary
example
	| file |
	file := File readTesterOn: '
 /Type /Example
	/Subtype /DictionaryExample
	/Version 0.01
	/IntegerItem 12
	/StringItem (a string)
	/Subdictionary << /Item1 0.4
		/Item2 true
		/LastItem (not !)
		/VeryLastItem (OK)
	>>
>>'.
	^self readWith: file from: file parser
%
category: '*PDFtalk test resources-accessing attributes'
method: PDFObject
attributeNames
	"<Collection of: Symbol>"

	^self sortedAttributePragmas collect: #selector
%
category: '*PDFtalk test resources-test instances'
classmethod: PDFStream
example
	^(File readTesterOn: '<< /Length 68 >>		% was: (An indirect reference to object 8)
stream' , self stringLf , 'BT
	/F1 12 Tf
	72 712 Td
	( A stream with an indirect length ) Tj
ET' , self stringLf , 'endstream') readObject
%
classmethod: PDFStream
example1_2
	^(File readTesterOn: '<< /Length 68 /F (.) >>
stream' , self stringLf , 'BT
	/F1 12 Tf
	72 712 Td
	( A stream with an indirect length ) Tj
ET' , self stringLf , 'endstream') readObject
%
classmethod: PDFStream
example1_5
	^(File readTesterOn: '<< /Length 68 /DL 68 >>
stream' , self stringLf , 'BT
	/F1 12 Tf
	72 712 Td
	( A stream with an indirect length ) Tj
ET' , self stringLf , 'endstream') readObject
%
classmethod: PDFStream
exampleFiltered
	^(File readTesterOn: '1 0 obj
<<	/Length 533
	/Filter [ /ASCII85Decode /LZWDecode ]
>>
stream' , self stringLf , 'J..)6T`?p&<!J9%_[umg"B7/Z7KNXbN''S+,*Q/&"OLT''F
LIDK#!n`$"<Atdi`\Vn%b%)&''cA*VnK\CJY(sF>c!Jnl@
RM]WM;jjH6Gnc75idkL5]+cPZKEBPWdR>FF(kj1_R%W_d
&/jS!;iuad7h?[L-F$+]]0A3Ck*$I0KZ?;<)CJtqi65Xb
Vc3\n5ua:Q/=0$W<#N3U;H,MQKqfg1?:lUpR;6oN[C2E4
ZNr8Udn.''p+?#X+1>0Kuk$bCDF/(3fL5]Oq)^kJZ!C2H1
''TO]Rl?Q:&''<5&iP!$Rq;BXRecDN[IJB`,)o8XJOSJ9sD
S]hQ;Rj@!ND)bD_q&C\g:inYC%)&u#:u,M6Bm%IY!Kb1+
":aAa''S`ViJglLb8<W9k6Yl\\0McJQkDeLWdPN?9A''jX*
al>iG1p&i;eVoK&juJHs9%;Xomop"5KatWRT"JQ#qYuL,
JD?M$0QP)lKn06l1apKDC@\qJ4B!!(5m+j.7F790m(Vj8
8l8Q:_CZ(Gm1%X\N1&u!FKHMB~>' , self stringLf , 'endstream
endobj') readObject
%
classmethod: PDFStream
exampleUnfiltered
	^(File readTesterOn: '<< /Length 564 >>
stream' , self stringLf , '2 J
BT
/F1 12 Tf
0 Tc
0 Tw
72.5 712 TD
[(Unfiltered streams can be read easily) 65 (,)] TJ
0 -14 TD
[(b) 20 (ut generally tak) 10 (e more space than \311)] TJ
T* (compressed streams.) Tj
0 -28 TD
[(Se) 25 (v) 15 (eral encoding methods are a) 20 (v) 25 (ailable in PDF) 80 (.)] TJ
0 -14 TD
(Some are used for compression and others simply) Tj
T* [(to represent binary data in an) 55 (ASCII format.) ] TJ
T* (Some of the compression filters are \
suitable) Tj
T* (for both data and images , while others are \
suitable only) Tj
T* (for continuous-tone images.) Tj
ET' , self stringLf , 'endstream') readObject
%
category: '*PDFtalk test resources-test instances'
classmethod: PDFString
example
	^self fromPdf: 'String'
%
category: '*PDFtalk test resources-test instances'
classmethod: PDFTypeDefinition
example
	^PDFTypeDefinition
		name: #JPXDecode
		supertype: #Filter
		version: #(1 5)
		section: '7.4.9'
		documentation: 'The JPXDecode filter decodes data that has been encoded using the JPEG2000 compression method, an ISO standard for the compression and packaging of image data.'
%
category: '*PDFtalk test resources-test instances'
classmethod: PostScriptCalculatorFunction
example
	"The following example shows a type 4 function equivalent to the predefined spot function DoubleDot"

	^(File readTesterOn: '<< /FunctionType 4
	/Domain [-1.0 1.0 -1.0 1.0]
	/Range [-1.0 1.0]
	/Length 48
>>
stream' , self stringLf , '{ 360 mul sin
2 div
exch 360 mul sin
2 div
add
}' , self stringLf , 'endstream') readObject
%
category: '*PDFtalk test resources-test instances'
classmethod: Rectangle
example
	^self on: #(549 3.14 23 0.12)
%
category: '*PDFtalk test resources-test instances'
classmethod: Reference
example
"
	^'12 1 R' pdfReadstream nextPDFObject
"

	^self id: (ObjectId number: 12 generation: 1)
%
category: '*PDFtalk test resources-test instances'
classmethod: SampledFunction
example
	^(File readTesterOn: '<< /FunctionType 0
	/Domain [-1.0 1.0 -1.0 1.0]
	/Size [21 31]
	/Encode [0 20 0 30]
	/BitsPerSample 4
	/Range [-1.0 1.0]
	/Decode [-1.0 1.0]
	/Length 132
>>
stream' , self stringLf , '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
	(...651 sample values...)' , self stringLf , 'endstream') readObject
%
category: '*PDFtalk test resources-test instances'
classmethod: ShadingOperation
example
	^PaintShading with: #sh1
%
category: '*PDFtalk test resources-test instances'
classmethod: StandardFont
example
	| inst |
	inst:= self empty.
	inst at: #BaseFont put: #Helvetica.
	^inst
%
category: '*PDFtalk test resources-test instances'
classmethod: StichingFunction
example

	| function1 function2 stichingFunction |
	function1 := (PDF classAt: #ExponentialInterpolationFunction) empty.
	function1 at: #Domain put: #(0 1.0).
	function1 at: #N put: 0.5.
	function1 at: #C0 put: (CmykColor cyan: 0 magenta: 0.36 yellow: 0.6 black: 0) asPDFArray.
	function1 at: #C1 put: (CmykColor cyan: 0.6 magenta: 0 yellow: 0.6 black: 0) asPDFArray.
	function2 := (PDF classAt: #ExponentialInterpolationFunction) empty.
	function2 at: #Domain put: #(0 1.0).
	function2 at: #N put: 2.
	function2 at: #C0 put: (CmykColor cyan: 0.6 magenta: 0 yellow: 0.6 black: 0) asPDFArray.
	function2 at: #C1 put: (CmykColor cyan: 0.6 magenta: 0.36 yellow: 0 black: 0) asPDFArray.
	stichingFunction := (PDF classAt: #StichingFunction) empty.
	stichingFunction at: #Domain put: #(0 1.0).
	stichingFunction at: #Functions put: (Array
		with: function1 newReference
		with: function2 newReference).
	stichingFunction at: #Bounds put: #(0.5).
	stichingFunction at: #Encode put: #(0 1.0 0 1.0).
	^stichingFunction
%
category: '*PDFtalk test resources-test instances'
classmethod: StreamReference
example
	^self id: (ObjectId number: 3) value: 12345
%
category: '*PDFtalk test resources-test instances'
classmethod: TextObjectOperation
example
	^BeginText example
%
category: '*PDFtalk test resources-test instances'
classmethod: TextPositioningOperation
example
	^NextLineRelative with: 10 with: 5
%
category: '*PDFtalk test resources-test instances'
classmethod: TextShowingOperation
example
	^ShowText with: 'a string'
%
category: '*PDFtalk test resources-test instances'
classmethod: TextStateOperation
example
	^TextFont
		with: #f1
		with: 12
%
category: '*PDFtalk test resources-test instances'
classmethod: Trailer
example
	^self
		with: #Size -> 22
		with: #Root -> (PDF Dictionary with: #Type -> #Catalog) newReference
		with: #Info -> PDF Dictionary empty newReference
		with: #ID -> (Array
			with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject
			with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject) asPDF
%
classmethod: Trailer
exampleMinimal
	^self on: (Valuemap
		with: #Size -> 22
		with: #Root -> (Dictionary with: #Type -> #Catalog) asPDF newReference)
%
classmethod: Trailer
exampleString
	^'trailer
<< /Size 22
/Root 2 0 R
/Info 1 0 R
/ID[< 81b14aafa313db63dbd6f981e49f94f4 >
< 81b14aafa313db63dbd6f981e49f94f4 >
]
>>
startxref
18799
 %%EOF'
%
category: '*PDFtalk test resources-test instances'
classmethod: Type1
example
	| inst |
	inst:= self empty.
	inst at: #BaseFont put: #MyFont.
	^inst
%
category: '*PDFtalk test resources-test instances'
classmethod: Type3FontOperation
example
	^SetType3GlyphWidth
		with: 15
		with: 0
%
category: '*PDFtalk test resources-test instances'
classmethod: TypeMismatch
example
	^self for: (PDF classAt: #Catalog) empty expected: (Array with: (DirectType onSymbol: #ColourSpace))
%
category: '*PDFtalk test resources-test instances'
classmethod: UnknownOperation
example
	^UnknownOperation operatorName: #';' operands: #(4.85 0 0 4.85 141.13399 54)
%
category: '*PDFtalk test resources-test instances'
classmethod: UsedReference
example
	^self id: (ObjectId number: 3 generation: 73) value: 12345
%
category: '*PDFtalk test resources-test instances'
classmethod: UTF16Textstring
example
	^self fromPdf: self exampleUnicodeString
%
classmethod: UTF16Textstring
exampleUnicodeString
	^#[254 255 0 84 0 101 0 120 0 116 0 32 0 66 0 111 0 120 0 58 0 32 0 70 0 105 0 120 0 101 0 100 0 32 0 73 0 110 0 99 0 111 0 109 0 101 0 32 0 83 0 101 0 97 0 114 0 99 0 104 0 101 0 115 0 84 0 13 0 13 0 83 0 82 0 67 0 72 0 9 0 9 0 66 0 111 0 110 0 100 0 32 0 83 0 101 0 97 0 114 0 99 0 104 0 32 0 69 0 110 0 103 0 105 0 110 0 101 0 13 0 13 0 9 0 9 0 77 0 117 0 108 0 116 0 105 0 32 0 99 0 114 0 105 0 116 0 101 0 114 0 105 0 97 0 32 0 115 0 101 0 97 0 114 0 99 0 104 0 32 0 116 0 101 0 109 0 112 0 108 0 97 0 116 0 101 0 115 0 13 0 13 0 83 0 82 0 67 0 77 0 9 0 9 0 83 0 101 0 97 0 114 0 99 0 104 0 32 0 70 0 117 0 110 0 99 0 116 0 105 0 111 0 110 0 115 0 32 0 109 0 97 0 105 0 110 0 32 0 109 0 101 0 110 0 117 0 13 0 13 0 13 0 13 0 67 0 117 0 114 0 118 0 101 0 32 0 65 0 110 0 97 0 108 0 121 0 115 0 105 0 115 0 13 0 13 0 89 0 67 0 82 0 86 0 9 0 9 0 71 0 108 0 111 0 98 0 97 0 108 0 32 0 121 0 105 0 101 0 108 0 100 0 32 0 99 0 117 0 114 0 118 0 101 0 32 0 99 0 111 0 109 0 112 0 97 0 114 0 105 0 115 0 111 0 110 0 115 0 13 0 13 0 9 0 9 0 67 0 114 0 101 0 97 0 116 0 101 0 32 0 109 0 117 0 108 0 116 0 105 0 112 0 108 0 101 0 32 0 99 0 117 0 114 0 118 0 101 0 32 0 116 0 101 0 109 0 112 0 108 0 97 0 116 0 101 0 115 0 32 0 13 0 13 0 70 0 87 0 67 0 86 0 9 0 9 0 80 0 114 0 111 0 106 0 101 0 99 0 116 0 101 0 100 0 32 0 70 0 111 0 114 0 119 0 97 0 114 0 100 0 32 0 82 0 97 0 116 0 101 0 32 0 67 0 117 0 114 0 118 0 101 0 115 0 13 0 13 0 70 0 77 0 67 0 9 0 9 0 70 0 97 0 105 0 114 0 32 0 77 0 97 0 114 0 107 0 101 0 116 0 32 0 67 0 117 0 114 0 118 0 101 0 32 0 65 0 110 0 97 0 108 0 121 0 115 0 105 0 115 0 13 0 13 0 9 0 9 0 67 0 111 0 109 0 112 0 97 0 114 0 101 0 32 0 121 0 105 0 101 0 108 0 100 0 115 0 32 0 97 0 99 0 114 0 111 0 115 0 115 0 32 0 109 0 97 0 116 0 117 0 114 0 105 0 116 0 105 0 101 0 115 0 47 0 115 0 101 0 99 0 116 0 111 0 114 0 115 0 13 0 13 0 67 0 85 0 82 0 86 0 9 0 9 0 67 0 117 0 114 0 118 0 101 0 32 0 67 0 111 0 110 0 115 0 116 0 114 0 117 0 99 0 116 0 105 0 111 0 110 0 47 0 99 0 111 0 109 0 112 0 111 0 110 0 101 0 110 0 116 0 115 0 13 0 13 0 13 0 13 0 66 0 111 0 110 0 100 0 32 0 87 0 97 0 116 0 99 0 104 0 32 32 19 0 32 0 78 0 101 0 119 0 32 0 73 0 115 0 115 0 117 0 101 0 115 0 32 0 38 0 32 0 65 0 117 0 99 0 116 0 105 0 111 0 110 0 115 0 13 0 13 0 78 0 73 0 77 0 9 0 9 0 78 0 101 0 119 0 32 0 73 0 115 0 115 0 117 0 101 0 115 0 32 0 77 0 111 0 110 0 105 0 116 0 111 0 114 0 13 0 13 0 73 0 73 0 73 0 9 0 9 0 73 0 110 0 116 0 101 0 114 0 110 0 97 0 116 0 105 0 111 0 110 0 97 0 108 0 32 0 73 0 110 0 115 0 105 0 100 0 101 0 114 0 13 0 13 0 65 0 85 0 67 0 82 0 9 0 9 0 65 0 117 0 99 0 116 0 105 0 111 0 110 0 32 0 82 0 101 0 115 0 117 0 108 0 116 0 115 0 13 0 13 0 13 0 13 0 67 0 97 0 108 0 101 0 110 0 100 0 97 0 114 0 115 0 13 0 13 0 70 0 79 0 77 0 67 0 9 0 9 0 70 0 79 0 77 0 67 0 32 0 65 0 110 0 110 0 111 0 117 0 110 0 99 0 101 0 109 0 101 0 110 0 116 0 32 0 68 0 97 0 116 0 101 0 115 0 13 0 13 0 70 0 69 0 68 0 9 0 9 0 70 0 101 0 100 0 101 0 114 0 97 0 108 0 32 0 82 0 101 0 115 0 101 0 114 0 118 0 101 0 32 0 67 0 97 0 108 0 101 0 110 0 100 0 97 0 114 0 13 0 13 0 67 0 65 0 67 0 84 0 9 0 9 0 67 0 111 0 114 0 112 0 111 0 114 0 97 0 116 0 101 0 32 0 65 0 99 0 116 0 105 0 111 0 110 0 115 0 32 0 67 0 97 0 108 0 101 0 110 0 100 0 97 0 114 0 13 0 13 0 67 0 65 0 76 0 9 0 9 0 69 0 118 0 101 0 110 0 116 0 32 0 67 0 97 0 108 0 101 0 110 0 100 0 97 0 114 0 115 0 13 0 13 0 67 0 68 0 82 0 9 0 9 0 49 0 50 0 32 0 109 0 111 0 110 0 116 0 104 0 32 0 67 0 97 0 108 0 101 0 110 0 100 0 97 0 114 0 13 0 13 0 68 0 67 0 88 0 9 0 9 0 65 0 99 0 99 0 114 0 117 0 97 0 108 0 32 0 67 0 97 0 108 0 101 0 110 0 100 0 97 0 114 0 13 0 13 0 13 0 13 0 69 0 108 0 101 0 99 0 116 0 114 0 111 0 110 0 105 0 99 0 32 0 84 0 114 0 97 0 100 0 105 0 110 0 103 0 13 0 13 0 69 0 84 0 9 0 9 0 69 0 108 0 101 0 99 0 116 0 114 0 111 0 110 0 105 0 99 0 32 0 84 0 114 0 97 0 100 0 105 0 110 0 103 0 32 0 109 0 97 0 105 0 110 0 32 0 109 0 101 0 110 0 117 0 13 0 13 0 69 0 120 0 99 0 101 0 108 0 32 0 83 0 112 0 114 0 101 0 97 0 100 0 115 0 104 0 101 0 101 0 116 0 115 0 13 0 13 0 66 0 66 0 88 0 76 0 9 0 9 0 66 0 108 0 111 0 111 0 109 0 98 0 101 0 114 0 103 0 32 0 65 0 80 0 73 0 32 32 19 0 32 0 100 0 111 0 119 0 110 0 108 0 111 0 97 0 100 0 105 0 110 0 103 0 32 0 100 0 97 0 116 0 97 0 32 0 9 0 9 0 35 0 55 0 32 0 101 0 120 0 97 0 109 0 112 0 108 0 101 0 32 0 66 0 111 0 110 0 100 0 32 0 115 0 112 0 114 0 101 0 97 0 100 0 115 0 104 0 101 0 101 0 116 0 115 0 13 0 13 0 13 0 13 0 77 0 105 0 115 0 99 0 101 0 108 0 108 0 97 0 110 0 101 0 111 0 117 0 115 0 13 0 13 0 76 0 69 0 65 0 71 0 9 0 9 0 85 0 110 0 100 0 101 0 114 0 119 0 114 0 105 0 116 0 101 0 114 0 32 0 82 0 97 0 110 0 107 0 105 0 110 0 103 0 115 0 13 0 13 0 13 0 13 0 83 0 104 0 111 0 114 0 116 0 99 0 117 0 116 0 115 0 13 0 13 0 76 0 65 0 83 0 84 0 9 0 9 0 76 0 97 0 115 0 116 0 32 0 56 0 32 0 102 0 117 0 110 0 99 0 116 0 105 0 111 0 110 0 115 0 32 0 97 0 99 0 99 0 101 0 115 0 115 0 101 0 100 0 13 0 13 0 71 0 82 0 65 0 66 0 9 0 9 0 83 0 101 0 110 0 100 0 32 0 97 0 32 0 115 0 99 0 114 0 101 0 101 0 110 0 32 0 115 0 104 0 111 0 116 0 32 0 97 0 115 0 32 0 97 0 32 0 109 0 101 0 115 0 115 0 97 0 103 0 101 0 32 0 9 0 9 0 97 0 116 0 116 0 97 0 99 0 104 0 109 0 101 0 110 0 116 0 13 0 13 0 69 0 65 0 83 0 89 0 9 0 9 0 69 0 115 0 115 0 101 0 110 0 116 0 105 0 97 0 108 0 32 0 84 0 105 0 112 0 115 0 32 0 38 0 32 0 83 0 104 0 111 0 114 0 116 0 99 0 117 0 116 0 115 0 13 0 13 0 66 0 85 0 9 0 9 0 66 0 76 0 79 0 79 0 77 0 66 0 69 0 82 0 71 0 32 0 85 0 78 0 73 0 86 0 69 0 82 0 83 0 73 0 84 0 89 0 13 0 13 0 9 0 9 0 69 0 118 0 101 0 110 0 116 0 115 0 44 0 32 0 115 0 101 0 109 0 105 0 110 0 97 0 114 0 115 0 44 0 32 0 111 0 110 0 45 0 108 0 105 0 110 0 101 0 32 0 109 0 97 0 110 0 117 0 97 0 108 0 115 0 13 0 13 0 13 0 13 0 13 0 13 0 13 0 13 0 0] asString
%
category: '*PDFtalk test resources-test instances'
classmethod: XObjectOperation
example
	^PaintXObject with: #xObject
%
category: '*PDFtalk test resources-test instances'
classmethod: XRefStream
example
	^self
		on: ((Valuemap new)
			at: #Type put: #XRef;
			at: #Index put: #(0 11);
			at: #W put: #(1 2 2);
			at: #Filter put: #ASCIIHexDecode;
			at: #Size put: 11;
			at: #Root put: (PDF Dictionary with: #Type -> #Catalog) newReference;
			at: #Length put: 153;
			yourself)
		external: '	00 0000 FFFF
	01 0032 0000
	01 007A 0000
	01 00AC 0000
	01 00EE 0000
	01 0172 0000
	01 01BE 0000
	02 000A 0000
	02 000A 0001
	02 000A 0002
	01 01D8 0000'
%
category: '*PDFtalk test resources-instance creation'
classmethod: ZipFilter
testerWith: aPDFDictionaryOrNil
	| inst |
	inst := self new.
	aPDFDictionaryOrNil ifNotNil: [inst initializeParameters: aPDFDictionaryOrNil].
	^inst
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: (PDFtalk at: #Fonts) at: 1.
%
category: '*PDFtalk test resources-test instances'
classmethod: AdobeFontMetric
abrevitatedTimesRoman
	^self fromAfm: self abrevitatedTimesRomanString readStream
%
classmethod: AdobeFontMetric
abrevitatedTimesRomanString
	^'StartFontMetrics 3.0
Comment Copyright 1985, 1987, 1989, 1990 Adobe Systems ...[truncated]
FontName Times-Roman
FullName Times Roman
FamilyName Times
Weight Roman
ItalicAngle 0
IsFixedPitch false
FontBBox -170 -223 1024 896
UnderlinePosition -109
UnderlineThickness 49
Version 001.004
Notice Copyright 1985, 1987, 1989, 1990 Adobe Systems ...[truncated]
EncodingScheme AdobeStandardEncoding
CapHeight 662
XHeight 448
Ascender 682
Descender -217
StartCharMetrics 228
C 32 ; WX 250 ; N space ; B 0 0 0 0 ;
C 33 ; WX 333 ; N exclam ; B 109 -14 224 676 ;
C 34 ; WX 408 ; N quotedbl ; B 70 445 337 685 ;
C 35 ; WX 500 ; N numbersign ; B 4 0 495 662 ;
C 36 ; WX 500 ; N dollar ; B 44 -87 456 727 ;
C 37 ; WX 833 ; N percent ; B 61 -14 772 676 ;
C 101 ; WX 444 ; N e ; B 22 -10 421 458 ;
C 102 ; WX 333 ; N f ; B 20 0 383 682 ; L i fi ; L l fl ;
C 103 ; WX 500 ; N g ; B 27 -217 470 458 ;
C 104 ; WX 500 ; N h ; B 9 0 490 682 ;
C 105 ; WX 278 ; N i ; B 22 0 259 682 ;
C 249 ; WX 500 ; N oslash ; B 30 -108 470 549 ;
C 250 ; WX 722 ; N oe ; B 30 -10 690 458 ;
C 251 ; WX 500 ; N germandbls ; B 12 -10 468 682 ;
C -1 ; WX 611 ; N Zcaron ; B 7 0 597 888 ;
C -1 ; WX 444 ; N ccedilla ; B 25 -215 412 458 ;
C -1 ; WX 500 ; N ydieresis ; B 15 -217 476 623 ;
C -1 ; WX 750 ; N onehalf ; B 30 -14 720 676 ;
EndCharMetrics
StartKernData
StartTrackKern 3
Comment Light kerning
TrackKern -1 14 0 72 -1.89
Comment Medium kerning
TrackKern -2 8 0 72 -3.2
Comment Tight kerning
TrackKern -3 6 -.1 72 -3.78
EndTrackKern
StartKernPairs 113
KPX A y -92
KPX A w -92
KPX y period -65
KPX y comma -65
EndKernPairs
EndKernData
StartComposites 58
CC Aacute 2 ; PCC A 0 0 ; PCC acute 195 214 ;
CC Acircumflex 2 ; PCC A 0 0 ; PCC circumflex 195 214 ;
CC zcaron 2 ; PCC z 0 0 ; PCC caron 56 0 ;
EndComposites
EndFontMetrics
'
%
classmethod: AdobeFontMetric
helvetica
	^(Font fontAt: #Helvetica) metrics
%
category: '*PDFtalk test resources-attributes'
method: AdobeFontMetric
fileFormatVersion
	"<String>"

	^fileFormatVersion
%
category: '*PDFtalk test resources-test instances'
classmethod: CharacterMetric
anF
	^AdobeFontMetric helvetica charMetricAt: 102
%
category: '*PDFtalk test resources-fonts'
classmethod: CustomFont
nimbusSansLRegu
	"one of the Adobe core 35 fonts.
	Free with the GNU General Public License (see method comment of #nimbusSansLReguCOPYING) - part of the GhostScript package"

	<font: #NimbusSansLRegu>
	^self file: 'uhvr8a' pfb: self nimbusSansLReguPfb afm: self nimbusSansLReguAfm
%
classmethod: CustomFont
nimbusSansLReguAfm
	^'StartFontMetrics 3.0
Comment Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
Comment Creation Date: 12/22/1999
Comment See the file COPYING (GNU General Public License) for license conditions.
FontName NimbusSanL-Regu
FullName Nimbus Sans L Regular
FamilyName Nimbus Sans L
Weight Regular
ItalicAngle 0.0
IsFixedPitch false
UnderlinePosition -151
UnderlineThickness 50
Version 1.05
Notice (URW)++,Copyright 1999 by (URW)++ Design & Development
EncodingScheme AdobeStandardEncoding
FontBBox -174 -285 1001 953
CapHeight 729
XHeight 524
Descender -218
Ascender 729
StartCharMetrics 316
C 32 ; WX 278 ; N space ; B 191 0 191 0 ;
C 33 ; WX 278 ; N exclam ; B 124 0 208 729 ;
C 34 ; WX 355 ; N quotedbl ; B 52 464 305 709 ;
C 35 ; WX 556 ; N numbersign ; B 14 -20 542 697 ;
C 36 ; WX 556 ; N dollar ; B 26 -126 518 770 ;
C 37 ; WX 889 ; N percent ; B 29 -20 859 709 ;
C 38 ; WX 667 ; N ampersand ; B 52 -23 637 709 ;
C 39 ; WX 221 ; N quoteright ; B 64 497 157 729 ;
C 40 ; WX 333 ; N parenleft ; B 73 -212 291 729 ;
C 41 ; WX 333 ; N parenright ; B 38 -212 256 729 ;
C 42 ; WX 389 ; N asterisk ; B 40 441 343 729 ;
C 43 ; WX 584 ; N plus ; B 50 -10 534 474 ;
C 44 ; WX 278 ; N comma ; B 87 -147 192 104 ;
C 45 ; WX 333 ; N hyphen ; B 46 240 284 312 ;
C 46 ; WX 278 ; N period ; B 87 0 191 104 ;
C 47 ; WX 278 ; N slash ; B -8 -20 284 729 ;
C 48 ; WX 556 ; N zero ; B 43 -23 507 709 ;
C 49 ; WX 556 ; N one ; B 102 0 347 709 ;
C 50 ; WX 556 ; N two ; B 34 0 511 709 ;
C 51 ; WX 556 ; N three ; B 32 -23 506 709 ;
C 52 ; WX 556 ; N four ; B 28 0 520 709 ;
C 53 ; WX 556 ; N five ; B 35 -23 513 709 ;
C 54 ; WX 556 ; N six ; B 43 -23 513 709 ;
C 55 ; WX 556 ; N seven ; B 46 0 520 709 ;
C 56 ; WX 556 ; N eight ; B 37 -23 513 709 ;
C 57 ; WX 556 ; N nine ; B 38 -23 509 709 ;
C 58 ; WX 278 ; N colon ; B 110 0 214 524 ;
C 59 ; WX 278 ; N semicolon ; B 110 -147 215 524 ;
C 60 ; WX 584 ; N less ; B 45 -9 534 474 ;
C 61 ; WX 584 ; N equal ; B 50 111 534 353 ;
C 62 ; WX 584 ; N greater ; B 50 -9 539 474 ;
C 63 ; WX 556 ; N question ; B 77 0 509 741 ;
C 64 ; WX 1015 ; N at ; B 34 -142 951 741 ;
C 65 ; WX 667 ; N A ; B 17 0 653 729 ;
C 66 ; WX 667 ; N B ; B 79 0 623 729 ;
C 67 ; WX 722 ; N C ; B 48 -23 677 741 ;
C 68 ; WX 722 ; N D ; B 89 0 667 729 ;
C 69 ; WX 667 ; N E ; B 90 0 613 729 ;
C 70 ; WX 611 ; N F ; B 90 0 579 729 ;
C 71 ; WX 778 ; N G ; B 44 -23 709 741 ;
C 72 ; WX 722 ; N H ; B 83 0 644 729 ;
C 73 ; WX 278 ; N I ; B 100 0 194 729 ;
C 74 ; WX 500 ; N J ; B 17 -23 426 729 ;
C 75 ; WX 667 ; N K ; B 79 0 658 729 ;
C 76 ; WX 556 ; N L ; B 80 0 533 729 ;
C 77 ; WX 833 ; N M ; B 75 0 761 729 ;
C 78 ; WX 722 ; N N ; B 76 0 646 729 ;
C 79 ; WX 778 ; N O ; B 38 -23 742 741 ;
C 80 ; WX 667 ; N P ; B 91 0 617 729 ;
C 81 ; WX 778 ; N Q ; B 38 -59 742 741 ;
C 82 ; WX 722 ; N R ; B 93 0 679 729 ;
C 83 ; WX 667 ; N S ; B 48 -23 621 741 ;
C 84 ; WX 611 ; N T ; B 21 0 593 729 ;
C 85 ; WX 722 ; N U ; B 85 -23 645 729 ;
C 86 ; WX 667 ; N V ; B 30 0 645 729 ;
C 87 ; WX 944 ; N W ; B 22 0 929 729 ;
C 88 ; WX 667 ; N X ; B 22 0 649 729 ;
C 89 ; WX 667 ; N Y ; B 13 0 661 729 ;
C 90 ; WX 611 ; N Z ; B 28 0 583 729 ;
C 91 ; WX 278 ; N bracketleft ; B 64 -212 250 729 ;
C 92 ; WX 278 ; N backslash ; B -8 -20 284 729 ;
C 93 ; WX 278 ; N bracketright ; B 23 -212 209 729 ;
C 94 ; WX 469 ; N asciicircum ; B 44 329 425 709 ;
C 95 ; WX 556 ; N underscore ; B -22 -176 578 -126 ;
C 96 ; WX 222 ; N quoteleft ; B 65 477 158 709 ;
C 97 ; WX 556 ; N a ; B 42 -23 535 539 ;
C 98 ; WX 556 ; N b ; B 54 -23 523 729 ;
C 99 ; WX 500 ; N c ; B 31 -23 477 539 ;
C 100 ; WX 556 ; N d ; B 26 -23 495 729 ;
C 101 ; WX 556 ; N e ; B 40 -23 513 539 ;
C 102 ; WX 278 ; N f ; B 18 0 258 732 ;
C 103 ; WX 556 ; N g ; B 29 -218 489 539 ;
C 104 ; WX 556 ; N h ; B 70 0 486 729 ;
C 105 ; WX 222 ; N i ; B 66 0 150 729 ;
C 106 ; WX 222 ; N j ; B -18 -218 153 729 ;
C 107 ; WX 500 ; N k ; B 58 0 502 729 ;
C 108 ; WX 222 ; N l ; B 68 0 152 729 ;
C 109 ; WX 833 ; N m ; B 70 0 762 539 ;
C 110 ; WX 556 ; N n ; B 70 0 487 539 ;
C 111 ; WX 556 ; N o ; B 36 -23 510 539 ;
C 112 ; WX 556 ; N p ; B 54 -218 523 539 ;
C 113 ; WX 556 ; N q ; B 26 -218 495 539 ;
C 114 ; WX 333 ; N r ; B 69 0 321 539 ;
C 115 ; WX 500 ; N s ; B 34 -23 459 539 ;
C 116 ; WX 278 ; N t ; B 14 -23 254 668 ;
C 117 ; WX 556 ; N u ; B 65 -23 482 524 ;
C 118 ; WX 500 ; N v ; B 10 0 486 524 ;
C 119 ; WX 722 ; N w ; B 6 0 708 524 ;
C 120 ; WX 500 ; N x ; B 17 0 473 524 ;
C 121 ; WX 500 ; N y ; B 20 -218 478 524 ;
C 122 ; WX 500 ; N z ; B 31 0 457 524 ;
C 123 ; WX 334 ; N braceleft ; B 43 -212 276 729 ;
C 124 ; WX 260 ; N bar ; B 100 -212 160 729 ;
C 125 ; WX 334 ; N braceright ; B 29 -212 262 729 ;
C 126 ; WX 584 ; N asciitilde ; B 75 268 508 438 ;
C 161 ; WX 333 ; N exclamdown ; B 121 -205 205 524 ;
C 162 ; WX 556 ; N cent ; B 52 -120 510 628 ;
C 163 ; WX 556 ; N sterling ; B 26 -23 535 729 ;
C 164 ; WX 167 ; N fraction ; B -174 -20 336 709 ;
C 165 ; WX 556 ; N yen ; B 11 0 545 709 ;
C 166 ; WX 556 ; N florin ; B 11 -212 542 738 ;
C 167 ; WX 556 ; N section ; B 43 -213 506 729 ;
C 168 ; WX 556 ; N currency ; B 67 133 489 551 ;
C 169 ; WX 191 ; N quotesingle ; B 48 464 142 709 ;
C 170 ; WX 333 ; N quotedblleft ; B 48 477 299 709 ;
C 171 ; WX 556 ; N guillemotleft ; B 98 106 455 438 ;
C 172 ; WX 333 ; N guilsinglleft ; B 91 106 243 438 ;
C 173 ; WX 333 ; N guilsinglright ; B 85 106 239 438 ;
C 174 ; WX 500 ; N fi ; B 12 0 436 732 ;
C 175 ; WX 500 ; N fl ; B 17 0 430 732 ;
C 177 ; WX 556 ; N endash ; B -5 240 561 312 ;
C 178 ; WX 556 ; N dagger ; B 38 -177 513 709 ;
C 179 ; WX 556 ; N daggerdbl ; B 38 -177 513 709 ;
C 180 ; WX 278 ; N periodcentered ; B 87 302 211 427 ;
C 182 ; WX 537 ; N paragraph ; B 48 -177 522 729 ;
C 183 ; WX 350 ; N bullet ; B 50 220 300 470 ;
C 184 ; WX 222 ; N quotesinglbase ; B 64 -128 158 104 ;
C 185 ; WX 333 ; N quotedblbase ; B 47 -128 300 104 ;
C 186 ; WX 333 ; N quotedblright ; B 49 477 302 709 ;
C 187 ; WX 556 ; N guillemotright ; B 98 106 451 438 ;
C 188 ; WX 1000 ; N ellipsis ; B 115 0 885 104 ;
C 189 ; WX 1000 ; N perthousand ; B 9 -22 993 738 ;
C 191 ; WX 611 ; N questiondown ; B 95 -217 528 524 ;
C 193 ; WX 333 ; N grave ; B 22 592 231 740 ;
C 194 ; WX 333 ; N acute ; B 92 592 301 740 ;
C 195 ; WX 333 ; N circumflex ; B 20 591 307 741 ;
C 196 ; WX 333 ; N tilde ; B 5 613 319 717 ;
C 197 ; WX 333 ; N macron ; B 28 631 302 701 ;
C 198 ; WX 333 ; N breve ; B 15 597 316 732 ;
C 199 ; WX 333 ; N dotaccent ; B 115 612 219 716 ;
C 200 ; WX 333 ; N dieresis ; B 30 612 296 715 ;
C 202 ; WX 333 ; N ring ; B 79 579 255 754 ;
C 203 ; WX 333 ; N cedilla ; B 39 -214 287 0 ;
C 205 ; WX 333 ; N hungarumlaut ; B -35 590 348 740 ;
C 206 ; WX 333 ; N ogonek ; B 57 -205 265 0 ;
C 207 ; WX 333 ; N caron ; B 19 591 306 741 ;
C 208 ; WX 1000 ; N emdash ; B -9 240 1001 312 ;
C 225 ; WX 1000 ; N AE ; B 11 0 950 729 ;
C 227 ; WX 370 ; N ordfeminine ; B 37 303 333 742 ;
C 232 ; WX 556 ; N Lslash ; B 0 0 552 729 ;
C 233 ; WX 778 ; N Oslash ; B 30 -23 744 755 ;
C 234 ; WX 1000 ; N OE ; B 43 -20 959 741 ;
C 235 ; WX 365 ; N ordmasculine ; B 40 303 324 742 ;
C 241 ; WX 889 ; N ae ; B 34 -23 845 539 ;
C 245 ; WX 278 ; N dotlessi ; B 94 0 178 524 ;
C 248 ; WX 222 ; N lslash ; B 0 0 212 729 ;
C 249 ; WX 611 ; N oslash ; B 18 -30 529 539 ;
C 250 ; WX 944 ; N oe ; B 40 -23 899 539 ;
C 251 ; WX 611 ; N germandbls ; B 126 -20 566 729 ;
C -1 ; WX 722 ; N Udieresis ; B 85 -23 645 914 ;
C -1 ; WX 722 ; N Uacute ; B 85 -23 645 939 ;
C -1 ; WX 667 ; N Scedilla ; B 45 -214 621 741 ;
C -1 ; WX 611 ; N Tcaron ; B 21 0 593 940 ;
C -1 ; WX 667 ; N Scaron ; B 48 -23 621 940 ;
C -1 ; WX 722 ; N Rcaron ; B 93 0 679 940 ;
C -1 ; WX 722 ; N Racute ; B 93 0 679 939 ;
C -1 ; WX 667 ; N Sacute ; B 48 -23 621 939 ;
C -1 ; WX 778 ; N Otilde ; B 38 -23 742 916 ;
C -1 ; WX 556 ; N ucircumflex ; B 65 -23 482 741 ;
C -1 ; WX 778 ; N Ohungarumlaut ; B 38 -23 742 939 ;
C -1 ; WX 722 ; N Uhungarumlaut ; B 85 -23 645 939 ;
C -1 ; WX 666 ; N Yacute ; B 13 0 661 939 ;
C -1 ; WX 722 ; N Eth ; B 20 0 667 729 ;
C -1 ; WX 722 ; N Dcroat ; B 20 0 667 729 ;
C -1 ; WX 611 ; N Zacute ; B 28 0 583 939 ;
C -1 ; WX 722 ; N Uring ; B 85 -23 645 953 ;
C -1 ; WX 556 ; N gbreve ; B 29 -218 489 732 ;
C -1 ; WX 556 ; N eogonek ; B 40 -204 514 539 ;
C -1 ; WX 556 ; N edotaccent ; B 40 -23 513 716 ;
C -1 ; WX 556 ; N ecaron ; B 40 -23 513 741 ;
C -1 ; WX 722 ; N Ugrave ; B 85 -23 645 939 ;
C -1 ; WX 666 ; N Thorn ; B 91 0 616 729 ;
C -1 ; WX 556 ; N eacute ; B 40 -23 513 740 ;
C -1 ; WX 556 ; N edieresis ; B 40 -23 513 715 ;
C -1 ; WX 635 ; N dcaron ; B 26 -23 648 729 ;
C -1 ; WX 500 ; N ccedilla ; B 31 -214 477 539 ;
C -1 ; WX 500 ; N ccaron ; B 31 -23 477 741 ;
C -1 ; WX 500 ; N cacute ; B 31 -23 477 740 ;
C -1 ; WX 556 ; N aogonek ; B 43 -205 596 539 ;
C -1 ; WX 556 ; N aring ; B 42 -23 535 754 ;
C -1 ; WX 556 ; N atilde ; B 42 -23 535 717 ;
C -1 ; WX 556 ; N abreve ; B 42 -23 535 732 ;
C -1 ; WX 556 ; N egrave ; B 40 -23 513 740 ;
C -1 ; WX 556 ; N agrave ; B 42 -23 535 740 ;
C -1 ; WX 556 ; N aacute ; B 42 -23 535 740 ;
C -1 ; WX 556 ; N adieresis ; B 42 -23 535 715 ;
C -1 ; WX 722 ; N Uogonek ; B 85 -205 645 729 ;
C -1 ; WX 556 ; N ugrave ; B 65 -23 482 740 ;
C -1 ; WX 556 ; N uacute ; B 65 -23 482 740 ;
C -1 ; WX 556 ; N udieresis ; B 65 -23 482 715 ;
C -1 ; WX 308 ; N tcaron ; B 14 -23 321 800 ;
C -1 ; WX 500 ; N scommaaccent ; B 34 -285 459 539 ;
C -1 ; WX 611 ; N Zcaron ; B 28 0 583 940 ;
C -1 ; WX 556 ; N ecircumflex ; B 40 -23 513 741 ;
C -1 ; WX 722 ; N Ucircumflex ; B 85 -23 645 940 ;
C -1 ; WX 556 ; N acircumflex ; B 42 -23 535 741 ;
C -1 ; WX 611 ; N Zdotaccent ; B 28 0 583 915 ;
C -1 ; WX 500 ; N scaron ; B 34 -23 459 741 ;
C -1 ; WX 667 ; N Amacron ; B 17 0 653 900 ;
C -1 ; WX 500 ; N sacute ; B 34 -23 459 740 ;
C -1 ; WX 611 ; N Tcommaaccent ; B 21 -285 593 729 ;
C -1 ; WX 667 ; N Ydieresis ; B 13 0 661 914 ;
C -1 ; WX 555 ; N thorn ; B 54 -218 522 714 ;
C -1 ; WX 667 ; N Emacron ; B 90 0 613 900 ;
C -1 ; WX 778 ; N Ograve ; B 38 -23 742 939 ;
C -1 ; WX 778 ; N Oacute ; B 38 -23 742 939 ;
C -1 ; WX 778 ; N Odieresis ; B 38 -23 742 914 ;
C -1 ; WX 722 ; N Ntilde ; B 76 0 646 916 ;
C -1 ; WX 722 ; N Ncaron ; B 76 0 646 940 ;
C -1 ; WX 722 ; N Nacute ; B 76 0 646 939 ;
C -1 ; WX 556 ; N Lcaron ; B 80 0 533 729 ;
C -1 ; WX 556 ; N Lacute ; B 70 0 533 939 ;
C -1 ; WX 278 ; N Idotaccent ; B 92 0 196 915 ;
C -1 ; WX 333 ; N racute ; B 69 0 331 740 ;
C -1 ; WX 278 ; N Icircumflex ; B -1 0 286 940 ;
C -1 ; WX 556 ; N ohungarumlaut ; B 36 -23 526 740 ;
C -1 ; WX 556 ; N otilde ; B 36 -23 510 717 ;
C -1 ; WX 556 ; N Euro ; B 2 -23 543 709 ;
C -1 ; WX 556 ; N ocircumflex ; B 36 -23 510 741 ;
C -1 ; WX 351 ; N onesuperior ; B 61 284 222 709 ;
C -1 ; WX 351 ; N twosuperior ; B 19 284 326 709 ;
C -1 ; WX 351 ; N threesuperior ; B 16 270 322 709 ;
C -1 ; WX 278 ; N Igrave ; B 1 0 210 939 ;
C -1 ; WX 278 ; N Iacute ; B 71 0 280 939 ;
C -1 ; WX 278 ; N Imacron ; B 20 0 274 900 ;
C -1 ; WX 278 ; N Iogonek ; B 66 -204 234 729 ;
C -1 ; WX 278 ; N Idieresis ; B 9 0 275 907 ;
C -1 ; WX 778 ; N Gbreve ; B 44 -23 709 931 ;
C -1 ; WX 722 ; N Umacron ; B 85 -23 645 900 ;
C -1 ; WX 667 ; N Kcommaaccent ; B 79 -285 658 729 ;
C -1 ; WX 556 ; N ograve ; B 36 -23 510 740 ;
C -1 ; WX 667 ; N Scommaaccent ; B 48 -285 621 741 ;
C -1 ; WX 667 ; N Eogonek ; B 90 -205 652 729 ;
C -1 ; WX 556 ; N oacute ; B 36 -23 510 740 ;
C -1 ; WX 667 ; N Edotaccent ; B 90 0 613 915 ;
C -1 ; WX 222 ; N iogonek ; B 25 -204 190 729 ;
C -1 ; WX 556 ; N gcommaaccent ; B 29 -218 489 817 ;
C -1 ; WX 556 ; N odieresis ; B 36 -23 510 715 ;
C -1 ; WX 556 ; N ntilde ; B 70 0 487 717 ;
C -1 ; WX 556 ; N ncaron ; B 70 0 487 741 ;
C -1 ; WX 667 ; N Ecaron ; B 90 0 613 940 ;
C -1 ; WX 667 ; N Ecircumflex ; B 90 0 613 940 ;
C -1 ; WX 500 ; N scedilla ; B 34 -214 459 539 ;
C -1 ; WX 333 ; N rcaron ; B 48 0 335 741 ;
C -1 ; WX 667 ; N Egrave ; B 90 0 613 939 ;
C -1 ; WX 667 ; N Eacute ; B 90 0 613 939 ;
C -1 ; WX 778 ; N Gcommaaccent ; B 44 -285 709 741 ;
C -1 ; WX 722 ; N Rcommaaccent ; B 93 -285 679 729 ;
C -1 ; WX 667 ; N Edieresis ; B 90 0 613 914 ;
C -1 ; WX 556 ; N nacute ; B 70 0 487 740 ;
C -1 ; WX 556 ; N uogonek ; B 65 -204 521 524 ;
C -1 ; WX 556 ; N umacron ; B 65 -23 482 701 ;
C -1 ; WX 722 ; N Dcaron ; B 89 0 667 940 ;
C -1 ; WX 292 ; N lcaron ; B 68 0 305 729 ;
C -1 ; WX 722 ; N Ccaron ; B 48 -23 677 940 ;
C -1 ; WX 722 ; N Cacute ; B 48 -23 677 939 ;
C -1 ; WX 722 ; N Ccedilla ; B 48 -214 677 741 ;
C -1 ; WX 606 ; N degree ; B 151 383 454 686 ;
C -1 ; WX 667 ; N Aogonek ; B 17 -205 692 729 ;
C -1 ; WX 584 ; N minus ; B 40 197 544 267 ;
C -1 ; WX 584 ; N multiply ; B 95 34 488 427 ;
C -1 ; WX 584 ; N divide ; B 50 0 534 472 ;
C -1 ; WX 667 ; N Aring ; B 17 0 653 953 ;
C -1 ; WX 1000 ; N trademark ; B 63 292 938 729 ;
C -1 ; WX 333 ; N rcommaaccent ; B 65 -285 321 539 ;
C -1 ; WX 222 ; N lacute ; B 63 0 272 939 ;
C -1 ; WX 556 ; N omacron ; B 36 -23 510 701 ;
C -1 ; WX 667 ; N Atilde ; B 17 0 653 916 ;
C -1 ; WX 278 ; N icircumflex ; B -7 0 280 741 ;
C -1 ; WX 278 ; N igrave ; B -5 0 204 740 ;
C -1 ; WX 556 ; N ncommaaccent ; B 70 -285 487 539 ;
C -1 ; WX 222 ; N lcommaaccent ; B 63 -285 163 729 ;
C -1 ; WX 584 ; N plusminus ; B 50 -11 534 623 ;
C -1 ; WX 869 ; N onehalf ; B 61 -20 844 709 ;
C -1 ; WX 869 ; N onequarter ; B 61 -20 849 709 ;
C -1 ; WX 869 ; N threequarters ; B 16 -20 849 709 ;
C -1 ; WX 278 ; N iacute ; B 65 0 274 740 ;
C -1 ; WX 667 ; N Abreve ; B 17 0 653 931 ;
C -1 ; WX 500 ; N kcommaaccent ; B 58 -285 502 729 ;
C -1 ; WX 778 ; N Omacron ; B 38 -23 742 900 ;
C -1 ; WX 222 ; N imacron ; B -16 0 231 701 ;
C -1 ; WX 556 ; N emacron ; B 40 -23 513 701 ;
C -1 ; WX 556 ; N amacron ; B 42 -23 535 701 ;
C -1 ; WX 278 ; N tcommaaccent ; B 14 -285 254 668 ;
C -1 ; WX 500 ; N ydieresis ; B 20 -218 478 715 ;
C -1 ; WX 500 ; N zdotaccent ; B 31 0 457 716 ;
C -1 ; WX 500 ; N zcaron ; B 31 0 457 741 ;
C -1 ; WX 500 ; N zacute ; B 31 0 457 740 ;
C -1 ; WX 500 ; N yacute ; B 20 -218 478 740 ;
C -1 ; WX 556 ; N uhungarumlaut ; B 65 -23 530 740 ;
C -1 ; WX 556 ; N eth ; B 36 -23 510 743 ;
C -1 ; WX 556 ; N uring ; B 65 -23 482 754 ;
C -1 ; WX 778 ; N Ocircumflex ; B 38 -23 742 940 ;
C -1 ; WX 333 ; N commaaccent ; B 116 -285 216 -60 ;
C -1 ; WX 737 ; N copyright ; B -13 -22 751 742 ;
C -1 ; WX 737 ; N registered ; B -13 -22 751 742 ;
C -1 ; WX 667 ; N Acircumflex ; B 17 0 653 940 ;
C -1 ; WX 278 ; N idieresis ; B 3 0 269 708 ;
C -1 ; WX 489 ; N lozenge ; B 16 0 462 744 ;
C -1 ; WX 711 ; N Delta ; B 10 0 701 729 ;
C -1 ; WX 548 ; N notequal ; B 32 -25 516 486 ;
C -1 ; WX 542 ; N radical ; B 7 -36 512 913 ;
C -1 ; WX 667 ; N Agrave ; B 17 0 653 939 ;
C -1 ; WX 667 ; N Aacute ; B 17 0 653 939 ;
C -1 ; WX 584 ; N lessequal ; B 45 -11 534 639 ;
C -1 ; WX 584 ; N greaterequal ; B 45 -11 534 639 ;
C -1 ; WX 584 ; N logicalnot ; B 40 86 544 375 ;
C -1 ; WX 711 ; N summation ; B 17 -97 694 760 ;
C -1 ; WX 490 ; N partialdiff ; B 22 -15 458 750 ;
C -1 ; WX 722 ; N Ncommaaccent ; B 76 -285 646 729 ;
C -1 ; WX 556 ; N dcroat ; B 26 -23 557 729 ;
C -1 ; WX 260 ; N brokenbar ; B 100 -212 160 729 ;
C -1 ; WX 556 ; N Lcommaaccent ; B 80 -285 533 729 ;
C -1 ; WX 667 ; N Adieresis ; B 17 0 653 914 ;
C -1 ; WX 556 ; N mu ; B 65 -220 544 524 ;
C -1 ; WX 278 ; N .notdef ; B 191 0 191 0 ;
EndCharMetrics
StartKernData
StartKernPairs 998
KPX A C -36
KPX A Ccedilla -36
KPX A G -35
KPX A O -33
KPX A Odieresis -33
KPX A Q -32
KPX A T -93
KPX A U -37
KPX A Uacute -37
KPX A Ucircumflex -37
KPX A Udieresis -37
KPX A Ugrave -37
KPX A V -75
KPX A W -51
KPX A Y -99
KPX A a -4
KPX A b 4
KPX A c -11
KPX A ccedilla -10
KPX A comma 5
KPX A d -8
KPX A e -16
KPX A g -10
KPX A guillemotleft -44
KPX A guilsinglleft -40
KPX A hyphen -3
KPX A o -13
KPX A period 5
KPX A q -8
KPX A quotedblright -56
KPX A quoteright -65
KPX A t -16
KPX A u -12
KPX A v -31
KPX A w -21
KPX A y -34
KPX Aacute C -36
KPX Aacute G -35
KPX Aacute O -33
KPX Aacute Q -32
KPX Aacute T -93
KPX Aacute U -37
KPX Aacute V -75
KPX Aacute W -51
KPX Aacute Y -99
KPX Aacute a -4
KPX Aacute b 4
KPX Aacute c -11
KPX Aacute comma 5
KPX Aacute d -8
KPX Aacute e -16
KPX Aacute g -10
KPX Aacute guillemotleft -44
KPX Aacute guilsinglleft -40
KPX Aacute hyphen -3
KPX Aacute o -13
KPX Aacute period 5
KPX Aacute q -8
KPX Aacute quoteright -65
KPX Aacute t -16
KPX Aacute u -12
KPX Aacute v -31
KPX Aacute w -21
KPX Aacute y -34
KPX Acircumflex C -36
KPX Acircumflex G -35
KPX Acircumflex O -33
KPX Acircumflex Q -32
KPX Acircumflex T -93
KPX Acircumflex U -37
KPX Acircumflex V -75
KPX Acircumflex W -51
KPX Acircumflex Y -99
KPX Acircumflex comma 5
KPX Acircumflex period 5
KPX Adieresis C -36
KPX Adieresis G -35
KPX Adieresis O -33
KPX Adieresis Q -32
KPX Adieresis T -93
KPX Adieresis U -37
KPX Adieresis V -75
KPX Adieresis W -51
KPX Adieresis Y -99
KPX Adieresis a -4
KPX Adieresis b 4
KPX Adieresis c -11
KPX Adieresis comma 5
KPX Adieresis d -8
KPX Adieresis g -10
KPX Adieresis guillemotleft -44
KPX Adieresis guilsinglleft -40
KPX Adieresis hyphen -3
KPX Adieresis o -13
KPX Adieresis period 5
KPX Adieresis q -8
KPX Adieresis quotedblright -56
KPX Adieresis quoteright -65
KPX Adieresis t -16
KPX Adieresis u -12
KPX Adieresis v -31
KPX Adieresis w -21
KPX Adieresis y -34
KPX Agrave C -36
KPX Agrave G -35
KPX Agrave O -33
KPX Agrave Q -32
KPX Agrave T -93
KPX Agrave U -37
KPX Agrave V -75
KPX Agrave W -51
KPX Agrave Y -99
KPX Agrave comma 5
KPX Agrave period 5
KPX Aring C -36
KPX Aring G -35
KPX Aring O -33
KPX Aring Q -32
KPX Aring T -93
KPX Aring U -37
KPX Aring V -75
KPX Aring W -51
KPX Aring Y -99
KPX Aring a -4
KPX Aring b 4
KPX Aring c -11
KPX Aring comma 5
KPX Aring d -8
KPX Aring e -16
KPX Aring g -10
KPX Aring guillemotleft -44
KPX Aring guilsinglleft -40
KPX Aring hyphen -3
KPX Aring o -13
KPX Aring period 5
KPX Aring q -8
KPX Aring quotedblright -56
KPX Aring quoteright -65
KPX Aring t -16
KPX Aring u -12
KPX Aring v -31
KPX Aring w -21
KPX Aring y -34
KPX Atilde C -36
KPX Atilde G -35
KPX Atilde O -33
KPX Atilde Q -32
KPX Atilde T -93
KPX Atilde U -37
KPX Atilde V -75
KPX Atilde W -51
KPX Atilde Y -99
KPX Atilde comma 5
KPX Atilde period 5
KPX B A -21
KPX B AE -21
KPX B Aacute -21
KPX B Acircumflex -21
KPX B Adieresis -21
KPX B Aring -21
KPX B Atilde -21
KPX B O -7
KPX B OE -5
KPX B Oacute -7
KPX B Ocircumflex -7
KPX B Odieresis -7
KPX B Ograve -7
KPX B Oslash -1
KPX B V -41
KPX B W -25
KPX B Y -44
KPX C A -32
KPX C AE -33
KPX C Aacute -32
KPX C Adieresis -32
KPX C Aring -32
KPX C H -12
KPX C K -10
KPX C O -8
KPX C Oacute -8
KPX C Odieresis -8
KPX Ccedilla A -31
KPX D A -42
KPX D Aacute -42
KPX D Acircumflex -42
KPX D Adieresis -42
KPX D Agrave -42
KPX D Aring -42
KPX D Atilde -42
KPX D J -5
KPX D T -45
KPX D V -51
KPX D W -29
KPX D X -53
KPX D Y -63
KPX F A -69
KPX F Aacute -69
KPX F Acircumflex -69
KPX F Adieresis -69
KPX F Agrave -69
KPX F Aring -69
KPX F Atilde -69
KPX F J -51
KPX F O -22
KPX F Odieresis -22
KPX F a -33
KPX F aacute -33
KPX F adieresis -33
KPX F ae -29
KPX F aring -33
KPX F comma -108
KPX F e -24
KPX F eacute -24
KPX F hyphen -14
KPX F i -10
KPX F j -12
KPX F o -21
KPX F oacute -21
KPX F odieresis -21
KPX F oe -23
KPX F oslash -21
KPX F period -108
KPX F r -35
KPX F u -33
KPX G A -6
KPX G AE -3
KPX G Aacute -6
KPX G Acircumflex -6
KPX G Adieresis -6
KPX G Agrave -6
KPX G Aring -6
KPX G Atilde -6
KPX G T -44
KPX G V -50
KPX G W -28
KPX G Y -62
KPX J A -32
KPX J AE -31
KPX J Adieresis -32
KPX J Aring -32
KPX K C -51
KPX K G -51
KPX K O -48
KPX K OE -45
KPX K Oacute -48
KPX K Odieresis -48
KPX K S -38
KPX K T 20
KPX K a -11
KPX K adieresis -11
KPX K ae -7
KPX K aring -11
KPX K e -32
KPX K hyphen -47
KPX K o -29
KPX K oacute -29
KPX K odieresis -29
KPX K u -19
KPX K udieresis -19
KPX K y -62
KPX L A 17
KPX L AE 20
KPX L Aacute 17
KPX L Adieresis 17
KPX L Aring 17
KPX L C -41
KPX L Ccedilla -37
KPX L G -42
KPX L O -41
KPX L Oacute -41
KPX L Ocircumflex -41
KPX L Odieresis -41
KPX L Ograve -41
KPX L Otilde -41
KPX L S -19
KPX L T -105
KPX L U -35
KPX L Udieresis -35
KPX L V -105
KPX L W -68
KPX L Y -121
KPX L hyphen -125
KPX L quotedblright -141
KPX L quoteright -149
KPX L u -7
KPX L udieresis -7
KPX L y -56
KPX N A -9
KPX N AE -6
KPX N Aacute -9
KPX N Adieresis -9
KPX N Aring -9
KPX N C -3
KPX N Ccedilla -3
KPX N G -2
KPX N O 0
KPX N Oacute 0
KPX N Odieresis 0
KPX N a -5
KPX N aacute -5
KPX N adieresis -5
KPX N ae -2
KPX N aring -5
KPX N comma -7
KPX N e 0
KPX N eacute 0
KPX N o 2
KPX N oacute 2
KPX N odieresis 2
KPX N oslash 4
KPX N period -7
KPX N u 0
KPX N udieresis 0
KPX O A -35
KPX O AE -39
KPX O Aacute -35
KPX O Adieresis -35
KPX O Aring -35
KPX O T -42
KPX O V -45
KPX O W -23
KPX O X -46
KPX O Y -59
KPX Oacute A -35
KPX Oacute T -42
KPX Oacute V -45
KPX Oacute W -23
KPX Oacute Y -59
KPX Ocircumflex T -42
KPX Ocircumflex V -45
KPX Ocircumflex Y -59
KPX Odieresis A -35
KPX Odieresis T -42
KPX Odieresis V -45
KPX Odieresis W -23
KPX Odieresis X -46
KPX Odieresis Y -59
KPX Ograve T -42
KPX Ograve V -45
KPX Ograve Y -59
KPX Oslash A -33
KPX Otilde T -42
KPX Otilde V -45
KPX Otilde Y -59
KPX P A -78
KPX P AE -86
KPX P Aacute -78
KPX P Adieresis -78
KPX P Aring -78
KPX P J -78
KPX P a -28
KPX P aacute -28
KPX P adieresis -28
KPX P ae -24
KPX P aring -28
KPX P comma -135
KPX P e -31
KPX P eacute -31
KPX P hyphen -40
KPX P o -27
KPX P oacute -27
KPX P odieresis -27
KPX P oe -28
KPX P oslash -27
KPX P period -135
KPX R C -16
KPX R Ccedilla -16
KPX R G -15
KPX R O -13
KPX R OE -11
KPX R Oacute -13
KPX R Odieresis -13
KPX R T -23
KPX R U -17
KPX R Udieresis -17
KPX R V -39
KPX R W -27
KPX R Y -43
KPX R a -15
KPX R aacute -15
KPX R adieresis -15
KPX R ae -12
KPX R aring -15
KPX R e -12
KPX R eacute -12
KPX R hyphen -2
KPX R o -9
KPX R oacute -9
KPX R odieresis -9
KPX R oe -11
KPX R u -9
KPX R uacute -9
KPX R udieresis -9
KPX R y -8
KPX S A -22
KPX S AE -22
KPX S Aacute -22
KPX S Adieresis -22
KPX S Aring -22
KPX S T -28
KPX S V -42
KPX S W -28
KPX S Y -48
KPX S t -3
KPX T A -95
KPX T AE -97
KPX T Aacute -95
KPX T Acircumflex -95
KPX T Adieresis -95
KPX T Agrave -95
KPX T Aring -95
KPX T Atilde -95
KPX T C -44
KPX T G -45
KPX T J -100
KPX T O -42
KPX T OE -35
KPX T Oacute -42
KPX T Ocircumflex -42
KPX T Odieresis -42
KPX T Ograve -42
KPX T Oslash -41
KPX T Otilde -42
KPX T S -24
KPX T V 12
KPX T W 16
KPX T Y 20
KPX T a -100
KPX T ae -97
KPX T c -90
KPX T colon -133
KPX T comma -100
KPX T e -95
KPX T g -89
KPX T guillemotleft -121
KPX T guilsinglleft -117
KPX T hyphen -77
KPX T i -3
KPX T j -5
KPX T o -92
KPX T oslash -87
KPX T period -100
KPX T r -92
KPX T s -92
KPX T semicolon -129
KPX T u -91
KPX T v -95
KPX T w -93
KPX T y -100
KPX U A -36
KPX U AE -39
KPX U Aacute -36
KPX U Acircumflex -36
KPX U Adieresis -36
KPX U Aring -36
KPX U Atilde -36
KPX U comma -27
KPX U m -4
KPX U n -4
KPX U p 3
KPX U period -25
KPX U r -4
KPX Uacute A -36
KPX Uacute comma -27
KPX Uacute m -4
KPX Uacute n -4
KPX Uacute p 3
KPX Uacute period -25
KPX Uacute r -4
KPX Ucircumflex A -36
KPX Udieresis A -36
KPX Udieresis b 3
KPX Udieresis comma -27
KPX Udieresis m -4
KPX Udieresis n -4
KPX Udieresis p 3
KPX Udieresis period -25
KPX Udieresis r -4
KPX Ugrave A -36
KPX V A -71
KPX V AE -78
KPX V Aacute -71
KPX V Acircumflex -71
KPX V Adieresis -71
KPX V Agrave -71
KPX V Aring -71
KPX V Atilde -71
KPX V C -43
KPX V G -42
KPX V O -40
KPX V Oacute -40
KPX V Ocircumflex -40
KPX V Odieresis -40
KPX V Ograve -40
KPX V Oslash -33
KPX V Otilde -40
KPX V S -35
KPX V T 15
KPX V a -59
KPX V ae -55
KPX V colon -66
KPX V comma -89
KPX V e -57
KPX V g -50
KPX V guillemotleft -83
KPX V guilsinglleft -80
KPX V hyphen -38
KPX V i -5
KPX V o -54
KPX V oslash -50
KPX V period -89
KPX V r -42
KPX V semicolon -66
KPX V u -41
KPX V y -20
KPX W A -50
KPX W AE -56
KPX W Aacute -50
KPX W Acircumflex -50
KPX W Adieresis -50
KPX W Agrave -50
KPX W Aring -50
KPX W Atilde -50
KPX W C -23
KPX W G -22
KPX W O -20
KPX W Oacute -20
KPX W Ocircumflex -20
KPX W Odieresis -20
KPX W Ograve -20
KPX W Oslash -13
KPX W Otilde -20
KPX W S -24
KPX W T 19
KPX W a -38
KPX W ae -34
KPX W colon -52
KPX W comma -56
KPX W e -32
KPX W g -25
KPX W guillemotleft -58
KPX W guilsinglleft -54
KPX W hyphen -13
KPX W i -1
KPX W o -29
KPX W oslash -25
KPX W period -56
KPX W r -28
KPX W semicolon -53
KPX W u -28
KPX W y -6
KPX X C -48
KPX X O -45
KPX X Odieresis -45
KPX X Q -44
KPX X a -15
KPX X e -36
KPX X hyphen -51
KPX X o -33
KPX X u -24
KPX X y -61
KPX Y A -96
KPX Y AE -103
KPX Y Aacute -96
KPX Y Acircumflex -96
KPX Y Adieresis -96
KPX Y Agrave -96
KPX Y Aring -96
KPX Y Atilde -96
KPX Y C -58
KPX Y G -58
KPX Y O -56
KPX Y Oacute -56
KPX Y Ocircumflex -56
KPX Y Odieresis -56
KPX Y Ograve -56
KPX Y Oslash -54
KPX Y Otilde -56
KPX Y S -41
KPX Y T 23
KPX Y a -88
KPX Y ae -84
KPX Y colon -87
KPX Y comma -111
KPX Y e -89
KPX Y g -83
KPX Y guillemotleft -123
KPX Y guilsinglleft -119
KPX Y hyphen -84
KPX Y i 3
KPX Y o -86
KPX Y oslash -82
KPX Y p -54
KPX Y period -111
KPX Y semicolon -88
KPX Y u -63
KPX Y v -36
KPX Z v -33
KPX Z y -38
KPX a j -4
KPX a quoteright -23
KPX a v -21
KPX a w -13
KPX a y -26
KPX aacute v -21
KPX aacute w -13
KPX aacute y -26
KPX adieresis v -21
KPX adieresis w -13
KPX adieresis y -26
KPX ae v -16
KPX ae w -10
KPX ae y -20
KPX agrave v -21
KPX agrave w -13
KPX agrave y -26
KPX aring v -21
KPX aring w -13
KPX aring y -26
KPX b v -11
KPX b w -3
KPX b y -15
KPX c h 1
KPX c k 7
KPX comma one -100
KPX comma quotedblright -41
KPX comma quoteright -50
KPX e quoteright -18
KPX e t -10
KPX e v -15
KPX e w -9
KPX e x -27
KPX e y -19
KPX eacute v -15
KPX eacute w -9
KPX eacute y -19
KPX ecircumflex v -15
KPX ecircumflex w -9
KPX ecircumflex y -19
KPX eight four 1
KPX eight one -48
KPX eight seven -33
KPX f a -9
KPX f aacute -9
KPX f adieresis -9
KPX f ae -5
KPX f aring -9
KPX f e -15
KPX f eacute -15
KPX f f 22
KPX f i -2
KPX f j -4
KPX f l -3
KPX f o -10
KPX f oacute -10
KPX f odieresis -10
KPX f oe -12
KPX f oslash -9
KPX f quoteright 0
KPX f s 0
KPX f t 24
KPX five four 1
KPX five one -76
KPX five seven -26
KPX four four 5
KPX four one -84
KPX four seven -56
KPX g a -5
KPX g adieresis -5
KPX g ae -1
KPX g aring -5
KPX g e 0
KPX g eacute 0
KPX g l 0
KPX g oacute 3
KPX g odieresis 3
KPX g r 0
KPX guillemotright A -50
KPX guillemotright AE -54
KPX guillemotright Aacute -50
KPX guillemotright Adieresis -50
KPX guillemotright Aring -50
KPX guillemotright T -126
KPX guillemotright V -93
KPX guillemotright W -66
KPX guillemotright Y -133
KPX guilsinglright A -44
KPX guilsinglright AE -48
KPX guilsinglright Aacute -44
KPX guilsinglright Adieresis -44
KPX guilsinglright Aring -44
KPX guilsinglright T -121
KPX guilsinglright V -88
KPX guilsinglright W -60
KPX guilsinglright Y -128
KPX h quoteright -15
KPX h y -18
KPX hyphen A -7
KPX hyphen AE -11
KPX hyphen Aacute -7
KPX hyphen Adieresis -7
KPX hyphen Aring -7
KPX hyphen T -80
KPX hyphen V -46
KPX hyphen W -19
KPX hyphen Y -92
KPX i T -7
KPX i j -3
KPX k a -2
KPX k aacute -2
KPX k adieresis -2
KPX k ae 2
KPX k aring -2
KPX k comma 0
KPX k e -21
KPX k eacute -21
KPX k g -16
KPX k hyphen -41
KPX k o -19
KPX k oacute -19
KPX k odieresis -19
KPX k period 0
KPX k s -3
KPX k u -11
KPX k udieresis -6
KPX l v 0
KPX l y -5
KPX m p 5
KPX m v -13
KPX m w -7
KPX m y -18
KPX n T -96
KPX n p 5
KPX n quoteright -14
KPX n v -13
KPX n w -7
KPX n y -18
KPX nine four -3
KPX nine one -43
KPX nine seven -37
KPX o T -99
KPX o quoteright -21
KPX o t -10
KPX o v -18
KPX o w -10
KPX o x -27
KPX o y -22
KPX oacute v -18
KPX oacute w -10
KPX oacute y -22
KPX ocircumflex t -10
KPX odieresis t -10
KPX odieresis v -18
KPX odieresis w -10
KPX odieresis x -27
KPX odieresis y -22
KPX ograve v -18
KPX ograve w -10
KPX ograve y -22
KPX one comma -74
KPX one eight -65
KPX one five -67
KPX one four -81
KPX one nine -65
KPX one one -118
KPX one period -74
KPX one seven -90
KPX one six -62
KPX one three -67
KPX one two -69
KPX one zero -62
KPX p t -4
KPX p y -16
KPX period one -101
KPX period quotedblright -41
KPX period quoteright -51
KPX q c 8
KPX q u 4
KPX quotedblbase A 30
KPX quotedblbase AE 30
KPX quotedblbase T -75
KPX quotedblbase V -69
KPX quotedblbase W -34
KPX quotedblbase Y -91
KPX quotedblleft A -52
KPX quotedblleft AE -64
KPX quotedblleft Aacute -52
KPX quotedblleft Adieresis -52
KPX quotedblleft Aring -52
KPX quotedblleft T 9
KPX quotedblleft V 15
KPX quotedblleft W 27
KPX quotedblleft Y 5
KPX quotedblright A -53
KPX quotedblright AE -66
KPX quotedblright Aacute -53
KPX quotedblright Adieresis -53
KPX quotedblright Aring -53
KPX quotedblright T 11
KPX quotedblright V 15
KPX quotedblright W 26
KPX quotedblright Y 7
KPX quoteleft A -67
KPX quoteleft AE -79
KPX quoteleft Aacute -67
KPX quoteleft Adieresis -67
KPX quoteleft Aring -67
KPX quoteleft T -5
KPX quoteleft V 0
KPX quoteleft W 12
KPX quoteleft Y -9
KPX quoteright A -72
KPX quoteright AE -85
KPX quoteright Aacute -72
KPX quoteright Adieresis -72
KPX quoteright Aring -72
KPX quoteright comma -60
KPX quoteright d -20
KPX quoteright o -26
KPX quoteright period -60
KPX quoteright r -18
KPX quoteright s -18
KPX quoteright t -7
KPX quoteright v -2
KPX quoteright w 2
KPX quoteright y -6
KPX r a -5
KPX r aacute -5
KPX r acircumflex -5
KPX r adieresis -5
KPX r ae -1
KPX r agrave -5
KPX r aring -5
KPX r c -6
KPX r ccedilla -9
KPX r colon -22
KPX r comma -69
KPX r d -1
KPX r e -11
KPX r eacute -11
KPX r ecircumflex -11
KPX r egrave -11
KPX r f 26
KPX r g -4
KPX r h 0
KPX r hyphen -47
KPX r i 1
KPX r j 0
KPX r k 6
KPX r l 1
KPX r m 0
KPX r n 0
KPX r o -6
KPX r oacute -6
KPX r ocircumflex -6
KPX r odieresis -6
KPX r oe -8
KPX r ograve -6
KPX r oslash -6
KPX r p 8
KPX r period -69
KPX r q -3
KPX r quoteright 1
KPX r r 0
KPX r s 4
KPX r semicolon -22
KPX r t 28
KPX r u 2
KPX r v 29
KPX r w 31
KPX r x 20
KPX r y 24
KPX r z 9
KPX s quoteright -22
KPX s t -3
KPX seven colon -77
KPX seven comma -119
KPX seven eight -28
KPX seven five -30
KPX seven four -93
KPX seven one -53
KPX seven period -119
KPX seven seven -4
KPX seven six -40
KPX seven three -23
KPX seven two -28
KPX six four 1
KPX six one -43
KPX six seven -30
KPX t S -8
KPX t a -1
KPX t aacute -1
KPX t adieresis -1
KPX t ae 2
KPX t aring -1
KPX t colon -28
KPX t e -14
KPX t eacute -14
KPX t h -3
KPX t o -12
KPX t oacute -12
KPX t odieresis -12
KPX t quoteright -1
KPX t semicolon -28
KPX three four -2
KPX three one -49
KPX three seven -33
KPX two four -37
KPX two one -36
KPX two seven -25
KPX u quoteright -8
KPX v a -18
KPX v aacute -18
KPX v acircumflex -18
KPX v adieresis -18
KPX v ae -14
KPX v agrave -18
KPX v aring -18
KPX v atilde -18
KPX v c -16
KPX v colon -23
KPX v comma -69
KPX v e -21
KPX v eacute -21
KPX v ecircumflex -21
KPX v egrave -21
KPX v g -14
KPX v hyphen -12
KPX v l 0
KPX v o -17
KPX v oacute -17
KPX v odieresis -17
KPX v ograve -17
KPX v oslash -17
KPX v period -69
KPX v s -9
KPX v semicolon -23
KPX w a -15
KPX w aacute -15
KPX w acircumflex -15
KPX w adieresis -15
KPX w ae -11
KPX w agrave -15
KPX w aring -15
KPX w atilde -15
KPX w c -7
KPX w colon -23
KPX w comma -50
KPX w e -12
KPX w eacute -12
KPX w ecircumflex -12
KPX w egrave -12
KPX w g -6
KPX w hyphen -1
KPX w l 0
KPX w o -9
KPX w oacute -9
KPX w odieresis -9
KPX w ograve -9
KPX w oslash -6
KPX w period -50
KPX w s -5
KPX w semicolon -23
KPX x a -17
KPX x c -23
KPX x e -28
KPX x eacute -28
KPX x o -25
KPX x q -20
KPX y a -22
KPX y aacute -22
KPX y acircumflex -22
KPX y adieresis -22
KPX y ae -18
KPX y agrave -22
KPX y aring -22
KPX y atilde -22
KPX y c -19
KPX y colon -27
KPX y comma -70
KPX y e -24
KPX y eacute -24
KPX y ecircumflex -24
KPX y egrave -24
KPX y g -17
KPX y hyphen -14
KPX y l -4
KPX y o -20
KPX y oacute -20
KPX y odieresis -20
KPX y ograve -20
KPX y oslash -19
KPX y period -70
KPX y s -12
KPX y semicolon -27
KPX zero four -2
KPX zero one -46
KPX zero seven -39
EndKernPairs
EndKernData
EndFontMetrics
'
%
classmethod: CustomFont
nimbusSansLReguCOPYING
"		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

		    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The 'Program', below,
refers to any such program or work, and a 'work based on the Program'
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term 'modification'.)  Each licensee is addressed as 'you'.

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and 'any
later version', you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

			    NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM 'AS IS' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

		     END OF TERMS AND CONDITIONS

	    How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the 'copyright' line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) year  name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a 'copyright disclaimer' for the program, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License."
%
classmethod: CustomFont
nimbusSansLReguPfb
	"included for completeness - not used by the system"

	^ByteArray fromASCII85String: 'J,t`7!!";g:fAr3A8bpg7W30d/MSk33Zq13D.7X/;djQ;/Q-.mFW`Ck0K!8G,pcN)FDPML+AQWf@Wc`
j@;\aj;IsK`$7-ucEb/[$Bl@lW@<?''A+B3#s+AH9b+>PVn0ebXB3''&oO+>PW)1C>ES6ZQaHFDl1\+A
d)mD/X_C:h=`[EboH-$7-udDe!p,ASuTgF`;;9Bk:gQATMd4Ear[%3Zr$QDKI!rBl.=%F&QLb9J''.RB
6=P-+@C''dH#dV3BQP@F<DlmI.k</<DfBuBBkM+$+>Gl:3?VdV+=L5f=",XM+@Kd^BkM<+-6P]fG%GK.
E,B0(F:''<:7qHRLEaa''$A0>?,+AcZY7:^+S+>GK&+=LoFFDs8o05tN3ARoLs/otVWDImoC.1.@I7;c
X''Df''?&DKKq,7W30d6tp[Q@ruX0GqVp,D.7X/;djQ;/Q-.mFWbI;Dg-)G02?4u@Wc`j@;\aj;IsK`+
D,>*A7fatF<G+:E%b4/BlS9,8OO\:DJs`:HXq8<$85CsBlS9,8OO\6ATT%P0JY=B0JXb^E?Jh;@q[MbD
f0YrH#R=;B4Z0-0d(%I+CT.uI=#pOE$/b$Cia09BkCpmF(G]*F(''6''+EVXHAUSo;@;L!rI;*;)Cia0
9HY-]&F(Kc6An>e"AI:.H+Co1rF<G%(B5)5j01KktFB!O)AKW]MA7]?[01KktFA61cEbTb@>;.Z`0JO\
(+>=ol/het6+>=ol+C0#!@:X:oCj@.6AS)9&7W30d:18!N+>6K(D.7X/;djQ;/Q-.mFWb4+AdU1\Df0Y
`6>q)k>:hQg1a"A*3&Mg50JG4(3AiT8?#jLbA8c@%Gp$X/AdU1kDJ=*5AP#942)$d>3A<32A7]?[02Q(
kDKJj''E+L.G+Co%q$84keDKJHfAoAeP+Co1rF<G+:E$/V$B5)5j+>7nLEcYr5DBL>^/hf.k.3NYB@:X
:oCj@.6AS)8l02?G-Bk(]s-pqolH#dV3BQPA%0JtOa;HI*W2)-U3/44>pH#dV3BQP@O3B9)B@X0)$0Jt
Oa;HI*W2)-U3+@Kd^BkM<+-6P]fG%GK.E,B0(F=A>QART+fDJXS@A7]?[+>63,ChujTD.Oh<:2+QSF`S
[(@;^-/9H[5EB6A$!E[`,OART+fDJXS@A7]?[+>62mD/!g3:18!N+=L!!D.7X/+B)]dF!+.*+ED%%A8c
@%Gp$X/AdTY6=(Q)YBQP@F;IsK`Cgh?5+ED%%A8c@%Gp$X/AdTY68T\BWBk''GHB5D-%0Han;AdTY6Bl
caXG\(D^Blmiu+D,%uF(HJ)AS)8l03)n#ATDU$DIlX_F(o`1Df-[L0f:[.A7]?[+>6`4A7]dtBl7K]BP
CslDImm1+>khqA7]?[ASu$$Eb/ZiDf0B:+Co%q$84hc@rGmlDJ((jFCB&t@<,mIDI[TqBl7Q+A7]?[@s
)g4ASuU#Bk)6-ASu#c@s)g4ASuU%Bl%?''AS$*t@g[_fUo+1mC"WJP6o<"K&p"UprDRN"%h09cbqjK2-
?dXAC0Ru1_$L@C]p!X8.Ntou(eCPEEl,*Pl&Wj=q^u]5=S5YL*eo%>9*_F]25Veni3#WL)Qk(5SuKD<$
n>NZJTlMUru#..DhV4`>7NG0qR!b=IaNTiW/KJ''m2g#1iTa@T<ndo-\MD2"E=YhHLcRL_S%Aq-qR)(0
YL.`?_T6BFKpCiofoMRa=roS;3$XQQ6''@bV:LE84TK,6n]c@gU[eetZSJAQOHTOD:)fSDJh%,JdhZ^7
7FH]nQH=hJ`LI8@rODEkhNgW8@&5^q8!/>=DX(_ZD>/1&XI[.LCb0n;S;h4mN@EcAbQj=q>%Dhgg`>s6
/;X3d\$N,;ZEchFiUf8J[A7GR*DptBTp,-4j(lLH\/=S]?i1:N%B(?&69.9XYi%Iq8o9u2Rg6RUoLH$i
-3[EdsZD"P6%Jr?`''&kp;UE:(PT5F+HZ/=#DlP`sFG=O_d/(a;k88On=D^ZGi#T9g:q@8**pkK0n5"-
[OB$H7_Ln0o^>a''IN!K1Kl9W%h0_II^gSh>R2B>G%VGuHgI[MoGbe.rqp5++K?G>j`n^8peI`Y27#Lk
djm*7#uri<=Q_YQ!03q7qD]@n_6:cc)53+KJQHk$H_;Ka.J.*>G.Oh56qu]93Gl,DVVOa?VQ48\TN=-2
cXZ-9:AfMbe=1WD"3V=2#g$R<&XHoC4K,fg&pH)DS\$GGf4;K#PSI(011]"!c"92\,[VJ,Vh%mP",3%j
@=jlDYMl+\H4);j]h[-[''CcE^.*hPj?/U;NZmQ5rL?D"S%O''M5N%p:G]bX0kTs-bN[(C@n[F)`*$FV
^1%\WHi>VEgiEJ]/hO2$k1^OI*G''+mQQtb%=m1q:JCi*_PhkW6K2Zft-pYShj"A)s]hu>EU:br_''8r
4!^VI*^*)0665**(`g!%Mc?W<!o^Q7b17N3jYDkrLqW3=#Q6VBG<%I,eX.e;sj$F0B$gd@Lu"Jm%:.>3
08"$MZ'')-`eS.!r;rqg$I\a(8;5k#6lpM6n6ga*TB`5P2+X<n6jdMThfeX4ku?/@Z-)!]s$KcnN$Y#h
_jdpg@?Ec\lCT],*lT2-q26&`e]''1"(8_AeGUfPmbgerqXD_cE.\0''Q''N@]I32$B5[Bo1ZB(!m+8X
9''oQNR>\1p*pes2P3C*]SlegUIbjagjNtBD\d7/k"8]l?$"Y^KtWnCu\XB:<S9@KhBH39IE-$:D^T?5
''Fnl?^-&VZp@]Op$T(jaA.%Vo?_4s]6pn%X.]^liC?c@bHlA/B)d_*o;CcK(p3m53i#77Zq`^%+#3dr
+Y9,SF0UNgU+Mc26,U[)PY4''1$kdGJ0hL1`J(gf&Z&C,6d''?io,+8RF3Z:i8J!P(W&nk"R:TAr_YUS
5:efiO.iUpiu0Z*Q)h&rJTX/tk?1T0L_,DHF[aW*<g^*uW1prsJ#sbaL9cl5&C:#a3(O$<>MqF-M/E9$
+1I7/rNPePMO5%_%C8lf]?@#s:O&a35`kC(G%=`a_c=A"MbRXTaa%lHp1d\DZ!hI,rG=N%bO+(eoN#qJ
nr1LGioAN>cHAip>-@\DkR;#ml=du_;j:X:[9`t4gaUP^"Djk*@uD!A"6tb<L@=;sicOhhUZ_hAkDXiV
EeuNjS"FYIhNpV\2@"NWTR@i<Wi$&C7/PLB&7^R4`kddeEW?SlVsmfh<1gn-odJQ_gZgI96lh]rn4ffl
g"k[AMMU[*VgVJF?pm07h6$.5Z0nflp?`JV%..Blq%Jl%,&gHa]p-''?I!r4?ZR?"+=16:;M0RO5W7V)
!-,j-d+KFg/0r.UE-4)^QZL`.rMOhho\9^/$I<aD$S)*Z>VLl2/=B47\,V:_c[ok;:!E'')Mk$)>I@24
=fiBfV>l/''GjMo69Bn\B*aot82_`Eds*-Lnc]rP>(VOL2`&mK";lKlK=*dlfHjnTs^-_pD_6\pVmWNm
?(36>&;s3cS/uF+9YgIBYGsX^HYX,/Y;dAG-F5N&@`aW7f\Q@?2JhOIbUS8a''I(nRc=rr9VgnpeWWD>
(inNR9LnAbClLV3+F!kRbU2i?#++o?%aenCu\mg;oM)9$KT`UROmgJTe8m"W9If&Qf@[%:NS&FPP@[[Y
d''G?&9HNpWmm40C\g/.keSmBQ)\3SoK"+<<jQ2@bL<<B1E^k5hVs]D`/oZ5\G)S9X&^ak,UDH$bm*N(
-1d4OT!XWn\*^Z`ZYWTb;pUMG\%Mj2imf,(d]61*4CcEc;Y9;6]ORq54.''Pr`*6*+m$%K&Q>)7)WU\V
Qh$WVG"]5;l[/SE^@i-e1Fd2sEVd^rE](D`fW/O)dJ"X"/1e2%B<W$)C!;FoSeipM?6a%/K;\_35VJlR
G7"F,1B1''O$Z<CoE.]c5/1o4p-TK2*:U^D''k00us?=9,8!ki4UKFOQdP*NEbdoW<[`b^l^jZHg7`,u
5otg51[.FW9nA%%eaI1/V1+*rpDm[]1On(>!1f@EWAZUo5.jYkLi$KsA5P^h$\sQqM5$OS#mG.fHo>&7
!XF+TJIFP''''*`^BT$i&u?9f*!2+hbJi%]k<E1-2="]Q@?/?c_u+i+;5Nr5M&#`)RB<Q8WYVj&d0u[_
Od%pcYMA5q6pj*-(-6EO!ki&rg@(Udq80[4:W0.j^b45DE9TZF\4X_>>r:%-X2#f.V\fT/`Ch022R08)
i=R=/#EmCf>H4Fq,:K=eCf"ni\<VFU+(J''<@t2pF''\8fZGh)TW)M:</To,_MUV"*gZi<[J8cW6B"lP
(:`I)!Of$hZ4p,I=;ZCJq6>::*0@C''r=GJ<u0N)&DkACPL"AZ:5seSC9`Ru3Bf&GJmJ!k?mR\)$_]&j
kX$H82b](Zg_ii0Gn&E0BH:D#Eoh5is6"DAYh"O,56WdfD)tKh?\N2dhOD(<l0/(Mupt;[7dt;&?%biO
0*H>(\)9A*&sHmKD:6q-gXKMLOn,fch3o!`n9pBY.8)iIN9cJc.JhiB4'',%F9ttq%Y#!r&@@lX!djD8
5&)p0IeC=>&6GF8`2qO>EhEM''g.o]s#!h55iK.Gp"1:>V$C;g9HK))GbkfpZ>I^4R@$5G''9.+GNjSn
f6R-\gfeQB*Z*gdnP_i#gJ8SP6Q2[6[''Yi''$3b(f]\]])''\Ig)Zcj_tFFc.m40`$u.OE"a9Q)u-8H
\*8qCNZ3$^4Z=k?&T8)NOaSZ+B^tiRpEY+2<2?PpL[)>?19W^q+P^[m$+EZ3iTrI?l&"3(Z_0fjN5K;6
`,\KkY_Djo]ua''<''Acr#9G.a_-pj"$F8@DL\]n2-1uQ;N''>c;-Lq.<(c8k[7''6Kh9?4p!GP:50lJ
V54d!9?loN(pUQW7=tHjM<F<n_6lVa9bkjWg,7k$#7mIMAn@nsL0''o^)O-f*12B9U1-0,T/MfTRIpT=
"?a#TC!s_;Mt,;m"i!?HN?-YQoHTL-g03Y[*gMf!L+8kC4Ve="'';]C;K1fhpLI]2,;9<<MjeG"4ensj
)<nO^ae)5#&o:LOmn,E@07H]a"%.)R%4a?%@jtmp3&b%3MqL["*h#+Yal(dPK3U`2ZU(i=;s@cO_eh`.
G#`eQ8^^)H#m3;`]k3kGVCW=DlI?4NPG"FU,#G>WmAq-ODo''f]_5@0Zp,ba:9;ust^Tq7;7;>D.Drn^
tm\-f$oA,fRXLl53g3$0EL:a(HCoe)C*Z''-aOmU<m0718mb8_1k3@:EI>dGnQN%\Y48!tWFF\$c."m+
TnL^5VU;ZV!hUgfq.*rsk?,uco%kt:*VrqC2sT[E#lM`IHb&%9Al<<u@CmW&9G^Zi"Jd7E^p)G''dbY-
&f3)V(]1<FG)fjA%f30QmQ+,]G9=.:l3j*ST7e`d#bZOGL3tJmflu\]:[*gf#[O-#5?TTNuc3q0E7p;(
Q2u3tu@TSi%J+eL:KWKcDA<5)F8UN]kL)K(Fbr,U]W@m+;4=FMU*Y!/foUfT\X?X04tTV?T?h4AP$,q''
k5*!.H\.W38ODUn%0YS-3sZl6YMJYB0dKX?B#k\r:hlLMkSk_WZ9]A(95M(i>4*TjEa!mg(7-ecg^Yib
KZ]93_6W#r[E)aUf(EZ=2!ZVP4OU?.4UalhuL7%@8`)+''FUdf!nq`J%h(BQ@(b:4CTT6Gj-93"k)#s.
L@4im4UmKnH^la)Bp?L$nZV>HR:fK''_="!gQ[SqJDC</j''EQ+(J"TS,6RKP[lT;gfjmAb.]=:-6W[+
G`b"iFrNIia_2n7[Y;Z"o+eJs4>@cBGhQC&9&c9?#_/t$_rT,"3N^k#D`/CWnGH>]fRE5QYN+9^SndP*
Y0,JRdF,C\^%:0i)9psV/k^KrHa2%IgjLSJ.%B\.)k''l7pKO1!NrJc+AO3W935+NmmDER_%+!C`be,<
WPb_Hc4%4$T#<_ik!Z^h8_j!X"53S(1S]G-E1h3o3--D\U=D*;3+DK*n8\t''sgig4p8r,f/]YNr\>j>
La.br^CF@jcH$cg59`ItA(gB*"uQOh;\i2X8coq$0aPgM=&GPn@Il$u-ORTY#FoO++pGC)gsO$-tNFce
g-/&B!16U_F*`F4L503*s6BNu4TjQn=4G8ZUj,EO;1</>JsR9)nn$;cnb0M7QtF]\mh0T8+9"m9_eH(p
,qNd`A\W&O.%SoJp`N[Kt#/l''s&[BVFh(KQk`,(Bm$AdBZ(fmb[B9U6]D?.$b1!a&_Q&Ppb7EUN=0bW
2j\''p^T83066%^?CDiRaG"jF92f*-ZFOY/G3rJ2]''gpm7B%EC61WUS(N<\m8f*pKo6se+Qj$3ce+j3
e[n_232UMtj%ef!""1B3Jbu#Y>/NVI<^G86o11/p8%]klD?6cakTNfYVcR.QYeiUaq`;l&Nmo]Xs1@J&
J>feqt:.UM<SK."(kSlY*@]":M><kBR+-AhJJIEmCUXr7:\9c4+GkleB8"\@(qiQ2\ml)J[iT<pXLZS/
3D!W6P1KN,n?UjI[!ccuE,&M$JdDY())Z\3LiJ/,Dm10WVT`P>)?lu.br%ZR%o]uP*LcI%X!Iu"K;$Jj
p^sUJ&4HJJ7,Z"q55:%8qBGrsN#%,+=>]U1hfI[B#Ula30@t<9Hpo''/9ARcl*mFap-SF7n7lr5*mrlN
r29h#f9*t@?22UJrj]bsWc+1F?9Fa_1P.P"9d<J\Croc.4$JV:rq7fl7UJrP7uO46+G=<!T!iGDH5''u
?49M#tS.+%uMIN@F@0VHR%BM7=>.i0EkD\lKJ$!ue,d/1L+o@8di,cZ8kk<aY7r@''JG,1rm8F;_H\NW
>3f+Qg=J(Oq1BIOCB]c]OP_2j&@35]R\/L2[E@dArG>fd,C&+8D+)rm-FW5ZN$#]L$<S=`E_V$WAE4#Z
8oW6,a?d.HNgDL4g(E?e\tjO+n9DUUKJCDh2C7T$VVFhC.^OfW-.6)rPj%I_?9>Xjspu#04S^28B<RY*
*b+0-_k/#JO&$Q/dhN2r''74O`(9EarJUn!0!9;M%0]J>T%O`FD]RPhC4RM,`@m=C''c6B0ed@6G*r@=
##Xr#\Zr02>*J_<,$BH!rj5#R;\64RmN[R)VeiSBV;#HoY4A#?!>%NV8&>1>Hlq%^e!f,E/Qh8F\.m3_
lgYZE1XNi%+[$VJI3s&,EW9:c@^B+*8#Zt?5n!l^YglE[b''c;hR6ULh!?OOkCe)s5r;Zi(g\pAe11/b
/f/Jp4qG[,j4C6+Q!!@u%(];U0ai8;=J/emPQgga-X/6g(3;f+9?g;<sNi6QO`4S:JJ!)?q!4jD<VAf\
L\W*dI1o?''iODe^fQ_uHCH%"Qc^d\`o8dq29Z"'',-''X=\C0e8bRO_X%sdY)a88fm[)U<mFei%<bli
7b66Zk=!nl=H2homrH7Oli,l961*,[FW%5.@kKmp_`i_''1(?dZ(o&U,6P>iFDm<QT%C&tiP3Xd''r94
("_u]lKV''<7\0XuNM,gg$To]rN*Y+U_X(7IE8F''%bTX''7A;9\3i0;Bi,cB/a6bCFRA?^kd`=,OD_r
JN"!Q+BSH9L,[0jgQK=2k`i66GCmQ/:,:RCV]_4qU:gD''],>$$3.%QC6m)EOf&6F)n''[Gqd0\2F4^,
cU922:Ej<8Vu]9cNB`B":h7jq5D"L0;b&TTZA#;_j?LHiG)l<?>bH[Q7HgcbioK*X0V<a0ksn\*IKdMg
/@10W4$55PB5B3$cXeF<OXZX`kn+cDGLWqE.4qef%mGM0F>i]QNojdM!%F=BY60M.WH9au3FIDKNT''%
+([#C!Y5K&JN3rA@ca1,6cS4&rQM5ke8<)UE"8g8;BUlnc_Pi1dEi[T$q@(9`/%KD4b-@VJ_jkg8EsD1
(Wj.@Ao:.>\p0QVCDgml!6#X/=O^%2D`Od3MH(;@m+4#..''ncQd319t\UQ^D-$qJ[rFnFd>Jg_KlHgj
g;PNj+PK_XRZG?_AB;rabLhMCs295K63XclM4AEbBcp:Fa]aM(3q908L.e/E8L8"6%nFGGXATLbp##9(
kc-p.l[R5c-Y&o^).U")mdkNiMro1hJ,5%#X2^u+ZAtRbZ[#nFDW)''[f_FpL%d9AicJHcGgjoir),Fs
,@$;Ai5jfO>2FK"BR1.@fO9ud2=!VFOReQ@83?Ln4Y#,O1iGeaT#A$&$)+cUBjhR.s&uB*3@Po''h(#J
3r-;VgY/PMZ^hT`(HE!B:U7Y<DX;j,WpU0d*O8Rp2-E''9''Yr!lmk]^P<=+he@-`fZ8EYF40[m$G7<%
1DNdFS>c7Kf8U$;<BZDQ)uVlK4@D1_RBPUJoR!hdK1(4cUdMhV3e#MT9*)5jD@c8I''rBNU._0L!sbu''
KcuR)Z2,GPW"G%PHEY\n2H?Np%@C(4GYl=c5%4[\JW04jW66E)#P18Z.''d]<J?''@11=**8#TJuL("f
''"4a@=1Z$=nQ3BV4HV8+#X5L"p+Yd''5&`4b:$.mslgPfAK-*!j-bL4psb9Pd-YLB@ec7cdu1]*+LhG
cTqGL7jlIVs:4_>TLu''Z#3EfeBj(:G7"II@P.*)P7Q#Hj2U!C;pjb1kQ8\8#9c#cp1CdS=`]W<Q#X(5
hW;CNG8MXp$E50m6e4CmhK9`SD2<mn8gYdCAo_/ZOC,[>p4W<5)KD*pD*j\s-5g&gpK,(#lqjl9MLe>M
k&*Pb![,>Jr`f"qf,WWb6][HPs>&%7*''?%Za\I4UV\''V4;W=6VjbFNajS[n(!GAT4M*N#Em8!!r6DU
je,0"QgC?&`Kpl?d`V7AaSrbu]*CLOM@(h_m*pK])^]BOhr/gYTi&4<pbma0X^R19HoDG!3)-a)$7l"j
i#h0ePl7:LT(bTNkr;BC.r3PBVBCI$.21tl_[69__])&;`PL)+2"b,QTTj++3Zc&NR4qi53%^OCZ`ULo
Bq9e6m>*:gqQIn4^6.@C01VLT`V%h58rn_po#JnU,M)nPnDjF4$Dnh3m%/9:.h\7iZ&M&T8=e^,.k!''
Mrc8"H;A77gcZDYaoa)\H8#((A&4;[sV7Haa:0/&KB-Xuc!`\:$(i;7n4b#ldbcb*lPp?H^%no3\;e<a
6@LO;(tX=+2S$Ebb^e1P+$9PGkA8MIiAIqs-GPZ>)@PgY[e^)$''n)^8?m:"i[f5P(gi#QCLoW$P]REj
cGhk+>LSoTX4K"^3k_4^)bPAVT^+Gb!7E=9+_`r9LPt''>+ska$S4FU.h`p=iF0G=!:k=/`9j,/Wm;*Y
''C0''E''h=P!nD40c%MB8^V\_IE_CZ`[OZh,Y,))B^\GpR>!.u?GE+:1LHcNhd6h,f=^q*a)BZ(UPfo
"kcPZTDFhF\R%NsDo$&D7,X=5(sH>R-ec`.AhnNF>m`\eZO<0.dEfSJ+1T!/MkbA1''c.!.-@1)RGggV
`ofEWuK#KdZESc/Z!(RpiZ;YejapT#C)o&Y6\"oU"g9#"5UlV6k8Aj<MA([\ZS=]@lYM4YAF-<eNQ^c=
@oI!6(3!d:<He?M5L2cB'',ZjQVtm%Cr3TF3D-=d5$4[Qi0Gek-u3bX"`[@rG76fWdiTXkC4m;3dOY!H
^m?eKe''AE&0$W>a1-qGl)nO&-''.6$(Ih$%V"0C_fuE\.OEP=73aM"nNq&L]$0H\mi?iqgkjFO/ZG3*
``q+dWeYRR_EiVK]7JB55(JRb!S4.m[^OASlVL.,R&pT4Z[[53NbjNUCH)2j:E-3mnY`r.o^jJ_<7^d9
6$ll,+]dORUrUB]42W$<&5+q\e/HK?&ptd1OZ]''0nBcb(-2I\"J"05$KIr$\_oPBrf<iN"oV%@:dqJ]
.rIU_N>&l/Q>MoCohUFYQco:LrJkpfZ(ad].4.k5=HnEKugq/!\LHE"XK6#T5%:h5&7UM/gp/''HgGUG
,CbakTp[%IHp*<Pg]gG+2V=3^0baZ)2$TP_$lEM+H`"/WRo8j2=%cnA2&L0\<;4"7oDVUWf<-(0un&m?
K%HZDIY2L!o<C[(M4&;CjDLS[,:#$r\;]56PZ9LXh4rQ]d,)CBRp;F45RirnD,%g1GIu#![<<10D!hi>
"Wb0=@TnJqREM%,%JD:lus`^!Uf+!%r;<Af"1m5b$tX!Dm2b(Z[gQ<jfk#M1RgAT&3I2\(&G)oc>a9Xs
>J<`:Op-s,Dlg/ai3<&I>&Y*SkScX#82pWt38Lp+bE@^GZ+3a]\t)Jb^PWEeprG;5c_d,6]MT,`r4)&X
8Q&8R(uR#4+a;$@4;u:V_F6+df<-CVr[OST"mc\jol"SXib0>HX%I\>7;">O,1GX@S2&MMR^Z67;.L\Z
!h''g$"JB:r[H%X]uegb+l:uR-GDn;g,F0[A1Xi8O5ssTRWDSCPb[\Ttm)FIEG5"$(GYTXs%A!PTt.Pd
tI;#8<7p.9cb:PI3^.1g8j<]pj<Z]/GBeQ>(M#-R+^Rp_u$eZ%J/$i)3Km%R_obJIi-I,]Wl1%6h1#dg
M@;?''=T<[IJo-5cG;hZ?RQn/liNO]Y.SM0GJSgA=&ZgPbc4Nn,I\/rD)54n;"]?/#a&%Nj,7RS$o3*O
"69O4;7EVK`n=OZ/-9gi"n$lji5NOL%_(RpN7[SHn&/^+NY>''j./+7(\S1IVY0!fSb7<k<mUcU,mGQV
o>\`3=YX".!UT"mF+!E$<Gk./KdPf6Jc:%0Dq5G+Mfrj#:UX;18Ii-2t1NHucVdge(Y''@8u!a$QEg%<
nh2.RjAE-[AQIo47T>7mg7L/io.RWh=#\Hb_sbWIfh`g)%G[#dn7X(p:<nM-Y"()7''RD[Y4qb*'',Zl
OnX"Sh?sT_EdrK(F_CtZdAEUfl:<80Q06e?P_!5LCNeQ?+p99eFfWNZ/>819\iIsQ@HrCZ">=??.cQ9d
=''FEa*%N==7<FUQe''-5*lCr\8OHAKI!Q2Zbp>eH>d,o''quKG2/XMW<eQ`9>oJ57Rb7WSog_(6/.lA
C4WnaS3gUd*VN3SWQ(VVlh''[Jeo\S$)?KS4hDC50BraU<Mk2\E>a;s9Aj+)jbm#no50Ji9PT7MeH]OR
&!0Z%YoP%WK0"/@5Dr&?cj%=pD8_$R`rd''IOk0ab''4\+h+j\rc(T?DrN!cB0O<WFq9AI)\cg)aal2K
USqUoj)1TH#DKMW,PHTV8YMU%;O;utrB&#p^g;4$pNOuQ''%ic:@^Zt30EkS9,p6^5q,*_s)lqVQju0r
T)o"gi?,t=^,`#"PM+5S+CT6noU@)XV-,KFD!UJ$:`U:^cAR>>PDYOq8i7OAH-!nSINdQ:Z=o@&0*Uh*
Eq''++@/"8slMfL^`4RXeq_NFhg30DQNN7AVe@JTifgE$btYc<F)DC"m52U=kS4U0Ws,$5*lA>3W:EB<
;XIdrP]Y?mpYMX<FC,DNJAL.Q,i>Tu##Xn[J6Zk(j&i+AapGCRjh)ui7i5q@^I6BWJ-''q,>gaPa?U>C
n0=#l&Q[!2p;U#PrJDZQ"q1MRd0iEZ?%q#BOE+V_30).@7N_=0R\on7V/KFd)Vk_ehDrU1BU^=s(55"h
CeP)6DXY:c>;mJ%=VdamZj(N.1uBSfH*]PnSS''m\FX<Rc))k"ulHtppYh-33.!_@O"V]i8uW.=KH7K#
t&DTB66eBQqA/>oq-6<&9?OZHQJ<j_r!DEa;TFT>''(#2T<<FI,''ob9^[0,=A.s>XZH5N>L''=PuroU
_$!n''%"I%k&LojTJp./PaVm$g&fJmch!''?''>_)T_\`HL>QKH*?GR=12h_Cp.n`+]YdReFE)R=Qne8
&)?B$]Gd=p#W=TqLVL<8g4=#a:LJ0''K.!hg]#+a0bpsDaaq#6?Akr>[0P=a`c*gLTc+%D6e*)/j/Zn3
lC0-\Of3*iH;/0BT6F:5?2/''sGa-HTJV9t:opT2E0b=q/eMR(jheTNR\6(;<6;cZF09?)ic=+h,*;9b
!tA9[t[B%[CU3Jc#Ni7&kaI`Zc^[W2!BM,Tt54./iV''jB>hNYeGV/sLST=,[TN.h`B64N?SeOEJIrK6
Z!j.e?(l*`rXi/h75O)Kagm=`O:3AiR5_OgTMr"''h1mJQK0I(H@[@-F81D11):f<Qpeg:\sglC\+Am8
>ob#AreQ)*A:*f<#C=uFLXOT?Xs_GV]2#r:7RipU-8iEn\Gm0;ICIEBOtu:F,lZGR_XZ@a7m:WZ3AK8=
 %La,6Nt7kJ*;]>^>FEC%PQr3j4?Sqe!&%(jFt56''VQ`J?rU0gg@BZs''t8f^3Un7,9H6dd))r8>1;d]
7MZjh"IglN[p)k4J!1''=i@2e:tg&''GHi@%#X4L`33Fsk??CCakeQ_CG/&EES&]]=D/9u`F/UWOAV$C
aYp\h/edYb8c3%t\CLg3`$COeT[uQL<.''Me[9W>ZD-p)2nsdDPUq,eQ!;U^>R)?OO3''SA#5.8rgX;"
!o,6m$<oru''q;AD-d-<bJsN42Pg#atCW/nPDX%''Nl5>=?67e(9Be@/Gm[jbj;^_o,N)jc5N%!npb.W
j&TkPsDDFNB?k0>L6:#Rrn.B0p`i3Z0Lii:J=q,+i2(g9Tf`rj_("Om>2Z:"/2cA4$V''s>R(V2.pF);
_U[L21dnWf'']cc$7O&ifNM&cq''FIlVu9re[ZfTec/Y?MI#:hJR/n1:9>*Sb[djg,\tA24la<>&Y#WA
V@=Ga%"S0VL]S.blc4eOad.E22NHEHHfi@r[`*<q[e0V?NgmO,BXo\B''^C_*B&$KQ@=n9k<S;PZ;PB*
_^Ts*j=H8\,SoY/f0L]@-7"NflU\H5OcgU.al2YfS-n]7cJUo6%!*&Np*PD^UgesG2gKm\iBO?berM$s
4;BM!7d<Z,0oc,N[rWqH''MLgPs/b(0OSdRfV+0E;Jm)3LQEEEGK:EJe#J]RH-f2iK(7T^0'':@t?()P
$Qi;Ce.OK0JJQ<9.ojmYW%-gX_HUp(g*EjldmMX&\>n<3%gHkkq[srGe<bRnH">j3.N^''n)ricWDl,=
q;''/"(]a]n:&=Y5F&:c/p6%MiqC8&486dbDk''a=,F9%.JH8i]7lAkmJe4''#CrC9.dnofkP[$apf&X
FY)]^l-6c*nM<_i`J)XBSj\q_''_!hu:=O=3(goGeeGmI''s:<4%MW.L/q`7c-l1W.akhLWL7rbNKdCW
W)O)kg#q_b)L,=?]sg,2k&jC/J<.\2c#^nb0RgOU(M72c.<I<s*Q*n0QW]6ZD;*?n.AsOXfs\)2e%?:c
!BI"!mIC@qn.*8;F:+7A.j(+-K+''R]$9FK,G6/gs"a?1!WM+X,O`mJ0"t5jIB59''Si3/MNV9807B:U
o@%4l%T(b[CYEqUEZalsKO0p+m2g0b27j^(oW=NL:%429e@98S7ap.63Wu)qBA,mAP(>[V&B67L!BL@;
KJ#mXYYbJs>XW^@?e+n`bhl"V$g4Ku4P''m0@0X;9qcf,oS;][O\Bic%<mF$D2f2V+NOJmHp,t''G3%]
lP(EDMWUS6ll(mLFr''d686:U0?C.S)r''l`1AeN!nX=!=^K:l?=(2''qYB9=gEiT'';a4Em%(Bg1%\t
D-_4<Pp09&50OS#FC''rh1kL^%^O"K)VDVbd@CT1!.i=;p!8n(5r:8Z<'']HMqhVk,Q\<P''H(krQ*,\
8*BlV>bkh,?#?t\Y/M16*Q[?pAuJ`F3E8[S>2U"?iG''"Z=T-RUFAgI.#E>6^A@8PfCX)4o/%t8-%0Ai
i1M;7ID/Xn.7-+\-NrfSTcZeR?#r"PF4B;EI2Fi>BrrRbT-`YjUTF7OI$Ji@M\u&b"/:cPMn.a7Fkbpa
CR[:6KbM6M4ku3;p#_Xe[&p8Np(G?Vqh3SB+H4o;NDbeW9-.,oW5Z6mdZ>rP5oi&Vi/qTAe$@B;ZT7+m
Zi%N<"Icdt<IAkWA/[C>uMo$A-O^Y#EM:4,BK,M)W0t4-[g5<^k^*S?t2s<4IrU_2X6"*n+^X0dNZ$n!
pdat*$/03U''RJdS-*Z.d4$OpscYsJ20!Z)QB/p.UK''0kjJhk9T9VOJf-`A;Y7>7R.JEgQRc'',/mkO
<K`Xjtih$GuP@`a6ZNHa0k$ZE!Y%pI"2tuib4kD/-bHcKm%M3$!9p$:;^JPOSfu+UK7sUeLg3I\qCE\^
02?0Ik3XB3(pu''mVV&aXrCi%a7U6M&#Kb[(?GVblDRlFN@aN@)/AsKaH+QD%%_%,kpk/Oc1Ncdq0\t`
Sqp!1?r\*a6/oRG`ea`?,+u&j?@gF4&%M<Kf(#s=CE^%n&1D;!<r[s*HIL@mq?q?ohdd5j@=ZYB(Ff<t
<.UFp0&uM$/!?*1k@Fk#S-kSfeZE\:+9f@il[.C4X$e3U`1Dc.4>p5Kj/RZ2&N93%E%5]argR3Gmo1!''
N([Z[OVITsY<fDS52U##iiAtO:S\"fiI6kDc@J8[G&+-A>4OZ^72`"Z*0lTQfk2P]=)WW;W?cL!).P0m
;nab#j+3AE>-2bP/LWH"X''!lOIL".qAcL_(Z?M7?Hbm]/CX(^IT3M6gBUP[(AKq\8I-m)UZ]O3DgYu8
//%*9b?Tc02iC0Lt"Bn35I@ht^3`J`H-ksB<Xk6;"oiNTs_AIie(">`tP7bDKO0j\1[#*bcZc''*4ODh
+2:d<U;!\4cGJd=La"sfA+,qTA5lGjU*^`5N?;:7NB`VH?/j*!eWFojS@=b@ONACG"I]--''LSls2@Q*
4(`3f>UZ<ouH5X%9Q#krDmSZVm8agKKPd2Vs5XSgBU%J&lGDcf%[2rbf[-4Y21S+I3_u86NYK(&0&9Fp
pK\jum>/!N-S=G[`gY<Uok&Vhi/,U.u8>&4Mp6rnblJ`4Mmsfrn-\HN=DCn-s5[Ch+GhVb"KS`#K#[*f
kX$qVI69?A*b=&AS6CfIF1s:TVtmqFKnR\KH9)=_Rp3(&/#)V''+Xt3TD4_o_AH8bK4((K\<SSGrD#IG
oo_B5?4iISob9$8lCJ)p2HcPdHMe\6Q`)uW5C.5RS(P71]jGaQ3GZ09P*Wk/8D\9*jl)uetAT]BXi_5g
-+m]36:s?PNGQgG''KZ>[-]3DpdA@NMg1pJ"44CA\bBS1-kCY)?Ytu#oHpc&aIrNl%<G)/jHg)7jZ4Z^
r2%U\5lT_>5Mu=nWhJW_cC^F5nKkjK549J+_Y6!VCP[\(*QA?<--\oim+c9RQ$);]eslM;g(U?Rh[N9A
#+9gsUK3F3H19*o>WJp?,D.qMSGXZa]2C1\7UrM]XR*tl!''K^*o9*^0542L."0TcJ<)6ckpYX,]P_I$
=I-3''3HUcgMI(;Z;pRmqLjnEP_JB^S_R_5_4"L`,*"KkZ(oq;.FFnMkkbV+W]Pd$d(X37u-gL"CdCP@
m=+c3H:K^rM[:UI[b/Pp9[)en"=/uZu>Pe#sOfj`g"`enE2*O5XO12,)DDW&`Y$mi''ZdY:o25G1G27q
\`U*DrLke+rV"Qn\7T\D2fNrVBPu.XttoEonLl#D)u\67r+:Bf<$UFGTGgn0LEt\6C_FF">Q%Lc>TI0d
q@oXJ$RR5`Han$SP+R$HGRSU^]@]*1;%:p)YCs]/Ur#+W)[Q2kApV7Fe1[h^_o/i2k[^k3j&=C3>sNW8
>04d+mTjFj->4Y/!0kN_olV69*q.Q;a\sb/ul0BmupM]42Q/]ia>nhh_uiaIWsFee''XAFqs;o#DctR1
*n"+k1P!l-h1\IFf''>Ba/hqZJ2DP9S6^D\IT+#T@H@.%9E#A8l2!2d>MhrtM\c<I)_3.iicpW1_djkr
JlPF\eN5l=IO(;bmY_$4pU6QkDQ;q?C,=sAdZbS//tkZ(@@h!.V3u8#pGDu*>,,-_:O(`t!icO6&0UO_
]D\.KlP;l-(AQPjAo6cj;_P<MdWm\&IVL=3AjX9:W;tSY#ds4s!D1reZV5)PBCBbB//6s0#Q1MCX=?SO
d+U3M]*\%nU-a\_OU@+&#">M3d9(9$pq$jS3B!P3(o[Tn5o"#>k$dA/-L)SN=),0-$-,''k%ECEfoO1''
CP>b]9S-g1Y[tt$<*6n.(,CC,IHFi$82Y\cRAbh'',@84-+<=FOV_*Z0<&9MI"W:1(B*2e!B>#V,#puA
(,[S5)1)[+#ASmrA)oT]sM3V)0SECN8Kd@Qe\U,T:B#cdi6qCa+<-r\7Y[bUX4<eB>,Z[lLD:%di20D*
#U/fbK>FtO8`cJuqS>WcReQcF?Kp7PDsG`-XUGq(3YVTM=?.T^)ujn>?!&M]tpUm)m;NuTnaP*O)ko''
=t>N2](?lrGbcS=3!;j)3V#jrpM^Rt"^#dtp7YdO((a-2=V)`pC[.CL1Z4/dRjb+uHuQk50J5?"''jMC
)G%6;GlLc+8s=<TfHu`h\J2]pbV3tDA;HjE-m!bEYpRJ/M]7i]C#\)",22Oi3(0E6Js<J1;/^I0\lh?K
L1sP)$VSeL0<X&Din>?BriB90db0"!J-s5K"cr0.hbn=HAif7JBlH;4B"#nch>%G2ro<8\h;EhC+tb3?
^s"mhJ;4Fo>`*FI3?S%(>^\oX_>gl"+30F&Zo,>bFe/!&Aq:&ig$8\C?scC`W8efYo:H/oeReK?=<[$R
5R6<)l$:7ag`7S,cZR\a,][9+*$sW0(B]G]%KCbI]ru5^60-?qPND(?s@3^aW6&=59SM(+rL+Z9T[PTC
''91Q#QihbWF@(J0(>J*J8NkcoMCMqTVebr.gSNpm8n)$#G!"8;X8.tfasZc1LnD#>jkj`r_L7=YJN$t
.[J>Q(Klb@+dBp#iur`H$,&g>B.j=ta\aoG''HKK(nN\\#k^EXr\K@F.-N4aR*''C;>1ShWFWro)k*P&
D&?-rcr_R[/;(drXF"U(B4T<R2F(P72gAn-4B8%>Eu#%\?]Jn<i%H;,>McYKl=\TSd72]M:Z_7s(>FO5
m\FgKHTOne;%@Y6D5!k"E/BcdG5[u/SZ%B2D<$0*j1="OIb.K&T*UZW.q+;41=f5)L\L3p/[8Ap.[j\J
.4''pPdJFV`\@;ilTo.n;ZF0'''',CFu83FlFhKF&KR6IH_E1o@tPuQe^Scr>aMIuRrcMMB<ZJ"?oH:`
B[rFS&aIuJKMrlR)j.YD/\Fa/65[&LFo?t4ffo>:JVr''gbb4iG7/E+-:WcgRTik66(T\<t!s0VEPnB+
B[IR0/Ub5Jj#F;W1Hro?!2=e78%Q:l4"?7HsJe''V3R4=g:$fC(=7[+O.i>.6j+,P]cXel]9d/4>Zej:
Yc\XO@5FehCs<LZT+XS@"3;HCQ(ri6?uN+cX!Gb,&A?+_lLFCX/h,?VD/np[Pd@[nQ+;sMEi-?0dHFt5
J:Bkhm).?FW''&8XOdBL1#eQ!*8Hj(>NP"HeC"/cpBA6iJ5n"V>6\<[)N(CuS4(9$Ven`cTdQ/LIR0Q@
4s?Fr^YDa)"bN`%R`g"FTXc=bK;UE3#j*&''A@O]R)0Bn''2libC4",fhSXLWA4d6Bd?XQUrpPA!OX\F
D2ErRWF:p<62FX$VQg1cY\+J+j`$7cb+].K#bjLeO7Bs.89.Ns846NnD=.lt9Z^#?=GhZ*o24&u/kJVa
VguJrjNTK2;B&J8@Mp<#\@XQ6>=UZCS3,5L/p+7Y`I<F]@sM?glP[SF#BHj/XDh$T$/!</%nPK8K#NiF
dBY(0U4X3`3/(<+&AEKhndMIiD:L%DY68#chp[d;WDefqiABp0]A^L)''s\=n[Ujdg!]kG"K9C[mp<4o
Aa_]SL''BEe>Zp/4e_T7o%-0pPWT]3E)m>P0i/[_*>c\\pKNml+Z,3mO&X+68=1N\eM`NYL]ho1]?#tp
IdG*EPT@p)#C=T2uh#Z\pin`8;P)=b=URDV0,7lN&95WUT$G>@.8HX[2ki:(5(DZRSA:u!D:ePd5SLX*
(KHlDQ&7W<,fC^W/)T95V=!EKg*b)CZU$r;%jmXXQ6ESj9-J$idONJ#/48^.Y;mFNP8NMi7r_$?9)Tml
$5Qg_@YpLB2VAN<H0[5)ZASZ(D59PkJASRar<qo[*=n+2"EKs/k&2^hgbFOZ\V<Qi!%f8-[<L,EZ=\A&
d=_T`E^D)V*(mQckQjep0A\i`00NA2d\T>qCeV%9W.Om_`s#Mnso(E-3^@+-aU/>oqjReINABd>,2iUY
!_aD/UH4P6''Kla%aIQFNpZgTAEMf<8E2h5m+E&1\7_o%T&/*3XSaE-afBZr6^>jnYJhB%!R3?C2!''9
01u3$G[]8glL<qUH\O9!ZNPgbRHj;>6!U:N446LcP$$2H+/@NO@?@5UIMGKp.]Q^<FL]_/rup8`@3[R0
,GmY)l]+*Oq3m[&\;)i`:]]F?IG"/-g-_]''ZgTZ/>8d2`DODcrY.kSIoGrp-AMD=AgQq*r&>3s`5B*E
/oBLI>PC],]ZjsNWnUMe#''u^77-kh`<f0JY4e<7Y(.iP^.!*cR;,IOYcg9i5+UNj45UclA_''GUbQuo
WcaoJOQ@[84E3MYS<]ddOpk.Oee6qda/EHp<mj]R!)X59/Y;9hGh*K2$i0bfHf,@$3?;\d:Ua7SG4YN$
ekU7<@?l70!E*e=G9,''DC:Seo!6olbC?F:m+>?2-iDW)@jj>*cEN1gL<um]0F!mYo@e*SQd`LbR''96
3)ba5?u53@V-_Ic8GTd(4J*;!43Y]O6U3:(!@PUhUrA7#?tP1nPk%2oHHc$P4>>LV=tto"3=^a$UGPFe
!S$9Yp9sufj&krDFo*(.,i$f[&!dL8gHFmYOc02JG;7Onh0U1AfM-BWTZ\p%%/H\K(f<\''''AN)j-%;
D1XoNW9=nrgab!54UICGOOj''.nm:^L7WCT''XMDkm'':M\s=N74t\HcOR#R;DP0r4BCF6[b8BH"2<eZ
NMpc$LM*''i-659="j:tLG3^>q^kb;K"QdsDrNBO:M"4E\*\u[5^,hojKmkcC07n)S0#T,UF;5/\F69b
?AXD-&,m=*AK$u+-kSjs6uM>^URbSI+"L3idqZuR""["gHLejfC<Er]&3DJla[b+5&=C&#J$O,"h.LeW
aXY<N?4RCKEq\XOR7YR&*ek7Pa3^/qk-''$Phc!_+,aRs:"55>L!N0/FVpn.;ncXt0fY%.g?8?L#Qb%=
H>,n0rl3b4D6]%L$A35]-A@e82pNBs<_hb?tQ9LarQqDSj/]PEM*INO''^dUr;=@%sWSUf>#4(l(OSET
H^H9Gc0YDnr,V"]fZo38,T@aE-33_]^"(d_+J$[)(VTV28/2q0=6M8BV0N<h/B8#)p''I]u!\e0g@Z2.
j@7G+/C6qFq:L<<@UAjJiQha''<NYB_2C=j$_=)#RcV&Zefro/oNk.&S9&''O%,Ms=&F1GHgCejm`A5h
h<h`]I#OGUb)gjb"LnE^&;ORs2LrD/mmb[fc[5ZRHY$`La?$-jg*eme4=cA4`>r:=`O!$I^CpoFih$$S
XXT<*$l:<=)\Un2ESf56-:5!VFiTA8O)-''N@lJS''K9!hq^4?Ve"OS6%?^APsq]p9!#s:F;Oge2+NUa
''A4JKisQMP6)UE:Yn_+ZF/+bDiQcks./S3SMT+is01(fO8j\X4_M,5r8Ccf<[)nePc\RmY?:?JisRdd
.0gcEP`H6cNY4+]s$[g/g''W>FNQK%UfH''E!6Vi*rDK53gH'';;ZUc/mu!#"&pk\*\plPsR&=6[l-B_
&_(G-!fBD4]FY3$#^8WT#9R#TqDrM:4L53/pjJ(BDc.FIQS-nf]*ApE/a7%`co%J"HGE=4Gja2[s_;mb
kCIDd''6(TW[AV\DOjm%"/oW$Z.:lLVb!2.B(A%lK7l"+?Jc1u,1!&s47h)CZ6rd!XalW:BZ?4>W[h)q
*hU(2Zg.:5^gAr$hoO6t]![sm=gBViG4VFt)o(=n>:fLe+Z[DR#*)$o\NAkLtMd_Pt5EAnqfr=M!hX,K
:<I&(5qLa\^:l9d#WgXJ%EW<GAN;ldhonX"+M"Fk*<l.=2jY<neihYVdX#9dSS((Ha-Bt"M%i-RsT=o:
U#/j''L-2+PkH&6f&\1`r@lK1#]4bJron%QT9BW0S5b[n?8"o)GEo+/hO+X:Q89KHc(QK,XC0dm$1lrM
,jQ`IC;R9d1FZ$igX;7H4XB2*,.W6L0@]Ek0L^b0<^P5fFuSJk5\mPI$_,ak=a=,2qX9Sn=]^2^I35a_
L2NFE:tPs6e3q/<_4Of)F0ZW!,+`o+.)%)(WI([:FZ,%iWMK7VdkGJ00KO9j\@4Ksc?!("''"S*]@WfD
jI`[5n&7o;m+@a^]KcQN5PiLpeaL)=2e`%Er^t%IIX8A*_`M\/bK-[IkW6ZkE2F,SOM2+:UCHS)biI+d
oNZHB7V:2A_ZrfON.Z@8fV$A>''oG229_\XMlFU!J1NNm$"ggRC`!_0M]5`gl(*O&Ugb"RaMqocq[TDA
h2O_''96_)eaj(["/XAG1N:n-:h7.NS-t0`c8+lj4nUhO&<b0O->G4AVGsHJkqYEn?DAnZaF8s^%:L04
AJ\J(T$JgSL`1,9RYqiNjo>C"n1r=>&L/TrhN;gdUA/$$9Bt:a7%.qJPmgltb=WVDtT`@3h?>Eno4Dhp
bks%o5mcI7g/(=ku@kj6,4n8+[L!sK@>un2IF@=BFn:)h`(KDFV1<AtO[j*=o0T2FAi.nWT>".omKG2a
O41jL8lS5b^Fi8Y@p0jq_Zm:)uXo-''7&*@p\_!/I%BrCDgTh+LJJ(B#,A(Z,i`cXf4D/MTlVQ1nJL*?
q?P"Oi]*0D5@S:#bD\`!g]7Kj,.GE=n"g@D4ti2,hSai4!KpSsfS3Iaq_\c28Z(l6\57S%MMahul]ci!
,CY@*s>G\GW!?gQI+ed`EN_:Tf99PWkZ0piiS(pjT[$SBBLUXaP%Ki#nB&iVtZBS]_0;DUi@KIP4NG^s
kZ<n))=)j%k>&tdchGJ^J;[1AW]5Ka8JF%r`r\5l@FOq8]:''l)4LPkApS-9M'',.%GT&F42FN]@o)0&
B`2<,aL4k-*LG0rsPk=6c-KMSFJ7-`W;$p[S?tj7(#8&`^iFSO[kJ;RjKf$!@n<IRo]h\8H9j\Ir/Que
oO)?*Q=OZ-''-ng$l22U!Hc(6KSQs@^@+UnRh&4rQ#3L]]i];2Mk7,:r!n-q"p?lg.WZ3nIj''"4lC8-
/C@8CTG^i21"@+,&\Z/S$*RXH:VXV+2rDu"`mmJA[=o&P,p?mGWnk/klY4Koe\rbUA=M/u:oM2^;ie0"
TK\NE12(f#/$$h93^_7UZjq\BB8qRB]''nb"WYN6$@\/K2%^>fr6ZG%7`=U-;;%(A''>gQEE?l@)''\=
7f!dBS!nfjhX5M\2*8)7''oX0!P_A<j8,!Y[q%"JSaM&p2Olfr%S,-4=Ni(bPK*t9$cM8a6%=n5''i_H
-Te28sc/:Y*fp62W.H$r+F<`s7<J6+Li*W]5ZWC''^c''N?^?d)%q8.@;u\&dWi`e+`d7.B`qNdX''L\
[-\F@`oD(e`$TJIFVc-&T?\%m,E4ck.h(j];g3PD.9L#fJ7Pl=4U?<>oh669Kd<JX(G,DAu@g:D0qAMo
WP;"TJBUpSabs=dg9+2j$i6f_/=KGYc[.11bD8V)@8=Q=gE2OY$PN?Ih"K''moYKBRh0JaC0tei6,(?^
;/m=@2?YA6DD41-T"`-[B6c1C_;r8MZ>Ya/JMtP2qO&[?VnH0U1tL_rgA:o@DRD3%^C;W!c''e-sU/q8
&+cmLs)7:4^4P7s[NA]\dl?[VUn?]#DP$"N*>?s5q*8`f4&D(C9(oP%A8m,#c_DioLM\''aIQ3KVK[Ge
D[5;(^X^aZ]^&l?s^9pkY@1[]5)[ELkTU-O.!C[-<.O-(pS0lmZXDc<l:i(jX8EO)&4]!n&cmi<H"ZhE
(-IOhi0Fl>FH,Ie<YpW\M;j-P*ZVb5&@''AcKs=smDR)ei@gFnU,7#kjLi!P#bQs,7@,=1]_U<0quqX>
cT5[?sNgkujcsdjW[<52MIW)-\o^GHR:o+=G5r/FN027H%''jBS0JTef4j4oLLNdn.VZi1Z[!b$-i\>r
j/-nL*J)t;0CA%7QZsTQ@`>JT"8a*<5q$90F_Eg3k(&_5ZnngbIW5f^UqZiRln(Vd3kf5XpV4:F<"''J
)SckFYE!UdN"''RDZPZMg;q0a3ZbVD=J:[F@f1]<c87J9I"mWn!*CL[odB4\UBYT7g(::]>fo%:_CblI
K8ZsYqpVj=WenG1?5^NrlAl1"%+Fhp:2TbEj]2+6/B_+F4\Y_YCC<EU+($Yl1>q/X=oUG)fdB[mRQtkU
sAFG==r,KKVWcl7Lc"?,dNk]_uN$!4N8tSi''@;@`n!Z''.,"e^/(\fTG,`HcOk-_`a=LlUlPi/Wc#+Q
H/Zg-m:f"YeR%E5$>a=%]u3R_[:O=*:et=g,V<0WGQR.l%c_jVo<B</n''41`<XoL76AbTn-M_W@T&8S
K)[ZSRgoI.E*oZWC''C-+J''s-gM)2:T4psV,aQ_MChkZe#[":'':*HtK*GC1@4(5?ijVU=la0U(/GGY
uDAhCY/CUT!^^-d[S2Z^7ih\_^PE:$H4#X^BhodnQ1?7*U_;5f.6g`3)0Z65pO[:T;a4/oIf[VM!liJ0
:C9N<&<B,d^cb"1]uPcX1;d$ET+Wp%i=_R:dR>X"R*''T1par=GJV;$M\j^hFpLTUt]s"''0ID\aiU5!
^6[0-TSRGj[B7YXPu^@o-j1.ck+"Dre''s1''B&t33"r2WH$P"As"Eb3BlHU>M_hsoH_6-#J+jJPeol\
`Dao=1-fB2qh_4lq6R],pYJ81"%Ah.drp<I'')@UAF^bL9FqoZ[AXJ*4!(E9p[>or8\[>%@dY''[h2jP
ctsDla8jLpY"ASNCP''Z*C^+-2gdc334@@cJ<^m\1gaY]^5^RTtFadm.kj''.$BHrJHEX))Al@_rsCWQ
2kF]=324><Ll0ilI-"B>Ak(raEq=ct6@Iq=B.1_''J-PW:PoVr6CbP13.*<mX>K%pc0%2gcLfKuZ9!dK
 %*,$o8<c1j^WO:L\Ter:l<`Rh=/[g`/e@fIc*RTbd[b*''_R@m7+_IklTjNM[$h2i6Nf9G5S#hC.7Qc3
:o<j;OfT],RQ3fAQH/O_c1O3*5Zs*(`!.9/)<eUBG_0($&"l^5XS)''f!<]JWIS]+),n>,25Z"t2DTAt
C^]7J+Yk,p;N\cDZB89U[/HntX+#,:][dSkpQ%N(<0''j_jr)rClM_PqE-0dk2Uqd*#<ci<.FG*#B,GD
I/eJ>m->neE4W\rqskdH+8uK$IEGe?%Vrn8!rQ@H%N/e4IJW6*UZJVbATh59PIi%3ed,7E:XAqN,5F*L
f!GOTanX=F.(B;H96ZE$tqb+N?)83>imXVo#UDa#:#IIs24hZ5Y0s[`M7-q:edS)/W$2rCZIs,?m%)9e
t>J`H_r9u7r>7;#`;`h*KC@?774DKGrZ0sJ4dOjRs6a1%=XQO("<cV2\J(FGl:mO,!5,R7L%V/b^37b!
Y]pn>KWfg-^$et,3+US?".g8e`7/a%:AX,d?jAN(kokh2%!ZP=f<XGJgPThqMsAfXk!+%'')aY3N@Rf`
dr?Lfnb?@R3%4TUD!qTDU]B''GT<&XY)9W\rC"$K6?rs/*6Ys`UF*5X+*/P-V+YI,`Cr9Kl_Y-!*l-6&
TBG9T=.dH!L3\"L<"K8<os)hhcjV_#o<Z:!gKHO[c(Um\R!_qeQ;AS6&AP:"Xm.`eXaf/H[HVBUh@3>k
O(fEK[X5`pq`eQQa3-_j[N$KFc.JDWj:9+tK%@C#^-11l#U6)+l]b6E?D.Ar0f.''SgZ`3!C?Nu^7Fb-
q$E)sKE??:%r3YU_B:YiG(b@e8R+\N;=$"FoSo"QG''h_Z?(S5,k%''%L:IDB68K-Sa2u3kAC!AC&<d''
S1.'',AM&,GHhaF/`7n>=''@*Jb!cP.q"Z]"HMCK3U$9DKp6lXa3_rlOa=sdmmkP9CSK\P`/kApM="na
J<J>f\YI5kj<X]=MY"J"D!HMDTCOAdN]EZc1X#n[-(Hsa`Y:l_=PR+DmccT*8Jr?CamOiODm2PC]>G;[
MnO/Wm=F">M;*Aa3O!60$IrER2L(D;\frcQ&J-G8W7d+lON[oLfiJ52g&O#o''OjRB>&OE9I@Yk7E-"q
3KKN(G@>aG9shN\SRPt_m#k&JBglk,!''\7WL.A"\p'':blesqYnI[X2g6fq0JbF+9LPL:l"=P[XGPRa
dRNeO\ZmOAVo_P+g7NK>K=gipL=*IHVJacm5fo13lEqd:,2%-[Zmp8kDN:&!sbX%[a[L/QSqk^PHIS0!
05a=OC\3cE?mnq.K.e<-e$''XhirYQX/@]n`-0M_U#5uoC/*!bKfZidU-,Ni!VQRlE)V-p]DXU_Wu;\X
bQ=(<.X?Y&O:I.QF[VAUJ8TjS43HKk?(.S`DKnD"RQ8K]0PHh4n`fC*n-#QL&;D=uIDP0K3''bbCcTpY
?*D=o+5_7sjc&@TikQK^NOTi`S^TlrU%sXZ?Q+aOpfXnO>j''/*[@7Rm7@)G$Gjm3e%DZN`aG#\*(4F?
W,Tl=IQ-TL__SZf''[%rRD*K\25+dLSoc(/FO6l>UcU[B''0E<r5<+,;tS9OGc?h=''DLH2C:OKEZ&\b
^n2Tb(!pR;XN(qO$&WN2r7t<tFUYM''l1$JtEUrFj>qeEk@Y]Fb&k&/Mo$j=2fc@E7PI2W<YCV8aEnP*
_aO\?knNsm.9&-e[ndXm9[Tme(A?8WEQ:Z^9(mg`OhFgmOkUVe`mbN9GMn4hj=SVgBS<Hc/p/0k`!haY
`qW&d:7d@">%3>=7noO#F''''=MUcX3f^h3(q;#-g+84Ie-iWN+T\qBiA\#U-h_7hI#`8TXe#U`Z@o;g
X\T3f1WO^?B]GEF8-hX7?aQp>bF)3"j2=Lg%DjYQV[>Z\Quc*R#RT1*o!85kVcg*O7EoOY<fM+_"2S-B
KcP+:RE7)Zh/7).s$MN,haeIeE"3-i(q_%X4k+T4XQ@7bM"1s77DSMS^tR?<q886IqrCLYYg6JLgY/03
b?]*#.hr`gHu_<RG>g5ZfN^P(:J@2;$o,3\W@#"E!NT:kW>:/Wp/BeGm#FG69H?\"9X:$5,b*gJj"&P;
89XK:`DB4b<.[WJU2#j''X[D''am1A\?&2od1ae(S.]"XeR0VlS2lrkKaB)XkmrNVUufMl&k)!L/_&\S
Fn.5AL=YYP=?/JG=OfT9pT7>iHbM#sP3_*32o(L2C#/Ui0o?/P(O1#TSioLXI^pT4''@6+Dj*[8Mc6#1
ra0s+[6F9)U^q.L``c0Q#n2U`,$>c:4=F(H5Y@_0^ErGP@SLH[h]Ir(V8g`)r[OCHPq^(4PZkT:8C<#D
!%<!:,[K$8ViG9GjdMCTpCg+I@`",]H0kBJNL7PWDETY?->5b:Teia2\GF+;OBbUCLJG!"tN\!-lj_Gd
2lfBPW_WjHH>C$WbV73geJ%0b`Ti#]Y/S%Wu?qO&["t&q/.f]uV9p&/=Xrri7R8Du]::u-d9&&rb6ZZa
l?K,AA+''It9:`\SWGGX"R6K5q<PI;R;0t=;''Re!TZ4#]npd6J=oER_@"V''8m7?"/T/&)>W\5t<Nfc
Q+K<0Si?)"s2;&WlmXn%+E:n5($)\*#HJgUi0Te*Bhaa(>tad[#1@->fAd1ld-itAM;aoEcuR-7pH\sp
+4^,;X''IVF$pn<i''*6KH64Ld!)T@ArBO,@JVp:akSgdA''Y(]iAoWV>F+1p>3=Z7D",''eRp^:k#=-
B+-UWU&g5RM:Hm?Uu:f6]Wc4eaC:@,qkb<EXIdq@osqHR<PM9"Yphm?8J7?#TOs8''l#^OK!3NXP))H&
`KHkV7)XY@IB_U2>;RIM<hAD!9i/H_.t+?%+[UG>$[[@a,^mcq?@/^IWn&jV7`_Z*4Bk*Zup&iG1nOD)
<m>7GB''T/A3M$rd>=6\ZL;fq*Y^A$#o&u1]U\W7L8pNb''].Stas@5MCKouGlP;WQ;1m<+jPKJE8dQ5
UO.[e''6Bj.0QONlYRb:Hoh^&`J_eQUaFn`rZ@rh]PjHjU-p*&hnCR#''&(`&Fp<*hGP"7af.[G^Eoit
Nj`3+)m9-89u;gjQZJ7pF-Jc"-msd4=''88+<K3bN+s+0@t:5-17m1r5G;E^%D/m[R@!pbhC$V<G":X\
C]O1[Q`#,gVE*p]GsI#[`e)B/@M;-"-?tQF&$Egd;3X<6*IWO"#a^ZIg6sGYiL"^+<[l.G,_k+-OLsA&
IM"#/k<)]r[XRq0UQ6.7fS9lUAq3E!Jp&G[I#L>3Sa0WF,W\FFHr_M0Qbi<JJSiK/-Mu*[.meS<@aiWk
m"sn7ULQ5hVHr*8Zg5Xr^H&C_G\LG#VtA,O#4>R<2gSfc!rd_cK$/a2\XYHMKYqfDDIg]''aF6ii5BhI
4YB2Mo-\K,H_tt7b*a)Uk[)Un<>.@3Gc?_7Fq,aR4oMa9d(EZC,Ma28A7lIVs/*Ve;57MA0HIR-_Y@[@
SfKGeO''>Te="f&O^sj-7Oc(0pS_tEUqoj2?#''IOCEVC;BJCqElD4;iSmO8%C.9c[XAuA[Z*3bNT>YE
.bmpidpfE2Q,VC,A9-!][)4/m(tW?6m:1NU7(aSAM6R"fjP0^''b":6D<oTc^p?46<hY/Vb>!Sm,@`8#
\7@obZKM:Id@2DFpa_g=jdH''4qIk(kbh*KTuT%<C@AT7W"g914mU-QYZ9A.36k*,qiQ1rMBcCetY#,L
!kE?ro=(Wnp$WI_"/^J>Y-%^QTZ\ZbG[`)4/.lu+7hSa7)mi+[Uc;r=]f@C#P2G5bAdhTU6S<C6Cg%CN
uMPnF&V1]aIjG\or+frodrl!iuc:TmH2os_#(<mLn''Ui\)s^e9/^L/bi''D:]$p9`=5,st]J9)\66qA
#"''mkBjeR_2i2B76D4-/KDe`pIJZ9>m>:.r`rALo4dJ7I<Jb.Z]8h&Ufqi8)\`Qe&WqR5QqRtYWRWN[
hdQ9`YH$0N16d%.d@$NFJo;AJC+hs%L!(L#;d\.+H*R[d@eZuLHu<gtTC''?7iD3>eiVCG`VNrZ9i^o$
7!<<Kj?;[n%u!a.XtLB39mjH<J1uB2;hU6ZeTbBO"g"IO/t4+tKp4jPnPIdH6^1I2#/14,)%7o''*,3B
?4?]";@BYji-!pZkcT+8)5H''^+(.^C(XB*q_)l\AtB(N/%#?49R+MrEMo7*oe2UW)d=`0^`<^9^eos[
W8];IV3Z`3o80#MZ[eWDLPtTVj-B?6cG#tOlcWVGl,3?LgnK`",0VEVkm0-*h3]_4keN^-/F=''O&''g
ICK_p6Q,Ch+@ZQ!i73:/;`HN7d$B!QNuZ0\:[T^-&Q=.WBLSCc6<93.=OlY`c*&l+9Kb_Y^mXG/mY0<(
+-S\/11b2:Ir6J85O-0$JX^)DEee1+,M&N%hPJ4A+qZYE74$W8^tKm1Zc68_BpAii;@;rsP?PG6UOlhq
4YEfI9NA$;Y4MK4M",@*^/K#d9^XlDt<''''p0j@mu''AQh0''&qj4NuV@>gVAR6DP_=Qp61s-9m^6n_
HrY468k)c^$*ZkoSNjM\/M]sJ3A/,*p:AMG5Ypg=G2PYrT+''6OerSr5`ZDcTq:X+b(>S;VOL_/.6<[S
+`ao6*LK[i0?QJ?IA?_c&97D8Z>s#Ft?`$Rqff]m?e!iNujH6f>YM^,q5?Q_>W;"*"$&-uR+Mt^[V0X;
2aJ#/[lJ"G,FPV+?m:FVoK(/0GbLsTd0,PdQ(">C3@)FP"&D[tRC)]j+q+'''':`=`lMQL[//D&]Fel''
enkJgPhUOkJg6/#H(io:6(e2-fpW'',RsSbcs\jtOO`]__b154bcI741p?u>XeO@75qTZ`b_pVM#It#E
,;q9X/dK7GVfPI/%$FfjUArbP,)''1XkNjeXgbufj!iOJ4;qO,s>^rqE4%8KOWn11]fbQmEb5"@\Y#O&
>QJ\O7"D*EOWOa-B]bjAU)kpeuX,2t[Vj''O6D0Y-9feg"o:X`r&PPHD!VqhR0VHl?]Le+t.3Bfe#l!;
rn@SYbUgJh+Mlj!i)H@N?qc!Y`^4\QjjA%d&kg^m5WR$:G^`#s>q>3:/,hYig?0gZdcV?4OmS6L:i_We
MYc1fc(`?g0e<[@l;P%0jj=L;=\Ej-WD@q+ob^0F%_=S?bk?kV-trGYtsWa%Pt07RCilY"tSY$T>e.FB
h9aVRc.AS(XaE_&N^IVk_i:A);;M"B"lKXD^[*EFUGc]7Xh9W]gO=kC&\Mh!r9+>SZtI_!-eAqT;BCQu
#Pi6:m^_&`R4,:LlJFak.^DU]VLYS3R"IY:`<(,G]\!CIf3qeFJceE*).kfMgs3`7NC]s,I%e259(?^O
)l:/]am.]NkmK]kT-_9%]ibOI9A2"=tc-.^2#4*FV[,:-RSpW8jC1Cb=8@`J+&PukqIm=fM3#cH!PCI`
Y^2A/`NVHPORDhg9''rlITul9C34Y;p>f&MCO2!+P)8dDg/sYW(5(I,MY(!L,C:6^&i8rI3[nEi]UP/h
4%rbA/SugK^"cM`_hLs)Q$Zm^_eA2En5g_jXr9LeLn9nE<Hggo4QN#''''''(cd`cl!#@46^L`!bUgI0
!PUs>%E>-\FVB]i#ZGD3S@0cL=goM2SdAZ[Y)=.hp6(%LJ9Q<L>B_gs%>,tS:#GH<706M"?ips/cN6Y(
/:Eh9g08D$g?:gBu`$n''\ohiuj&:eBF1/5M9]sfKZ5V$6:`>jV4I7G9j@)Sup[:geTm;XC%Yu"]08O\
/M`uQtRpi/64''^ohXh[J)8W1uW)d?%M8BR$pHm8DncK1LIV,;:\Jf00(FL"cT0,iUYO%7=IfH[RE/=N
1<HT!O$YM8cU!fg@LNr9lrT5q&d3h-U5/"VU-q^lph><uHe0C`n:7\nK3rDSKVF,P%%-kE:>RFHn.rR@
HI+1=pB&/csJc#kT2)L4r''gS_hOCD+l*S6hIj&\":f:=C0Rtof,Mlj@>&@LmbE2X<q7TU3lJWmQYY0f
PX07fZ7qH+#SJ@Wq\iJgO+tplW>M?[&nE+\C$&;c_RS`l,s7S`4WG9X0$/?+mrr38Ca@P[?I<W4Vo%pN
''bG5bH;@8,YVK*kmTKc%m!shN]rI(_I(T2E)S;KSkq&m^V2:08Q=<adg>06hZ;JF^_*p4]O$[n=''FO
)@-q5SPAD?lZI3kXFO^T\44*D`OR)u*H6AqUs.tn[WDY\YGl.FVbC;[9''of2i:tq=]]Q]chKnS<UIc3
a"9X>d\^Pikohqbc^el]U91dC?IQX1SiJ9t@eNI[cS-G>6!orY$l.!u32c]jpL01dIDU4nES6`a/-gV2
!47p2?r=#.rV(iGVVdp,Y@4l14aZd@D.XriOrj$u''UmUG8E>iH7g''@.ks-YBYWc,:EQ-]Yi-98];)K
7,a\^ljF)5FIrdX=9YA5G]O''4j!/?,`[ARWWccms4:M>rkAqe^QUFK>4Y]T9_Rjpp\RVJC<GFdBZqE+
ls;''.ebn228B))DUXU.cJsJg^!VF4hC''963I$17]Ag8JGLet1^ee87URBG6j0V=&$3XE*2.nAO_W&*
Y[\7U;s6`#>e+%a@Iqrc5&K*as/8Kf:/9]6CrW-F=B26''8Ra3p=i0(KpSZ#^Cif5*6up9G?;R[J>9F:
hHGr#Ao8i.UD,)-D!*OO,d)c:hATJE)YA8T7K)+nQ(5))/OoV.&;l6jl1lhqu=j4XA11PJ;P4!?.s6H%
c+k3$m*j$"ah]!`uJ2Y?aft,$EH:U:\EChY&J@Ai-<j4_0$t-RIPQ3(Y9ICYcB;U0Ug%"/3s]6=Mcm(.
hcD''m?ab!FQ2`]*-OGaXFULU#:J0DCL(UBVoO.!8JZYZJrtc:3/Aqr3,tiQ3Ad.!>e9^.Is?Cel%D.q
JC$.)kQ_`0WRFQUPa&JUm*kl`hA,UGt`A#NUX2''[7.JC))tAEnQkfnTh5uUq&''\!MBP9s@%W>l!Dp"
qTe20grKKcU?"0%\i]<tX=oKBL21B"V-YEoR@e*rm9F+bAr8gp.(E6^l:2KIg!,_^s<ZGA]8=b,>Ksoq
aZ.Q1[1.&=G%-SU@r)H(4<dgqQGWO.FE,1A#<oLboaAgQAaf:Ouk4i?[E#Ad:BN[I''NY3#<)aQcZ2L%
aPacn^n\aL\/crMZRdip]:-)?$C4uPI$6''.B&`sXgF"A:PTfmCUjk6Gf3[8hH/`;=m0U"u@ZX$+>7*I
_gh/&U"]^9LgkFS_$J!_Vb?18A_Ld.*\@P+q]TAQA%-57_Wo^$gWBOa\a-''D/6+)Mcjf8%PEF%;B@42
XJ\@]rKQ#k/C\_/LIQq,er8Zj?iO;M(WC*\C8_d'':VCKi*_#u=KAFS(,`#G5.Qad6Je2PQ/0nS$5J!L
ff/*7^g)J-anb?""I_<\a\=''HMZ*qF-ejRqb&agKpkL_;>Y*Si6kUKm47RcBFB$B[:+<3)%l9L+GTgk
B&As%T%H2qVEqk=Kh5io''Z''t8+c>mT1b-n0''K.Os.*_XqIB@HTU=4j2FCjAHb=V)''<\[R''U+Y0a
f-Qj?ao1pG+oe:GO.r,;^oWIX=SbJ0B4d]uVku%Xi>I.7%,3?UU`?u;C?0U"m6Bc8;R*%URP''t1o7e=
FuFc]9338?n3<:ZoDm6lPGW(,@;F&aI3YC;''C)iZWbVf"`;NO;/5%X?6a\-I2Yc.qFhOBu8O)6NCYA''
>XaIn=b6jV`r+H$E<:>(YXVn9I1*W%(fLD+1n[XLBrChGIg/LfRG7Xdi8Al@2*"Rr6^#r5.''mK5p:?1
P;%!q12bbfrN`i\e/l18R3l5*U@?dQR_P2(.Fh+6uZc,kk(s81s_%E1VpFqd5<C&f!GuP]-;^%N^R939
?X<;`6QDf6MTH-UYo`+oE(8]ku`20;2#t*OtMl%C._[oHHKD.]+*J.CS?b<06eXXHRIR.j<cPaRS[+@\
+W^P&3H!oAq1T6CI=13e;9]5^G.J$()#er$/%-V\iAO-[WEEf+2@e-MZ!QUSh1GKjUK(a0Ou.tErbI6*
#1JtEE56=:.n;ZYV\NCoK%[+Q%p,*ft3_"ISFFkabnhfN*CZ6lMQ)+\`A5@eCNWAK"''rpN>b%1ZU;BB
(X8]%^8%r<[f56cf.OF\!IP[="0H^8*Fb+T;;Vam=h5TXEP$k7>>?.bKj1DVPuE:\Z/K+J*V<s^=?uqj
S@&#E@TUed%G<[i$-mm7]dVIr\GT\''/m+1=(>T+rXBEThCEQ%!KeFIianCu3W]k4Ms''uXNPQCPjO7-
P:?B\R#g09Si8:;I=nk(f7XRdl6/gt0e/1#iX@\1=Se#47HfQT*L]0mLIX''#''>:V=Qf.[Qt6$@7s*>
A;KY1Ld!Lce`C2]\kT*=N3X+Sp@Ne;mn9".rb_@GsT5j)g`5/%BFRECXi=F@%0L@h4]j^:Ga57p(;+lr
Q''3T."GZbD+''/4e8i6:Yk9]X7l3<Xq&A8mRGg0bLahG<,3,rr/Is]L[q:Iu&t^bcGLNGp,HUR]MPtO
HJLd81\Oi.uB?Pr#Y::9I@oUXh6Elk>1tHsV+kQ")%K/k?(Yt5>6:F,8k$gZ4IoY"]$Glb''9Zs4;6Hi
X]V_&(Mp8NK(A%K8n66;%jI_f6R:eOMbB[Y<kRJ@C1%pZr?=g7s\K)a>&PShR?^qTm;=LKCjrKO0-gcA
^B4[9m+:R5"Td%&>\[[Qkg^L3u]lAu2:s)L>biVc\3&''tO)#b]Gnf]#2_h][_g%a`KHKKMe#;:jAsYR
1j3,hW"2B"Ra(K4cns+6S+3oZ4(EO>9)roN0u(#W9"%."1;(38+<s![+8rq5+R%+1jt/kcZjB$sKhJ+`
I^!?t0)-fqSk9F[[cBGEF^\,B?qfbGhjpZ,n>bS\F,Up!E@L&rXc,`:Ykr)2am`C3WC''qk4MZ(]P9r.
`UIueCdF*7"1\_6Br=GT[pp>Q^GMqpb`d,XkA`-S0]*FHZ5g:0u*X.P*u"jJu[8*.1F6"%CArh&PtG2Y
W.am^XACqJgh*scO[#"W+V@reK(g(jsWQs8Bh9L\E6E-.XJJc"8''BcZB-5$)h0bOK\(p^Mdi`K#$u_G
fPP\1*@ZT32Xq%j7,4/l3N/X@.8dQ=*_cA.me]E$,UV)pBS![iqc\SGmejj=2rY;ql7MT]7(BY$;SL2l
p"0LnpUMsPX:grD;e3u8=''K9^g;gm\13][K4DiU$In0WlO-lB3cH.kecrg(Kh&QeoCJnS:]M`$D*<bn
`#K4[PkV&Ip''&<J"KY&8u3Vb;_k>.C>0D8T.#J4oV>q"3Le=p0Fr5%7''?k"sPp&hDDoj,3#RU''d;b
3S\&?b.u5dZ:oamqF@T>M.^lKi#K23;g_>/WiFTH''j.uEBa>R*_.sqqLCNtB/mRL!JRAe9"D^]UYu.T
lC!>_\sG2ecc"L06F>E1>8g@t>?p4Hm$%>SIMD.[/6V;:8K7l18i%k?G,Sj''3ALu!)A&d2eGLpSc2UH
[>G:K%-9P0MlOO/I.d1IE^MleZib$=1"W"V%7Xg"4pMV)8BM6njpcuEpG:bdRn;h!^i@6iY@;ltTJ-q;
.dl6NQOTQVJYa;\k"&>+V(CNSQ?;R)TT9Jb@a;=>];[D./35i;dAY8IT>!aKu_n4g1:\o>&pTH\%9dIf
8M78hOkCgTe_OTb,<T0%)O,mA7,o*p&X03^rjo$Z[54>:5k9S.d]OYDS+.IO"INkZI!Sm6"[]sGE.A*9
g!In\h_7`T&`L_OcV7oTbU8@CFXPNp!7eISjcjY1Te)19/1m%Ku9L+Za(!O?C''Z=s15qJ[X/MugL<#2
pG;u1]Q_N#O#O2l3TL&^`.",AHX9MRfpR>mJ1n<7RCneK((^SnWZ5Y$fsk:*=5;k7f.+3UA:gB_p*I.B
cV3Tu0#fs.Wc(75c+GO%ijCK<_?g^bN7aCi5gM?KK8\j5<=OeO#7Q;k<4#H;1''r%&R=d#79"gHkuUm5
?14mFh4fY\bn6ir:=EpqX*"%;j>&3Sj0\Q:^$h3Stp7f4lu9i+udF"?=<:FjXg`2=]I`6,@V2Dp@602R
Q3''rtP)4h_''a!jK]E$(rj7u7j`@C(`C=Z$8*+cB[F`UT6Mu=bBGm57NMd4=+T8A2S_al^\Jm5S"YKr
\Or(rYpnK2%.;hdi%)GMXXBq5AG$ioQKa,0+Z&`SVd.=5$B`lJBN.&oG@2)2AKLTT.qP]8\ZM#Kj3g?4
Eiel,CP-@:]SOK/>H_kFC\k^$.ksXtNT"DcgoL+1!g!#8:IHeURaVO5c15V9h5TH)dqOZ9O-mD_JLFN(
CK7!:1bHc-\B#KQpuPaCbp6q2<d2]]O_/bV,<9lH*rP(GpG(5G)"nKH?-5W*SrZXnjVB?^ar`lf/:?''
"%7UQVmB-uQIB,2eLoI_&j2Nq6W&"2i5-YD@n@ZeAb>l]>aQIQ**R<f:WQ$/LgA:$P#K3_!K\M*h^Drk
q?*;W(h\4u`Sej]d3W)YDl=t=D;GI-IXka22(M>c&BuJ:>FamFk>=OjX@`N4D^s1*1GoLiu23A^-4qt]
PVU6+pBf[n@g]2Eb1-U<?s2p.,C991YI:`''@r=h_Ne6F]N>]Ja#GKm-oW_@b8c\qL7nUCck"tl<eNW<
W,Nt9VmhuIfrq2J95S$s87-1DSUE4oe9C:@ms67Y6s-\b"0WXal]?=kYDoJL8B9J(^T`$F7XL<t;o1pM
tf''jTP0PRPAg]13pO$C/8;9*ZJjm2Z*j^1/h+At_sWYHoi:HY1pK$S-9ikFpW/<TQNnS5]?k]rqql#b
1b"1Nc\qX2#K=''ul\V9FT#?l..%n"NPc=l=/d.-1GMK/S0WR6185;c-FO''Q@]7).-Ai1)\o#5R9Li-
PnP''CN_.Q^=F*''cT!Ug%ci8KEqss$l6UuFCUa#MMJA^-''jER0Pjcg39nBl=Vacq3s&JJ"A<b"ScfF
dr''Pdu6K/=)TNYr7l[.+i$k?''LGB%kJ\LRVu@64IYg*Diu]m#D@+%#jI]8IR8N@P0D(6E4?kJ&o8IS
77LG\q7YLe5#+GbYj-F2e(l]EMeeAXcK]9O8\1F.rTJcOPSBmra7@?;re[8R_gP3]d2/B?%W*gaG?mrq
U/ObLF@)r7;O+$!RU#Ish2SDi>CjjAjae1]Q@3T"K]HR8E-''F;E#j=3+70A]"!n#Y,^fF9gSC-,mlT.
`^J_YtJ%QPD](`HcG3f=pmKD0n\p\\h_/!YOYUlIgnrXE<#9"oKo]R<X''thcUr#Dga.c)Zdf]"^8J5A
0t5@)Xfj:i^eaKjNle]9FYCKC&(=@iF/G-C,p3d,C3$[h&18>`u=hTU&BX/R@,AcrBs=R=?F?&o<)qYU
/Be,=5c;`G[W,SUt/3R9mqh_dXZi5"un)eq_WrG7X+8;<Ap''J$H5((A5qaklrX,-R''&OYp6>??F%eh
#8[-UG.d(I0Wg+T!X8Kd7&7VgaK7Z[2,2pTdV)u2O00?Yd/,@W5-E"G()b7_7=SaB3fjmGLl0iK!KpQG
!WeHPP_!t:jN"NB&gI''?VU4MWgHaTS+.!7KDjZL?IrjW32bM<[\kbq#JO0o0*o\7qI#*pX(73h`#f3U
ehor\*SFYb]Z<-<C?XXqOu&\`ndjrjbQQjk?LgngME\(@oiB<j]4(<.p;R^C.G#S1r25&J>H+;=n*7tk
H''r%CRqfT6iD58jWtD<9_2rOG[Eb9V:LdDk\_3%I''t5\ZBf!oa5C%/4X*l&TSR,`C8`P\_ajNs`VUS
:P8HS,%SiAfeKn\p\gf8N=cNY4CA47p^?a''rHlK!dIKVV_G!JX1\^MDEdpE@J@D>dCD@X+cHE>%iUBC
S<*cH''`o0G)iLr8''A-X.k>`QH3@rgiJ:ZS3.BtB>U8";D<"2Kf[@=^;lOoDEP9JN+/2:opn*g4V%So
I>&!E?[@[V,DkIZk_^YK+s0fE:E#pT8B7bMi9WCs7n?jAhPC#/KHM;I$\!mVDB4`H[E;W''579(UQ2B=
6nGK^d:$)8s/D@tqij1B)Y`\huEt`f:RZ"?7+mU![=2+T[;$bVkfZ!J>%Rr^Y\7UJQTOIZ:O4UU\0p6d
n@jd2RM;UY3jJQQ3S$lA''>#C+Io*"%IT@N0Mba!!G>ed2!cWQMGE$h1IL=lU@6cQB8-:W"7gLYV&]Jd
JaF+?f`SD%5RM>9]=6<KuLNa`R:^6+6t2r@Y1$aJ8"9M80M!@NQ`JX,bj"p>AMg2)K:VAbtTlEd^ln)8
OJRd.20bg:a@8p*E00F"+W?H@&gDN_\5''UmuKCZgk$OQkDV0]XYHXi]b=[ku`7*kk*m$2ub%?1:8M?N
N`-`jFlk>$T!SBlT.f0ih6?;`fF@"&-<q&R3URC''t)D)o)H$(dI)I?D!3+)8!6Yq]Z5aOg)=Q/YT;[.
RVrjF]"W#]1;!S#=0W:nr]:''s5#._7\$BI1;sK]2l#nmftI''ae.QKqPqE-!,d";U?t6FO]S#O)g;::
9r$0&E(uW0,AB2A.Z6eHW4l>$qWl\Vc<O^K\+i=AN50qVKaZ%I!-Y#]:*2>,S&=u>q)E8''=+)]o)$</
dJ,,T+4[kj*MEu9OX%KY;seC:c)96H+S^;fIHA%5AgjBq_OLsLGGM+]k8Q@@!pNAA?sm,qm0oIS@GDOo
*/VNH+tc__UUPGn+19ZL_%E9K]D1gt7ZhG''tZ,N_''Q@K/iOa;CqVdM*XTDt_LUIU+AC*.S^LIm&9/C
4)0\EA;*(dU4gd=]ej&.gP!rWIW8ok7r/(9G(B2"?:K+Z,emHgknrRfT&ot?;!Z!@dD\k1u''B*qn!.A
U*/<rJ3r@gNG+2UK[=eCkq6"/2BNJCq%`6Mb#68oFSA.d7H,\#^!"+Vo.Sq`Q,X7[HBK=;T(`EHSK5Gf
)4$F3Psn`UCV/[!RndVh"\:cu2dBPU/b\-TfmP:@ZpC!Z"Nq0G7sW*jK<;tC+ME^KP@22rCjW07ZRAkT
Lu6''B+RRocC.(BFe:4R4P]"?j]*r3$h.`M_l7Ii=+$+7;UE9?Y!6LD7:7Uq9M9sR?+?)_.H''j!N=s8
qsk&]qN-g0bOdLEN(2W(Gt&g];cmC8:@duIWBeVC*HHI/>tB>f`/je/pfDZdrtN5P/=QoYop5@f6$R<u
OHY9-p;*%k&l;e#,X''fCnm<A2XGCES9b$f>Pq:\qJhBX(d89`(;sb''?`=-G5sL0#SgCpFoMt-HMKj6
MX)O4a1;2#DpN9^6_\YQTAKukeTI\''#EDGj0AYK2&R1[a\/F>jGNBp),3#W;um\ImU&A*l$R-$#I/`g
=L=E:>E,8=m-ipdoGIs;=jo:]eiSVW5nF''EZgS!`]WS1ErEYDHc&\[O(9f$,RQKMn681-sHr]@eF3R''
_A2iO3[ZY];s$$?`C1i:4T8\>tQI`(u/"F+=bO?<>&_JgaUBoXU>n-J>TIRA6PoW*S$@)^JAY@''5-dQ
NQDF]qEA)O#GiMn6T\iuiZ''1QXcL_@e6qIX*>pWG+1*7M18k''jR]-1T2GE$g2`,B$fg\E_%!^uDo24
u;,rn''Pq/GrSoXidHqc=E@2<6fV8lfs]5)-.LE.*\KAR`8@EIXm-\F1rA+up3Js-%GGrF!VtL8/0K8;
9]s%DOjn&JhEN\2;&kq\,r=bO6j\KjR\ZfN;K5ljcgPs^B7SdZI7DRT>U5$7\c]`eIq$"$JK4I(0S<;(
=L9q62UA.71?D[Gs+nJ^At`,*dl@im#Q0-(ZiKHqMJb-m=lC&"1lAiKVb!Vf#4pIn>,*[nY`dAfp?)`i
-k1Enm-2ZZ=LK1,Z7(+Q)H/CB0[!Z+XoG0[ou<u<T2n3En(mP4VWOWHBkJ1b;<Gd3Nt"r;!A?juHFoL\
QC)Ka1fr@`=^%op?h6NL3s:O.?sO$MNDu0jZ[#uk*,<$:_/Mi4:CaReXW]&8/7P>i#G\7a/n,:n47aL7
lSn5u(C)FR<jUNk9/#fZMZV`Cf0Hn:,JFffX11[!AqYD''qF.H/o1?S_=Fh)`4dp)kr2BrGdmZFjNQ,q
CctqI?BW<nkg9R2gN6aApCK:p>YpImU1<0WqD3=DATsXU.-Fk2o93S*qK&"f9(@[5Gj+rEml!!u61kap
WRmHKuN`PWF<$W_=m=AE[JK.sX+tq;4V6(^[<.M%*fhWJP;bUg!7&2/SC>^C-`93!.e.lnYEnmFk*.KX
ZA2kEt=NZQ\''LqU7_i''u(FlNS^W0<h+-.NQI8-"u%ZZ3a7][1Fp!h=!r7gPfjqtRCrLrB[52`E;W1!
4,?8O%p]9I(41cci,#&''j9`ZAe$q:/P)3M110''>UI''-69bo(8h$s>82O@3@:ON/OBZ/kZL:O/f1tG
(c@?(T*Q#b''<^%i<cr5r?#H-1=CU"qpngAI"M`EU=H>:B.HJK0:_d+pNZ58)I?<r%8K`sGD?pmqbAQq
iO5/Ma\je!`"n.peG-@B`Kk9!F@SmaYu*W;uX)ZFHlO211R\>00U_3=Oa90Jl@ZS$/26CrVQ(f@J>.>=
XclS@J8KMlOq7,\d)8u]AcAd\fTFkspU8;1ddXoY_pjjSdAH;S-(YLOT0=AS,4^u$=K^#&-;cT+n5@bS
_cF[d(/jrQl2fsCG"]9Zk.DkGW"__[d%70ulgcUcYR[d\bX<-)#3#MRsd.Ic7l1bGU40G$h+(KFQ@c[:
ld]<mMtW<]2lSW$CFMdf:Q2i4NY?jrbc/U,SCkQprC,/TQsmZ&c1k4%T\^)LRin$1m"YFTPc*o[W2c!^
l_?ua\Wl)I)$7Q@m68O,G=/N.6DNTasQXH,P=T:G_!CN?Ur9''^>&YL0kFZ!YU1,9%.=>Z_(,451uQ[6
$o<Ra[VHIoJNrMa`"CPXFQP5a3u\c8D\b)SX=R6>2!+&.7\cr<R*6fkUr+qNZlk;gCM9Rd)s8*<IJ@Bl
C\;V5*mjDm)`8^5Y8jYsBTQ8''7XZFDf$%GDHRZBook&=r6oP<22U7/,ZFj/U,/K_YnmXND12Jq(gEF\
c=hOD;\D>B+R6VG44A&0$IkF.*?8jYo=[uC.([mik7Nnm=^qLg,5=N+YEc?]-gFhs4RtWS,s.`3*.,YD
''''stnpOQfaq_%qVk54(`$c(-F%(!pK^^94R''6&\DZf06B5e5hZ*)-JL$Q"tL69''%%to2g/;V#-*!
aS2XMX:=^,JT<+Sc`0h:obNK5apjeHB0u3*+,m[]0Wt""O(_Uia0:H6F@]4s)=S2(odZ>Sp$Xc3NoqTK
c;u_*!HI)7XKV:1A`q1''qm]qYdq4?N:rc`^!!e9WoGI4uVTJn8<1r/S;DVAN#U=h$0pTLe0EcNZIcM^
+G"bPKW]jh#h''O=U$(iIITFe]qnm"TV-_Pl-8Yl@^0A7a=f3fe,R;1c-?t.ol3)!QMfsR`uWeWVNePU
O@CR.S/gS-pn%DNOc&V?X&J&8MDf6g,g''.s=q/`fcT1i=6$m)m[4ki`C-m"T`1MntjSRNt[3*M;Ku''
MmrfQe(AsL]L`1^V.:9B&DFN$4_=fZDA[q"suBiJ$V-79RrFJFLr>[iu7$Cs:X9bb/H8KIhHjuh%CZ:S
p7[69]nKmF3]=)`#Pd@bpC`OH:L5]YVaW3dp8:+O)d/$3GGP!$[`&BrkEkE\H($''kC[R8WNhdUHjcYB
iM.F4`-`E">=pA+\<rpS8/sT1=6.h''Z=3gm"3DholU:O\Vm7MCQ;$F#R_J]D*SSp$i2ZYTK#PQu69''
,4W&F#F080jaSDo$rq"g%HXB%U*oTe-I&S1G&KoNl<gr@GT7$S?;tVE,fPO.L.L)BiULbqV\:jQq:!g:
PBT7LAaod(.ufB,O?ocq,n#GM<$N*>!9H59bFXobe>j#rnQYc8K6+hC#kU?3%G@tkgXjq>(o-ZZT[$cq
pgXn$eT/.H>&R$X#48,K\LhMb8;GG<2o@aSY6pi-0^k=g:jXu+dau4k#@,*6M!kNolL&Q-6Ccq]+TEFn
h<ZLk\fg?N!Hg(BpD::"icra6DBCqJ@_T9n5ojF.S0&C#<J&1X_G[MB''=-lF]?HWimH&plLjFnhWsH$
=/gMrCGhC+jO%ig]$i#jKhsIM/c%t9E2k<.%JFe4r/_L9VZ%(EE@mG@48o4`1JT7''mHFT_?`u8cC>:L
6$0#Gu,Dh;!t@#ei9AHUp1>>o/#b+YRV/*V64!<P*gnJ*QAbr5GYQZe^KS@bYC0S:_:("1foR=(1gRpZ
JV_2#21).O52PY3("mDG51-U"0pgufsH6::7dI/F''i>3Pp5;W2k.UK!+?^pi-!<r#''>0"N1X=;.3s3
Z*nYs+3NT?]=opH`l\r@S@njEu_"<bPt7Md&BYKO/uG5`Pekj5<*pTDI8W+mI\PA]`%gh4a,uk,c$<qd
iQ.V0j;et)Qd]G(4hhfdQ1C,EjfQ`RK<c>`-33KQrF%RCIsL_(4;:f>!mr6#RZs3hNT"lg@C_+I.=j*M
K2Z#1f+'''';sR''gVsOp!Na<-6g!i\;,P#<b!0."0:HTdm.W11>!\W<%Mm@Z)fL*JC1/jRP`Vg>Z:(,
4i&"[+WO`"fuTjGrk/IQmQgKW3u@U@YjE\2b85D)EF[c6ffBsZLh-n/^ug/%''<GH3:UlZPqD7hR)*n8
?F53Z)ZoKfbjNCuJji]&giB7qfDl(PjlAd*tt\2FV]''Y.eY="NbG.bWEk[+DoUX-\V0leL[[\`!dWsb
j!QNY%6Bc1WG/d6pC(soVMH)B0G9/[uG**HOTLbT>''jaX"9:kn.MUV7H]4sGc11Tr"%oIo5QU@Ej9<H
_#?F4>5HrEbWr+l2:jD+AscS''Ta$_,HaId(q+7`''=W&8Kb?KZN&KIpG6Tt%BMAN=5;@iGj$]u:p[.P
t;j^D/jC%7-F&.e]Cf5S,rg5s@o-(ELa&*RX8A3PEBC?:i6nk.X/a:];alhO_;Y\i;B8qa)^WXLUdA`_
I&ar?N!E]40fVi9P=:.oN[Hu''n\oM?@cNMLm9X1DsO;O5^*O*aYWNR78$9Q)$*0''g[''[er_3hDBe&
rHlUJ!%G^Lo\qK?q)\$/Eg]kBHeV7L259]Skn0#aU$B$*=0t)d#J6/8@dfWK9W^%;W.Y.1_Pik%StJK_
B#0;hF@6%$]J"?`f!#ZmCEm-fA>@d:f:!ZPNTeoHlmqOF51:D]FJd4$b,4$@]*s@=b,Q:bke&</N_6-8
9k-GDI1E[SS3pl:)T,a7A0j!.G[Qm&Hr)WZ5hT5aJh*S@=Uc+Rkks'':fM=mXD*?GF-)d;t5ZY6WH-/d
M",ku#N!40L`P?!R.$MPg!5nWkaS=t''+lsVPm!6#`\q:WrI!+?]R=:##=R[d%4hjQE&7Qg25i6Q)4dd
jopsNCP;\*L:UeCVtcQA-JM(&I9\G2/+k?k_AVY+DXB,s_R31:)r_>0":kf19%VT%4JZ''iQ\N4LSnWA
aDUqMILoo.UEniaf@#;=/5)k.1r&AX*WM)m[6+Vul,''ZiT=!Lo[n.G^]0C3a1''_&Xda6o%Z!Pf[[2M
mS^eI+AZL&MGF`>P''I:nVGZd"b]g9eq8%th1B)ccTXdp(&''[7$^\g1Z7gVe4ksBGThGI:qBpfe&#@2
A@p<;0gCr:TrGb.=d)@-WNk]L1W(HIB&A4Hqc8N.?anE8/o*''@6uoa/dQr=]SR.eg=-k-^a%&b^Mj''
Xq''OM`74'')_9V.IQ&!Sn.G7;^7k\LDUaQiim"?-it7D_BNs"8R+a5^"cZ)o#ku8cos0<UOY!T''<I\
2Rn;EBX8T6Fl;U(H''BjBg@)<b&J((EQ2TLLUEmoF%"X^$MP3Z,IWUiX<]31DG3%#MajS(kdbV8RZa/n
r<W%n#"P$Qlb<iT!@WN%X,RV@l6=4kKDif:_uj*ebsb6fNHmWm+59P^$5odnD,!m[@@QCpLf>\A?2h=4
j%Y@S;)a03+m&E:"9lr:@TF`T5A9X%p1n6"o$S:mOOf@PJpV@,C54=$Y!!Y#gJAS_>icj3?[uF?5ALT(
?c-fPiM"g<OQ0V#''J@MM^Y;l1P_Jr^nb#_(b_1pX=0b%:''''gXuspZK,&h#R?F&WI9FU;JCnNm,%Je
''eO-)i"29nL5;%`1I&`6=dap""[\92ZV$46$N*U^YK\ORKG,;_h/a''U?7/&1Sk(\854m6`jn::,?;M
SKG^Rg^Laj#"5W_J4<qh!I<:t#c0P-''8hKBfLI-t[UK^S]j^[qK-I+,!Yi+/!=T47mpB$jMZLoaK\8.
Cr4W<6!H6i2-gZWoo_eqqW?j;P''q2A.;ZLraMjUN@!oT^cq/gX.R%PK:X$2Qq=s`&Jo<Xs1JdXjSuD:
!M>caf&mQY$:`h_5JF+$RO3u-(\Z]p6sM3Lo+ihZ`8Xd<"po:akQ-ViK)eb"-26P]]K)I::fb/jY!i`J
)[o=C=(mk_WR89h$\k2RWOR[W<-6,Yd[>lZZ1+:O"^gr4FgU0]D:3Y]>E;o(clW@qs$;fK/NG.=?Xb%r
IMl"XpVli`(]JZ3R(Ed_f-F7KD!6T`^sLP0dDurBlX''mU3ZbARjd0WqHI2PFj<Z1T1)LPabSnAoE:*5
''JkUf-L?R^am><FAr^*!ZM$=?gp4f+Vb3V*,FhNeE""kq;"FeY&+j$rtop*pH?M6]"a`Db0>nssPA.c
AQD3DiHSCCZ1.0+tKU.kstQG@3->U10^3Y]nt0K>''EW(3`3f3K-Dk":!%5!F.4:ED(b2R1Zf-Ll&HLk
4NFW%g%1R^<5BHNRQ-1pND\c]7<TofTij65m]$%i,&Pm/(!GrUoRuk-@8Rc)0BoT*4=rq6!kc!"A#5&j
MAVnk#ds\RDbp1BIfeF3E]o;(XL1%Mp;$.K80FR+ddGHLju2^%f+K214($djQ%D_k*$pf3''G\ICFFBQ
19AFlje8g3(1Pg[OcCh23jM:RNpRS9L6:R1I(Cb-eXjA%S/l2p"$;''\_2Y`DBTpg6Z6i;4:_Hf0:.nc
`Zsg8YOtcd(dU7!j-P^;mK;.Z1?#<-.>u>tQi>g&)fRTL,WA%k*>4(UB''cGsfF_d*f0cK2IXNUdgGD)
W+s`Bb")b^4W2<R1_@rZT(dL=rQ68I*()+&pkP>%,h4<mkY,Skk.Z!9sa[AlN?Y4#F5Dlq370aLT:%D@
u7`WIL8o'',,_gj%H%m7j`P5-Qia"s*p9;!e:I+%j.6oa0,hm-OukAS]d/lV''EKH&77%]fi)<Nd=8C''
V8Q2_W>I)LR?(CTkdJ=l''gd_Uq1BGdoWq2+fHU>3bt5ck:I"VK*7q\k/ULE/c.FUs4qKrj]T^WjB+H?
LDsA)F4#/<-@TF$VNrJL5c_sXbS^XC`JSbc$8]R6q9Vlc$QKXIubi]3d$S!llS2jMk.X8PE9uej9*03>
!L;r<Tb/MnS%W85]k"E([i&r=-_NF]::tXD6N3&3\je^gB;QD^sE40r>Z3l/D;U''=k_$1><4#&c.8Y*
Okpi!53?j80_h'')`0j<*rpt@o)''?h<Ksc3^h</WM-^[#Sp@8ffEo=(D;.''!fd3oKA''"&Noll''=S
RBWm%,Yi9Pmkaqn%P_2ZGd/ZK&Hq"t8V9fr_1mV-pgD%H1[u?0K^S$fB*0YbZb6-0VfkatHqsk$qig*s
S<i"CYUF`?NL?ROL[&ELYL--ODUaWk:&DId,g./7VF2Yp46c!c/oZ2IFu)5gU\=-QUa2\n&,;+XDFLW_
d&''+gARd1V^<FRE''>(hD=Dq7bVV:5Z>TSQkA0K35AXh\#T`n_>#qf:nY*4!tAM^uhNq#;;OprZL?+W
u6a%@7,$X24ZG[A_N,[Eem@f2iaHV''#.''(+Y\]d4J,KTHn"gTu4Oo)_8YcE$dGd7GlCYJ>;I/a-2,B
$X_>5$A:,:9jT?=<4n4P5)0:V@H4L:"h2%6!@Hu#*SR($2UofLErN+eeaGjj<iSY@-Gg>Y36^Pk,J#u''
#@b0,^WD0iB]%>WWWZc8obKMRtQ4uj6AX]7e#*DN"NNrA1EdPSN3Cp<SUa-kN;UXcR]K]]+Sj">o7:8@
:L,E7e@7jn\b\U8WF3QJi/ZVA%d%&$\Ba$JC%GT8H!DtBfD!`q@,P6$7)Ve5r,^)^]`qj"Msgt7i2I#c
tiWsP8?d(P?#FCnt&\$3R7bVTe?snEjF7G3%aiX"/sU7&Znp2mZN4!,''p%dd-JR()\mIKrZ\XdT*nBg
aQMXjgqtZE$Z,`B&J,.?:`B2oZlHRoD<b^YmCe$i"+!Mfqc=i5OPZ_"''gPpg`?A&6#+)4pQ=oM-VVoR
;Uc!PA7-D(49KC/[!+a._$?(D=4#`5$O3V]FH#ITmYkKeY#%8%#+G]]Q$kkHP=^MCON9:M79EX7T^^3L
#p(Sc7`:Vt(ViASVH[$.4Mp,m"dstq!q0r&^<af4Ia)iEpUuiMl.6.(OA!o!TAJaM2-n^39cA)NqeE/<
&U5CSAN1U]Ga+mn%-''u0b6B@."h4Z;db.%*+YB[kI,7&sm>idpCS`6:$*1>%QM]BO%^JtBs8Er8RMNR
d''K8[<DVl.aI,!''_MnPQr&0XBdXN1@g3(OfU,f*Q(*P-)k(?\6X6eb+E%q60T<Di(gZ91;T7T)HL^l
k6=$S&]:3lY[1,XommN#R?qQ;''=A0CS4o.)9*(i."NF5mLgg1?!K`EFe.2rdT6-=d.-Vf&gr[deAC4Q
"`fHknHhc3jPe.V?8DWb+a;IZ$"2At,l8%ph_2+q3MDF2CM*BJG@''cY"G]oMq=AGmM5R)B5Yn"THCrP
N7nHf9]%\-rb3Kl%&3bNg<09]:XWp3V87+QoYI>]#ZV5@e\R?=4(K:LTD`buA0r/e&^K,.1.F,`T<;94
.hNmBo&hlD?:ROidiLibu5Zq1L[P<#b]KttCh-KeZb1Va/IXcjtb6r''V96[Z9p\8T%l1QmWUELJOB),
=*BkdZ)/mt^O6Y"=;i]J@5-K`QT6r=D7\g4N,UHp"U-.NGD1#=bM5P`:R>+U2?,q@t%qNr*N`@s`!-(i
O,]81H#8aX8Yn:hmNP+gqI-RkD[8X\W''8Y0KCZ_/I\8@&-gqbB;(0M_DV4Z)L)2bh>qH^([Q)hO0<ZP
Qu''Fp$o4l?"j(;lo;H5]dtQ(C4TN"Ku`:$WBCDpf]Q/o#9HCq<npI@Jt4,a=(>@''q?F&/P"D%^3%9<
p(%Lg;_uV=[Ds;@4@XY>^FVgmZHjF$Eu3W)oamDJmbu-"4R_!)5fn<''Qq"4tXhT$E-hX5GS?rQMQdD''
:q]&"#n[''^Fjb-FGkZl-5/k$hW#:0''pVhuAd*Y)@V7KCb"Z?TMDV.sbUj.M&RY.,-Y"asTPbK''ju,
YLW#EqVO26FL<nGbcb$Prk"*8#M)i<6n6R5aTUcBeOp7E]2+PUi/iqh:cYuE<MF]rNW[K\#=R70.,:?!
"ed76''NLQ/p!^fqMOfoM5&i''PS9s@51HC5,"qW_q#D6e7RN_n^@p-*lnsLG0$eNM.,$:PUu0<$LJlC
+!+rVZ]nNW%!KKM3rS''T]gMef^lJ`cFlX''Up5''f<iY.j(==bU''h,Zh`f!OEJT&,5ZSOM8kX5dd6e
+''7.JX<2tf-#)7''#r^eC?Rl&:(H\MC:!5s:/>*=ub9j#&mP\6T[GlUI^Gr^4+!Wg[!0om;Ep&aj,gc
Fe)U6f8<.o@:6BLOfIKDtmKu<iuNsP*N(!1mZ6KpMck5S#cmA7n6FUbPHF-+#"l''T6io,PAW$DN(<hQ
2&tK.BSn$c[)/VRTc?bo?/m]0^>snE,bmZ-4$q`f(47S:o0kFO0%?]F`uAor2)h^r_#H4p=Ahdc%Q:RP
cdMhO4Z/)s5o>4Q/$^[kWcqc&$,Jb^Q[#!3kt45\V29imHUDH`F)%OZsZ7ri\n7kN:"sA<&98FU=is!k
O;]VB;ZjJr;K9h]&2_''St;Gn_VXXUJ7D*n&e-0:lOs7WgPmiTae)^!I9*E7j)&aV4bTt5.e"&"t$Ql[
;)`?ch0B1O#%oc]"`N$"Q=AoX$(mY[_c-7B39B9m?RA`$>4[:MP@=^BSA&bihOHrIIX")#<r.\F!f@u)
)iN!hoVK*M6(Mq&Fo"d#+YSf''H;bd"aT,K1V3d+8MU+E1h3CB7hY`89>[51NIC-7hhk4qU<HPL$hmsY
A[HDbcRW&-D)hqCg\>`!oJX=q.(''DUC=cd/U^MGRDE8BD3r70RL^TmGC6=VNoV[)A!3t..k6-e73[(%
1dC%_fIb6.mrtX=`OZD,5!^O7T$cH7XkZL^V["I*J_m#5;9RUjNO^Qj@@S4HC%1aj1!2X[,?0Z5o&h%N
?4beF%8&?21`Sgh7fj1qtSm5;0Y\1nCbd8]>nf5''<?Y\mL@>#g!BZ19.m\ttZnBC%3#ZZ$TbiPDcOW`
2GYQ902P1d/\lAJQ;#IU3JWb5Ro[6a8$?VtD9Ym;g70t>#JI$^_=JLm7N3Am(o.<ZNbBF#"S-oOl`295
p_JQ(akcWrC-?n8rl>Xh+sIiraNh`u<BaQ8bS^)e.DZ['':t.rG)WGo+e3`i0,tCs40dIiOlS-=unsrM
jKtV;fVHCJgZ!\YQ+CBf2`>!\:nmG\Q)qU"tjaVfp<F<%cW+I`[!&b+5bO@7-]o3_drb''0u5fq$=:]&
jE`^b4`LT&UI;6N>j6QY)RE#nrc\n!j2ip`pjIb(TMa4bpNKl<dN/@]81''hkI;RO_eO74_AMQN7$F=*
C?59;0CXn7Z<X-[AZ@uSN6C''>0/gn2isaUF>T]mUQl];/enKI?]IpmrGW^H?c/V$%JiV<bZka"s#$_(
9S*X]2(j<_oS.-ZfL6[''G%,R-mQC2>Mg;$kr2Sdb3qU+/VLr)c@#W_Z;Pn7(iMWosFiCtJ]p;2YS4AE
`W,.co;6P5GWGoU:gVa=Yj.B0\Pf</0^5*)5j<cl5''4(E$87s+BI$N<_um-R7YU%*`<kr*t=/N=(YiB
LWbM17FWXSWN%<5p4Zjq5aQmZC2<%QZW\^QlVmc^8q-jE2EM!*M/`JmK9"GZ-8nX\dG9NiS^H2(<\=X/
5%i:P0@H&M(/JO%$t=D@=E;$9gpKKlXb!D5@Tf(H2pSW.`p>P''?MekL0o*.8oI[l$*ZDN.uSbn1nLjd
`49ZW<1-[j=gc@9i*kI$X>0A)-N7i>$HpE[dPg<&uWCc?!I%8\\uC]b`eSPS!#DTfD20H)8qL''8>I''
n)`]LX;H''gW++L!Q%XJN2a8lps+X(77/l$p"PC94E]V`5-c:,h;J7Rru%S3^,<Le^k>N.:r:6,qnL#G
CV@UOMfQG)a5VAmf*Xta"-R''dhtZ]8g$(3(3KPUO?5S+_"GWh9M.k"k50-%]65M)5nYF-crc&SfB_]R
iQO8A+@85@sFVmN"%E5#^q<OTsq00Qg+''?/[F!=M9"Q:H/U0`Ihl$eKV[[_4H@MNA%F9[.&5JJ&,ikW
TISmXpWi;m2k"af%sLJnL!bbhlYh[<n@<<QG_K-BJhb&aa[H(cGW#cNG^HfR$BBtX&@d"Qj[fFJCn[74
/6sM^1BFR9;+k<alirh@@)hdcWQBM+O]#60rBQt5:Yc?aP%%uetI`(3Z$n/aAL_n*kouA$SZaoW:1,EU
]C5"MX%j]M3c\m-kC"2BA12O>qCO580qp-`0'')#fT-R67!h:,h:9/C()gAj+cBXg3//1lB@A?kq+A.d
7F&[dR%44MFj(;j3#)s26N[aXETPc*?pk7cF$u:sDeNef57/qE)IHio**EZ(4MnPLAi".`V&adtb7Y3]
ZD4ntPMi?oIR?X+3uA6`S&q0]%\O''jZSB5!](BcMNtM''SMtPAY2P2_Xp+U%L(g0qVAGOL1[F4eXpq.
 %3!EB2''PIC$D!@k:@3E]M>c4LgB]G:8+\Xai/7,>@;kmKT<9q+X<SoKMVS9V;B''Lr8Cj)Y&^02V+e,
Ol8cIRFjCq`(]@QEOf`f"/cZ;,3I7+s+UkOl*F^r85mtbHL$-i-UM%dh)@DPbmWIH$-0(M=n!)U75ZrB
^)aO/2u>R^.N94)8K&fhS"pJeX95U>hL/3&P#%qFQMWFN6s>2pi:pd`!EGoF`5jsAEnSlU8sOZG@n+fa
D@!Sdh6OeA5Et_JH8[0f*@fP>(Gq4\8phl5"."S^5ZD0c0-b!%!n/"Kp@b`X>UbFAn<K]i5gecFn7X&^
7tJ>n#aH>Ddtpcj@6i1F$aYMA%GSU6%Lo_T)B6Y2M3_rQlL&$[QCCOcb?;f9l>:ib]YK]Sc_#WQQP<@r
YJlfToLJ3a^roWaLT,dE8WNU1V:nSR9NdbotZ&;oPkiL?lG,rfl1''HJ>15hRV0?G-m(c#_191_ZlIE(
[/s7%]+fXR4+m%nX=6E2c#2+GWsWn<0re*4g0t=hdT^tBcJ5''UYb&a^N5[uK9k@kZ;!G_A8]6N"bM-o
9lq?oDHK-9tPoJDfgBp(aD0>hHPoemo]LHn3IY>>$fm*l]I8QrH5[h1J-&1EpcfT\b;]&GK&0)?,(++9
mT8`5hnnn^B#OOqa$1&LNJ=c6cF%ij!VQ5fE3bfk#''9"&J1o/!LXs^m]#M>qV%kkJ7%"gX"@E+7J-nU
QMBUJJT?K3LuD1$^qjWcc.BI^SJ!I70/IWs`:RIb&ND:sp4Fb"+`l?u31A=!Z:@V.>]npN>hdQj*Y662
DW\E_K9dOfO=TYmW"$M>;;_(=Ti4EbOBqA[dP;Y$-hJAuk4C-mqDb1)Q1btdK''<VOeu$puj*Hk=8S7o
/U5ELL>=d^Y''._]8/Z2/3+aO7J3Af9j=E58FFtf.KIGTS7R=]1X;DnhY_I^<G3iJ`2s(>[6J*g,-\p)
i%ZQ.8&!Mr4QYY^"HK.>Wp_s6oBK89)&j1@fg>V-HtT8S=L72-i%;b\BsJ@6Sc4KbU9J-WaR''Y]''m4
5M^r%Y(GC?tI+=2^TQV!"R"@WtArX+J17)C$s$6Wpiq6g77DX$Ds3IB"]j.GjPoPcbX>7V/i*]ibO4VY
Y8G+EU;kR$b>30e=GkH`4N@hDE<JsR%55/k3O$BYedN?ZY#pEBijVWI*5Lc5`0o-?6JGh`e^6#5]1D#0
M$$!A(VnP.9q0;4Em`lm5G.uEl>Yu.]Xn,8HY=hm(H(t,(nsB&i!%&TuU`FWYr)7`f?rY[c$`-/j]b-2
?->#U^JSV0''0_XNlFO74$,\FeS(q&r''e.H^mVTA>+:$`gfg\gH3W,Og2X8a`ZQJMlGQ#j#S&;TG/lq
C;G.A?O2L-MigB<uqUO`D2cJfmqBHIOm$h0[0LE3Xk@^8ZtknmU;j66"!YgX)<BfCMcVAa9#BE*Oql;`
D)9gI%>X=rP3u0[S]C''qeo"Jot\GV%Me]Vf7r]WBS3dPVdL"=q+Z;0p=aq.W\Xt1Q(O!Ngb2hWNre9g
jI[fK8,VteS%gGSWucCOM30^;5J6`.muW^)ci]L]6tIa6NQ\>&3!JJ,fk0:S!;jClkRK!2CbR^f["1\-
#9e9'':o-M1V[apY#NHd$e,<"\D[;bjZVecl=ZhV]iZJaZX0auA%<(]''.M+I''*4X3kN`LK_:@>+2j4
EXAT1D;W[/s-=oI@1&nGCo46=JXZ`[eb`q<jNm/HdU1SSK:C''Gn>!''RlVTqTZ6Zi@Su:1>MX$jK)Em
<JF_5t";^b]:cLjE@]05CjNP4ZoLoM''chcc.adb[_9-*PD$s246FHh?Wk9Tmo/X%<1^.L5pJulk<bCG
L*.uA$e[]lOqF<]DlE,M2@/:GpLoTgTt4>uOrcHNM0mb]PD%%6!tj;sMo!SQlJ88WeOHo]0m3jAaQ[\O
]AcI"7c1<j>aloiO4D&7`dL@3,gGj38Q\,02rQlV;:;BA>3+"<7DEXI*L_p@5?JjVOhNcgh482m!^/J]
-,`AdDL$qHp%5pl9jH.&ec*5J*]:WF`r\_$.93&k$`C:THqm`l6Ln.''^jTF=fk*c^<t37Y>Hu<i''j[
\8?jJSnd6!:]kY%.C^\_;78g/3L1pOA#2_H*e_cYj*XaS5NE9SAsb).^&X_O*Q(=$L#Dn.u![HCtJB*R
0[2pUuT''.Q2X)X&YhdU^#DMGJQ$#a=+?)sKoZq!BDq.l$lZ$t5UEHgsuQVm=<$W3^64k`ePu04''L<h
Z6f]UWPtm8jlrRbM.<;_[9DOTk_GS?<1;gL63Pf*8ks59BUFl.MWV)GG?g.A?PpP`G(^[R7kW<.!.t*p
#t(^&\Il<.pQB"F!fFMUf\F`PlZBiX+]^GHU:(DT8AOf(Vq6-r.X29WEkEH=?G!c;o,3\P];^])VPP_3
>kgGIA%gBi16)3J4[7$RtEqcPfp0@2_r$WMH1E3VQ&[)g-r(E=b)W8I*d#tdPhN:hNaPMe0tqQ=pZPCf
p=#h_<mR^3p&Zs4g/Z-MX,qWim3p9kV>hXC/ps''86dp(Jrs''uKTY,/66N&Yh_K=[_kmhj6pK\e+s4p
_EbGcj71=BLB,j*8SW*><fN>7Q*DA<''bbeB/;cD856K)nVj+QI8EFA%/be;1^)t+5YKA`Ul2!7X5>^Z
9_e*&=\"SJ$rdu562q@e!lJpP4]0?e7s^(ZukC2SQHS@6f.5Hf@]HULk0KF,es5o1iHZ&\HR(iZ;1Uq`
+2jSG`Rei[/kRs;\''n_^%FrJ\c[2K&VhDe&R@J3*3uC13a2kR8?Lnae_pir#5=:lng)9;>K;%Y!6%Aa
 %D;Ru!"`X<)B,:S5a?Q^;*F!4J`LW"VA]J=b=V''hZ&P4Kr/##7A^lQPFu[AP?f*+t"X?Eiq''k3%Gb-
DhH0cXdYP.gsU%HJ@k!f\f)*a\](TTc[#&G%*k;YN8TIh/+$_./F6^$kD^''eJH,9_[#:2bgKYfs/TsR
=LPc>WoEI\Vh8M*n@fbk&,@6h\)/u8EFk[X$b?PPi''N4Q;e>QEb/p%JoH^W,#;aS;k\+:-5bF/?_K$g
)1qVPF;btg(6+M?8?0bfRZJ$7K^F%!>L=p\<B4+$`Mnbl5QYa].-s)`?cp?i$pLaDql6iNLicW"761]9
7WKi3bE`nZo,Y<(mYP=-:X\P[0oY''%t-WkQ.oWu`GoDMkmoTlaucVUXa2`CEsTWh(G4NrdY<[<=Nt&F
frZ4SuF4-AO7REsug*5K@9Ho#Dc!B*lV2#AGpRL@:p,KuTI\3"mLn%S=ngN4@R.;_Nr55M1]"RqFbd4[
DQ[;LEu/`_r!^Zm;`$kanrt(j#<''5)U6iNF/h+>)sk\Uj.nBr`$o$j1>r,baZKKO-B/=_<JOC4>H''H
orBBmGg?K57hteoEcL;J#RXn;-qG#W3?phJ3VVPYi"p[`6[X\<BW@SGSA$[$WYC>j.s.6fK>6UdDI.fD
.CT`H6FqR&X*=&Z_:pqs?@72]?8cnChbhHnb_l2Z>L:UY]eRiPcG:+*3`MCEV-DRc''R8k]C6^u*\IA3
jae3].j@nLjDp>c;"`N?-^P!YsCL@Jpae>-M=i1ob+-9#*]n"],g+2_Q[Y/2H"-u!`l>!26#IsT>EAtA
kEi''*acd[n[)fZ)s"R8-!1;jcqaBesIV:V-Y(XW6#F#2jKL&,rdXC.;dgJRIk>9hudB1>`g-W-VhL4T
(VMcGo@lopmll."KP9!e*P5_hf_BJ(,VU&]K9o$]rhgnqc=h^?K&62Su32SqXjY."93rKG''AM)qMqrO
eL_R^B(s:gZ3*";4Z;L1ZXdK,''9I$C\LJ&3*ABF4uJT=C18,%0o6h$L+\)9-DFRWF8$T-B2DI!M6Wu5
g;<,gDhE9gc>WDOkTK`IM)1ub#U!h67C8NSGg?d0eVA3[-PjkVD&k/%3TGFX-,Zt><6Y+BlGuf=FG(EU
uiK656"GkAeR\On?pe?n?f''&hS!f`f#S4a4k@CmqOhAG@QrZ<<ViMN64DX\#HK^Immmf"jUaU8Jd>%3
\QCK,D4TkH^N^]6=uW:sdDJP(dH-QPL5a9<\@kH5I[[(_bLX=,N(akZh7H''=1]nm?D7I5a2Bp8c0Q_i
1Qql5MjT9,^.<G4lHRa2/R!+eGY?%''2#4f''tH-c^!fn^J6QUeF7L;pNU+pR\\mDOSI;&qs.=NjkPNc
RlnXrQ=G?ak2q4LJps_&rn!m1Wk*"X>\5QKY\Q$?58]QRIu""X%`r6Z76Aa[f8XooNm"#IsfpC")3CL?
`=I1dDo/"3;lkLDmK7I:ac''P+F`&(Jd"&fM''/_*S6_a>P\er\*W`D*$Yda67TMlO=l0D''(=JE)?*p
,[eZ-D2X2qbTcb-\.SE`D&:19SMdQD$]pm3,EHA^N&Ub,UqEXu:@LbWlZ0tkIPfec0Wd234j!]d''\k`
U''G?>S(.<EJN3@>qmAsVTDp!2fZ"T_m]*)Sb##MD1q*?uk&eVTDqK<qC"O@)cQ)=8a1IP0;:\<Fpp;+
C4dK1KgZi"BfBhC0f9GfhA7e<O7hVb]kY>H5t]IdBs?;84g?,;=?1ne\i_Cm_qr$Q:N!S^h)-m@(Eq!(
sE(W+7_lVf!-J\*e4q![EV0]Ap?ddls/f1>\h''1;0$=m]nrn:.^u6f.Z7aR"pn2Xs(V<-ih_/<;J5j;
SN\PR''0VP8It@;=0VsV>?GT,&AoN^o8%"B#$LMEMgYu^;c;atF@P4;_E/3U:I*hIY]4NH7Se>.cK^db
GLDm9M(5L?OfFG=DBtp/Xm_ki95m%?5JB8ccM3e@S$N,VGE=([)uW#,o\VG7k)+)k;1+%.TaNRA8CFG+
''mo!7DX+u76BI&-_4]>tb>54VXPRp&o9<ca10ON(e\mV+T.$6X5!JGO?*Kqp6=_:CZg?i+:j,k;EAt?
J^Wm&_F''LbDBnY2OhQ2);>Va''Qim7^>pPfX1dRog08/V"FL0n2MREEt:PtK!:B*qVZcT!H1(F^/(TT
S8J0E,2G+j/5er-JsW`j"*)k5m=h&k-p`''XBS#C(E[:n!G?TNqrNn#WWXg+KSXhZo2m+l88%gVGe+IY
IHc+E"BrW*Mf'':T(.(/N.f=E8kH''#aG]a6#++"<"M`ae!J''s0q1]=Z<c5^rd^:8n,m4i7\YShZD.p
+^!=8j>#Ypkq4>Kg,+)i4+cgq0dA>eM(/(k6(;mc`$G!W=QpLga1#!J"a"+n%HoBGBB-<&^-4oIj-r9Q
b(Dgkg.<6_Skj#H<sPOO2kN*B&V4u@X)AWWR:X/Ej.nQrV#Z#=trcc(>"=$FjNiUmP\_4&D@A78MuomK
,,G#)VBEc*Ut3''0L\bD">?*_AW5,Md4V$__+6"Fm50,FCesZ%8=4Eq(:#LtnDbWRP+7\>n+,jAd<hTm
^%)F28n!OFR6`R\4ou7)mTn+<B<qqK6Y7goOi3BW4<''4PRVFn)W+$)''b,8#rJo0-rM4IH69J4m<0''
e>,TgP3OP%i@aVm(_Y)s=1IJVsd"R$n_JpT_]h.Dcpc1W@CpX7KR2^[MHd)-GeNO7)ofBf3-+AEV9aiX
fDOhut>[H\p@%q:\&M`;7DQGq!m[f2;9biidPt''blflj4"Hoe2m(`YeA^qXrbch!.YANWK@\O"i]%9e
D%<I8j`mfMOVSS#a?NLUiG<^bGn=,#mm-JACO"h#GoJ&a@7OpPt(OOu;Ea46f7V[-8B9-U.&Vt)''P>;
3VK7[YLp\OZUD2t+&b/No:Z2$"CEcTD!7TMG]&?<5d;3ITRXe-1pkJu0@ueFhf3]\?4eW>]s4=;%i4]%
PK/dr7Gi]5''qAn+;tWpUnU*=EN9VgbUWej<q%QgF--[o;qAS/Ti.OCQkaG7i34gLW6e%WrO5Yh5d3[F
co]5Zu7P6>:Ua)^`U3VabMPeGkSuPka0p*K1=+.G&3_t]m)SVmUtYr>R^3M<7Y2RG\&9Se^;f@gpHaF_
Y-W<;nKGbB!.!\c8Yg^&p\A09[$([GZP1o^D&,`hs2?0l555fjLN7*2bOMcMY%C!Z@"$8Z8hr^INacR:
(?TeZ-eu91"ggU+FQsaB<&1T_i4-)*=M36Z`[$44\[?kbOK$KfG''#4KXicKEMlU[OgC8N>3rKoRLW`G
(u?*!$)fZ$S9u:YHB..jOT''7@PK4N3f8MZdF"WH9/*)dH;U=1-7e9$YHW$WQSk"$B6H=#(<368XX<Y@
DdlWf&\adJlNE+g^NuWk;`ONSBA2gZ/FQ&V*<UK!oLC?0W8hLS$8hV$S?.W(>g=\HD(/"X9S3%/+''m.
o;/<*-Y^JWd6oI;nOq8$JXAZS''7VCZ#n-H45Al?;;`:CFLm2IIH=`:d+i3@cNcrM8on#Q`fhTpgV7j,
`(,XI\MN892g]l:tTOZqOhAj<jDp<%Kd#Ug]4Xo9i,FJ`>t0?N.3Q\''m/#DfObgHq`Ng=[9I6W]D)t>
-AuSXUf''hWNW;QFO:iu:#`.4Ck\ocSq<5NJ*bk%f7EGtq"$''`ZlL(/FfP9qquPqT2G_rd62q''Y''I
Y%cA2$e]8P0)VqEol-:B^"`Ao(?]2k)WA9^Y75dth4MPn#+WDb1Y-c&t8nR8<t0(FE.V&H"25dZAk94<
&%p@8rPcd/H`=3Oi[9rRqht]j@52dm($0G<<NPAQVha2F=ut?h<B_UpH9Xo0s:8FPjr6\J9g0?:#.U8H
>D_%+IfYo(ap"9"nNbEf=fm65B?7lV:W''8-ZA1h^L#nXm"a&BUfB,.<kB=&6KV?mYGn*iU[nFJ/p*uD
s5+rZF0na+Q`nPI[;W*!h#46A(\Ld5Z.LDRWG[''"?+oUB&BAoi`q>[g-fOr&$&;:4G*B%d.j0NPu4:K
H<Oh\_UhLfs(dQ.5)X^,B$A#Hs0L*]=Y:KT*h>-Mg=@n\np:8`PiL"9q.6?A2<F+mrO@n5]9s80\b\jd
0d;\R^fM7!kLj<2Q5i;/N?nG%j!V0P0j[gM`JL4uOp8QB"9K]+->ZfDK2Th?"Lgs%s.SD?1kB(SDnb''
]=4<4"=Wq4L-&Gao)rm!M''0+E;X(99XQPTE:Qf=69-Hp>O"uHfM6*FiLs(`$E=C<4R@3''am\-2Hp&6
$TodX?7@Y-kNK/@==.E&X_8#)XC?[a/kN.bcuP;AsZo.*&R;"?!AReu<_%3iM%F''!,!Abgi0!oTNPPn
''Sdt/+^PcT/IL(\(7rq++dReUW(_Ek-@);2@c''Y>N[SFJFNg%fkh"[@&02og_&=p@i9W;A;U]Xo+eK
$J0.&1L6J9HP-2CG/FAS:%aYYZ,ME84/h"]9hVN''^@>j_[q?@EK/jE>"?hZ6:`Pa>s=]P.9\s[Y=PNl
DS>HSf7j]=JF;/0u)Rt?[3;AU](5Ojrf;%Bt"7s#qY#AIDD8!G8Z*=-7<7tGUE%C5B''BZ8To&+Q*J6"
@T:q9F"JV#&>$$^N5g''\kqL@V*''%Uj-s2,i`8E/]Y99j9F;6mKAZs_9aBF72/26c.fg]]@24DoSknW
YoBVhBnP.<mc@P:M=rRXS0Ur#2"FlC<(/G`2gu<^K-m6dU,HC=q\=hfhlk_#LHq]4iBmiNDMH[hNlHB;
ph\uI6PD[=c9=6t9q7(5-LH3IP9!_JS;Rf(8+/W.rGZel<6lJOg:?]8GQ-(3[U#t)f.-M()6L''%q"I8
g?(&aIQn`sk_r(#-fPui19hR&"<(VVrJ0WXXCtDerlSP*L-J/rl0etEoh*[cd18RXh''q5</(6PlX]Hr
3YVkt9No8S)W@iAC1TNNK)+mAX7I#dM01Tn:C.tCG[ZO$Y=T[m/#[)l:>9gAV_%X%"2D[f_;%q#9''$X
it@qQp.''bhj2Q:dNL;DZ^ojd9?nS,''-g''=QFrUEM0$\8;_)C#Ik$]W).HF`R,Of$bp''NO.-CY/j5
2Z_KF\nJ+R;!a-!qV3(-Z*Vb''WNBL8LGbKu\ro6e:>3sWlj?qLY(75P\%Q`NOOfF_iqd=q.1H;2\kX,
eQd_O-LZK"6>M@:gn`)RlF28sA!hf.6I`\ZB`^K@6''u_JPQ#ai1L''-kVU\[a*&5P@=BDMN?Y"<^''0
AfRd]:Oj#oq[bc#9(Hs^e,!%Jag%IbW\.(N2^3%J!7-?$F#VSsWYWKX*!4<bfB<kJET`^OV)4Uufdm$g
>B[UQg*V;4"2bU5"#)l(''L0UVX?\!''b;m9Z0cVk3/rqlr>ITF[H?ZnO.;@Wr\kHFG&.;I.fQMYR=aW
6eHiuAoEq6!ChT`)Nf8JXXs+_$`UJ2bLK[n@uobO?FOWb0`GT*b,_Ci1]W:mqqfBKq>KC()#54Z^;0WT
puJfK[X<;''Rhl;8ii@iH!"Kacp+oF.d@:DrWh"]*k*M/j@N0e"@7&.^QDo_]1<@UT)1l(a!p&LYdbA2
o:Z7dfUYbb/!2gKqWC:j'',#9B!_mWQ@L4G?#V4U+!_(&Dtb],JLB6_GMUug/7-2c%dqL?UGo`Ddj96Q
_S:0Ei&T&%4OI/rF67tFGSk@G=eW5^L#ne(:,T1tX<K[^#`\U^aQ+TsX''TZrn&UVM0<ndWU)829LU<n
b8kR1Y_;8uZ*<23EGX9t5;fpPW@''u!g]k<Y4$u<U#VZm`:a''GbCn`sfHW4W#TJoaS:/mSB6(^AD\a&
u^m-(]tu^u"Jd#/`Te$lik".1mD)j#A/jnn+9Si;BV`/UB<==B8+qJCN(G1A3k^nXN#=7r)^T.)VIj&''
.<rJ(V-8BV`d9H1DD!_%@FCj3[K&d03B*QVlWKgLg6_kPU>U@_''V#I+Lh2pLXdb61''mAFWC''''^.A
-3''I1Pq0A6F'';uE9g.9G#;0I`5@"jTpBftX_QN44sZGZFg\K_L,.b*RjnBAqs&A6V?/)gjD>gs?:l>
U,Y2+kbZJ#1>_)%*J)u$Q9D48:B(4_5$CR*>U#I8;7gL07`!jp]07ajb1V4\(.TMnboDQ?`&?8lXt*[.
H9C#dZ_T#G_`cJ0^oEEB8^;1\0P!>I%/aTS2G3oSTFD?i`6MC.dI"q6NDc&$]c''i@dt3oNKbEtJJuRY
cD,IZRaVfiIAj!A4^iJ3T_/U\W3ZA/Ee;ru[p[&liad/I0IZ\X,b=&+b)=qp1MKT;I#Z;o#.B4::P)^&
/cPA*fRfUgf1Mr5-58gm*GG8R1D#8h"`sRfdC!>e=:JoqXik<iWj"[)QO;8.p-4bX1"87?Z<bm8M!2I[
.W@SdhD"''sX-L.%]42PWIO^%VhqMoSC\U7=n>hYF><@>OKA`qU&md0_>0.c@7?pRcNtZQA-ZP8gc9_n
374+O&VL(sGLiVi!n)!&5_T:Vmh#eSrn!#F[/gOm4WfV`dEB?gR2Z6N;Yk?cS3K%V(H8^lJpYA@<Mfc;
rHY%_&JTq$[Hje;O=2W=8>6@EPl!5MQ:%&A`Vgm)X-D716]1njKd3q!Q(JXF@!IAIp,enej(L!qHs18u
?2`Z7nb>cLGJ\)h]Wd/q63W"ZW:GcXe3!fm"ql)s1>/Yb9Gj:GL?A(Q7Y"<b3lVpCPr/4[^lr+:&JeEB
GCtY''37`&>tS.91X9`DmN)reGY)2sqEh6!8VB_nB5a@.OF51=K*5au;`G`:)<.E\UOA/>jWktB^;\nr
pWF0Q-jk:2LQ48u:57/gdBqV>EX7=HuTqTX-*<.c"7?Mj(fc)Yk:Zj^$NUK@GpOEKkshk4"Y@uJJZ$B)
9YJ,pbo!!!?[0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG0f0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG17$8=.f0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG170FBKf0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG170JEhf0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG170JG0f0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG170JG17$8=.f0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG170JG170FBKf0JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG170JG
170JG170JG170JG170JEiDCh7$qFDl#)Ebc#/Eb0<6DfTE;BkDkt~>'
%
classmethod: CustomFont
nimbusSansLReguPfm
	"included for completeness - not used by the system"

	^ByteArray fromASCII85String:
'!!,S&!!#B)E-ZJ<B4uB00f_6S+B;<@+B*2jFE_/6AM,*(ARuurBl%?''6VgN]8PVbuAoD]4Ch[BjDKB
AADfC7-$ihgZ/-4E*z!!!"\!<D<ckQ:i.!qud>s)e;A!65''>!7CiIzz!$2-(!!!#dz!!!#$!WW3#!!!
#Tzz!:Tsg!%\-Q!9aOK"5*_a!ndY/!!!#W!L<_C!f@&.!&=P''!9*u6!&=Nr!AXZ;!rr<tDf^#!@rc:&
F9#''MD.7X/;djQ;!)@6F@Wc`j@;\aj;IsK`!#>SN!Fl-]!\=Cu".KA,!)3Jg!JLPF!Ytf2!>Y\O!A":
''!\=C(!\=C(!\=C(!\=C(!YteP!D!8_!_<AD!qued!h08>!n%.>!b29="4@5d!V?D^!\=C="4@5X".K
?!"4@7?!b2;[!h07q".K@]!b29I!>Y\O!S%3%!_i\H!\=EF!A":''!Ytef!\=E0!8[_J!T!fB""XL)!\
=C(!_i^f!>Y\e!qZNA!qZNc!V?Cf!<`Eu!D!8u!F>e5!T!f-!_i^Z""XL)!_i^Z".K?d!U''Vl!F>e5!
F>f`!8RWL!DNT$!A"<9"&/g["7uUg!O)Z4!F>er!aYn%!A":''!\=C(!X&NT!_i^S!ce;m!_<B!!T=)d
!F>gu!abt8!DNSG!Z;&G!DNT%!Gqig!bDIF"(_RE!h07\!h07\!h07\!pBa7!h07\!h07\!YteP!>Y\O
!R_%t!X]#:!t#,;!t#-$!X]%X!n%.u!n%.=!h''1#!\=C(!\=C(!\=C(!dOn?!A":''!\=C(!YteP!>Y
\O!A":''!\=C(!\=C(!\=CD!b29_!\=C(!\=EF!@n6D!TjJ=/@PR;/;aBm/-Q#C/<p00/G]<B/:%7p/=
c`?/EQn4/>rML/BIio/<TsJ/-#Zj/A(q*/A(q+/C+9@/@tkE/B%S(/-Q$i/-Q$j/-Q$k/-Q$l/-Q$m/-
Q%-/EQoe/EQmt/cG]=/b8p7/^aSl/VF("/_L)$/cPcL/[PIX/_^5+/bB!E/^=;u/Zetf/_C#C/^aTA/b
K''e/cYir/b8qX/cG^f/cG^g/cG](0"1d=/rBTo/d25E/sQB20)>ND/p[Ir/tDrA0''E78/uS_N0$+&q
/s60L/cYll0"_.,0"_.-0$aKB0"V(G0#[e*/d26k/d26l/d26m/d26n/d26o/d27/0''E8i0''E6h0Z*
i@0qA7r0q81s1"-(V0oGud1#2db1!fkV0s(C40sps=1"H:_1!BSV1!oq\1"H:Y1;!QF1?AHi1VNfI1[4
on2#dM01p?p71u&$d2#dM31^*k:1][S71][S81o((11][S:2#[G/280#K2<+Wj2T#JQ2VA$`2qe3c2l?
U12s:2s2rFWl2ou"V2s1,u2rair2uN\82rFWq2r"?e35>JP39:)o3PYSQ3j\ic3d^m-3kkVq3m@V,3iW
."3pQ`e3op<a3pHZg3pHZi3p$B@4+I92421_r43RY,4/i1"46lif466Eb46cch46ccj46?Jo62COI60n
P<6/_c26.Z''*6+d.e62LUR6/_c:5nO)l621CT6/DQ;6*gMh60eJL6)"<Y6/;K@6+R"s6-fL56(n725o
p#g6,!;]6+HrY6-T@n6-K:t6.GqH6-fMN6/hjm6/DRl6/DRn6/V^q6/;Lo6/;Lp6/;Lq6/;K+6eq]76d
>X)6eD?56iI$_6h(+T6e)-:6e23<6g=VQ6dYj96cT/A6eq^X6eq^Y6eq^Z6eq^[6eq^\6eq]-8)=2<8''
V''-8(R]88,iNd8+HUY8(7K=8(R]A8*^+W8&kSE8)=3]8)=3^8)=3_8)=3`8)=3a8)=248G)pM9)JWX9
$RB49!\Ir8t>oK9D8BO:Z)1=:\k#X:\arZ:[7sQ:XK,8:Y5VA:B1Am:\4Tc:Y,PH:Y>\K:[J*`:Xf>H:
WWRO:Z)2g:Z)2h:Z)2i:Z)2j:Z)2k:Z)1<;;hIV;:PW];;hJj;;hJk;;hJl;;hJm;;hJn;;hII;qh7F;
sjTa;s=6^;r.IT;s=6a;qM%k;u$AE<3ZBg<29I]<7Ck;<7Lq@<"o=+<1!V\<7_(I<9aE]<94''[<"At1
<"f77<#5OK<;HQ3<1s80<1X&B<42ag<;Z]Z<!`Ph<!r\q</:Lc<.b.c<29K0<29K1<29K2<29K3<29K4
<29KA<7_)u<7_*!<7_*"<7_*#<7_(8<SROI<Sd[Q<U]t''<SRPi<SRPj<SRPk<SRPl<SRPm<SRO*<mq"
6<jhro<nI@><mCY7<mL_=<gWh^<n%(H<n[LO<n@:M<X\t]<kJBo<WE,`<Y#1p<Y#2"<iH&1<ho]1<jht
D<jhtE<jhtF<jhtG<jhtH<jhtU<n%)t<n%)u<n%*!<n%*"<n%(#=7-#R=3^b3=6KTO=6''<N=60BT=1n
Q/=6]`_=69H\=60B\<tG@b=5Nt><t#(m<uV.(<uM(.=2b-N=2+^M=3^c]=3^c^=3^c_=3^c`=3^ca=3^
co=6]b9=6]`Q=Ng_?=OR6#=OR4$=eu''`=e5RZ=k*I>=i(,.=i124=bm#Q=iLD==k3ON=j[1J=VLjh=f
).\=nhr[=Tnei=U+qr=b-Oa=aU1a=e5T/=e5T0=e5T1=e5T2=e5T3=e5T@=iLEi=iLEj=iLEk=iLEl=i
LD,@Jp-p@Gh)X@J0Xq@Jg($@H@Gd@Ia@s@@[?u@E&7J@G:``@IaA#@As3<@JBe7@Jg(?@K-:I@Jg(H@K
6@N@IF/>@IaAB@IO5A@I!m/@Jp/D@Jp/E@Jp-k@KZ\I@KZ\L@KZ\M@KZ\d@KQTrA+fk$A#B9G@gE''TA
,?4KA+9MBA,6.LA*O#=A*s<4A+fl?A+fl@A+fjfAGH1FAH2[mAF0?4AGH2CAGH2DAGH0jAao^hAa''.e
A`3S`AH2^,A`<YeAb?"%AYK-)A]OgPA`3SjA_d;gAZ,Q?Ab#e5AH2^GAaBA:AbH(FAb,kEAaBA?Ab?"I
A`Wl:Aa''01Aao`=Aao_3AekAeAf:Y8BD2@)B;bc1B?pNYBBT:tB<D2LBCPqABDhdQBCc(HBDVXRBCGl
:BD2ADBD2AEBD2@8BE8*RBE/$SB`7s#C%hR+C&S''4C&@p3C&e39B`e?IC&\-QB`S3''C@qO*CA\$>CA
e*DCAe*GCAn0QC&e6DCBji[CBacND#OBHC]FHUC]ONZC]FHZC]FH\D#F<5D>aESD#aRiD>aFhD>aE6DZ
''NTD?''[jDZ''OiDZ''N#DtEuuDsRErDr^jmDZTo8Drq!sDtj92Dl!D6Dp&)]Dr^k"Dr:RtDlWhLDta
3HDsdRFDu0KUDtO''QDt!^MDtj9VDs..GDs[LeDs%)9DtF"IDtF"JDtF!/E!$)CE6A2tE!65ZE!65^E!
QHtE!$*qE!$)+EVTQSEW,o^EU<_AEVTRPEVTRQEVTQ''Eo$apEhr_8Er>r<En:7lEod75EW?)[EW?*&E
pit]Er>smEr>r:F/8hJErZ2UF8c,ZEs)JdF8,]YF8Pu_F7fKqF70&oFR]</FT)5NFS>`HF;P!rFS>`RF
Su/ZF;t:%FT)6&FSYsQFR]=KFR]=LFR]>&FS>b.FS>`#FnG]''Fl33lFm]3&Fnu&4FT;D>Fnbo8Ff#+=
Fk?XpFl`R)Fm/j.Fi")nFnPcSFT_\bFTMQZFnG^PFnG^QFnG]"G2`I#G+nq=G23+$G2N=.G3f0;G4klH
G4GTKFoVMZG4Y`OG4Y`PG4,BNFr^RGG5hNXG2`J>G2`J?G2`JZG3f1eG3f1hG3f1iG3f1jG4>OrG4GUt
G4GV''G4,D%G4,D(G4,ArGO,9.GGG1HGOtiDGQ%PQGPD,SGPV8VGPV8WGP;&WG96gJG6.c\GO,:IGO,:
JGO,:eGOtjnGOtjqGOtjrGOtjsGP;($GPD.&GPD..GP;(.GP;(1GP;&JGiesDGiesGGSC/OGierkH/AQ
oH,BSTH-$"`H2.D=H(=n8H0kQ4H2@PCH,KYcH.r:,H05-9H1CoGH0tWFH1(]KH2IVYH1(]MH1(]NH0YE
KH1:iSGo-OEH2@QWH/AS>H/AS?H/ASZH05.cH05.fH05.gH05.hH0kRqH0tXsH0tY&H0YG$H0YG''H0Y
EMH3jR;MqJ&/Mi7U9Mm34_Mou''&Mi%JMMqJ''JMqJ''KMqJ%rN;NWJN77f)N:m3MN8=LbP0X([P0O"m
P/%#jP&()+P3N!XP4&?^OoPJqP4AQiP4JWkP3`-gOoYQ(P3W''hP5kQ)P5,''nP/%%8P/%%9P/%#JPh5
pfPh5q$PfWkuP]QlCPfWmDPfWkoSE^&MSE0]JSFunoSFli%SG<+MX47/KX,$^UX0)D''X2b0BX+gSiX4
70fX470gX47/;^t/NT^q9V:_#"(1^nLd/^q''JH^s;s_^nC]Z_>4*t_<_+g_;P>]_:JWU_7T_;_>=1*_
 %?ZB_>!t*_;5,f_6X)>_<V&"_4gm/_;,&k_7BSI_9W''`_4^gj_7fl3_79N/_9DqD_9;kJ_:8Ls_9W''
I_X%4i_Ue`V_Roh<_YX:3_P.!0_VG/l_R]\J_Tr0a_P$oq_s@=j_q+iW_n5q=_tsC4_kI*1_qb8m_n#e
K_p89b_k@#]`;0F"`9[Fj`8LY``7FrX`4Q%>`;9L+`8LYh`";uE`:s:-`81Gi`3TDA`9RA%`1d32`8(A
n`4>nL`6SBc`1[-m`4c26`45i2`6A7G`681M`74h!`6SB7`VKO#`U!Ok`Sgba`Rb&Y`Ol.?`VTU,`Sgb
i`=W)F`V9C.`SLPj`NoMB`TmJ&`M*<3`SCJo`OZ"M`QnKd`M!6n`P);7`OPr3`Q\@H`QS:N`ROq"`QnK
8`qB?u`p<Xl`o$ed`r5p0`o6qk`Y8DJ`qo^2`nCAg`iB&;`p3S''`h392`nCAm`j5VG`lS0_`gQj[`Z>
,B`j,Q,`iK-''`k_V=`kMJB`mFat`le<Ia5$\ga4pVha8Q$9a70*qdeWo:db"LudanG!db+S$dd7!:d`
DGTe+s#2e+ir9e''S+ge(=Updf9AGe+<T=e(4P"e(F\%e*R*;e&_PUeG9,<eCX_"eCOY#eCae&eEm3<e
B%Y`e^sh#e^jb$e_''n''ea3<=e]@bVf&-Kof(o>5f(f87f''<9.f$OFjf%9psec5\Jf(8o@f%0k%f%C
"(f''NE=f$jY%f#[kXf`1tNf[p.(f\c^1f^o,GfZO4[g"ZNmg=uWngY;`ogtVj&gti!.h!b8`i;<Oti9
pVhi:6hmi9L>3iSXZ1iVWXOiT1#:iUQq[iV3@fiVrjtiVWXsiW&q$iU6_iiUQqniTgG`iqrb!ipQhjip
m%oip-Pej6lqkj73.pj6HY6jPTu1jRrOJjSSsRjQ->=jRN7^jS/[ejSSsmjSo1"jSSt!jT#7''jR3%lj
RN7qjQcb7jkp)2jn8XKjno''SjlHG>jmi@_jnJdfjno''njo5:#jno("jo>@(jmN.mjmi@rjm)k8k2ZJ
7k5#$Pk5PBWk32hCk4J[Qk+DZSk/mX)k2-,@k,eSpk550kk5YHsjoPO''k5YI''joPO+k48Ork4Sb"k3
i78kP"prkP,!skk4t!kj/7mkk+n#kii%9l0/.Bkl:][l/DY?l1G!fl1+ddkl:^!l0J@il1P''ul14jtl
0J@nl1G"#l/_kil0/.flLk1#lKeIolLb+%lKJ7go(rB0o''cU&o(W00o''HBGoBZELoAfjGo)\ngoB$!
MoCr8soCi2so)eu.oBlQuoD8K/oCW''+oC)^''oCr91oBcKto_SSWp?V`Op>c0Jp&Y4jp>u<Pp@nT!p@
eN!p&b;1p?hm#pA4f2p@SB.p@&$*p@nT4p?_fKq!7rTp]LRnpuVNTpo49ops/n@puhZ[poaX/q"Of/q"
k#6q!\6,q"k#9q!J)ZqY1"_r9aMXr;$@fqu?^pr:g5,r;-E~>'
%
category: '*PDFtalk test resources-test instances'
classmethod: ExtTextMetrics
example
	^ExtTextMetrics
		capHeight: 800
		xHeight: 500
		lcAscent: 700
		lcDescent: 200
		slant: 0
		superScript: 700
		subScript: -100
		superScriptSize: 100
		subScriptSize: 100
		ulOffset: 177
		ulWidth: 38
		dblUpperUlOffset: 50
		dblLowerUlOffset: 100
		dblUpperUlWidth: 25
		dblLowerUlWidth: 25
		soOffset: 231
		soWidth: 38
%
classmethod: ExtTextMetrics
exampleBytes
	^self exampleBytesTazLT4SemiLight
%
classmethod: ExtTextMetrics
exampleBytesTazLT4SemiLight
	^#[52 0 240 0 0 0 232 3 3 0 232 3 232 3 32 3 244 1 188 2 200 0 0 0 188 2 156 255 100 0 100 0 177 0 38 0 50 0 100 0 25 0 25 0 231 0 38 0]
%
category: '*PDFtalk test resources-test instances'
classmethod: FontProgram
example
	^FontProgram fromPfb: CustomFont nimbusSansLReguPfb
%
category: '*PDFtalk test resources-test instances'
classmethod: FontProgramHeader
example
	^FontProgram example header
%
category: '*PDFtalk test resources-test instances'
classmethod: KernTrack
example
	^KernTrack degree: -40 minSize: 5 minAmount: -10 maxSize: 10 maxAmount: -40
%
category: '*PDFtalk test resources-test instances'
classmethod: PairKern
example
	^PairKern first: 65 second: 28 kernAmount: -6
%
classmethod: PairKern
exampleBytes
	^self exampleBytesTazLT4SemiLight
%
classmethod: PairKern
exampleBytesTazLT4SemiLight
	^#[65 28 250 255]
%
category: '*PDFtalk test resources-test instances'
classmethod: PFMHeader
example
	^PFMHeader
		copyright: 'Copyright 1997, 1999, 2002, 2006 by Luc[as] de Groot. All' , #[0 0 0] asString
		ascent: 864
		internalLeading: 62
		externalLeading: 0
		italic: false
		underline: false
		strikeOut: false
		weight: 400
		charSet: 0
		pixHeight: 1062
		pitchAndFamily: 33
		avgWidth: 382
		maxWidth: 1025
		firstChar: 5
		lastChar: 255
		defaultChar: 27
		breakChar: 0
%
classmethod: PFMHeader
exampleBytes
	^self exampleBytesTazLT4SemiLight
%
classmethod: PFMHeader
exampleBytesTazLT4SemiLight
	^#[67 111 112 121 114 105 103 104 116 32 49 57 57 55 44 32 49 57 57 57 44 32 50 48 48 50 44 32 50 48 48 54 32 98 121 32 76 117 99 91 97 115 93 32 100 101 32 71 114 111 111 116 46 32 65 108 108 0 0 0 129 0 10 0 44 1 44 1 96 3 62 0 0 0 0 0 0 144 1 0 0 0 38 4 33 126 1 1 4 5 255 27 0 0 0]
%
category: '*PDFtalk test resources-test instances'
classmethod: PostScriptFontMetrics
example
	^PostScriptFontMetrics
		header: (PFMHeader
			copyright: 'Copyright 1997, 1999, 2002, 2006 by Luc[as] de Groot. All   '
			ascent: 864
			internalLeading: 62
			externalLeading: 0
			italic: false
			underline: false
			strikeOut: false
			weight: 400
			charSet: 0
			pixHeight: 1062
			pitchAndFamily: 33
			avgWidth: 382
			maxWidth: 1025
			firstChar: 5
			lastChar: 255
			defaultChar: 27
			breakChar: 0)
		extTextMetrics: (ExtTextMetrics
			capHeight: 800
			xHeight: 500
			lcAscent: 700
			lcDescent: 200
			slant: 0
			superScript: 700
			subScript: -100
			superScriptSize: 100
			subScriptSize: 100
			ulOffset: 177
			ulWidth: 38
			dblUpperUlOffset: 50
			dblLowerUlOffset: 100
			dblUpperUlWidth: 25
			dblLowerUlWidth: 25
			soOffset: 231
			soWidth: 38)
		faceName: 'Taz LT4 SemiLight'
		driverInfo: 'Taz-LT4SemiLight'
		extentTable: #(400 219 382 400 382 400 400 400 218 382 382 382 382 382 382 382 382 382 382 382 263 482 482 369 240 450 343 214 290 440 607 443 688 747 246 322 322 445 550 264 258 256 410 520 520 520 520 520 520 520 520 520 520 310 311 550 550 550 425 951 517 509 482 574 429 409 542 594 233 326 459 358 757 592 621 501 621 516 458 418 588 514 787 506 465 450 363 410 363 550 500 352 479 488 374 489 467 265 488 499 218 218 416 218 773 499 501 488 488 307 359 295 499 401 654 430 394 343 400 231 400 550 382 550 382 264 442 458 691 500 500 400 1019 458 331 740 382 382 382 382 253 253 445 445 550 500 1000 400 623 359 331 798 382 382 465 214 290 420 500 550 550 285 550 400 787 381 519 550 550 605 400 464 550 442 438 400 550 560 175 380 310 378 519 678 688 683 425 517 517 517 517 517 517 658 482 429 429 429 429 233 233 233 233 584 592 621 621 621 621 621 550 628 588 588 588 588 465 501 487 479 479 479 479 479 479 753 374 467 467 467 467 218 218 218 218 473 499 501 501 501 501 501 550 506 499 499 499 499 394 488 394)
		kerningPairs: ((OrderedCollection new: 698)
			add: (PairKern first: 65 second: 28 kernAmount: -6);
			add: (PairKern first: 67 second: 28 kernAmount: -5);
			add: (PairKern first: 90 second: 28 kernAmount: -10);
			add: (PairKern first: 65 second: 29 kernAmount: -10);
			add: (PairKern first: 90 second: 29 kernAmount: -10);
			add: (PairKern first: 132 second: 29 kernAmount: -20);
			add: (PairKern first: 89 second: 31 kernAmount: -28);
			add: (PairKern first: 102 second: 33 kernAmount: 10);
			add: (PairKern first: 44 second: 34 kernAmount: -38);
			add: (PairKern first: 46 second: 34 kernAmount: -48);
			add: (PairKern first: 65 second: 34 kernAmount: -45);
			add: (PairKern first: 65 second: 42 kernAmount: -56);
			add: (PairKern first: 29 second: 44 kernAmount: -30);
			add: (PairKern first: 45 second: 44 kernAmount: -44);
			add: (PairKern first: 66 second: 44 kernAmount: -24);
			add: (PairKern first: 68 second: 44 kernAmount: -59);
			add: (PairKern first: 70 second: 44 kernAmount: -86);
			add: (PairKern first: 74 second: 44 kernAmount: -55);
			add: (PairKern first: 79 second: 44 kernAmount: -45);
			add: (PairKern first: 80 second: 44 kernAmount: -147);
			add: (PairKern first: 84 second: 44 kernAmount: -89);
			add: (PairKern first: 85 second: 44 kernAmount: -48);
			add: (PairKern first: 86 second: 44 kernAmount: -95);
			add: (PairKern first: 87 second: 44 kernAmount: -62);
			add: (PairKern first: 89 second: 44 kernAmount: -119);
			add: (PairKern first: 98 second: 44 kernAmount: -20);
			add: (PairKern first: 101 second: 44 kernAmount: -26);
			add: (PairKern first: 102 second: 44 kernAmount: -55);
			add: (PairKern first: 111 second: 44 kernAmount: -42);
			add: (PairKern first: 114 second: 44 kernAmount: -95);
			add: (PairKern first: 115 second: 44 kernAmount: -27);
			add: (PairKern first: 118 second: 44 kernAmount: -87);
			add: (PairKern first: 119 second: 44 kernAmount: -75);
			add: (PairKern first: 121 second: 44 kernAmount: -77);
			add: (PairKern first: 147 second: 44 kernAmount: -118);
			add: (PairKern first: 148 second: 44 kernAmount: -127);
			add: (PairKern first: 28 second: 45 kernAmount: -50);
			add: (PairKern first: 44 second: 45 kernAmount: -50);
			add: (PairKern first: 46 second: 45 kernAmount: -65);
			add: (PairKern first: 65 second: 45 kernAmount: -17);
			add: (PairKern first: 67 second: 45 kernAmount: -65);
			add: (PairKern first: 69 second: 45 kernAmount: -8);
			add: (PairKern first: 70 second: 45 kernAmount: -8);
			add: (PairKern first: 75 second: 45 kernAmount: -59);
			add: (PairKern first: 76 second: 45 kernAmount: -50);
			add: (PairKern first: 82 second: 45 kernAmount: -45);
			add: (PairKern first: 84 second: 45 kernAmount: -46);
			add: (PairKern first: 86 second: 45 kernAmount: -30);
			add: (PairKern first: 87 second: 45 kernAmount: -22);
			add: (PairKern first: 88 second: 45 kernAmount: -38);
			add: (PairKern first: 89 second: 45 kernAmount: -84);
			add: (PairKern first: 90 second: 45 kernAmount: -56);
			add: (PairKern first: 99 second: 45 kernAmount: -28);
			add: (PairKern first: 102 second: 45 kernAmount: -35);
			add: (PairKern first: 107 second: 45 kernAmount: -45);
			add: (PairKern first: 114 second: 45 kernAmount: -27);
			add: (PairKern first: 115 second: 45 kernAmount: -11);
			add: (PairKern first: 116 second: 45 kernAmount: -25);
			add: (PairKern first: 118 second: 45 kernAmount: -7);
			add: (PairKern first: 119 second: 45 kernAmount: -7);
			add: (PairKern first: 120 second: 45 kernAmount: -31);
			add: (PairKern first: 121 second: 45 kernAmount: -5);
			add: (PairKern first: 122 second: 45 kernAmount: -26);
			add: (PairKern first: 29 second: 46 kernAmount: -20);
			add: (PairKern first: 45 second: 46 kernAmount: -30);
			add: (PairKern first: 66 second: 46 kernAmount: -20);
			add: (PairKern first: 68 second: 46 kernAmount: -47);
			add: (PairKern first: 70 second: 46 kernAmount: -79);
			add: (PairKern first: 74 second: 46 kernAmount: -53);
			add: (PairKern first: 79 second: 46 kernAmount: -33);
			add: (PairKern first: 80 second: 46 kernAmount: -132);
			add: (PairKern first: 83 second: 46 kernAmount: -7);
			add: (PairKern first: 84 second: 46 kernAmount: -91);
			add: (PairKern first: 85 second: 46 kernAmount: -40);
			add: (PairKern first: 86 second: 46 kernAmount: -94);
			add: (PairKern first: 87 second: 46 kernAmount: -59);
			add: (PairKern first: 89 second: 46 kernAmount: -109);
			add: (PairKern first: 101 second: 46 kernAmount: -23);
			add: (PairKern first: 102 second: 46 kernAmount: -50);
			add: (PairKern first: 111 second: 46 kernAmount: -36);
			add: (PairKern first: 114 second: 46 kernAmount: -85);
			add: (PairKern first: 115 second: 46 kernAmount: -20);
			add: (PairKern first: 118 second: 46 kernAmount: -78);
			add: (PairKern first: 119 second: 46 kernAmount: -67);
			add: (PairKern first: 121 second: 46 kernAmount: -67);
			add: (PairKern first: 147 second: 46 kernAmount: -118);
			add: (PairKern first: 148 second: 46 kernAmount: -127);
			add: (PairKern first: 47 second: 47 kernAmount: -134);
			add: (PairKern first: 70 second: 47 kernAmount: -61);
			add: (PairKern first: 74 second: 47 kernAmount: -24);
			add: (PairKern first: 80 second: 47 kernAmount: -81);
			add: (PairKern first: 83 second: 47 kernAmount: -11);
			add: (PairKern first: 84 second: 47 kernAmount: -67);
			add: (PairKern first: 85 second: 47 kernAmount: -31);
			add: (PairKern first: 86 second: 47 kernAmount: -68);
			add: (PairKern first: 87 second: 47 kernAmount: -45);
			add: (PairKern first: 89 second: 47 kernAmount: -69);
			add: (PairKern first: 102 second: 47 kernAmount: -34);
			add: (PairKern first: 114 second: 47 kernAmount: -25);
			add: (PairKern first: 118 second: 47 kernAmount: -23);
			add: (PairKern first: 119 second: 47 kernAmount: -15);
			add: (PairKern first: 84 second: 58 kernAmount: -30);
			add: (PairKern first: 86 second: 58 kernAmount: -25);
			add: (PairKern first: 87 second: 58 kernAmount: -15);
			add: (PairKern first: 89 second: 58 kernAmount: -44);
			add: (PairKern first: 65 second: 63 kernAmount: -20);
			add: (PairKern first: 84 second: 63 kernAmount: 16);
			add: (PairKern first: 102 second: 63 kernAmount: 10);
			add: (PairKern first: 45 second: 65 kernAmount: -17);
			add: (PairKern first: 47 second: 65 kernAmount: -61);
			add: (PairKern first: 66 second: 65 kernAmount: -25);
			add: (PairKern first: 67 second: 65 kernAmount: -13);
			add: (PairKern first: 68 second: 65 kernAmount: -30);
			add: (PairKern first: 69 second: 65 kernAmount: -6);
			add: (PairKern first: 70 second: 65 kernAmount: -62);
			add: (PairKern first: 71 second: 65 kernAmount: -20);
			add: (PairKern first: 74 second: 65 kernAmount: -29);
			add: (PairKern first: 75 second: 65 kernAmount: -10);
			add: (PairKern first: 79 second: 65 kernAmount: -24);
			add: (PairKern first: 80 second: 65 kernAmount: -61);
			add: (PairKern first: 82 second: 65 kernAmount: -34);
			add: (PairKern first: 83 second: 65 kernAmount: -10);
			add: (PairKern first: 84 second: 65 kernAmount: -71);
			add: (PairKern first: 85 second: 65 kernAmount: -27);
			add: (PairKern first: 86 second: 65 kernAmount: -65);
			add: (PairKern first: 87 second: 65 kernAmount: -48);
			add: (PairKern first: 88 second: 65 kernAmount: -15);
			add: (PairKern first: 89 second: 65 kernAmount: -87);
			add: (PairKern first: 90 second: 65 kernAmount: -26);
			add: (PairKern first: 147 second: 65 kernAmount: -78);
			add: (PairKern first: 148 second: 65 kernAmount: -90);
			add: (PairKern first: 28 second: 74 kernAmount: 18);
			add: (PairKern first: 45 second: 74 kernAmount: -37);
			add: (PairKern first: 47 second: 74 kernAmount: -27);
			add: (PairKern first: 65 second: 74 kernAmount: 4);
			add: (PairKern first: 66 second: 74 kernAmount: -14);
			add: (PairKern first: 68 second: 74 kernAmount: -22);
			add: (PairKern first: 70 second: 74 kernAmount: -53);
			add: (PairKern first: 74 second: 74 kernAmount: -14);
			add: (PairKern first: 76 second: 74 kernAmount: 18);
			add: (PairKern first: 79 second: 74 kernAmount: -29);
			add: (PairKern first: 80 second: 74 kernAmount: -61);
			add: (PairKern first: 84 second: 74 kernAmount: -42);
			add: (PairKern first: 85 second: 74 kernAmount: -17);
			add: (PairKern first: 86 second: 74 kernAmount: -68);
			add: (PairKern first: 87 second: 74 kernAmount: -45);
			add: (PairKern first: 89 second: 74 kernAmount: -67);
			add: (PairKern first: 147 second: 74 kernAmount: -78);
			add: (PairKern first: 148 second: 74 kernAmount: -85);
			add: (PairKern first: 84 second: 77 kernAmount: -8);
			add: (PairKern first: 86 second: 77 kernAmount: -8);
			add: (PairKern first: 89 second: 77 kernAmount: -26);
			add: (PairKern first: 148 second: 77 kernAmount: -18);
			add: (PairKern first: 28 second: 79 kernAmount: -25);
			add: (PairKern first: 46 second: 79 kernAmount: -27);
			add: (PairKern first: 47 second: 79 kernAmount: -27);
			add: (PairKern first: 65 second: 79 kernAmount: -23);
			add: (PairKern first: 67 second: 79 kernAmount: -24);
			add: (PairKern first: 69 second: 79 kernAmount: -4);
			add: (PairKern first: 75 second: 79 kernAmount: -35);
			add: (PairKern first: 76 second: 79 kernAmount: -31);
			add: (PairKern first: 82 second: 79 kernAmount: -26);
			add: (PairKern first: 83 second: 79 kernAmount: -7);
			add: (PairKern first: 84 second: 79 kernAmount: -37);
			add: (PairKern first: 86 second: 79 kernAmount: -26);
			add: (PairKern first: 87 second: 79 kernAmount: -12);
			add: (PairKern first: 88 second: 79 kernAmount: -48);
			add: (PairKern first: 89 second: 79 kernAmount: -49);
			add: (PairKern first: 90 second: 79 kernAmount: -39);
			add: (PairKern first: 132 second: 79 kernAmount: -31);
			add: (PairKern first: 147 second: 79 kernAmount: -34);
			add: (PairKern first: 148 second: 79 kernAmount: -49);
			add: (PairKern first: 191 second: 79 kernAmount: -17);
			add: (PairKern first: 28 second: 83 kernAmount: -17);
			add: (PairKern first: 45 second: 83 kernAmount: -24);
			add: (PairKern first: 65 second: 83 kernAmount: -22);
			add: (PairKern first: 66 second: 83 kernAmount: -7);
			add: (PairKern first: 67 second: 83 kernAmount: -12);
			add: (PairKern first: 69 second: 83 kernAmount: -4);
			add: (PairKern first: 70 second: 83 kernAmount: -11);
			add: (PairKern first: 75 second: 83 kernAmount: -15);
			add: (PairKern first: 76 second: 83 kernAmount: -17);
			add: (PairKern first: 79 second: 83 kernAmount: -14);
			add: (PairKern first: 84 second: 83 kernAmount: -11);
			add: (PairKern first: 86 second: 83 kernAmount: -15);
			add: (PairKern first: 87 second: 83 kernAmount: -3);
			add: (PairKern first: 88 second: 83 kernAmount: -21);
			add: (PairKern first: 89 second: 83 kernAmount: -27);
			add: (PairKern first: 90 second: 83 kernAmount: -16);
			add: (PairKern first: 132 second: 83 kernAmount: -12);
			add: (PairKern first: 147 second: 83 kernAmount: -15);
			add: (PairKern first: 148 second: 83 kernAmount: -20);
			add: (PairKern first: 191 second: 83 kernAmount: -9);
			add: (PairKern first: 28 second: 84 kernAmount: -62);
			add: (PairKern first: 44 second: 84 kernAmount: -43);
			add: (PairKern first: 45 second: 84 kernAmount: -34);
			add: (PairKern first: 46 second: 84 kernAmount: -47);
			add: (PairKern first: 47 second: 84 kernAmount: 20);
			add: (PairKern first: 65 second: 84 kernAmount: -62);
			add: (PairKern first: 66 second: 84 kernAmount: -21);
			add: (PairKern first: 68 second: 84 kernAmount: -34);
			add: (PairKern first: 71 second: 84 kernAmount: -12);
			add: (PairKern first: 76 second: 84 kernAmount: -69);
			add: (PairKern first: 77 second: 84 kernAmount: -13);
			add: (PairKern first: 79 second: 84 kernAmount: -24);
			add: (PairKern first: 81 second: 84 kernAmount: -17);
			add: (PairKern first: 84 second: 84 kernAmount: 6);
			add: (PairKern first: 102 second: 84 kernAmount: 28);
			add: (PairKern first: 132 second: 84 kernAmount: -79);
			add: (PairKern first: 147 second: 84 kernAmount: 19);
			add: (PairKern first: 148 second: 84 kernAmount: 20);
			add: (PairKern first: 171 second: 84 kernAmount: -30);
			add: (PairKern first: 187 second: 84 kernAmount: -26);
			add: (PairKern first: 191 second: 84 kernAmount: -34);
			add: (PairKern first: 28 second: 85 kernAmount: -20);
			add: (PairKern first: 46 second: 85 kernAmount: -28);
			add: (PairKern first: 65 second: 85 kernAmount: -24);
			add: (PairKern first: 75 second: 85 kernAmount: -13);
			add: (PairKern first: 76 second: 85 kernAmount: -20);
			add: (PairKern first: 82 second: 85 kernAmount: -14);
			add: (PairKern first: 88 second: 85 kernAmount: -18);
			add: (PairKern first: 132 second: 85 kernAmount: -25);
			add: (PairKern first: 28 second: 86 kernAmount: -61);
			add: (PairKern first: 44 second: 86 kernAmount: -53);
			add: (PairKern first: 45 second: 86 kernAmount: -23);
			add: (PairKern first: 46 second: 86 kernAmount: -59);
			add: (PairKern first: 47 second: 86 kernAmount: 20);
			add: (PairKern first: 65 second: 86 kernAmount: -60);
			add: (PairKern first: 66 second: 86 kernAmount: -19);
			add: (PairKern first: 68 second: 86 kernAmount: -21);
			add: (PairKern first: 71 second: 86 kernAmount: -16);
			add: (PairKern first: 75 second: 86 kernAmount: -13);
			add: (PairKern first: 76 second: 86 kernAmount: -70);
			add: (PairKern first: 77 second: 86 kernAmount: -13);
			add: (PairKern first: 79 second: 86 kernAmount: -15);
			add: (PairKern first: 80 second: 86 kernAmount: -6);
			add: (PairKern first: 81 second: 86 kernAmount: -9);
			add: (PairKern first: 82 second: 86 kernAmount: -15);
			add: (PairKern first: 83 second: 86 kernAmount: -19);
			add: (PairKern first: 88 second: 86 kernAmount: -24);
			add: (PairKern first: 90 second: 86 kernAmount: -11);
			add: (PairKern first: 102 second: 86 kernAmount: 12);
			add: (PairKern first: 132 second: 86 kernAmount: -91);
			add: (PairKern first: 171 second: 86 kernAmount: -12);
			add: (PairKern first: 187 second: 86 kernAmount: -10);
			add: (PairKern first: 191 second: 86 kernAmount: -28);
			add: (PairKern first: 28 second: 87 kernAmount: -48);
			add: (PairKern first: 44 second: 87 kernAmount: -30);
			add: (PairKern first: 45 second: 87 kernAmount: -4);
			add: (PairKern first: 46 second: 87 kernAmount: -45);
			add: (PairKern first: 47 second: 87 kernAmount: 20);
			add: (PairKern first: 65 second: 87 kernAmount: -37);
			add: (PairKern first: 66 second: 87 kernAmount: -4);
			add: (PairKern first: 68 second: 87 kernAmount: -7);
			add: (PairKern first: 71 second: 87 kernAmount: -5);
			add: (PairKern first: 76 second: 87 kernAmount: -49);
			add: (PairKern first: 79 second: 87 kernAmount: -8);
			add: (PairKern first: 82 second: 87 kernAmount: -3);
			add: (PairKern first: 90 second: 87 kernAmount: -6);
			add: (PairKern first: 102 second: 87 kernAmount: 10);
			add: (PairKern first: 132 second: 87 kernAmount: -50);
			add: (PairKern first: 191 second: 87 kernAmount: -25);
			add: (PairKern first: 28 second: 88 kernAmount: -15);
			add: (PairKern first: 45 second: 88 kernAmount: -35);
			add: (PairKern first: 65 second: 88 kernAmount: -13);
			add: (PairKern first: 66 second: 88 kernAmount: -37);
			add: (PairKern first: 67 second: 88 kernAmount: -10);
			add: (PairKern first: 68 second: 88 kernAmount: -38);
			add: (PairKern first: 70 second: 88 kernAmount: -29);
			add: (PairKern first: 71 second: 88 kernAmount: -24);
			add: (PairKern first: 74 second: 88 kernAmount: -17);
			add: (PairKern first: 76 second: 88 kernAmount: -14);
			add: (PairKern first: 79 second: 88 kernAmount: -53);
			add: (PairKern first: 80 second: 88 kernAmount: -48);
			add: (PairKern first: 82 second: 88 kernAmount: -26);
			add: (PairKern first: 83 second: 88 kernAmount: -19);
			add: (PairKern first: 85 second: 88 kernAmount: -15);
			add: (PairKern first: 86 second: 88 kernAmount: -6);
			add: (PairKern first: 88 second: 88 kernAmount: -25);
			add: (PairKern first: 89 second: 88 kernAmount: -24);
			add: (PairKern first: 90 second: 88 kernAmount: -27);
			add: (PairKern first: 28 second: 89 kernAmount: -71);
			add: (PairKern first: 44 second: 89 kernAmount: -41);
			add: (PairKern first: 45 second: 89 kernAmount: -47);
			add: (PairKern first: 46 second: 89 kernAmount: -66);
			add: (PairKern first: 47 second: 89 kernAmount: 20);
			add: (PairKern first: 65 second: 89 kernAmount: -86);
			add: (PairKern first: 66 second: 89 kernAmount: -40);
			add: (PairKern first: 68 second: 89 kernAmount: -48);
			add: (PairKern first: 71 second: 89 kernAmount: -23);
			add: (PairKern first: 74 second: 89 kernAmount: -12);
			add: (PairKern first: 75 second: 89 kernAmount: -10);
			add: (PairKern first: 76 second: 89 kernAmount: -80);
			add: (PairKern first: 77 second: 89 kernAmount: -32);
			add: (PairKern first: 79 second: 89 kernAmount: -43);
			add: (PairKern first: 80 second: 89 kernAmount: -16);
			add: (PairKern first: 81 second: 89 kernAmount: -25);
			add: (PairKern first: 82 second: 89 kernAmount: -31);
			add: (PairKern first: 83 second: 89 kernAmount: -24);
			add: (PairKern first: 88 second: 89 kernAmount: -34);
			add: (PairKern first: 90 second: 89 kernAmount: -11);
			add: (PairKern first: 132 second: 89 kernAmount: -108);
			add: (PairKern first: 171 second: 89 kernAmount: -37);
			add: (PairKern first: 187 second: 89 kernAmount: -37);
			add: (PairKern first: 191 second: 89 kernAmount: -42);
			add: (PairKern first: 28 second: 90 kernAmount: -17);
			add: (PairKern first: 45 second: 90 kernAmount: -16);
			add: (PairKern first: 65 second: 90 kernAmount: -14);
			add: (PairKern first: 66 second: 90 kernAmount: -15);
			add: (PairKern first: 68 second: 90 kernAmount: -31);
			add: (PairKern first: 70 second: 90 kernAmount: -14);
			add: (PairKern first: 71 second: 90 kernAmount: -14);
			add: (PairKern first: 76 second: 90 kernAmount: -17);
			add: (PairKern first: 79 second: 90 kernAmount: -28);
			add: (PairKern first: 80 second: 90 kernAmount: -30);
			add: (PairKern first: 82 second: 90 kernAmount: -21);
			add: (PairKern first: 83 second: 90 kernAmount: -13);
			add: (PairKern first: 86 second: 90 kernAmount: -9);
			add: (PairKern first: 88 second: 90 kernAmount: -17);
			add: (PairKern first: 89 second: 90 kernAmount: -10);
			add: (PairKern first: 90 second: 90 kernAmount: -26);
			add: (PairKern first: 67 second: 97 kernAmount: -8);
			add: (PairKern first: 68 second: 97 kernAmount: -4);
			add: (PairKern first: 70 second: 97 kernAmount: -28);
			add: (PairKern first: 75 second: 97 kernAmount: -5);
			add: (PairKern first: 80 second: 97 kernAmount: -13);
			add: (PairKern first: 82 second: 97 kernAmount: -15);
			add: (PairKern first: 84 second: 97 kernAmount: -75);
			add: (PairKern first: 86 second: 97 kernAmount: -46);
			add: (PairKern first: 87 second: 97 kernAmount: -24);
			add: (PairKern first: 88 second: 97 kernAmount: -16);
			add: (PairKern first: 89 second: 97 kernAmount: -68);
			add: (PairKern first: 90 second: 97 kernAmount: -17);
			add: (PairKern first: 98 second: 97 kernAmount: -7);
			add: (PairKern first: 102 second: 97 kernAmount: -20);
			add: (PairKern first: 107 second: 97 kernAmount: -12);
			add: (PairKern first: 114 second: 97 kernAmount: -10);
			add: (PairKern first: 118 second: 97 kernAmount: -9);
			add: (PairKern first: 119 second: 97 kernAmount: -7);
			add: (PairKern first: 120 second: 97 kernAmount: -12);
			add: (PairKern first: 121 second: 97 kernAmount: -8);
			add: (PairKern first: 122 second: 97 kernAmount: -5);
			add: (PairKern first: 147 second: 97 kernAmount: -26);
			add: (PairKern first: 148 second: 97 kernAmount: -42);
			add: (PairKern first: 28 second: 100 kernAmount: -10);
			add: (PairKern first: 29 second: 100 kernAmount: -10);
			add: (PairKern first: 47 second: 100 kernAmount: -34);
			add: (PairKern first: 65 second: 100 kernAmount: -4);
			add: (PairKern first: 67 second: 100 kernAmount: -20);
			add: (PairKern first: 70 second: 100 kernAmount: -21);
			add: (PairKern first: 75 second: 100 kernAmount: -20);
			add: (PairKern first: 76 second: 100 kernAmount: -10);
			add: (PairKern first: 80 second: 100 kernAmount: -17);
			add: (PairKern first: 82 second: 100 kernAmount: -39);
			add: (PairKern first: 84 second: 100 kernAmount: -86);
			add: (PairKern first: 86 second: 100 kernAmount: -48);
			add: (PairKern first: 87 second: 100 kernAmount: -25);
			add: (PairKern first: 88 second: 100 kernAmount: -40);
			add: (PairKern first: 89 second: 100 kernAmount: -90);
			add: (PairKern first: 90 second: 100 kernAmount: -43);
			add: (PairKern first: 99 second: 100 kernAmount: -11);
			add: (PairKern first: 102 second: 100 kernAmount: -28);
			add: (PairKern first: 107 second: 100 kernAmount: -38);
			add: (PairKern first: 114 second: 100 kernAmount: -25);
			add: (PairKern first: 115 second: 100 kernAmount: -10);
			add: (PairKern first: 116 second: 100 kernAmount: -24);
			add: (PairKern first: 118 second: 100 kernAmount: -13);
			add: (PairKern first: 119 second: 100 kernAmount: -12);
			add: (PairKern first: 120 second: 100 kernAmount: -29);
			add: (PairKern first: 121 second: 100 kernAmount: -11);
			add: (PairKern first: 122 second: 100 kernAmount: -19);
			add: (PairKern first: 132 second: 100 kernAmount: -17);
			add: (PairKern first: 147 second: 100 kernAmount: -57);
			add: (PairKern first: 148 second: 100 kernAmount: -71);
			add: (PairKern first: 223 second: 100 kernAmount: -4);
			add: (PairKern first: 29 second: 102 kernAmount: 16);
			add: (PairKern first: 80 second: 102 kernAmount: 5);
			add: (PairKern first: 88 second: 102 kernAmount: -12);
			add: (PairKern first: 89 second: 102 kernAmount: -13);
			add: (PairKern first: 114 second: 102 kernAmount: 15);
			add: (PairKern first: 115 second: 102 kernAmount: -7);
			add: (PairKern first: 132 second: 102 kernAmount: -20);
			add: (PairKern first: 148 second: 102 kernAmount: -10);
			add: (PairKern first: 223 second: 102 kernAmount: -7);
			add: (PairKern first: 84 second: 109 kernAmount: -53);
			add: (PairKern first: 86 second: 109 kernAmount: -21);
			add: (PairKern first: 87 second: 109 kernAmount: -6);
			add: (PairKern first: 88 second: 109 kernAmount: -22);
			add: (PairKern first: 89 second: 109 kernAmount: -44);
			add: (PairKern first: 90 second: 109 kernAmount: -20);
			add: (PairKern first: 148 second: 109 kernAmount: -12);
			add: (PairKern first: 28 second: 111 kernAmount: -10);
			add: (PairKern first: 29 second: 111 kernAmount: -11);
			add: (PairKern first: 47 second: 111 kernAmount: -34);
			add: (PairKern first: 65 second: 111 kernAmount: -5);
			add: (PairKern first: 67 second: 111 kernAmount: -21);
			add: (PairKern first: 70 second: 111 kernAmount: -21);
			add: (PairKern first: 75 second: 111 kernAmount: -20);
			add: (PairKern first: 76 second: 111 kernAmount: -11);
			add: (PairKern first: 80 second: 111 kernAmount: -17);
			add: (PairKern first: 82 second: 111 kernAmount: -42);
			add: (PairKern first: 84 second: 111 kernAmount: -86);
			add: (PairKern first: 86 second: 111 kernAmount: -48);
			add: (PairKern first: 87 second: 111 kernAmount: -26);
			add: (PairKern first: 88 second: 111 kernAmount: -40);
			add: (PairKern first: 89 second: 111 kernAmount: -88);
			add: (PairKern first: 90 second: 111 kernAmount: -43);
			add: (PairKern first: 99 second: 111 kernAmount: -12);
			add: (PairKern first: 102 second: 111 kernAmount: -29);
			add: (PairKern first: 107 second: 111 kernAmount: -39);
			add: (PairKern first: 114 second: 111 kernAmount: -25);
			add: (PairKern first: 115 second: 111 kernAmount: -10);
			add: (PairKern first: 116 second: 111 kernAmount: -24);
			add: (PairKern first: 118 second: 111 kernAmount: -14);
			add: (PairKern first: 119 second: 111 kernAmount: -12);
			add: (PairKern first: 120 second: 111 kernAmount: -29);
			add: (PairKern first: 121 second: 111 kernAmount: -11);
			add: (PairKern first: 122 second: 111 kernAmount: -19);
			add: (PairKern first: 132 second: 111 kernAmount: -17);
			add: (PairKern first: 147 second: 111 kernAmount: -55);
			add: (PairKern first: 148 second: 111 kernAmount: -71);
			add: (PairKern first: 223 second: 111 kernAmount: -4);
			add: (PairKern first: 75 second: 115 kernAmount: -7);
			add: (PairKern first: 84 second: 115 kernAmount: -65);
			add: (PairKern first: 86 second: 115 kernAmount: -20);
			add: (PairKern first: 87 second: 115 kernAmount: -6);
			add: (PairKern first: 89 second: 115 kernAmount: -61);
			add: (PairKern first: 90 second: 115 kernAmount: -11);
			add: (PairKern first: 107 second: 115 kernAmount: -7);
			add: (PairKern first: 115 second: 115 kernAmount: -10);
			add: (PairKern first: 120 second: 115 kernAmount: -8);
			add: (PairKern first: 132 second: 115 kernAmount: -6);
			add: (PairKern first: 147 second: 115 kernAmount: -28);
			add: (PairKern first: 148 second: 115 kernAmount: -38);
			add: (PairKern first: 28 second: 116 kernAmount: -15);
			add: (PairKern first: 29 second: 116 kernAmount: 14);
			add: (PairKern first: 46 second: 116 kernAmount: -15);
			add: (PairKern first: 65 second: 116 kernAmount: -19);
			add: (PairKern first: 67 second: 116 kernAmount: -4);
			add: (PairKern first: 76 second: 116 kernAmount: -14);
			add: (PairKern first: 80 second: 116 kernAmount: 5);
			add: (PairKern first: 88 second: 116 kernAmount: -23);
			add: (PairKern first: 89 second: 116 kernAmount: -11);
			add: (PairKern first: 90 second: 116 kernAmount: -16);
			add: (PairKern first: 98 second: 116 kernAmount: -6);
			add: (PairKern first: 101 second: 116 kernAmount: -6);
			add: (PairKern first: 104 second: 116 kernAmount: -6);
			add: (PairKern first: 114 second: 116 kernAmount: 13);
			add: (PairKern first: 115 second: 116 kernAmount: -11);
			add: (PairKern first: 118 second: 116 kernAmount: 8);
			add: (PairKern first: 119 second: 116 kernAmount: 5);
			add: (PairKern first: 121 second: 116 kernAmount: 9);
			add: (PairKern first: 132 second: 116 kernAmount: -16);
			add: (PairKern first: 223 second: 116 kernAmount: -10);
			add: (PairKern first: 28 second: 117 kernAmount: -17);
			add: (PairKern first: 65 second: 117 kernAmount: -8);
			add: (PairKern first: 67 second: 117 kernAmount: -13);
			add: (PairKern first: 70 second: 117 kernAmount: -8);
			add: (PairKern first: 75 second: 117 kernAmount: -22);
			add: (PairKern first: 76 second: 117 kernAmount: -15);
			add: (PairKern first: 82 second: 117 kernAmount: -18);
			add: (PairKern first: 84 second: 117 kernAmount: -56);
			add: (PairKern first: 86 second: 117 kernAmount: -23);
			add: (PairKern first: 87 second: 117 kernAmount: -4);
			add: (PairKern first: 88 second: 117 kernAmount: -27);
			add: (PairKern first: 89 second: 117 kernAmount: -50);
			add: (PairKern first: 90 second: 117 kernAmount: -26);
			add: (PairKern first: 102 second: 117 kernAmount: -6);
			add: (PairKern first: 107 second: 117 kernAmount: -18);
			add: (PairKern first: 122 second: 117 kernAmount: -17);
			add: (PairKern first: 132 second: 117 kernAmount: -11);
			add: (PairKern first: 147 second: 117 kernAmount: -20);
			add: (PairKern first: 148 second: 117 kernAmount: -33);
			add: (PairKern first: 28 second: 118 kernAmount: -41);
			add: (PairKern first: 44 second: 118 kernAmount: -27);
			add: (PairKern first: 46 second: 118 kernAmount: -37);
			add: (PairKern first: 65 second: 118 kernAmount: -28);
			add: (PairKern first: 67 second: 118 kernAmount: -35);
			add: (PairKern first: 70 second: 118 kernAmount: -6);
			add: (PairKern first: 71 second: 118 kernAmount: -19);
			add: (PairKern first: 75 second: 118 kernAmount: -32);
			add: (PairKern first: 76 second: 118 kernAmount: -44);
			add: (PairKern first: 77 second: 118 kernAmount: -6);
			add: (PairKern first: 83 second: 118 kernAmount: -15);
			add: (PairKern first: 84 second: 118 kernAmount: -56);
			add: (PairKern first: 88 second: 118 kernAmount: -50);
			add: (PairKern first: 89 second: 118 kernAmount: -38);
			add: (PairKern first: 90 second: 118 kernAmount: -47);
			add: (PairKern first: 97 second: 118 kernAmount: -11);
			add: (PairKern first: 98 second: 118 kernAmount: -10);
			add: (PairKern first: 101 second: 118 kernAmount: -12);
			add: (PairKern first: 104 second: 118 kernAmount: -16);
			add: (PairKern first: 107 second: 118 kernAmount: -8);
			add: (PairKern first: 111 second: 118 kernAmount: -12);
			add: (PairKern first: 115 second: 118 kernAmount: -17);
			add: (PairKern first: 120 second: 118 kernAmount: -4);
			add: (PairKern first: 122 second: 118 kernAmount: -9);
			add: (PairKern first: 132 second: 118 kernAmount: -52);
			add: (PairKern first: 223 second: 118 kernAmount: -24);
			add: (PairKern first: 28 second: 119 kernAmount: -40);
			add: (PairKern first: 44 second: 119 kernAmount: -18);
			add: (PairKern first: 46 second: 119 kernAmount: -32);
			add: (PairKern first: 65 second: 119 kernAmount: -28);
			add: (PairKern first: 66 second: 119 kernAmount: -10);
			add: (PairKern first: 67 second: 119 kernAmount: -35);
			add: (PairKern first: 71 second: 119 kernAmount: -20);
			add: (PairKern first: 75 second: 119 kernAmount: -33);
			add: (PairKern first: 76 second: 119 kernAmount: -34);
			add: (PairKern first: 77 second: 119 kernAmount: -6);
			add: (PairKern first: 82 second: 119 kernAmount: -7);
			add: (PairKern first: 83 second: 119 kernAmount: -15);
			add: (PairKern first: 84 second: 119 kernAmount: -62);
			add: (PairKern first: 88 second: 119 kernAmount: -49);
			add: (PairKern first: 89 second: 119 kernAmount: -35);
			add: (PairKern first: 90 second: 119 kernAmount: -49);
			add: (PairKern first: 97 second: 119 kernAmount: -12);
			add: (PairKern first: 98 second: 119 kernAmount: -8);
			add: (PairKern first: 101 second: 119 kernAmount: -11);
			add: (PairKern first: 104 second: 119 kernAmount: -15);
			add: (PairKern first: 111 second: 119 kernAmount: -10);
			add: (PairKern first: 115 second: 119 kernAmount: -14);
			add: (PairKern first: 132 second: 119 kernAmount: -46);
			add: (PairKern first: 223 second: 119 kernAmount: -20);
			add: (PairKern first: 45 second: 120 kernAmount: -13);
			add: (PairKern first: 65 second: 120 kernAmount: -6);
			add: (PairKern first: 66 second: 120 kernAmount: -10);
			add: (PairKern first: 70 second: 120 kernAmount: -16);
			add: (PairKern first: 74 second: 120 kernAmount: -11);
			add: (PairKern first: 84 second: 120 kernAmount: -57);
			add: (PairKern first: 86 second: 120 kernAmount: -18);
			add: (PairKern first: 89 second: 120 kernAmount: -39);
			add: (PairKern first: 97 second: 120 kernAmount: -14);
			add: (PairKern first: 98 second: 120 kernAmount: -17);
			add: (PairKern first: 101 second: 120 kernAmount: -23);
			add: (PairKern first: 102 second: 120 kernAmount: -6);
			add: (PairKern first: 104 second: 120 kernAmount: -18);
			add: (PairKern first: 111 second: 120 kernAmount: -31);
			add: (PairKern first: 115 second: 120 kernAmount: -16);
			add: (PairKern first: 223 second: 120 kernAmount: -14);
			add: (PairKern first: 28 second: 121 kernAmount: -38);
			add: (PairKern first: 44 second: 121 kernAmount: -15);
			add: (PairKern first: 46 second: 121 kernAmount: -40);
			add: (PairKern first: 65 second: 121 kernAmount: -30);
			add: (PairKern first: 66 second: 121 kernAmount: -13);
			add: (PairKern first: 67 second: 121 kernAmount: -35);
			add: (PairKern first: 70 second: 121 kernAmount: -6);
			add: (PairKern first: 71 second: 121 kernAmount: -19);
			add: (PairKern first: 75 second: 121 kernAmount: -38);
			add: (PairKern first: 76 second: 121 kernAmount: -44);
			add: (PairKern first: 77 second: 121 kernAmount: -6);
			add: (PairKern first: 82 second: 121 kernAmount: -9);
			add: (PairKern first: 83 second: 121 kernAmount: -15);
			add: (PairKern first: 84 second: 121 kernAmount: -56);
			add: (PairKern first: 86 second: 121 kernAmount: -16);
			add: (PairKern first: 88 second: 121 kernAmount: -48);
			add: (PairKern first: 89 second: 121 kernAmount: -37);
			add: (PairKern first: 90 second: 121 kernAmount: -42);
			add: (PairKern first: 97 second: 121 kernAmount: -10);
			add: (PairKern first: 98 second: 121 kernAmount: -9);
			add: (PairKern first: 101 second: 121 kernAmount: -11);
			add: (PairKern first: 104 second: 121 kernAmount: -18);
			add: (PairKern first: 107 second: 121 kernAmount: -8);
			add: (PairKern first: 111 second: 121 kernAmount: -12);
			add: (PairKern first: 115 second: 121 kernAmount: -17);
			add: (PairKern first: 120 second: 121 kernAmount: -4);
			add: (PairKern first: 122 second: 121 kernAmount: -9);
			add: (PairKern first: 132 second: 121 kernAmount: -42);
			add: (PairKern first: 223 second: 121 kernAmount: -24);
			add: (PairKern first: 68 second: 122 kernAmount: -10);
			add: (PairKern first: 70 second: 122 kernAmount: -13);
			add: (PairKern first: 83 second: 122 kernAmount: -10);
			add: (PairKern first: 84 second: 122 kernAmount: -43);
			add: (PairKern first: 86 second: 122 kernAmount: -15);
			add: (PairKern first: 88 second: 122 kernAmount: -14);
			add: (PairKern first: 89 second: 122 kernAmount: -38);
			add: (PairKern first: 98 second: 122 kernAmount: -9);
			add: (PairKern first: 101 second: 122 kernAmount: -13);
			add: (PairKern first: 104 second: 122 kernAmount: -9);
			add: (PairKern first: 111 second: 122 kernAmount: -21);
			add: (PairKern first: 115 second: 122 kernAmount: -10);
			add: (PairKern first: 148 second: 122 kernAmount: -13);
			add: (PairKern first: 28 second: 147 kernAmount: -32);
			add: (PairKern first: 44 second: 147 kernAmount: -118);
			add: (PairKern first: 46 second: 147 kernAmount: -118);
			add: (PairKern first: 65 second: 147 kernAmount: -77);
			add: (PairKern first: 71 second: 147 kernAmount: -8);
			add: (PairKern first: 76 second: 147 kernAmount: -92);
			add: (PairKern first: 80 second: 147 kernAmount: 14);
			add: (PairKern first: 84 second: 147 kernAmount: 11);
			add: (PairKern first: 98 second: 147 kernAmount: -20);
			add: (PairKern first: 101 second: 147 kernAmount: -13);
			add: (PairKern first: 102 second: 147 kernAmount: 23);
			add: (PairKern first: 114 second: 147 kernAmount: 20);
			add: (PairKern first: 118 second: 147 kernAmount: 20);
			add: (PairKern first: 119 second: 147 kernAmount: 15);
			add: (PairKern first: 120 second: 147 kernAmount: 20);
			add: (PairKern first: 121 second: 147 kernAmount: 20);
			add: (PairKern first: 223 second: 147 kernAmount: -20);
			add: (PairKern first: 28 second: 148 kernAmount: -45);
			add: (PairKern first: 44 second: 148 kernAmount: -109);
			add: (PairKern first: 46 second: 148 kernAmount: -118);
			add: (PairKern first: 65 second: 148 kernAmount: -57);
			add: (PairKern first: 76 second: 148 kernAmount: -92);
			add: (PairKern first: 80 second: 148 kernAmount: 18);
			add: (PairKern first: 84 second: 148 kernAmount: 18);
			add: (PairKern first: 86 second: 148 kernAmount: 10);
			add: (PairKern first: 87 second: 148 kernAmount: 15);
			add: (PairKern first: 102 second: 148 kernAmount: 15);
			add: (PairKern first: 114 second: 148 kernAmount: 15);
			add: (PairKern first: 118 second: 148 kernAmount: 25);
			add: (PairKern first: 119 second: 148 kernAmount: 15);
			add: (PairKern first: 120 second: 148 kernAmount: 20);
			add: (PairKern first: 121 second: 148 kernAmount: 20);
			add: (PairKern first: 239 second: 148 kernAmount: 11);
			add: (PairKern first: 84 second: 154 kernAmount: -37);
			add: (PairKern first: 89 second: 154 kernAmount: -52);
			add: (PairKern first: 148 second: 154 kernAmount: -5);
			add: (PairKern first: 75 second: 171 kernAmount: -15);
			add: (PairKern first: 84 second: 171 kernAmount: -37);
			add: (PairKern first: 86 second: 171 kernAmount: -17);
			add: (PairKern first: 89 second: 171 kernAmount: -37);
			add: (PairKern first: 76 second: 183 kernAmount: -32);
			add: (PairKern first: 75 second: 187 kernAmount: -36);
			add: (PairKern first: 84 second: 187 kernAmount: -37);
			add: (PairKern first: 86 second: 187 kernAmount: -26);
			add: (PairKern first: 89 second: 187 kernAmount: -37);
			add: (PairKern first: 47 second: 198 kernAmount: -25);
			add: (PairKern first: 66 second: 198 kernAmount: -6);
			add: (PairKern first: 68 second: 198 kernAmount: -21);
			add: (PairKern first: 70 second: 198 kernAmount: -49);
			add: (PairKern first: 74 second: 198 kernAmount: -9);
			add: (PairKern first: 76 second: 198 kernAmount: 16);
			add: (PairKern first: 79 second: 198 kernAmount: -12);
			add: (PairKern first: 80 second: 198 kernAmount: -52);
			add: (PairKern first: 81 second: 198 kernAmount: 30);
			add: (PairKern first: 84 second: 198 kernAmount: -63);
			add: (PairKern first: 85 second: 198 kernAmount: -15);
			add: (PairKern first: 86 second: 198 kernAmount: -62);
			add: (PairKern first: 87 second: 198 kernAmount: -36);
			add: (PairKern first: 89 second: 198 kernAmount: -87);
			add: (PairKern first: 132 second: 198 kernAmount: 40);
			add: (PairKern first: 147 second: 198 kernAmount: -115);
			add: (PairKern first: 148 second: 198 kernAmount: -112);
			add: (PairKern first: 65 second: 208 kernAmount: -5);
			add: (PairKern first: 132 second: 208 kernAmount: -7);
			add: (PairKern first: 89 second: 223 kernAmount: -40);
			add: (PairKern first: 84 second: 224 kernAmount: -55);
			add: (PairKern first: 86 second: 224 kernAmount: -40);
			add: (PairKern first: 89 second: 224 kernAmount: -58);
			add: (PairKern first: 84 second: 226 kernAmount: -57);
			add: (PairKern first: 89 second: 226 kernAmount: -57);
			add: (PairKern first: 84 second: 227 kernAmount: -33);
			add: (PairKern first: 86 second: 227 kernAmount: -37);
			add: (PairKern first: 89 second: 227 kernAmount: -42);
			add: (PairKern first: 84 second: 228 kernAmount: -48);
			add: (PairKern first: 86 second: 228 kernAmount: -40);
			add: (PairKern first: 89 second: 228 kernAmount: -46);
			add: (PairKern first: 84 second: 229 kernAmount: -61);
			add: (PairKern first: 86 second: 229 kernAmount: -37);
			add: (PairKern first: 89 second: 229 kernAmount: -48);
			add: (PairKern first: 84 second: 232 kernAmount: -69);
			add: (PairKern first: 89 second: 232 kernAmount: -72);
			add: (PairKern first: 84 second: 234 kernAmount: -65);
			add: (PairKern first: 89 second: 234 kernAmount: -79);
			add: (PairKern first: 84 second: 235 kernAmount: -66);
			add: (PairKern first: 89 second: 235 kernAmount: -72);
			add: (PairKern first: 84 second: 236 kernAmount: 20);
			add: (PairKern first: 87 second: 236 kernAmount: 12);
			add: (PairKern first: 89 second: 236 kernAmount: 7);
			add: (PairKern first: 147 second: 236 kernAmount: 15);
			add: (PairKern first: 75 second: 238 kernAmount: 4);
			add: (PairKern first: 84 second: 238 kernAmount: 17);
			add: (PairKern first: 86 second: 238 kernAmount: 11);
			add: (PairKern first: 87 second: 238 kernAmount: 12);
			add: (PairKern first: 89 second: 238 kernAmount: 13);
			add: (PairKern first: 147 second: 238 kernAmount: 10);
			add: (PairKern first: 70 second: 239 kernAmount: 15);
			add: (PairKern first: 75 second: 239 kernAmount: 14);
			add: (PairKern first: 84 second: 239 kernAmount: 37);
			add: (PairKern first: 86 second: 239 kernAmount: 15);
			add: (PairKern first: 87 second: 239 kernAmount: 20);
			add: (PairKern first: 89 second: 239 kernAmount: 31);
			add: (PairKern first: 147 second: 239 kernAmount: 21);
			add: (PairKern first: 84 second: 241 kernAmount: -41);
			add: (PairKern first: 84 second: 242 kernAmount: -70);
			add: (PairKern first: 86 second: 242 kernAmount: -48);
			add: (PairKern first: 89 second: 242 kernAmount: -80);
			add: (PairKern first: 84 second: 244 kernAmount: -83);
			add: (PairKern first: 89 second: 244 kernAmount: -81);
			add: (PairKern first: 84 second: 245 kernAmount: -55);
			add: (PairKern first: 86 second: 245 kernAmount: -48);
			add: (PairKern first: 89 second: 245 kernAmount: -71);
			add: (PairKern first: 84 second: 246 kernAmount: -64);
			add: (PairKern first: 86 second: 246 kernAmount: -48);
			add: (PairKern first: 89 second: 246 kernAmount: -81);
			add: (PairKern first: 84 second: 249 kernAmount: -48);
			add: (PairKern first: 84 second: 252 kernAmount: -51);
			add: (PairKern first: 84 second: 255 kernAmount: -33);
			yourself)
%
classmethod: PostScriptFontMetrics
exampleBytes
	^self exampleBytesTazLT4SemiLight
%
classmethod: PostScriptFontMetrics
exampleBytesTazLT4SemiLight
	^ByteArray fromASCII85String: '!!1UZ!!#B)E-ZJ<B4uB00f_6Q/0HZ-3B8W51,(C;/0H]%0K(%_Gp#e''@p<A_>p*Zh+@gHjDfdTS6#:
?;!!%QM$32UX/-0,\4obQ_!!!"\!<<*"-3PK@!<E<,ru1q<!65''>!7CiIzz!$2-(!!!#lz!!!#b!WW3
#!!!#[z!!!!U!:Tsg!9aLe!9aOK"!@^<!PAKT!!!#3!hB:$!+Z)7!%%\$!+Z''I!#Ye"!%%]W!WW3sDf
^#!@rc:&F9#9KH6>m\1a#_.D.u[XB4uAe<+1))9N3iIASl-TBkM+$!0@69!.Fs1!Ib''2!K[>D!SRO&!
Ib&u!Ib&u!Ib&u!Ib&u!Ib&u!=&Yb!TF-"!Up*+!ET<Q!$VHR!FGo?!O)Xk!qlU\!C?h#!@@jR!<N9%!
La#p!XJi5!XJi5!XJi5!XJi5!XJic!B1$+![[sq!iZ40!sJc)!TF,D!j)Kk!?M;?!pK\S!QtLU!VHLj!
c8#3!Gql@!m1P<!DEOr!YY\4!RUqb!G__)!G_]_!qZM$!T*qA!HnM.!Rh&U!U''RU!SRP-!2''AH!!NJ
r!VHKW!U''P?!G;E\!V6>S!KI5a!K$nZ!K[?F!0@4.!e(.s!e(.U!P/<S!ODk"!V?DS!W)uA!D<IS!e(
0!!Ib&u!W<#s!5/EH!@@m?!U''WI!H/$P!D<G7"+C9"!RUr!!$VH>!V?C>![[sh!@@l0!>>Q`!=&ZQ![
[tS!g!H0!@@lZ!O`#j!@@k%!j;TO!B''t)!=&\''!jDa,!iZ2(!X/W/!X/W/!X/Xg!oa6_!NcC)!NcCe
!9jLJ!9jJS!`/r8!c8!U!c8!U![[tj!_`Yh!_`Yh!mq&A!TsL@!T*q8!T*q8!T*qJ!d4Un!Rh(u!Rh)''
!87G,!87G+!V6?b!VHKd!VHKd!@@mE!V6?`!V6?`!K$pA!K$oh!^Rh&s$Ie''s&pE9s$7\!s&pH:s+DE
Zs&gH)s(3D]!%]>Js"5MBs$7jXs$8-UruEZMs",eOs$A:#s$SEWs$eQ>s%4ias%b2ps%k7`s&:PIs&CV
ss&L\Es&Ubgs&gn0s''dPGs(*bDs(3h(s)0I>s)KZas)TaQs)orms*$$%s*60%s-#!ks-,''cru<W9s"
#bIs"5n<s$87*s$JBQs$\O7s$eU8s%=r_s%G#is&(Gts&:Sus&L`2s&Uf;s&^l,s&gqTs&q"qs''mYAs
(3k=s(a48s)K^Qs)Tdbs)]jUs)p!is*$''js*--Ss*63ns*?9ZruE`Ys",k_s$A@)s$SKes$eWGs%4oe
s%b9)s%k=qs&1QGs&:VIs&C](s&LbHs&Uhls&gt<s(*hIs(3n/s)0OFs)K`ms)TgZs)p$#s*$*/s*661
s-#''ms-,-es"?$Os$eZZs%4s.s%kAPs&1TDs&:Ybs&C`2s&Lecs&Ul&s&h"es(3q@s)KdUs)p''[s*$
-ds&;&=s&M2Ds&V8Os&hD4s$8m9s&;2o!+nG&!%gM*s"?[Us$B$7s$K*Ds$T04s$]6Ms$f;ks$oBAs%5
T;s%>ZOs%brEs%l#!s&)/>s&25Ws&;:ps&DAHs&MG#s&VM5s&_SWs&hXes&q_Ns-#aSs-,gHru=WD!%g
gts"@"+s$96[!(''<Ks$TKEs$fW(s%5oSs%H#t!)H5Is%l>*s&;VAs&D\[s&Mb)s&VhAs&ht-s-$''\s
---Vs&;_fs&Mkhs&i(Ys--7Gru=hts"7+/s"@10s$9HFs$KTGs$]`]s%?/Ds%H5Is&)YTs&2_hs&;eKs
&MqXs&W"gs&`(Ds&i.Ds&r4Os+F2,s-$78s--=*s1_@uru=u+s".15s$9TKs$BZ[s$K`Ws$]las$fr[s
 %?;\s%HA[s%cSas&;qis&N(gs&W.ts&`4cs&i:^s&r@js+F>Cs-$COs--IKs1_M,ru>"Ts"%."s".4,s
"79us"@=c!''sT$s$B]Ns$TiCs$p&\s%HD(s%QJas%cVXs%ubas&;r%!+o1M!/+=Vs-$Cq!0gFs!39)Y
s1;7ms1_Oiru>&*s"7=4s$9ZKs%?A`s%HGZs&)kfs&`:hs+FD8ru>(Ws"%3os".:9s"7?ks"@Ce!''sZ
(s$BcRs$ToRs$p,Zs%?Das%HJ)s%QPcs%c\cs%lbms%uhks&)nfs&2tcs&`=cs&rIrs(5:?!/+CLs/T2
ms1;>*s1_Uqru>+es"%72s".=Ms"7C%s"@Ff!''s]@s$Bfbs$Tras$p/fs%HM?s%c_ks&)qss&rM#s(5
=>!/+G!s1_Xuru>/2s".@/s$9cYs$BiBs$Ko^s$TuCs$g,Ns$p2Ts%6D^s%HPcs%cb?s%lhEs&)t]s&3
 %es&E1ks&N7us&`Cds&iIfs&rOdru>1Ps"%=)s".C$s"7Hgs"@Lh!''sbfs$Bl@s$U#:s$p5Vs%6Gds%
?Mgs%HS"s%QYSs%ceJs%lkfs%uq^s&*"Ys&3(as&`F\s&rRus+FO>s/T;Ws1;Fgs1_^fru>52s".FDs$
9iZs$BoZs$U&Ls$g2_s$p8`s%HVbs%chZs%lnYs&*%ds&3+ms&N=ts&`Ins&iP!s&rUgs$L5is$U;ns$
gGXs%?ets%m.qs&*:qs&<F7s&NRVs&WXms&`_!s&idCs&rk"s''fF4s(5^+s(c''8s)MQAs)qiFs*%oI
s*.uEs*8&Js*A,Ns-$mRs--sCru>SCruGYDs"@p>s$:2ns$L>`s$gPbs%?nhs%Htss%m7ps&*C\s&<O/
s&N[Ws&Waos&`gas&im0s&rs`s''oU4s(5g&s(c0!s)MZ5s)V`Es)_f8s)qrEs*&#Gs*/)7s*8/Js*A5
Cs+FqOs-%!6s-.'')s5.AbruG\_!)R82!*Ek*s&it*s)M]^!-;cJs+G"Ns-.-hs5.Gas&<jYs&O"&s&X
(6s&a.''s&j3gs&s:+s-.Bmru>tNruH%Ns"A<Is$:T#s$L_js$gqms%@:ss%IA(s%mY&s&*dds&<p:s&
O''bs&X.$s&a3ls&j9=s&s?ks''p!>s(630s(cQ+s)N&@s)W,Ps)`2Cs)r>Os*&DRs*/JBs*8PUs*AVN
s+G=Zs-%BCs-.H4s5.bms%@G/s&=''Ss&O4-s&X:<s&jE\s&sL:s(c]Os)W8Ts*/V[s+GIis-%Nbs-.T
Yru?.NruH1k!%rB`s$:bos$Lo+s%IP*s%me@!*F@-s&jI:s&sO6s''g*Hs(-<Ks(HNNs)N2j!-<8Ts)r
Ji!-`Mg!-rYm!/,I`s5.qlru?1Ms$:f&s$Lr#s$h/+s%@M"s%IS*s&+"-s&=-^s&O:,s&X@@s&aF*s&j
Kis&sR-s(6EMs(ccFs*AhVs+GOfs-%Tls-.Z`ru?46s"&?Ts"8KLs$:hhs$Ltcs$h2.s$q8"s%@Ons%I
Ucs%R\5s&4+2s&=0_s&aHis&jO!s&sTns''^*Ds''g0Fs(-BGs(HTFs(cfQs)3)Qs)WAPs*/_bs*Ak_s
+GR>s5/"`ru?78s"&B^s"8NRs$:kis$Cr''s$M"ds$q;"s%@Rns%IXns%R_6s&+(:s&4.3s&=3Zs&aKk
s&jR%s&sWms''^-Ds''g3Is(-EIs(HWHs)3,Ts)WDTs+GUEs5/%es"/Kes$:o+s$Cu(s$h8&s%7P/s&=
6`s&OC4s&jU"s''^0Cs''g6As(-H>s(6NPs(HZFs)3/@s)WGSs5/(lru?=<s"&Hcs"8TLs$:qis$D#&s
$M(fs$h;1s$qA%s%@Xks%I^fs%Re8s&+.:s&445s&=9bs&OF7s&aQns&jX%s&s^!s''^3Hs''g9Js(-K
Ks(H]Gs(coTs)32Ts)WJSs*/hes*Atbs+G[Ks5/+cs$V2,s$h>+s&47;s&=<ps&OI9s&aU<s&j[%s''g
<Ks(-NJs(H`Qs)35Ls)WM[s-.j$ru@6\s"''@ks"9Lms$;jTs$r:Js%JWPs%nmh!*#-i!+M/Ys(.Dcs(
7H2!-48;!-XP?!-aV;!-j\A!-sbB!8j",ru@9Ps"''Cus"9Ons$;mis%JZQs%npm!*#0q!*5<k!*>Bq!
+qH+!-4;7!-XSE!-aY<!-j_B!-seC!:Q-[!*#EAs&kf7s-/uLs%BE_s&?&Rs&Q2hs&lDWs%Ko[s%BuZs
&?Vbs&Qbos&ltgs"DCTs$Fa%s$Xlms$k#Ss%:<*s%LED!)LW,s%p_Zs&$cW!*$tSs&I)/s&R.Vs&[4qs
&m@@s+JB?!0bE^s-1Nbs$>$/s+Jbps&n73s&@pus&S(1s&n:"s&A!us&n@%s&A%9s&S17s&nC5s&A(+s
&S45s&nF2s&A*ts&S79s&nI1s&A3os&nQqs&A9us&nWls&A<us&nZts&A>!!*ALq!*SXn!0ca[!))__!
*&@u!*8Lq!*ARs!*S_!!0cgX!(QDf!))bj!*&D5!*8P!!*AV''!*Sb4!0cjd!*&L?s&AR#s&S^;s&nos
s&AWms&nuts&A[5s&Sg>s&o$*s&A^-s&Sj?s&o''!s&Ag@s&Ap@s&B$Urr~>'
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: ((PDFtalk at: #Fonts) at: #CFF) at: 1.
%
category: '*PDFtalk test resources-test instances'
classmethod: Charset0
example
	^Charset0 glyphs: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: Charset1
example
	^Charset1 ranges: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: Charstring
example
	"from 'Adobe Type 1 Font Format' pp.58"

	^Charstring bytes: #[189 249 180 13 139 239 3 139 239 1 248 236 239 1 139 22 249 80 6 239 7 252 236 6 248 136 7 248 236 6 239 7 253 80 6 9 14]
%
category: '*PDFtalk test resources-test instances'
classmethod: CharstringOperator
example
	^CharstringOperator value: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: DictOperator
example
	^DictOperator value: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: Encoding0
example
	^Encoding0 codes: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: Encoding1
example
	^Encoding1 ranges: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: EncodingSupplement
example
	^EncodingSupplement glyphsAtCode: (Valuemap
		with: 1 -> #symbol
		with: #key -> 'string')
%
category: '*PDFtalk test resources-test instances'
classmethod: FontSet
example
	^self for: nil fromBytes: self exampleBytes readStream
%
classmethod: FontSet
exampleBytes
	"from Appendix D"

	^#[16r01 16r00 16r04 16r01 16r00 16r01 16r01 16r01 16r13 16r41 16r42 16r43 16r44 16r45 16r46 16r2b 16r54 16r69 16r6d 16r65 16r73 16r2d 16r52 16r6f 16r6d 16r61 16r6e 16r00 16r01 16r01 16r01 16r1f 16rf8 16r1b 16r00 16rf8 16r1c 16r02 16rf8 16r1d 16r03 16rf8 16r19 16r04 16r1c 16r6f 16r00 16r0d 16rfb 16r3c 16rfb 16r6e 16rfa 16r7c 16rfa 16r16 16r05 16re9 16r11 16rb8 16rf1 16r12 16r00 16r03 16r01 16r01 16r08 16r13 16r18 16r30 16r30 16r31 16r2e 16r30 16r30 16r37 16r54 16r69 16r6d 16r65 16r73 16r20 16r52 16r6f 16r6d 16r61 16r6e 16r54 16r69 16r6d 16r65 16r73 16r00 16r00 16r00 16r02 16r01 16r01 16r02 16r03 16r0e 16r0e 16r7d 16r99 16rf9 16r2a 16r99 16rfb 16r76 16r95 16rf7 16r73 16r8b 16r06 16rf7 16r9a 16r93 16rfc 16r7c 16r8c 16r07 16r7d 16r99 16rf8 16r56 16r95 16rf7 16r5e 16r99 16r08 16rfb 16r6e 16r8c 16rf8 16r73 16r93 16rf7 16r10 16r8b 16r09 16ra7 16r0a 16rdf 16r0b 16rf7 16r8e 16r14]
%
category: '*PDFtalk test resources-test instances'
classmethod: Header
example
	^Header major: 1 minor: 1 hdrSize: 1 offSize: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: Index
example
	^Index count: 1 offSize: 1 offset: #(1 #a $x 'name') data: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: Operation
example
	^Operation operator: (DictOperator value: 4) operands: #(385)
%
category: '*PDFtalk test resources-test instances'
classmethod: PrivateDict
example
	^PrivateDict operations: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: Range
example
	^Range first: 1 nLeft: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: StandardCharset
example
	^StandardCharset isoAdobe
%
category: '*PDFtalk test resources-test instances'
classmethod: StandardEncoding
example
	^StandardEncoding standard
%
category: '*PDFtalk test resources-test instances'
classmethod: Subroutine
example
	^Subroutine bytes: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: TopDict
example
	^TopDict operations: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: TwoByteCharstringOperator
example
	^TwoByteCharstringOperator value: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: TwoByteDictOperator
example
	^TwoByteDictOperator value: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: Type1Font
example
	^FontSet example fonts first
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: ((PDFtalk at: #Fonts) at: #OpenType) at: 1.
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable0
example
	^CmapSubtable0 platform: 1 encoding: 1 contents: #[42] language: 1 glyphIdArray: #[42]
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable10
example
	^CmapSubtable10 platform: 1 encoding: 1 contents: #[42] language: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable12
example
	^CmapSubtable12 platform: 1 encoding: 1 contents: #[42] language: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable13
example
	^CmapSubtable13 platform: 1 encoding: 1 contents: #[42] language: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable2
example
	^CmapSubtable2 platform: 1 encoding: 1 contents: #[42] language: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable4
example
	^CmapSubtable4
		platform: 1
		encoding: 1
		contents: #[42]
		language: 1
		segments: #(1 #a $x 'name')
		glyphIdArray: #(1 #a $x 'name')
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable6
example
	^CmapSubtable6 platform: 1 encoding: 1 contents: #[42] language: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: CmapSubtable8
example
	^CmapSubtable8 platform: 1 encoding: 1 contents: #[42] language: 1
%
category: '*PDFtalk test resources-fonts'
classmethod: Font
freeSansBold
	"Example font for testing - contains thousends of glyphs.
	GNU FreeFont (see method comment of #freeSansBoldCOPYING for the licence).
	See http://savannah.gnu.org/projects/freefont/"

	<font: #FreeSansBold>
	^self
		file: 'FreeSansBold.otf'
		contents: (ByteArray fromASCII85String: ':K1:h!"K!Z!!<4/6UjNfSccBJ!!"3Z!!9Mn7Rg?O<1''sc!!=3C!!!!=7mod8[\(9!!!:`U!!!(r7o2u[&N$ZD!!;6"!!"s@7oNDST:mY@!!:hQ!!!CG:K&o%E15`5!!!$r!!!",@r5XnKUVWK!!!tf!!!4HBOtU_o]"H''!!!#c!!!!WBP:sc#*K@@!!!$F!!!!EBPhj9(o\o2!!=3_!!"@1CLqO(B8@YF!!>Ro!!6,AD..[.$)LGu!!!$j!!!!''DIIBnYNMX`!!!&(!!!o_E,Tf>s$cuW!!"3:!!!!A!!*''"!!+kF=/eko?Oo9l!Xf+ozaLeZ:zaLeZ:r&Oa5"r%1o!!*''*zz!!*''""6fa6!*TQ^r&O^$"r%%<zzz!!!>%!!#gq$)IV%!!<:O!k\L:!!!(X!kSFc!/pu:!k\J<!T*l3!<N6$!Xf59!WiE)!X.Qc%f\coiI:h-&0LrQ!!#Ma<?M8a!$M=?"!IV''!!!,b!A%UY!P\U7!!!''?!nmVs!$D7E!!!!k"+C4Nz!!!!f!/pmYz!!*''*!9=+\z!!3-''!;?Hoz!!<3N!E&muz!!E93!Lj&iz!!N?A!TF([z!!WE3!Z1n<z!!iQ,!\FBQz!"/cW!f6mXz!"B(U$rI!*z!"JuS&SV4I!!*3(!!3-5(-V^#!!*3(!!E9K(/b,7!!*3+!!3--((pTL!!*3+!!E9C(*3GX!!*3,!!3-)(%)&(!!*3,!!E9?(%qV0!!*3-!!3-+''g;U"!!*3-!!E9A''hA<,!!*3.!!3-/''b13G!!*3.!!E9E''c[2U!!*3/!!!"V!!!!$!!*3/!!*''2!7CiL!!*3/!!3-+!:9ag!!*3/!!<4#!;lg!!!*3/!!E9A!IXqM!!*3/!!N?\!NH,%!!*3/!!WE?!WE''$!!*3/!!iQ/![RgK!!*3/!"/d-!\jZW!!*3/!"B7''!jr"1!!*3/!"K!"&K^uT!!*30!!3-1&iK^l!!*30!!E9G&k2j''!!*31!!3-5''oi7r!!*31!!E9K''qt[1!!*32!!3-+''kRFJ!!*32!!E9A''lX-T!!*34!!3-3''\36d!!*34!!E9I''^,N!!!*36!!3-5''NP29!!*36!!E9K''P[UM!!*39!!3-)(!6LY!!*39!!E9?("*''a!!*3:!!3-1'';>I/!!*3:!!E9G''=%T?!!*3;!!3-7''4LqD!!*3;!!E9M''6jKZ!!*3<!!3-1''.s7e!!*3<!!E9G''0ZBu!!*3>!!3-+''*\F=!!*3>!!E9A''+b-G!!*3?!!3-7''#jnR!!*3?!!E9M''&3Hh!!*3A!!3--&t/e&!!*3A!!E9C&uGX2!!*3C!!3-)&eY0H!!*3C!!E9?&fL`P!!*3E!!3--&`s&q!!*3E!!E9C&b5o(!!*3G!!3-9''TrFu!!*3G!!E9O''WM-8!!*3H!!3-/&[hZA!!*3H!!E9E&]=YO!!*3J!!3-/&o%CK!!*3J!!E9E&pOBY!!*3L!!3-9''G:BJ!!*3L!!E9O''Ij(b!!*3M!!3-5''@m-c!!*3M!!E9K''C#Q"!!*3P!!3-+&WQhn!!*3P!!E9A&XWP#!!*3S!!3--(4#r_!!*3S!!E9C(5;fV!,hjV!-nQ\!+c.B!-A2`!&=O.!&+C.!%\*m!&=O.!&+C/!%\*m!&=O.!&+C1!%\*m!&=O.!&+C4!%\*m!&=O.!&+C5!%\*m!&=O.!&4I-!$D82!-/''N!+c-Q!)il9!+l4Q!-\EO!-/''N!$D82!,hj[!,_dI!+>kL!,2FO!,_ch!!#B)E-Z82Aoo.N0JG75+>PW)1FsY(0JG@8+>PW)3%Q1-0JGL<+>PW*0H`i*ARuu_De=*8@<,p%7W3EeA79RoDf.0-!(Hs/!+c.A!)il+!,_dX!!#K/AS"eKDK>dX63(p(C]IuG!((U?A,lU!!,hjT!-A31!,hjX!+u:C!$D7s!%n7*!$D8&!$D82!-/''N!+c-Q!)il+!,_dX!$D8.!,hjR!+Z''P!''1*&!&4I6!%e12!%e1+!&+C-!&+BQ7W30d7W3<[AKW`\0H`D!7WN''O+B)]dF!*efCh+YL+>Gl.3A!!?0e`S-7K@H/AH69A+95=?@/t0FEr[<_63(p(C]IuG!(M!?AKXo[DK?peDerqa!*0)2!-/''\!,2FO!,_cZ!$hPB!+c.R!,2FS!,2FO!,_ct!$D7r!%n7+!''($>!$D7e!$D7A<b6;mBl@l3,Z82sBle!,DE8mp/ho@H+=&''0!(Hs/!+c.A!)il+!,_dX!($[(!,MXG!!#K/AS"eKDKA-_Ch*MG7fZ9a<<*"h:/q8oBE3,SF9$7[Er\6$0*!X*Er]VKFoYqND?+PS@/ss@/c]MaD?+eZ/c]eiEWB_P0*#qkEWC"XC&hfF@fUTNEr[inAcQiOAH69AAcQ`LD?+bY0)tucFEDJC3\N.-@<Q''sDII32B5ViEDfTJDE,ol3ARfh''04o69AS,juF>!Uo;ugS3B`N2S+95mODZFVSDub"\F9#kPEW@3^AcQ`LD?+bY+96*UEr[<_Dua;HEWC1]+96<[AcNqR7fZ9a<<+-A7K@H/AH69A7K@?,D?+bY/c[!o+94t5F9!E`B`N2S+96!REWBYNAH3hQEr^+YAcQoQG5u%OEWBYN3WL9&GlVa_FT<Na@fTp;D?(dZEWBYNA,p<DEr^:^EWBeR@K:NNF9#kP+96*UF9!E`@/t0FA,n7_DZFeX+966YDZF;JB`M`FGlSreB`N5T+96NaD?+2IAH6`N+96K`BE2TD+96K`AH6`ND#eVW+96<[AcNqRF9#tSAH3hQ7fZ9a<<+-A7f[*#D?+5JEWBMJC]GRX:]PV<@K:3EB`MWC+95(8B`MWCAH6TJEr]bO+95gMEr[<_Dub"\@K:3EB`N2SBE2TDA,m_P@K:ZR+96K`BE2TD+94k2EWBYNAH3hQ;ZL_9AcQoQG5u%OEWBYN+94k2DZFn[D?+2I@/tBLB`N&OD?)3f+95sQB`N5TBE2TDEW@3^FoZ(REWC.\B`N&OD?(dZ1B8NtDZFAL+96K`BE2TD+95(8B`MWCAH6TJEr]bO/-$dmDZFeX+93ei@/tBL+96ZeDZFn[EW@3^DZF_VF9$"TDZFYT.0(Ij@/t0FGlSreC]IlDF9#kPEW@3^FoZ(REWC.\B`N&OD?)9h$31D5;ugS3B`N2S+96?\EWC"XB)lrP@/t-E+96*UEr[<_A,p<DEr^:^EWBeR@K:NNF9#kPA,m_PB`N#N+96K`BE2TD+96''TDZF_VAH3hQF9#tS@/tBL+96*UF9!E`G5u=WC]J8O+95jNAH3hQFT?I_AH6<BFT?4X/-$dm@K:NNF9!E`<rbel;ufGh:B4Ap;ue$@5laX[=TBQE<rbMd;?0Sp5laX[;ug&$3rgB''G5u=WF9#tSDZFn[F9!E`AH6lRAH6TJ+96K`BE2TD+96*UD#eMTC]J/LAH66@+96Tc@/t<JEWBMJD?+bYGlSreDZFAL+95+970$3c6NBXW5laX[;uf2a63''RW9E7Wa;ug&$+96<[EW@3^7K?![;ufYn70$6d;ZIp?7K?3a;?.g>5l`#-:]Nc];?0Yr8H;*X<<,\m5lad_+954<<<,ns:]O8k;ZK5d/c[!o+95=?AH69A+96K`BE2TD+94n3:&n8o+94n3AH6TJAH6`N@/t*D+954<FT>kNC]J/L@fRVO9E8c,@fU''?D?+_XAH3hQAcQ`LEW@3^D#eJSEWBYN+95pPAH6fP@/t!AC]JMV/cZ4Y$343/DZFn[+96H_BE2rNFT?4XA,m_PBE2H@FoZ(R+96E^AH63?AH6EEFoZ(RA,m_P@/qDM@fUEIDub.`+96<[AcNqRF9#tSAH3hQ7fZ9a<<+-A7f[*#D?+5JEWBMJC]GRX:]PV<@K:3EB`MWC+95(8B`MWCAH6TJEr]bO+95gMC]JARD?+;L+96TcB`N5TBE0.TF9#tSB`N2S+96?\EWC"XB)lrP@/t-E/c[!o+94t5AcNqRD?+STF9!il+96H_AH69A+94M(BE3,SF9$7[3WLf50*$1rG5uge/c]MaD?+eZ/c]eiEWB_P0*#egB`MWCAH6TJEr]bOEr[in4od28$31D55lbs++95gM+96H_DuaGL@fU3C@/t*D+95sQGQ;4RAH6ZLF9$"TDZFYT/-$dmB`M`F+96ZeDZFn[+95mOEWBYN@/tBLAH3hQ@/qDMA,pNJ@fUWOD#e,ID?+bY+96TcBE2`H@fU0B+96NaEr]bOEr[<_F9#tSB`N2S+96!RDZFYTF9!il+95gMD?+2I+95sQD#e#FAH66@+96K`BE2`HEr[<_AcQ`LD?+bY+96<[EW@3^FT?:Z@/t*DF9#kPEWBYNA,m_PDuaeVEWC1]B`N&OD?+_X+96<[AcNqRF9#tSB`N2S+96!RDZFYTF9!E`B`N#NF9$4Z+96K`BE2TD+95pPDZF8IFT?7YAH6TJF9!il+96K`BE2`HEr[<_AcQ`LD?+bY+95pPDZF>KEr[<_D?+STF9!E`@K:ZR+96*UF9$@^AH6NHAcNqR@fTp;FT?I_AH3hQF9#tSAH3hQEWBYNEr^=_C]JPWB`N#NB)j%SA,pNJ@fUWOD#e,ID?+bY+96K`DZCm[@K9s>+95mODZFq\AH6`NAH66@+95jNGlSreF9#tSAH3hQ7fZ9a<<+-A7f[*#D?+5JEWBMJC]GRX:]PV<@K:3EB`MWC+95(8B`MWCAH6TJEr]bO/c[!o;ugS3B`N2S+95sQGQ;4RAH6ZLF9$"TDZFYT+95pPDZF>KEr[<_D?+STF9!E`BE2rNG5u1SFoZ(REW@3^B`N#NFoYqNC]J/LA,p$<F9#kP+95gMD?+q^+96<[F9#tSAH6`N+96E^AH6-=Er^+YD?+_X+96TcBE3;X+96K`BE2TD+95pPDZF8IFT?7YAH6TJF9!E`D#e8MB)lTFF9!E`@K9s>+95mODZFq\AH6`NAH66@+95jNGlSreF9#tSAH3hQ7fZ9a<<+-A7f[*#D?+5JEWBMJC]GRX:]PV<@K:3EB`MWC+95(8B`MWCAH6TJEr]bO/c[!o8H<?&+96ZeDZFn[+966YDZF;JB`M`FGlSreF9#tSB`N2S+96!RDZFYTF9!il+96ZeDZFn[+966Y@/tQQ+95sQGQ;gcAH6TJA,m_PF9#tSB`N2S+95sQGQ;4RAH6ZLF9$"TDZFYT+96K`DZCm[GlVa_FT?F^+96QbAH6`NEr]nSDZFYT+96<[AcNqRF9#tSAH3hQAcQ`LD?+bY/-$dm@K:NNF9!E`GlVa_FT<Na@/t<JAH3hQD?+STF9!E`DZF5HC]J/LB)l??F9#kPA,m_PF9$4Z+95pPDZCm[Er^+Y/c[!o8H<?&+96ZeDZFn[+95pPDZCm[D?+STF9!E`G5u=WEr]kR+96K`DZCm[A,pNJ+96H_DZD<g+95pPAH6NHAH6fPAH3hQF9#tSB`N2S+95sQGQ;4RAH6ZLF9$"TDZFYT+96H_F9#_LF9#kPD#e,ID?+bY+96!REWC"XD#b[YGlVa_FT?F^+96QbAH6`NEr]nSDZFYT/cYlNBPDN1@rH4''F`_28+D,P0F<G:=+E1b0F<GL6+@f1,+@^B_AO^TUF=n[Y8TZ(hF!,(8AS!!*De=*8@<,p?+F.mJ+Ceht+ED%(BleB:Bju4,AKY]/+CT.u05kkRD/Ws!ApGM5F<G^DA7]d(FD,5.FCfK0F!,C5+EV:.+@f1,+@g!\ATD3q+Ad2iCh[B%9PJ!JDKBA3@<3Q1F^f0$F(f,q+C]U=FD,5.7WN''O+B*2jFE_/6AKXH\F`(_uFD5Z2/0JM<FD,6++Eh=:F(oQ1+>Y-YAfu2/AKXZ\@qBP!ALnsBEZcc=F<GjIF`JUCE-,f4DCH]:DL!@@@<?($+Eh=:F(oQ1/d_qbBPDN1E,ol0Ea`f-BlbD-BleB:Bju4,ARlotDBO%7AKYZ)E+L/6BOQ!*BlkJABl%T.@V$[)F(Js+Cb-]<F`\a-8Q85V<E(),:0A]@5uLTH:/k@X+EqOABQ&$8+D#_-DBO%7AKY](E,96"A0?))EcPT+FEo!IAfsf:;F<u@:/jMG8PD]T=WhX''+@\q%:.8)[+@].)+@.,H5uLZR6WHfG;BSe9;G^.f74o]*;e9M_FD,5.7o!&,7qHRLEa`c,:j$5`Bk&8ZBk(^lF(HJ+DfQt;DfTD3A7]jkBl%iC$49pSFWba=Dfol,+D>2,AKZ#)@qB@tARlol+Cf>/Gp%$;+EV:.+@f1,+@g!\ATD3q+Ad2iCh[B%9PJ!JDKBA3@;Kk"B-;D4FD)e=BPDN1E,ol0Ea`f;+<X6f+Du+>/0K"FAKX*KFEDI_0/%NnG:mNGFY7TQB.n(8@qBP!ATKLg/d_qOF!+m6F)Y]#Bjkg#AU%]rE-,f4DCcoEAfuA;FWb17ART[l+CQC''De!p,ASuT4GA(]#BHVG=ATJu9BPDN1AoDR//0JA=A0>H#@V''''mFD,B0+D,P0F<GLB+E_R1Cij6/ARlp&DfTr6Df0V=De:,6BPDN1AoDR/+DG_8D]j.8AKYN%@s)X"DKIEPFD,B0+D,P0F<G+4ATJu3Dfd+2Gp$gCF(K0"+Cei&F(HJ9BOr<,ATN!1FD5W*+CoD#F_t]-F<G[D+C\n)@rHO%Eb/c(@X0)<BOr;V:/rE,ASu("@;I&_F^f0$@j"HZ@qBP!AM,*)BPDN1AU%]rE-,f4DBNJ.ATJu3Dfd+8Dg,c9ATAo-DK]H)Bk1XoAKYE!Gp%$IBOu3,Eb/[#Df0V=GA)7EFD,5.A8bt#D.RU,+Dkh*BQPA+AKYK$G%G]*A0>?,+EV:.+@f1,+@g!\ATD3q+Ad2iCh[B%9PJ!JDKBAA+A$/fH#IgJD/Ws!ApGM@BPDN1AoDR//0K4VFWbO0Gp$[CFCf?#+EV:2F!,%=@qBV$Bl@l3FDi:IDfp(CG%G]8Bl@l3De:,6BOr;uDf0YJ+C]J8+F.mJ+CT;%+Du+>+E(_*BkLjrARlp*D]iS/+EMHR+A$/fH#IgJA8`T.Dfd+GBldr1FDi:4D]j+>/0JJ7Ch7^"+EV:2F!,%=@qBV$Bl@l3F*(i4ASl!rF<G19Df$VBDfp(CG%G]8Bl@lA!!$[4F9$C_Du_p!0*!X*G5ugeG5s5qB)lfLFT=#oDZFeXB)jRb@fUEIDub.`C]J#HAcQoQ0*#VbDua\S/c]PbF9$.XC]FHKFEDI_0/%NnG:mNGFY7TQB.mb5E-Z82Aoo\=E,7.?FDYgo!>,=k"![e_!!!!g!-/''N!+c-Q!)il+!,_dX!$D:S!9+)*!,V]9"?$BB"@*)Q"?6NE!!!!g!-/''N!+c-Q!)il+!,_dX!$DD&"?6NL"?clI"??G^!)!<#!,MZj!,_c:!(Hs/!+c.A!$D8?!+>kF!-8,_!)!<#!,MZj!,_c:!(Hs"!-A2@!(Hs/!+c.A!$D8?!+>kF!-8,_!(Hs"!-A2@!)<N*!+u:P!,2FT!+>j-!(Hs/!+c.A!$D8?!+>kF!-8,_!)<N*!+u:P!,2FT!+>j-!)!<4!+c.L!,DRQ!!!!g!-/''N!+c-Q!)il+!,_dX!$D87!-/''N!,qpR!,hi;!)rr@!=]$H!9jI`!(Hs/!+c.A!$D8?!+>kF!-8,_!)rr@!=]$H!9jI`"<Rb1"?Q`R"?$BB"@*)Q"A8kX!!!!g!-/''N!+c-Q!)il+!,_dX!$DCd"?lrM"@E;M"?6NL"?cl\"??G^!+u:P!,hjY!!!!g!-/''N!+c-Q!)il+!,_dX!$D8S!-/''X!-8,?!)<N*!+u:P!,2FT!,hi;!(Hs/!+c.A!$D8?!+>kF!-8,_!)<N*!+u:P!,2FT!,hi;!)NZ6!+u:P!-J9N!,2FO!,_d^!!!!g!-/''N!+c-Q!)il+!,_dX!$D8<!,hjM!-/''^!+GqB!,hjT!-nPE!([)u!,MXY!+l4B!-A2@!(Hs/!+c.A!$D8?!+>kF!-8,_!([)u!,MXY!+l4B!-A2@!,qp\!-8-T!-J9[!+Z(D!-8,?!(Hs/!+c.A!$D8?!+>kF!-8,_!,qp\!-8-T!-J9[!+Z(D!-8,?!-A3]!+c.G!,_dW!+>kC!-8-^!-8,?!(Hs/!+c.A!$D8?!+>kF!-8,_!-A3]!+c.G!,_dW!+>kC!-8-^!-8,?!(R$0!+>kK!-8-O!-A3_!,hi;!(Hs/!+c.A!$D8?!+>kF!-8,_!(R$0!+>kK!-8-O!-A3_!,hi;!,)@T!-/''^!+l3R!-A3P!+Gq:!,MW8!(Hs/!+c.A!$D8?!+>kF!-8,_!,)@T!-/''^!+l3R!-A3P!+Gq:!,MW8!(HtQ!,MXN!;6D9!9jK(!!!!g!-/''N!+c-Q!)il+!,_dX!$D82!9jK"!,DT.!-SA,!-/&>",I&m"2k;V"2+fA!!!!g!-/''N!+c-Q!)il+!,_dX!$DB""2+fT"2=rO"0hh+!(Hs"!-A3_!!!!g!-/''N!+c-Q!)il+!,_dX!$D82!+c.P!-A2@!(R$0!+>kK!!!!g!-/''N!+c-Q!)il+!,_dX!$D83!-/''J!-8,?!)*B,!,)@@!-S?\!,2FT!-J8A!(Hs/!+c.A!$D8?!+>kF!-8,_!)*B,!,)@@!-S?\!,2FT!-J8A!*0)2!-A2@!(Hs/!+c.A!$D8?!+>kF!-8,_!*0)2!-A2@!+l4B!+Z''0!(Hs/!+c.A!$D8?!+>kF!-8,_!+l4B!+Z''0!-A3`!=]$H!9jI`!(Hs/!+c.A!$D8?!+>kF!-8,_!-A3`!=]$H!9jI`"@!#Q"?Q`R"@iSP"@*)I"?c_b!(Hs/!+c.A!$D8?!+>kF!-8,_"@!#Q"?Q`R"@iSP"@*)I"?c_b!)*B2!+Z(D!+>j-!(Hs/!+c.A!$D8?!+>kF!-8,_!)*B2!+Z(D!+>j-!!!!$!!!!$!!!!=!!*''"!!!.<!!<3%!!!!=!!EF$!!!$2!<<*)!"]-Z!P8C*!ZqJ"!]L4""*F]l"+C?0",m>U"3q##"7ZKd"CVFS"FgRM"VV%]"]be6"c!8="h=fT"mQ9`$3LVB$4mOm$8;fC$8r5O$9SY^$:kLu$;h.8$=4''^&ASkM&GZn8''D*?8*r-lm*uuFl+&*hY+''B[i+''ft:+1*-.+4D=d+7C<D+9!Bn+E8Na+I""G+K-Ea+Kuur+LiQC+P.ap+RgNT+Tiko+V#Y-+VZ(9+WMXL+X\E`+YFon+ZLW,+[dJH+\j21+e''XR+j(u/+p0"o+qc(7+rVXU,%)U+,U4VY-1<03->+ZD-U97p/T36XVi:KVq\T,fq`Oa>qa(*IqbR7js8N''!!$D97!PSU/![Ih+!`/u@"*t&u",$c8"-*JY"475?"7u]r"E4Kk"G-dg"W@P!"^)";"c3De"hOrb"n2j"$3^bI$53ar$8MrG$9/AT$9eee$;1_''$<[^B$>''jB&C;!a&Gm-6*WR7S*rmB"+!;Xr+&F%^+''Tgm+($+?+1<92+4_Oi+7^NI+93O''+ES`f+JU''X+K?Qg+LN?%+OD7^+PS%#+TNYf+U''#!+V>k2+Vl4@+WqpT+XnQe+Yk2u+Z^c4+\NtQ+]BPG+eBjq+oieg+pK5''+r):?+tFjF,%MrD--@P&-7gKO->=hm/MJbp/f1FAqZ-L,q]5Pnq`amBqa:6Ms8Duts5X-rs1nZLs1A<@s.KC^s-WhOs,d8As,R,=s,6nus)J''Os&oA!s%iYTs"j[!ruh=`ruV18rqQK[roj46qV1kuqUPGlqU>;hqU,/cqTer[qT/NPqS)g>qR6$ToR6@XoQfuXkKE&/kJ?>rkIp&jkIKcckI9W_kI''KZkHa9UkHF''OkH*jIkGm^;kFLe+kDn_bkD\S\kCr)OkA9<rk@`sgk>g\Ek>UP>k=t,5k=au.k="K!k<S2ok<%iek;_W\k:PjJk:#L1k8*4Wk/QQ&k/6>mk.''Q\k+q-Yk&''1`isOf/iiD''`icj@ZgUQ"AgB_5T%VlP\%Ts9D%Ta-@%TO!<$)[b(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!WK3z!<<*#zzzzzzzzzzzzzzz!!!!$!!E9*!!WE.!!iQ2!"&]6!"8i:!"Ju>!"],B!"o8F!#,DJ!#>PN!#P\R!#bhV!#ttZ!$2+^!$D7b!$VCf!$hOj!%%[n!%7gr!%It!!%\+%!%n7)!&+C-!&=O1!&O[5!&ag9!&ss=!''1*A!''C6E!''UBI!''gNM!($ZQ!(6fU!(HrY!([)]!(m5a!)*Ae!)<Mi!)NYm!)`eq!)rqu!*0)$!*B5(!*TA,!*fM0!+#Y4!+5e8!!!"R!/CQ2!/gi@!13bX!2BOg!2KUl!2T[n!3#t!!3-%#!3H7)!3Q=+!3lO1!4;g6!4Dm;!4Ms@!4r6E!58]\!-/''M!+c.E#L!0m!20C3!,DjP!-S?W#g`R-!1Elf!-8Fn#gr]c!-\^h#g32J"&0''I!,MX_"#^.X!4i/]!+Q"H#gNHM!!!;H!,V^a#LEH[!.k3)!1*^#!>PjQ#JLG_#KI(d#K$PP#h/jj!BLJR#WN(L#NQ2-$#Kpj!-ngf#KR/(!/(?2!.t92!/^c;!0@2C!0.&E!1!Tb!0dJR!1a+Z!:p8(!djuf!dFcl!dXim!dt,s!bVK5!!<3$zs$HcTzzzzz!<<6*!!**$%7YALAQ*#TF$ae]A,lW3!!*''d*""(o*""+q*"".s*""1up_3l.0+7s0$j?Q7r*UKK''`,`O*<6(BBb)3a!!!!1*<6(UZ4S)W!!"u!!!7Bg&dY<8!!*''(!#>P]!&+C1!''C6K!(d/d!*0)*!+Q"C!-A3j!/U]>!1<hZ!2T[r!3lO5!58HP!6YAi!8@M8!:0^W!;QWp!=AiB!?2%_!@n1.!C6`\!E]A4!G;FK!HA-a!Ib''''!K-u@!LNn[!N?+#!NcC4!Q+ra!S[Y<!UTpZ!WN3/!YGJM!ZM1_![Rmu!]L0J!_EGh!a5Y2!al(B!cA'']!dXp''!gEbT!h]Ur!k8<G!lP/_!mh#''!p0RP!ql]p!sSi9!tk\O!u_7a"""+%"#L*@"$crW"%iYs"(VLL"*+Kl",I&C".fUj"0)I1"24lT"3L_n"5!_5"6K^Q"7u]m"9J]4":t\P"<I[l"=s[3"?HZO"@rYk"BGY2"CqXN"EFWj"FpW1"HEVM"ITCa"JZ+""L/*>"MY)Z"O.)!"PX(="R-''Y"SW&u"Tno6"V1bP"W[al"Y0a3"Z?NI"[iMe"]>M,"^hLH"`=Kd"agK+"c<JG"dfIc"f;I*"geHF"i:Gb"jdG)"l9FE"mcEa"o8E("pbDD"r7C`"saC''"u6BC#!`A_##5A&#$_@B#&4?]#''L3!#)!2=#*K1Y#+u0u#-J0<#.t/X#0I.t#1s.8#3,pQ#4r-!#6b>@#8[Uh#:Tm3#<)lO#=Skk#?(k2#@RjN#B''ij#CQi1#E&hM#FPgi#H%g0#IOfL#K$eh#M''.>#O)K_#PSK&#R(JB#SRI^#U''I%#VQHA#X&G]#YPG$#[%F@#\OE\#^$E##_WJA#a,I]#bVI$#d+H@#eUG\#g*G##hTF?#j)E[#kSE"#m(D>#nmU`#pBU%#qZH?#s/G[#tYG"$!.F>$"XEZ$$-E!$%WD=$'',CY$(VBu$*+B<$,$Y`$-NY''$/#XE$18,k$2+]3$53ab$6KU%$7ZB@$9JS[$:P:o$<%:8$==-L$>Bih$AAhN$C_C$$F''rN$H<G!$JPpI$L8&g$N:DD$Ps0i$R#m&$RZ<6$T&5Q$UP4m$W%44$XO3O$Z6>o$[N26$^;$j$`"01$aL/R$cre*$fDE[$i(29$loa%$n;Z>$o\SY$qq(.$t''Ka%!`83%#57Z%''L)X%+l!I%."Do%/UJ8%1*IT%2THp%4)H7%64k`%7gq(%9j9N%;?8j%<i81%>>7M%?h6i%A=60%Bg5L%D<4h%Ef4/%G;3K%He2g%J:20%L3IY%NZ*-%PeMU%S%".%Ufi\%X/D4%[.C&%^lk\%a>LA%dac.%hoNn%jDN5%knMQ%mLS&%p9EN%qcDp%snh=%uq0c&"sN9&%<(b&''kdB&+gD6&/,Tt&2b"c&5WpA&8)Pt&;q*l&@E(l&Ddu[&F9u*&HWON&J,Nj&KVN=&N^Ru&Q99F&Rc8b&T88)&Ub7E&W76a&Xa6(&Z65D&[`4`&]54''&^_3C&`42_&a^2&&c31B&d]0^&f20%&g\/A&i1.]&j[.$&l0-@&mZ,\&o/,#&pY+?&r.*a&t9N,''!2eU''#5.(''%@QM''''U&%'')rUV'',;/u''-7f3''.OYJ''/:.Y''06dk''1ER)''1ij1''2fKC''3>iP''42Db''58+r''5nP+''7^aW'':BN1''<MqV''?V!7''@RWI''AX>_''Bg+q''CZ\-''DW=A''F#6W''FGNd''GD/r''H@f1''I4AC''J:(S''JpLa''L`^8''OVVk''Qt1F''Tj)s''V?)7''WDeN''Xndj''ZCd1''\jDb''_)n8''a5<`''c@`2''eL.[''gi^3''j;>e''mLIH''o`rp''qlAC''t"dk(!79@(#B\m(&&IE((1lm(*45>(,?Xf(.K''8(0MD`(2jt7(53Ne(8;SI(;:R1(>0J`(@2h1(B>6Y(DIZ,(F^.V(HiR.(KM>[(MXb.(O[*T(QfN''(SqqN(Ut:!(X<iM(ZZD&(]bH_(`aGG(cW@!(fD2U(hX\+(jd*S(loN%(o%qN(qCL&(sj,X)"&7;)$_#n)&jG;)(QR])+GKG).FJ")13<\)5S4P)7(3l)8R33):''2O);Q1k)=&12)>P0N)@%/j)AO/1)C$.M)DN-i)F#-0)GM,L)I"+h)JL+/)L!*K)MK)g)Nu).)PJ(J)Qt''f)SI''-)Ts&I)VH%e)Wr%,)YG$H)Zq#d)\F#+)]p"G)_E!c)`o!*)bCuF)cmtb)eBt))flsE)hAra)ikr()k@qD)ljp`)n?p'')oioC)q>n_)rhn&)t=mB)ugl^*"<l%*#fkA*&\d"*(1c>*)[bZ*+0b!*,Za=*./`Y*/Y_u*1._<*2X^X*4-]t*5W];*7,\W*8V[s*:+[:*;UZV*=*Yr*>TY9*@)XU*ASWq*C(W8*DRVT*F''Up*GQU7*I&TS*JPSo*L%S6*MORR*O$Qn*PNQ5*R#PQ*SMOm*U"O4*VLNP*X!Ml*YKM3*ZuLO*\JKk*]tK2*_IJN*`sIj*bHI1*crHM*eGGm*g@_8*hj^T*j?]t*l8uC*n27c*o\7**q16F*s*Mj*u#e9+!MdU+#"cq+$Lc8+&F%\+''p%#+)E$?+*o#[+,D#"+-n">+/U-`+1NE/+3YhW+5S+(+8$`V+:0/*+<VdW+>k9*+A3hY+Cu[:+FPAe+H[e:+J^-^+LiQ1+NbhU+Q4I.+S?l[+UfM4+X8-`+ZU]8+\j1e+_`*?+abGf+cde9+f?Ki+ho2G+k7ak+laa2+n6`N+o`_j+q5_1+r_^M+t4]i+u^]0,"3\L,#][h,%2[/,&\ZK,(1Yg,)[Y.,+0XJ,,ZWf,./W-,/YVI,1.Ue,2XU,,4-TH,5WSd,7,S+,8VRG,:+Qc,;UQ*,=*PF,>TOb,@)O),ASNE,C(Ma,DRM(,F''LD,GQK`,I&K'',JPJC,L%I_,MOI&,O$HB,PNG^,R#G%,SMFA,U"E],VLE$,X!D@,YKC\,ZuC#,\JB?,]tA[,_IA",`s@>,bH?Z,cr?!,eG>=,fq=Y,hF<u,ip<<,kE;X,lo:t,nD:;,on9W,qC8s,rm8:,tB7V,ul6r-"A69-#k5U-%@4q-&j48-(?3T-)i2p-+>27-,h1S-.=0o-/g06-1</R-2f.n-4;.5-5e-Q-7:,m-8d,4-:9+P-;c*l-=8*3->b)O-@7(k-Aa(2-C6''N-D`&j-F5&1-G_%M-I4$i-J^$0-L3#L-M]"h-O2"/-P\!K-R0ug-SZu.-U/tJ-VYsf-X.s--YXrI-[-qe-\Wq,-^,pH-_Vod-a+o+-bUnG-d*mc-eTm*-g)lF-hSkb-j(k)-kRjE-m''ia-nQi(-p&hD-qPg`-s%g''-tk#L.![4k.#042.$Z3N.&JDs.(:V=.)dUY.+9Tu.,cT<..8SX./bRt.17R;.2aQW.46Ps.6&bC.7ksb.9\02.;LAQ.=!@m.>K@4.?u?P.AJ>l.Bt>3.DI=O.Es<k.GH<2.Hr;N.JG:j.Kq:1.MF9M.Np8i.P`J9.RP[X.T%Zt.UOZ;.W$YW.XNXs.Z#X:.[MWV.]"Vr.^LV9.`!UU.afg%.cW#D.e,"`.fV"''.h+!C.ip2h.krP8.mY[V.o.Zr.pXZ9.rHk^.tK4./!2?L/"\>h/$1>//%[=K/''0<g/(Z<./*/;J/+Y:f/-.:-/.O3F//g&^/1E,*/3,7H/4V6d/6+6+/7U5G/9*4c/:T4*/<)3F/=S2b/?(2)/@R1E/B''0a/CQ0(/E&/D/FP.`/H%.''/IO-C/K$,_/LN,&/N#+B/OM*^/Q"*%/RL)A/T!(]/UK($/Vu''@/X@uZ/Yju!/[?t=/\isY/^>ru/_hr</a=qX/bgpt/d<p;/efoW/g;ns/hen:/j:mV/kdlr/m9l9/nckU/p8jq/qbj8/s7iT/tahp0!6h70"`gS0$5fo0%_f60''4eR0(^dn0*3d50+T]N0,uVi0.JV00/tUL01ITh02sT/04HSK05rRg07GR.08qQJ0:FPf0;pP-0=EOI0>oNe0@DN,0AnMH0CCLd0DmL+0FBKG0GlJc0IAJ*0JkIF0L@Hb0MjH)0O?GE0PiFa0R>F(0ShED0U=D`0VgD''0X<CC0YfB_0[;B&0\eAB0^:@^0_d@%0a9?A0bc>]0d8>$0eb=@0g7<\0ha<#0j6;?0k`:[0m5:"0n_9>0p48Z0q^8!0s37=0t]6Y1!25u1"\5<1$14X1%[3t1''03;1(Z2W1*/1s1+Y1:1-.0V1.X/r10-/911W.U13,-q14V-816+,T17U+p19*+71:T*S1<))o1=S)61?((R1@R''n1B''''51CQ&Q1E&%m1FP%41H%$P1IO#l1K$#31LN"O1N#!k1OM!21Q!uN1RKtj1Sut11UJsM1Vtri1XIr01YsqL1[Hph1\rp/1^5cN1`8+q1cR<V1e'';r1fQ;91h&:U1iP9q1k%9;1m''Vg1oN771q#6S1rM5o1t"561uL4R2"<F!2$u2Q2&J1m2''t142)I0P2*s/l2,H/32-r.O201X*22*oH23Tnd25)n+26SmG28(lc29Rl''2:OM<2<$LX2=NKt2?#K;2@MJW2B"Is2CLI:2E!HV2FKGr2GuG;2I\R_2LIE82MsDT2OHCp2PrC72RGBS2SqAo2UFA62Vp@R2XE?n2ZPcA2\%b]2]Ob&2_6mE2`irb2b>r)2chqE2e=pa2fgp(2h<oD2ifn`2k;n''2lemC2n:l_2odl&2q9kB2rcj^2t8j%2ubiA3"7h]3#ah$3%6g@3&`f\3(c/33+P!f3-R?83/]bZ312b!32\a;33YBL34h/e36O;-37Bk@38lj\3;GQB3>+=i3?U=03A*<L3BT;h3D);/3ES:K3G(9g3HR9.3J''8J3KQ7f3M&7-3NP6I3P%5e3QO5,3S$4H3TN3c3V#3)3W;&C3Y4=h3ZgC03\<BL3]fAh3_;A/3`e@K3b:?g3cd?.3e9>J3fc=f3h8=-3ib<I3k7;e3la;,3n6:H3o`9d3q59+3r_8G3t47c3u^7*4"36F4#]5b4%25)4&\4E4(13a4)[3(4+02D4,Z1`4./1''4/Y0C41./_42X/(44?:I46AWn48:o;49dnW4;9ms4<cm:4>8lV4?bkr4A7k94BajU4D6j!4F92B4Gc1^4I81%4Jb0C4LmSm4O-(?4Pr9`4RG9(4T.DI4VBmq4Wlm74Y])Z4Ztqt4]+@B4_$Wg4`<K24bGnX4e+[14fUZM4h*Yi4iTY04k)XL4lSWh4n(W/4oRVK4q''Ug4rQU.4t&TJ4uPSf5"%S-5#ORI5%$Qe5&NQ,5(#PH5)MOd5+"O+5,LNG5.!Mc5/KM*50uLF52JKb53tK)55IJE56sIa58HI(59rHD5;GG`5<qG''5?''jU5AWQ+5C>\Q5F+O05IWl#5Mn]s5R0Ob5Sl[-5USfM5W:r(5\E?*5^ktb5d*Gf5gM^]5lX+`5pnr[5u0dV6$GVQ6(^HL6,u:G617,B65Ms=69de86>&W36B=I.6FT;)6Jk-$6O,sh6R+rW6VBdR6ZYVM6^pHH6c2:C6gI,>6jH+%6oRM06t\o;7#"*h7%$H>7''T.n7*.jD7+Xij7/01M70Z0i72/0073Y/L75..h77]jL7;kVK7?g6:7C5M$7FXcf7IrtM7MA687PRA$7T;ig7W_+P7[6HA7^be,7b1&k7eT=U7h\B87kI4k7n?-G7q"ob8$ke!/oGfJCi40/D..I#Bl7R(ATW''8DJjB1@WH$gCM@[!F)YPtATMd%FD,r=BOu''uBk)1%6#C%?Ec5i(D.-ppDf.jMEb0E*@:F7gG%EsXB5_[!CLM-oDf0-%6XaJIFCerj@s)m)6XshN@s)X#Ch7j$@qfsnF_t`,AU$RQDffDt@qBP"@q9M"@:NeYDKJ6U@<-:(@q/qfDf.sQ@<-:(A7K%gDf.sQEc5B.A7KXu@<=qT@:O=rDImZn@rcL*7:L:KG%G5oEb0E*7:^=Y@:NeYDKKH#DffDt@qBP"7;lgWDImTpDeF!+ASX_E@<-:(ARf.hDf/''TBl[^+D.[TqG\:N#Eas6/Ao)%''7q-LMG%G;qEb0E*7q?O[@:NeYDKKN%DffDt@qBP"7q6ISD.-j_@qBP"B4GjsD.-j_@qBP"87Q@S@s)X#Ch7j)@qfsnF_t`,AU$aT@<-$j@<+q]Bl%<kBln''*A7\>L@:O=rDJ<rr@rcL*8Rc^OG%GAsEb0E*8T/6[DImTtDeF!+ASXkJDffDt@qBP"8P3]38n2RU@s)X#Ch7j+@qfsnF_t`,AU$jXDf''?"@:NeYDKKZ(Df''?"@:NeYDKKZ,Eb/g"Cgh3lBk''hF@s)m)CgggrFCe-UDf''?"@:NeYDKK])Df''?"@:NeYDKJQ^@<-:(Ch$moDf/6ZDfff+Dfe`_@s)m)DII$tFCe3WDf''?"@:NeYDKKc+Df''?"@:NeYDKJW`@<-:(DI[*qDf0H$E,Tf>Ec5o1AOUKLASu-VD.-ppDf0K1@:O=rDGO_^AThX''@WH%''APZu^DJ*BuF_tr''F`_P8F`(i#Ecl58@<HZi@:OG%ATD3hF`_1m@rH4$@:<YUASuU1@rH4$@:<YUASuTf@psCrDK95qEc5ho@:OG%ATM9iF`_1n@qfsnF_t`,AU&9+Bl[^+D.[TqGZ/*`A8,jr@<5piA8,jr@8p`JA8,jr@<?!jA8,jr@8p`FEc5i;@psCrDH((REcbc!E`I3qCh.+"FD5Q%AQ<SU@rcL*F_tPsEc5hq@WH%''AT_I&AThWbEbTE(F`M26B2rVfDJ*BuF_tr''F`_b>F`(i#Ecl58@<HZlDeF!+ASZF,B5_[!CKG"[Eas6/Ao)%''G@P?-@s)X#Ch7io@qfsnF_t`,AU&K1Bl[^+D.[TqGZnNcF`_2@@:OG%AQiV_FCAZhASuU9A8cQu@q0(fFDPl5B6/35BeV8$0Qh8I0JPOAF`(nI0fUq2DJ:dZ3&>\pBeV8$1j*\M0JPOEF`(nI0fV(6DJ:dZ3&bttBeV8$3-B+Q0JPOIF`(nI0fVIADJ:dZ3''qb*BeV8$6Zm9\0JPOTF`(nI0fVUEDJ:dZ3(A%.BeV8%0Qh8I0JPRBF`(nI0f_%4DJ:dZ3AbkrBeV8%20EeN0JPRGF`(nI0f_18DJ:dZ3B2/!BeV8%3H]4R0JPRrF`(nI0f_RCDJ:dZ3C@q,BeV8%7!3B]0JPRV:L[aQ:M=ZeDJs3,Ec-#;BeV8-13IJK0JQulF`(nI0gRX=DJ:dZ5rEe&BeV8-2K`nO0JPjPF`(nI0gRdADJ:dZ5rj(*BeV8M@<HI%0JPj[F`(nI0gS0LDJ:dZ5t#j5BeV8-79+#>Ec-#5DfT`<DJ:dZ68<V#BeV8N13IJK0JPmMF`(nI0g[^>DJ:dZ68`n''BeV8.2Has2BQ\3,0JPmRF`(nI0k*.cDJ:dZ@UXCsBeV8N@WcR&0JR$JF`(nI0k+a;DJ:dZ@k`%CBeV8O0m.AJ0JR&mF`(nI0k3"^DJ:dZ6Srq''BeV8/20EeN0JPpQF`(nI0gdmBDJ:dZ6TB4+BeV8/3H]4R0JPp\F`(nI0ge9MDJ:dZ6UQ!6BeV8/7!3B]0JPp`F`(nI0geEQDJ:dZ6nib$BeV800m.AJ0JPsNF`(nI0gmg?DJ:dZ6o9%(BeV8020EeN0JPsRF`(nI0gmsCDJ:dZ6o]=,BeV803H]4R0JPs]F`(nI0gn?NDJ:dZ6pl*7BeV807!3B]0JPsaF`(nI0gnKRDJ:dZ75/k%BeV810m.AJ0JQ!OF`(nI0h!m@DJ:dZ75T.)BeV812+M.bEc5i.@psCrDKTi20JQ!UF`(nI0h")uDeF!+ASZ4&B5_[!CNXN/0JQ!`F`(nI0h"KQDJ:dZ77D?:BeV817WiT_0JQ$NF`(nI0h*m?DJ:dZ7P]+(BeV821NdSL0JQ$RF`(nI0h+$%H#@MBDJ:dZ7Q>O.BeV823C.\"DJ*BfF`_2''EbTE(@:OG%AO/an@s)m)@:`kWF`_1jF)59+BOPCnFCfB3CghBu@:OG%AT_m)0JY=9F`(nI1,(G*DJ:d[0J[cgBeV:r1NdSL0JY==F`(nI1,(S.DJ:d[0K+&kBeV:r2g''"P0JY=AF`(nI1,(_2DJ:d[0L9i!BeV:r6?R0[0JY=LF`(nI1,)+=DJ:d[0L^,%BeV:r7WiT_0JY@:F`(nI1,1M+DJ:d[0f!lhBeV:s1NdSL0JY@>F`(nI1,1Y/DJ:d[0fF/lBeV:s2cF4)D/E]i@q0(fFE:r1D/E]i@q0(fFEMJ80JY@KF`(nI1,2+<DJ:d[0k5?DBeV:sA9Dd(0JY@OF`(nI1,27@DJ:d[1,O,kBeV:t20EeN0JYCAF`(nI1,:e2DJ:d[1,sDoBeV:t3H]4R0JYCLF`(nI1,;1=DJ:d[1.-2%BeV:t7!3B]0JYCPF`(nI1,;=ADJ:d[1GErhBeV:u0m.AJ0JYF>F`(nI1,C^sDfff,F)u)=DJ:d[2)''/jBeV;"0m.AJ0JYL@F`(nI1,Uk1DJ:d[2)KGnBeV;"20EeN0JYLDF`(nI1,V"5DJ:d[2)o_rBeV;"3H]4R0JYLOF`(nI1,VC@DJ:d[2+)M(BeV;"7!3B]0JYLSF`(nI1,VODDJ:d[2DB8kBeV;#0m.AJ0JYOAB45Xo@;K@oBl8''2BeV;#1j*\M0JYODBP;=&CNXN/0JYOFF`(nI1,_+7DJ:d[2E>ntBeV;#6$7''Z0JYOQF`(nI1,_LBDJ:d[2FM\*BeV;#7<NK^0JYOUF`(nI1,gn0DJ:d[2_fGmBeV;$13IJK0JYRCF`(nI1,h%4DJ:d[2`5_qBeV;$2K`nO0JYRGF`(nI1,h18DJ:d[2`Z"uBeV;$6#q''iEc,o>BQ%g)F`(nI1,hRCDJ:d[2ahe+BeV;$7<NK^0JYRV;KH\`Ci!TiE)Lao@;Kai@;opuG&q>8Deip*BOl%''Ch7[/C3+K;DeiotDf9E&F(fW.DfTr?AThX+BOc1*CijcAEc,u>FD,T2CNX)pEcl>BBl%^*CghF"DK]]3DejN<F`MADFEMVAH$"1LDHV$t@;Kai@;pO5FD,T2CO0K5Ebo<5BOuL''@s)g.B5DL.FCB!,FDl,2Ci=E;@;L",DfB`.G%ki;B5DL.FCB!,FDl,4DK]N2FE1r7@q]=cCggde@;KFiBk(pFF)>?%Ch$mmAT)O!DI[L$F(JlPF)>?%ChRa*CIiM`@;Kai@;oskEc6#?ARomkBl%R,F`MA2A5%&]@;Kai@;p4"Df9E(Ci=E;@;L",DfB/oEbB3,FECr-F*)>>@UX:tAThU1@;L%(DIm?iH>$i8@s)g.FE;P8F(fZ*@s)g.F`(nI11<1cDJ:d[@:=:rBeV;N@WcR&0JYp]F`(nI11=^9DJ:d[@:aS!BeV;NAnZ7.E+O''''BQ%g)F*2G5Eb]Z<E+O''1F*2G5EcQ8EEc,r@E+O''1FEMVAEcbu5DejE:E+O&fFEMVAF*2G5Ed)SIE+O''8F*2G5Ec?&5D.RR&A8lR''D.R6eCi+*$EHQ2AASbpiFDYr,@;p.+FE2;=BOtUkDf^#@DfBB$Eb0E7Bl7Qs@;KOrBkM+$EbTE(BOP^hCh74#B5DL.FCB!,FDl,8De*KsDfg)0Cia]:E,oN5ATDj''A8Q6qAo_g-FCeul@:O(aA9)*mF(JluDg,c5ARoq$BeV;P3,N)6Ec5i4De*QoBk;=-DJ:d[6U>@*@<Q4!De*QoBk;=.ATDm,@ps1iBl7KuDg-&:A9Dd(0J[-KF`(nI11Om<DJ:d[@qK4hCi=35EbSs"B6A$!Ec#`*@rH1%DKKo5@;]_#Cgh?t@;KOmDe*m&DJ*WkCh@^%B4uBsASuU$Eb/d%Bl7Qs@;KOlAS-$oASuU$Eb/d''@:O(qE,B<"FCAZpA8c[0D/!O"Cisf9De*^!DKU#;De+!.BeV;17<NK^0JZ$cF`(nI1.<m>DJ:d[758q&BeV;213IJK0JZ''QF`(nI1.=$ADf0,tG][t7BPD*mFDl&.BPD*mFDl&.D/!O&Df0-&Dg-;ADImC(FE1f+Dg->ABeV;26$7''Z0JZ''`F`(nI11as<DJ:d[77;99BeV;RAT_m)0JZ''dF`(nI1.Es?DJ:d[7PT%''BeV;313IJK0J[5rF`(nI1.F*CDJ:d[7Q#=+BeV;32K`nO0JZ*VF`(nI1.F6GDJ:d[7QGU/BeV;36$7''Z0JZ*aF`(nI1.FWRDJ:d[An6%%BeV;37<NK^0JZ*eB6%F(ARfXq@UWbhFCes#D.7!hEas6/Ao)%''@rH3nFD5Q%ARfXq@VoO`Ec5i*D.7F,ATDU$DIm<p@Ua@hG%G0%D.7$oFCAZhASuU"D.7$i@:aIjF(o]*Df&rsDf9E"@W-F$@rH3nEbTE(@r5[gF`(i#Ecl58@<H[%D.7!`Ec5i*D.7["Ecc#*@;KaoDIm6cDg#]%D.7$bCj''B1FD55nCi!g''ART%dG%G0#@V9^iG%G2nCi404E-6&40JbF;@WH%''ASH%*ATDm(A7KIc@rH4$@<?X4DIm?e@W-F$@r5[bDf''?"@:F.uARfRd@rH4$@<,q&ATDj''A78qcG%G0#@Uj=nD.-j^Dg#]4BkM+$@r5[tDJ:d\0fF/lBeV=t2g''"P0JbFCF`(nI1GLn4DJ:d\0gTJkEc,B*D.7O"DJ*csAoq]pCh@a2@W$+*E-6&40JbFOF`(nI1GM=@DJ:d\0h-"oDKU#0ASc:/@r5[tDJ:d\1,3ohBeV=u11Y<F@V''@oG@PQ.@WcR&0JbI@EbTE(@V''@oG@PK!@rH4$@<6R#DJsT8@qB1bCi!NiD.7ErDf0-%@r5[kBl7L*ATDm6F^f6,F)YT/Bk1jf@V''@oG@PK!A7B@`EarcsDK]T3FCeulASc:/@r5[b@<-:(@V''@oG@PK!@qfsnF_t`,AU%ZqCi=N-D.6spAThWoASc:/@r5[aEb0E*Bl8**Ecbl''@V''@oG@PK!FD5Q%AR]4eDg,].@VoO`Ec5i)ASc:/@r5[kDg-#3DIm<p@UrqaCi=N6Bl7KlD.7U$Ch.*qG%G]1@<l@"@WQX3Deip*BQ%p5Dg#]4CghU!D.7R.Ec5`)Ci=3(Dg#]4CghU!D.7R)Ch[F&F)u#5Ecc5CATDTqH"1]#F)Pl/A9Ds0Df03+G%G]1@<l@"@WH1#B6%^!BQRorCh@a2@W$+*E-6&40JbLNF`(nI1G_@=ART4oCi!QlCi=N-D.7X*BeV>!7!3B]0JbLRF`(nI1G_LCDJ:d\1ba&iBeV>"0lU]EBle63D.RU!B6%QpCL_3jCN"63DJ=0%D.7$i@;L42Bkq.!Df0K7@r5[tDJ:d\1c9DnBeV>"2K`nO0JbOEF`(nI1Gh(6DJ:d\1c]\rBeV>"6$7''Z0JbOPF`(nI1GhIADJ:d\1dlJ(BeV>"7<NK^0JbOtF`(nI1Gpk/DJ:d\2)05kBeV>#13IJK0JbRBF`(nI1Gq"3DJ:d\2)TMoBeV>#2K`nO0JbRFF`(nI1Gq.7DJ:d\2*#esBeV>#6$7''Z0JbRQF`(nI1GqOBDJ:d\2+2S)BeV>#7<NK^0JbRUF`(nI1H$q0DJ:d\2DK>lBeV>$13IJK0JbUCF`(nI1H%(4DJ:d\2DoVpBeV>$2K`nO0JbUGF`(nI1H%48DJ:d\2E>ntBeV>$6$7''Z0JbURF`(nI1H%UCDJ:d\2FM\*BeV>$7<NK^0JbUVF`(nI1H..5DJ:d\2`5l"DeEWoEa`g%ASu4)DJ:d\2aqh,DJsT,Bk;<rF(o];Df0K76#:LR@<?F*Df]?)DffQ,ASGRAE-#`0Df0Z8DJsSbFCB90DJsSfDffE0Df0K7:MjfUEc5i;Df0K7<H*"nCi=35Df0K7:MjZU@<?F*Df]W2FCA]oATD@''BleB7DJsS^CiF&r6=k7I7q$7O@74[CFC@UWF(oH/DH^Un@7>9H<+oib@7bBZ@7t$JE+)FKD.7$a9m''3R=D:QJBk)1%DGY%FBQ$g`B5M''V@<GRhF(oH/DGY"\6YL11F(nEeAS5FCDffDuBk;<rF(o\qE-#`0Df0*"ATD@''Bld^!E+i[%Df0K7AT2^)Ci=35Df0K7ATV@&Df0K7BlA*%FDl&8F*2GCBl%^*A8,UqATMR,FDl&8F(&m(BOP@]FCAfjD/E]lAScHsAT2^)Ci=3;ATV?lFCB9)ATV?pDffE''@;p0oCgh0iA79UuBeV>06Z.$kBl@j&@rcL*E+s?+Df]W*D.,/?BkM9kFCB<7E-#`0Df0N-Bk(gjE-#`3D.R?gBlA*%A8,UqATMR,F`;D9Ci=3%Bk;<rF(o]6D/!L#Df0Z8DJsT=E-#`0Df0Z8DJsT7D.R?gFDl&8F*)),FCB69D.7F"B6%QpCK5=pBl%^*BQ%g)F`(nI1IO$ADJ:d\6o8jrBeaOCAS5F+F`(nI1IO0EDJ:d\7PJt&BeV>40m.AJ0Jd;tF`(nI1Ia5nARg"+Bl%U"@p`kh@<Q3RDe"''5Bl%U"@mk''C@sN*/Ci!fq7quUFH#dV8Ch[BJ@sN*/Ci!fq7!`ESH#dV8Ch[BN@sN*/Ci!fq=_VAkEbT?+Bk''bH@sN*/Ci!fq9PS-KH#dV8Ch[BSC1Un#EbT?+Bk(+`BOt\!EbT?+Bk''eNARg"+Bl%U"@nCBEH#dV8Ch[BdB6%F(AQ<ebDfTr0H#dV8Ch[BIH>$l"H#dV8Ch[BF@sN*/Ci!fq6=jYPEbT?+Bk(1T@sN*/Ci!fq7qH1UEbT?+Bk''PB@sN*/Ci!fq8S)CWEbT?+Bk(=[ARg"+Bl%U"@p3GRH#dV8Ch[BNBk)F/Bl%U"@nCBUBQ%p5@sN*/Ci!fq94;=UEbT?+Bk''SJ@sN*/Ci!fq7;ZO[EbT?+Bk''SL@sN*/Ci!fq:LeZjBl%U"@o-`HH#dV8Ch[BJEasB8Bl%U"@mtHKH#dV8Ch[BYARg"+Bl%U"@o[#aEbT?+Bk''SD@sN*/Ci!fq95%aDH#dV8Ch[BYF(Jj,EbT?+Bk''MDARg"+Bl%U"@oI&L@sN*/Ci!fq;eTZS@:OS''Bl%U"@n:$KA92HtDI[s4Bl%U"@p*A`Bk)F/Bl%U"@oI;XFE;//DI[s4Bl%U"@mtELG%G]8ARo:rEbT?+Bk''_7@sN*/Ci!fq8O6j3EbT?+Bk(R]H#dV8Ch[BgARg"+Bl%U"@s2EnH#dV8Ch[BlARg"+Bl%U"@q9.\H#dV8Ch[BnARg"+Bl%U"@sVg"@sN*/Ci!fqH=^T3EbT?+Bk(jk@sN*/Ci!fqBk_X%DfTr0H#dV8Ch[Bp@:OS''Bl%U"@qBIdH#dV8Ch[BjD.@j3Bl%U"@qBOfH#dV8Ch[Bt@sN*/Ci!fqE+NO)EbT?+Bk(^p@sN*/Ci!fqATM@,EbT?+Bk)6r@sN*/Ci!fqF^o];Bl%U"@qB7^H#dV8Ch[BpBOPCrEbT?+Bk)7+ARg"+Bl%U"@q01`@sN*/Ci!fqF(eulH#dV8Ch[C#BOb^a@sN*/Ci!fqBOPplF(o9)@sN*/Ci!fqH"D#1@sN*/Ci!fqF)PZ4F(o9)@sN*/Ci!fqATD@*ATDj''A7Kn*Bl%U"@qg''qH#dV8Ch[Bn@:OS''Bl%U"@qfLaH#dV8Ch[BdB6%F(ASH''mH#dV8Ch[BiC1Un#EbT?+Bk(djARg"+Bl%U"@qB.qEbT?+Bk(\"ARg"+Bl%U"@qfFuEbT?+Bk)F&@sN*/Ci!fqC1Un#EbT?+Bk(soARg"+Bl%U"@r?$m@sN*/Ci!fqFE;,,@sN*/Ci!fqCMIEjH#dV8Ch[BnBk)F/Bl%U"@p`kh@<Q4)F(fK4FCTT:Bl%U"@q9n!ARg"+Bl%U"@o$rQB45:qEbT?+Bk)''uAS5F]H#dV8Ch[C%DJ:d]2_]AlBeVA&0k"[.Be_:r1cJiTBk]:U0f_*eD.R?gFD5i5De"''5Bl%U"@rH3qB45mrFDPl*H#dV8Ch[BTFCTT:Bl%U"@rHI!H#dV8Ch[C$BQ&$7@;]UcH#dV8Ch[C$Bln00@sN*/Ci!fq@r5[o@;K@o@;KY(@<?4%DI[s4Bl%U"@q0@bF`(nI1cR@8DJ:d]3&YnsBeVA''2g''"P0JkaKF`(nI1cRL<DJ:d]3+6rIBeVA''@WcR&0JkaVF`(nI1cRmGDJ:d]3(7t-BeVA''7WiT_0JkdDF`(nI1c[:5DJ:d]3AP_pBeVA(1NdSL0JkdHF`(nI1c[F9DJ:d]3Au"tBeVA(2g''"P0JkdLF`(nI1c[R=DJ:d]3C.e*BeVA(6?R0[0JkdWF`(nI1c[sHDJ:d]3CS(.BeVA(7WiT_0Jl''LF`(nI1dNj=DJ:d]5r*S#BeVA01NdSL0Jl''PF`(nI1dO!ADJ:d]5rNk''BeVA02g''"P0Jl''TF`(nI1dO-EDJ:d]5s]X2BeVA06?R0[0Jl''_F`(nI1dONPDJ:d]5t,p6BeVA07WiT_0Jl*MF`(nI1dWp>DJ:d]68E\$BeVA11NdSL0Jl*QF`(nI1dX''BDJ:d]68it(BeVA12g''"P0Jl*UF`(nI1dX3FDJ:d]6:#a3BeVA16?R0[0Jl*`F`(nI1dXTQDJ:d]6:H$7BeVA17WiT_0Jl-NF`(nI1da!?DJ:d]6S`e%BeVA21NdSL0Jl-RF`(nI1da-CDJ:d]6T0()BeVA22g''"P0Jl-VF`(nI1da9GDJ:d]6U>j4BeVA26?R0[0Jl-aF`(nI1daZRDJ:d]6Uc-8BeVARAp&!*0Jl0OF`(nI1dj''@DJ:d]6o&n&BeVA31NdSL0Jl0SF`(nI1dj3DDJ:d]6oK1*BeVA32g''"P0Jl0WF`(nI1h8UhDJ:d]6pYs5BeVA36?R0[0Jl0bF`(nI1dj`SDJ:d]6q)69BeVA37RVQ6@:F"c@<6-kDI[s4Bl%U"@s)[''0Jl3QF`(nI1ds0BDJ:d]75K((BeVA41j*\M0Jl3UF`(nI1ds<FDJ:d]75o@,BeVA43-B+Q0Jl3YF`(nI1ds]QDJ:d]77)-7BeVA46Zm9\0Jl3dF`(nI1dsiUDJ:d]77ME;BeVA50Qh8I0Jl6RF`(nI1e''6CDJ:d]7Pf1)BeVA51j*\M0Jl6VF`(nI1hJXgDJ:d]AiFjMBeVA53-B+Q0Jl6ZF`(nI2)-e-DJ:d^0emfgBeVD!13IJK0JtR@F`(nI2)/N^DJ:d^0k,9CBeVD!@s)[''0JtRqF`(nI2)/ZbDJ:d^0kPQGBeVD#0m.AJ0JtXAF`(nI2)@%2DJ:d^1Gj5lBeVD#20EeN0JtXEF`(nI2)@16DJ:d^1H9MpBeVD#3H]4R0JtXPF`(nI2)@RADJ:d^1IH;&BeVD#7!3B]0JtXTF`(nI2)@^EDJ:d^1ba&iBeVD$0m.AJ0Jt[BF`(nI2)I+3DJ:d^1c0>mBeVD$20EeN0Jt[FF`(nI2)I77DJ:d^1cTVqBeVD$3H]4R0Jt[QF`(nI2)IXBDJ:d^1dcD''BeVD$7!3B]0Jt[UF`(nI2)IdFDJ:d^2)''/jBeVD%0m.AJ0Jt^CF`(nI2)R14DJ:d^2)KGnBeVD%20EeN0Jt^GF`(nI2)RC:DJ:d^2*lA&BeVD%6?R0[0Jt^TF`(nI2)RdEDJ:d^2+;Y*BeVD%7WiT_0JtaCF`(nI2)[44DJ:d^2D]JnBeVD&1hC01@<-3rDJ<NsF`(nI2)[@8DJ:d^2E,brBeVD&3-B+Q0JtaKF`(nI2)[a7DJ<O"D.RU!@;^4*BeVD&6[30U@<-3rDJ<NsF`(nI2)[mGDJ:d^2F_h,BeVD''0Qh8I0JtdDF`(nI2)d:5DJ:d^2`#;^DIIR&ASu3jDKTi20JtdHDJs`-Ec#B*Bjkn%DJ:d^2`GksBeVD''3-B+Q0JtdLF`(nI2)dgDDJ:d^2aVY)BeVD''6Zm9\0JtdWG%Gl+Ec#B*Bjkn%DJ:d^2b%q-BeVD(0Qh8I0JtgEF`(nI2)m@6DJ:d^3&>\pBeVD(1j*\M0JtgIF`(nI2)mL:DJ:d^3&bttBeVD(3H]4R0JtgU@:j4f2)dHS3FQN6Bf.h/0JR!JBk]F`3&!$pAnbs:2`NKHBPDL$EG/omEb0H''Anbs:2`E`R@:j4f2)dHS2/luG@;''=c@WH%(EFE]mFE;,,@WH%(BQ%]qD.mKiEb0H''Anbs:2`E`TA79+^F(f5u@WH%(F(oH5EG/omEb0H3@<#^fBOtXnATr0''An>Xe@WH%(@:j4f2)dKO137,CDId[-BOtXnATr30DId[-BOtXnATr36AoM1"F`D)+@WH%(F`;;2Eb''*1BOtXnATqR!AS,Ue@WH%(@V''XpAR][kG@tW,ASc$k@WH%(A79:cFD,5pEb0H.AS>XaEb0H<@<Q<q@WH%(H=;)5DJ3TjEb0H.ATVTs@WH%(FCfQ-AR][kGBn+;BOtXnATqa#DII?s@:j1a@WH%(CLLggAR][kGAL])ARoIc@WH%(Anc-kCi*a#BOtXnATr!&D.mKiEb0H,Bl7?qDKTi1AR][kGA_P@BOtXnATr3(D.RKrBOtXnATqR.Bl7Tq@WH%(Anc-kCiEs!AR][kGAq,,AR][kG@kQ,@;L%,@:X(cAR][kGB@n7A8,^g@WH%(EGoH&AR][kGB.89BP:sdEb0H9BPD?tAR][kGB@8:BOtXnATr<+G''7;;BOtXnATr<+G''S":BOtXnATrE<A9i*(BOtXnATqcuEb0<*BOtXnATqcuEcYo&H"h,/AR][kGBIe;0L7BIF`(nI5qk'':DJ:dj0JdihBeVh,20EeN0L7BNF`(nI5qk6?DJ:dj0K=2mBeVh,3H]4R0L7BYF`(nI5qkcNDJ:dj0ed`fBeVh-1NdSL0L7EMF`(nI5qt6>DJ:dj0fF/lBeVh-2g''"P0L7EQF`(nI5qtBBDJ:dj0gTr"BeVh-6?R0[0L7E\F`(nI5qtcMDJ:dj0h$5&BeVh-7WiT_0L7HJF`(nI5r(0;DJ:dj1,<uiBeVh.1NdSL0L7HNF`(nI5r(<?DJ:dj1,a8mBeVh.2g''"P0L7HRF`(nI5r(`KDJ:dj1.$,$BeVh.6Zm9\0L7H^F`(nI5r(lODJ:dj1.HD(BeVh/0Qh8I0L7KMF`(nI5r1<>DJ:dj1Gs;mBeVh/2K`nO0L7KSF`(nI5r1NDDJ:dj1IH;&BeVh/7<NK^0L7KaF`(nI5r:9<DJ:dj1bj,jBeVh013IJK0L7NSF`(nI5r:QDDJ:dj1dZ>&BeVh06Zm9\0L7N`F`(nI@5Tc^DJ:dj2*#esBeVh16$7''Z0L7Q_F`(nI5rD#PDJ:dj2+;Y*BeVh22K`nO0L7TUF`(nI5rL]FDJ:dj2E>ntBeVh26$7''Z0L7T`F`(nI5rM)QDJ:dj2FM\*BeVh27<NK^0L7TdF`(nI5rUK?DJ:dj2_fGmBeVh313IJK0L7WRF`(nI5rUWCDJ:e52`5_qBe_;-0Qh8I0ebmJF`(nJ0L7I:DJ:gZ5r3Y$Be_;-1j*\M0ebmNF`(nJ0L7U>DJ:gZ5rWq(Be_;-3-B+Q0ebmRF`(nJ0L8!IDJ:gZ5sf^3Be_;-6Zm9\0ebm]F`(nJ0L8-MDJ:gZ5t6!7Be_;.0Qh8I0ebpKF`(nJ0L@O;DJ:gZ68Nb%Be_;.1j*\M0ebpOF`(nJ0L@[?DJ:gZ68s%)Be_;.3-B+Q0ebpSF`(nJ0LA''JDJ:gZ6:,g4Be_;.6Zm9\0ebp^F`(nJ0LA3NDJ:gZ6:Q*8Be_;/0Qh8I0ec!LF`(nJ0LRX<DJ:gZA28:FBe_;01NdSL0ec!PF`(nJ0LRd@DJ:gZ6oK1*Be_;02g''"P0ec!TF`(nJ0LRpDDJ:gZ6pYs5Be_;06?R0[0ec!_F`(nJ0LS<ODJ:gZ6q)69Be_;07WiT_0ec$MF`(nJ0L[^=DJ:gZ75B"''Be_;11NdSL0ec$QF`(nJ0L[jADJ:gZ75f:+Be_;12g''"P0ec$UF`(nJ0L\!EDJ:gZ76u''6Be_;16?R0[0ec$`F`(nJ0L\BPDJ:gZ77D?:Be_;17WiT_0ec''NF`(nJ0Ldd>DJ:gZ7P]+(Be_;21NdSL0ec''RF`(nJ0LdpBDJ:gZAiY!OBe_;R@WcR&0ed3LF`(nJ1I3^;DJ:g]5r!M"Be_D013IJK0f)*OF`(nJ1I3j?DJ:g]5rEe&Be_D02K`nO0f)*SF`(nJ1I4!CDJ:g]5rj(*Be_D06$7''Z0f)*^F`(nJ1I4BNDJ:g]5t#j5Be_D07<NK^0f)*bF`(nJ1I<d<DJ:g]68<V#Be_D113IJK0f)-PF`(nJ1I<p@DJ:g]68`n''Be_D12K`nO0f)-TF`(nJ1I=''DDJ:g]6901+Be_D16$7''Z0f)-_F`(nJ1I=HODJ:g]6:>s6Be_D17<NK^0f)-cF`(nJ1IEj=DJ:g]6SW_$Be_D213IJK0f)0QF`(nJ1IF!ADJ:g]6T''"(Be_D22K`nO0f)0UF`(nJ1IF-EDJ:g]6TK:,Be_D26$7''Z0f)0`F`(nJ1IFNPDJ:g]6UZ''7Be_D27<NK^0f)0dF`(nJ1INp>DJ:g]6nrh%Be_D313IJK0f)3RF`(nJ1IO''BDJ:g]6oB+)Be_D32K`nO0f)3VF`(nJ1IO3FDJ:g]6ofC-Be_D36$7''Z0f)3aF`(nJ1IOTQDJ:g]6pu08Be_D37<NK^0f)3eF`(nJ1IX!?DJ:g]758q&Be_D413IJK0f)6SF`(nJ1IX-CDJ:g]75]4*Be_D42K`nO0f)6WF`(nJ1IX9GDJ:g]76,L.Be_D46$7''Z0f)6bF`(nJ1IXZRDJ:g]77;99Be_D47<NK^0f)6fF`(nJ1Ia''@DJ:g]7PT%''Be_D513IJK0f)9TF`(nJ1Ia3DDJ:go0JIWeBe`%10g]DhFCAZhASuU!A8cQu@q0(fFEMJ80h!cQF`(nJ75-TADJ:go0K+&kBe`%12g''"P0h!cUF`(nJ75-_iA8cQu@q0(fFC\p#FCAZhASuU4DJ:go0LKu#Be`%17!3B]0h!cbF`(nJ75.2RDJ:go0ed`fBe`%20m.AJ0h!fPF`(nJ756T@DJ:go0f4#jBe`%220EeN0h!fTF`(nJ756`DDJ:go0fX;nBe`%23H]4R0h!f_F`(nJ757,ODJ:go0gg)$Be`%26q1^*FCAZhASuU%A8cQu@q0(fFEMJ80h!iOF`(nJ75?SgA8cQu@q0(fFD,3''FCAZhASuU4DJ:go1,O,kBe`%320EeN0h!iUF`(nJ75?fEDJ:go1,sDoBe`%33H]4R0h!i`F`(nJ75@2PDJ:go1.-2%Be`%37!3B]0h!idF`(nJ75@>TDJ:go1GErhBe`%40m.AJ0h!lRF`(nJ75H`BDJ:go1Gj5lBe`%420EeN0h!lVF`(nJ75HlFDJ:go1H9MpBe`%43H]4R0h!laF`(nJ75I8QDJ:go1IH;&Be`%47!3B]0h!leF`(nJ75ID-A8cQu@q0(fFDYQ,FCAZhASuU4DJ:go1bs2kBe`%51NdSL0h!oUF`(nJ75QlEDJ:go1cBJoBe`%52g''"P0h!oYF`(nJ75R#IDJ:go1dQ8%Be`%56?R0[0h!odF`(nJ75RDTDJ:go1duP)Be`%57WiT_0h!rRF`(nJ75ZfBDJ:go2)9;lBe`%61NdSL0h!rVF`(nJ75Zr!A8cQu@q0(fFDtc/FCAZhASuU4DJ:go2)o_rBe`%63H]4R0h!rcF`(nJ75[DSDJ:go2+)M(Be`%67!3B]0h!rgF`(nJ75[P5A8cQu@q0(fFE:u2FCAZhASuTgA8cR!ASc:/F(B32@V''@oGBIe;0h!uWF`(nJ75d#GDJ:go2E#\qBe`%72g''"P0h!u[F`(nJ75d/*A8cQu@q0(fFED&3FCAZhASuThA8cR!ASc:/FC]<3@V''@oGBIe;0h!uhF`(nJ75dVXDJ:go2_]AlBe`%80m.AJ0h"#VF`(nJ75m#FDJ:go2`,YpBe`%820EeN0h"#ZF`(nJ75m/JDJ:go2`PqtBe`%83H]4R0h"#eF`(nJ75mPUDJ:go2a__*Be`%87!3B]0h"#iF`(nJ75m\;B6%F(ATqd-@<Q3`@:OG%ATqQmF`_1rA8,UqATMR,G@YE!Eb0<+F*2A70h"&[F`(nJ76!5KDJ:go3&l%uBe`%93H]4R0h"&fF`(nJ76!VVDJ:go3(%h+Be`%97!3B]0h"&jF`(nJ76!bZDJ:go3A>SnBe`%:0m.AJ0h")XF`(nJ76*/HDJ:go3AbkrBe`%:20EeN0h")\F`(nJ76*;LDJ:go3B2/!Be`%:3H]4R0kE@RF`(nJ76*\WDJ:go5qmG!Be`%B0m.AJ0kFcKF`(nJARRB;DJ:go5r<_%Be`%B20EeN0h"AdF`(nJ76rkTDJ:h:@5rCIBea1-3H]4R0h"AoF`(nJ76s7_DJ:go5sod4Be`%B7!3B]0h"AsF`(nJ76sCcDJ:go683P"Be`%C0m.AJ0kFfLF`(nJAR[H<DJ:go68Wh&Be`%C20EeN0h"DeF`(nJ77&qUDJ:go69''+*Be`%C3H]4R0kFg&F`(nJAR]+;FD5Q%AT_m)0h"DsF`(nJ77''FcDJ:go6:Q*8Be`%D0Qh8I0h"GaF`(nJARdK<DJ:h:@l&7FBe`%D1j*\M0h"GeF`(nJ77/tUDJ:go6T9.*Bea1/3-B+Q0kFiTF`(nJ770@`DJ:go6UGp5Be`%D6Zm9\0h"GtF`(nJARf:oDJ:h:@qKk$Be`%E0Qh8I0h"JbF`(nJ778nRDJ:go6o/t''Bea101j*\M0kFlQF`(nJ779%VDJ:go6oT7+Be`%E3-B+Q0h"JjF`(nJ779FaDJ:go6pc$6Be`%E6Zm9\0h"JuF`(nJARo@pDJ:h:A7ft%Be`%F0Qh8I0h"McF`(nJ77AtSDJ:go75K((Be`%F1j*\M0h"MgF`(nJAS!cBDJ:h:AN+aLBe`%F3-B+Q0h"MkF`(nJ77BLbDJ:go77)-7Bea11@s)[''0kFp,F`(nJ77BXfDJ:go77ME;Be`%G0Qh8I0h"Pd=_Db`G%Gr3Eaa-&F`(nJ77K+VDJ:go7Q#=+Bea122K`nO0kFrUF`(nJ77K7ZDJ:go7QGU/Be`(20Qh8I0h*iOF`(nJ7PHT?DJ:gp0JdihBe`(21j*\M0h*iSF`(nJ7PH`CDJ:gp0K4,lBe`(23-B+Q0h*iWF`(nJ7PI,NDJ:gp0LBo"Be`(26Zm9\0h*ibF`(nJ7PI8RDJ:gp0Lg2&Be`(30Qh8I0h*lPF`(nJ7PQZ@DJ:gp0f*riBe`(31j*\M0h*lTF`(nJ7PQlFDJ:gp0faAoBe`(36$7''Z0h*laF`(nJ7PR8QDJ:gp0gp/%Be`(40Qh8I0h*oQF`(nJ7PZ`ADJ:gp1,F&jBe`(41j*\M0h*oUF`(nJ7PZlEDJ:gp1,j>nBe`(43-B+Q0h*oYF`(nJ7P[8PDJ:gp1.$,$Be`(46Zm9\0h*odF`(nJ7P[DTDJ:gp1.HD(Be`(50Qh8I0h*rRF`(nJ7PcfBDJ:gp1Ga/kBe`(51j*\M0h*rVF`(nJ7PcrFDJ:gp1H0GoBe`(53-B+Q0h*rZF`(nJ7Pd>QDJ:gp1I?5%Be`(56Zm9\0h*reF`(nJ7PdJUDJ:gp1IcM)Be`(60Qh8I0h*uSF`(nJ7PllCDJ:gp1c''8lBe`(61j*\M0h*uWF`(nJ7Pm)IDJ:gp1c]\rBe`(66$7''Z0h*udF`(nJ7PmJTDJ:gp1dlJ(Be`(70Qh8I0h+#TF`(nJ7PurDDJ:gp2)BAmBe`(71j*\M0h+#XF`(nJ7Q!)HDJ:gp2)fYqBe`(73H]4R0h+#eF`(nJ7Q!SVDJ:gp2+D_+Be`(80Qh8I0h+&UF`(nJ7Q*#EDJ:gp2D]JnBe`(81j*\M0h+&YF`(nJ7Q*/IDJ:gp2E,brBe`(83-B+Q0h+&]F`(nJ7Q*PTDJ:gp2F;P(Be`(86Zm9\0h+&hF`(nJ7Q*\XDJ:gp2F_h,Be`(90Qh8I0h+)VF`(nJ7Q3)FDJ:gp2`#SoBe`(91j*\M0h+)ZF`(nJ7Q35JDJ:gp2`GksBe`(93-B+Q0h+)^F`(nJ7Q3VUDJ:gp2aVY)Be`(96Zm9\0h+)iF`(nJ7Q<)EDJ:gp3&,PnBe`(:13IJK0h+,YF`(nJ7Q<5IDJ:gp3&PhrBe`(:2K`nO0h+,]F`(nJ7Q<AMDJ:gp3&u,!Be`(:6$7''Z0h+,hF`(nJ7Q<bXDJ:gp3(.n,Be`(:7<NK^0h+,lF`(nJ7QE/FDJ:gp3AGYoBe`(;13IJK0h+/ZF`(nJ7QE;JDJ:gp3AkqsBe`(;2K`nO0h+/^F`(nJ7QEGNDJ:gp3B;5"Be`(;6$7''Z0h+/iF`(nJ7QEhYDJ:gp3CJ"-Be`(;7<NK^0h+/mF`(nJ7R8_NDJ:gp5r!M"Be`(C13IJK0h+GbF`(nJ7R8kRDJ:gp5rEe&Be`(C2K`nO0h+GfF`(nJ7R9"VDJ:gp5rj(*Be`(C6$7''Z0h+GqF`(nJ7R9CaDJ:gp5t#j5Be`(C7<NK^0h+GuF`(nJ7RAeODJ:gp68<V#Be`(D13IJK0h+JcF`(nJ7RAqSDJ:gp68it(Be`(D2g''"P0h+JhF`(nJ7RB+XDJ:gp6:#a3Be`(D6?R0[0h+JsCh7KuF)Z/<F(]&sEa`g%ASu4$F(oH)E+O''(F)Z&7ASu3mBjkh''FD5N!E+O''(F)Z&7ASu4)DJ:gp6S`e%Be`(E1NdSL0h+MeF`(nJ7RK(VDJ:gp6T9.*Be`(E3-B+Q0h+MjF`(nJ7RKIaDJ:gp6UGp5Be`(E6Z@*\Ch\''$EbSs$F(oH)Dg5u)E-#`0BlIX(Ble63D.RU!F`(nJ7RSqQDJ:gp6nrh%Be`(F13IJK0h+PeF`(nJ7RT.WDJ:gp6oT7+Be`(F3-B+Q0h+PkF`(nJ7RTObDJ:gp6pbEmF(o''+@<-''jA79On@;gC)@:WefBjkslEbTT6Df''''''Bm"<-0h+ScF`(nJ7R]%SDJ:gp75B"''Be`(G1NdSL0h+SgF`(nJ7R]1WDJ:gp75f:+Be`(G2g''"P0h+SkF`(nJ7R]=[DJ:gp76u''6Be`(G6?R0[0h+T!A8,IgH$!b9@<Q("BjkOd@;L42Bkq-qG\LT0@<-''jF`(nJ7Rf.UDJ:gp7Pf1)Be`(H1j*\M0h+VjF`(nJ7Rf=ZDJ:gp7Q>O.Be`(H3H]4R0h+VuF`(nJ7Rf^eDJ:gp7RM*=BjkO\F(o''*DJ:j[0JIWeBeh@r0m.AJ1,(C;F`(nK0JG;*DJ:j[0JmoiBeh@r20EeN1,(C?F`(nK0JGG.DJ:j[0K=2mBeh@r3H]4R1,(CjF`(nK0JHsYDJ:j[0Oo6CBeh@rA9Dd(1,(CnF`(nK0JI*]DJ:j[0ed`fBeh@s0k"[.BeV4r0K=2mBeh@s2K`nJATDj%DfTE"@Vg%,DffQ2AThX*F(Jm)DJ:j[0kPQGBeh@t1NdSL1,(I?F`(nK0JYM.DJ:j[1,j>nBeh@t3-B+Q1,(IDF`(nK0J[''ZDJ:j[11GBDBeh@t@s)[''1,(IoF`(nK0J[3^DJ:j[11kZHBeh@u0m.AJ1,(L>F`(nK0JbM-DJ:j[1Gj&kBl.F%AThX*F(Jm)DJ:j[1H''AnBeh@u2g''"P1,(LDF`(nK0Jd0LG[kPuD.I*lF`(nK0Jd6XG%G]1Bl7L)DJ:j[1M1cIBehA!0Qh8I1,(O>F`(nK0JkP-DJ:j[1c''8lBehA!20EeN1,(OCF`(nK0Jk_2DJ:j[1cTVqBehA!3H]4R1,(OnF`(nK0Jm6]DJ:j[1h1ZGBehA!A9Dd(1,(OrF`(nK0JmBaDJ:j[2)''/jBehA"0m.AJ1,(R@F`(nK0JtY/DJ:j[2)KGnBehA"20EeN1,(RDF`(nK0Jte3DJ:j[2)o_rBehA"3H]4R1,(RoF`(nK0K!<^DJ:j[2.LcHBehA"A9Dd(1,(RsF`(nK0K!HbDJ:j[2DB8kBehA#0m.AJ1,(UAF`(nK0K(_0DJ:j[2DfPoBehA$0lUrOF)uJCATDL''Ec#N.F`VVHE+O''(DfTE/F^]*-F`:o4BlA$2Cisf5DJ!I#BlA$7DJ:j[3''q1rF^]*#DJ!I#BlA$7DJ:j[3A>SnBehA&0m.AJ1,(^DF`(nK0KCq3DJ:j[3Ab>g@;]RkBl[X!Bl%U.DJ:j[5rNk''BehA.3+6E5Bf.h-1H&c^DJ)C\Ec6)<BehA/0Qh8I1,)$PF`(nK0Od"XAS-$t@<-=*Df/un@qBP"EbT0"FD,*''E,TZ4@:NeYDKL#=BehA113IJK1,)*PF`(nK0LRgADJ:j[6oT7+BehA16?R0[1,)*`F`(nK0LS<ODJ:j[6q)69BehA17WiT_1,*8nF`(nK0L[^=DJ:j[75]4*BehA22K`nO1,)-UF`(nK0L[sDDJ:j[76,L.BehA26$7''Z1,)-`F`(nK0L\?ODJ:j[77;99BehA27<NK^1,)-dF`(nK0Lda=DJ:j\0JIWeBehCs0m.AJ1,1I=F`(nK0ebJ-DJ:j\0K+&kBehCs2fiJLF`;/.F`(nK0ebV,Cgh3kCIr,Y@;Bt-EboH3Eb0B2BehCt1j*\M1,1LAEb/a!Eb''3)B4uBbAo_<qFEMVHDJ:j\1,*igBehCu0m.AJ1,1OBF`(nK0et\1DJ:j\1-''JpBehCu@<HI%1,1OnF`(nK0f!<_DJ:j\1GX)jBehD!20EeN1,1RCF`(nK0f(b2DJ:j\1H9MpBehD!@<HI%1,1RoF`(nK0f1V-DJ:j\1bs2kBehD"1NdSL1,1UBF`(nK0f3?^DJ:j\1h:`HBehD"AT_m)1,1XDF`(nK0f:k3DJ:j\2)fYqBehD#3-B+Q1,1XHF`(nK0f;7>DJ:j\2+D_+BehD$0Qh8I1,1[AF`(nK0fCe0DJ:j\2D]JnBehD$1j*\M1,1[EF`(nK0fCq4DJ:j\2E,brBehD$3-B+Q1,1[IF`(nK0fD=?DJ:j\2F;P(BehD$6Zm9\1,1[TF`(nK0fDICDJ:j\2F_h,BehD%0Qh8I1,1^BF`(nK0fLk1DJ:j\2`#SoBehD%1j*\M1,1^FF`(nK0fM"5DJ:j\2`GksBehD%3-B+Q1,1^JF`(nK0fMC@DJ:j\2aVY)BehD%6Zm9\1,1^UF`(nK0fMODDJ:j\2b%4rEc6/<AS-$mEcQ)BF`:c0Ec6/BBkM+$@<-C,G@YW9DIIR+Dg,Z/FD,*''Ec6/EE+Ej/DJ:j\3Au"tBehD''2g''"P1,1dKF`(nK0f_7:DJ:j\3C.e*BehD''6?R0[1,1dXF`(nK0f_^GDJ:j\5qmG!BehD/0m.AJ1,2''MF`(nK0gRU<DJ:j\5r<_%BehD/20EeN1,2''QF`(nK0gRa,EcQ)BF`:l/@WQ+''DJ:j\6Srq''BehD120EeN1,2-SF`(nK0gdmBDJ:j\6TB4+BehD13H]4R1,2-^F`(o:ATDj#CiEg''FD50"A8,XfAU%p1FCf?3BjkgGAScHs/o>$=BP2?oA8,UmFE;SAD..O#Df0]8BehFu20*,9Bk(RfBl8$(B6%EsDJsW.EHP]+Ch7[/AT;j$ChId"@<?($AT;j$CisW01,LaBCi=W2DJ*NjBl[^"ASbdqB4YReEarosF`(nK2DRX@E+*9gBOtUmFDl,0DIdHiD/X<&DfB9*@r-9sF)YPuATN!.FE_D4FCf,s@<-I#BjkjsDId6nF^fE7BlnQ4Blmp/DJ:ja2E>VsF(o,mCi405ASlR2Bk(RfDJsW.A7B@tDJ:ja2FDV)BehS)7!3B]1,_$ZF`(nK2E"$IDJ:jb1ba&iBei(40Qh8I1.3oQF`(nK6o-T@DJ:jo1Ga/kBei(41j*\M1.3oUF`(nK6o-`DDJ:jo1H0GoBei(43-B+Q1.3oYF`(nK6o.,ODJ:jo1I?5%Bei(46Zm9\1.3odF`(nK6o.8SDJ:jo1IcM)Bei(50Qh8I1.3rRF`(nK6o6ZADJ:jo1c''8lBei(51j*\M1.3rVF`(nK6o6fEDJ:jo1cKPpBei(53-B+Q1.3rZF`(nK6o72PDJ:jo1dZ>&Bei(56Zm9\1.3reF`(nK6o7>TDJ:jo1e)V*Bei(60Qh8I1.3uSF`(nK6o?`BDJ:jo2)BAmBei(61j*\M1.3uWF`(nK6o?lFDJ:jo2)fYqBei(63-B+Q1.3u[F`(nK6o@8QDJ:jo2*uG''Bei(66Zm9\1.3ufF`(nK6o@DUDJ:jo2+D_+Bei(70Qh8I1.4#TF`(nK6oHfCDJ:jo2D]JnBei(71j*\M1.4#XF`(nK6oIMWDJ:k;0fNoeG@P?-@s)X#Ch7j$Des?0D/Ws!AnbgsF(fK4FCfH7@;L!`@;L%"Ci"$2@;L%"Ci"$"Eb0<%?XnA%Bl%U"@q9M"?XnA%Bl%U"@ruF,Ci<ZjH#dV8Ch[C)BjZ."?YjFh?Zg.)@;0Un@;^4*BeVh/0OJs?BeVh06nVqbG@ku8BeVh/2.(KDBeVh06nVqbG@ku8BeVh/3F?oHBeVh06nVqbG@ku8BeVh.7UL:UBeVh06nWG"FCo0%H#RFO2)8f\H#RFO2)Al]H#RFO2)Jr^H#RFO2)T#_H#RFO2)])`H#RFO2)fYqBgFO/?U6M:/n/X@Am[h\0eQpOGB7nEBgFO8?U6M:/n/X@Am[h\0eQpOGB7Y?F`(o''De*Ed1LDkD1M:NLE+gsa0m.AJ0L7KK?U6M:/n/X@Am[h\1+m$PGB7nEBgFO8?U6M:/n/X@Am[h\1+m$PGB7Y?F`(o''De*Ed1LDkD11kEBF`(o''De*Ed1LDkD1GErhBeVh.3+$fGBeVh011,0ABeVh30J6dCG&qeDBeVh/7:11TBeVh,1+m!EG&qeDBeVh,3F?oHBeVh30eREdFE;SBBeVh,6!nbPBeVh30eREdFE;SBBeVh-1LG9BBeVh30eREdFE;SBBeVh-2.(KDBeVh/6S<8!CNO]:BeVh-3+$fGBeVh/6S<8!CNO]:BeVh-3F?oHBeVh/6S<8!CNO]:BeVh-6!nbPBeVh/6S<8!CNO]:BeVh-6=4kQBeVh/6S<8!CNO]:BeVh-6sk(SBeVh/6S<8!CNO]:BeVh-7:11TBeVh/6S<8!CNO]:BeVh-7UL:UBeVh/6S<8!CNO]:BeVh.0OJs?BeVh/6S<8!CNO]:BeVh.11,0ABeVh/6S<8!CNO]:BeVh.1LG9BBeVh/6S<8!CNO]:BeVh.1gbBCBeVh/6S<8!CNO]:BeVh.2.(KDBeVh/6S<8!CNO]:BeVh.2ICTEBeVh/6S<8!CNO]:BeVh.2d^]FBeVh/6S<8!CNO]:BeVh.3+$fGBeVh/6S<8!CNO]:BeVh.6!nbPBeVh/6S<8!CNO]:BeVh.6XOtRBeVh/6S<8!CNO]:BeVh.6sk(SBeVh/6S<8!CNO]:BeVh.7:11TBeVh/6S<8!CNO]:BeVh.7UL:UBeVh/6S<8!CNO]:BeVh/0OJs?BeVh/6S<8!CNO]:BeVh/2.(KDBeVh/6S<8!CNO3*H#RFO3AbkrBeVh/3F?oHBeVh/6S<8!CNO]:BeVh,2.(KDBeVh/6S<8!CNO]:BeVh,2ICTEBeVh/6S<8!CNO]:BeVh,2d^]FBeVh/6S<8!CNO]:BeVh,3+$fGBeVh/6S<8!CNO]:BeVh,3F?oHBeVh/6S<8!CNO]:BeVh,6!nbPBeVh/6S<8!CNO]:BeVh,7UL:UBeVh/6S<8!CNO]:BeVh-0OJs?BeVh/6S<8!CNO]:BeVh-1LG9BBeVh/6S<8!CNO]:BeVh-1gbBCBeVh/6S<8!CNO]:BeVh,2ICTEBeVh,1+m!EG&q;4H#RFP0K4,lBgFO4?U6M:/n/X@Am[h\0eQpOGB7nEBgFO4?U6M:/n/X@Am[h\1+m$PGB7nEBgFO/?U6M:/n/X@Am[h\6nVqbGB7nEBgFO8?U6M:/n/X@Am[h\6nVqbGB7nEBgFO4?U6M:/n/X@Am[h\6nVqbGB62jB6.KuBl%^*B6.F%D-q0f@<-3rDJ<NsD-pj]@<-3rDJ<NsD-q!a@<-3rDJ<NsG$f,o@<-3rDJ<NsD-qNp@<-3rDJ<NsF`(n_68:lNDJ;R,0h$A+A9i*(E+*isBP:sdEb0H''H"h/)CijT5AS>XaEb0H;DJ;R,1,3ohBgtEE13IJK7RAjdF`(n_68CB?DJ;R,1,X2lBgtEE2K`nO7RAjhF`(n_68CNCDJ;R,1-''DhBl8!*Bl7I"FD,5pEb0H9BPD@*Bl7I"FD,5pEb0H9BPD?p@:s.mBQIj$DId[-BOtXnATr3/Bl7HiB4Z-tF(oN&DffZ(@WH%(@;KLeE+*isBP:sdEb0H''Ch73u@;TFpF(f,oEb0H''Ch73h@:s.mBP:sdEb0H(ATVHkB4Z-tBOtXnATqd$D.RNo@:s.mBP:sdEb0H*@;KLsA79+^F(f5u@WH%(BOt^_B4Z-tBOtXnATr<+G%>#oATMNuAR][kGC!\CBl7HiB4Z-tBOtXnATr6-FC\fmATMNuAR][kGBn+;A79+^F(f5u@WH%(Anc-kChmHkA79+^F(f5u@WH%(CLLgc@:s.mBP:sdEb0H2@;TRdA79+^F(f5u@WH%(D.RQp@:s.mBP:sdEb0H4F`(_uB4Z-tBOtXnATr3(D.RKrA79+^F(f5u@WH%(E+NWqDII?l@:s.mBP:sdEb0H6ARo4^ATMNuAR][kGB@n7A8,R_B4Z-tBOtXnATr-4An5=_ATMNuAR][kGB.89BOkOaATMNuAR][kGB7G3DId0gATMNuAR][kGB@8:A79+^F(f5u@WH%(G%#Q-Derj!BOtXnATqTpFE1f%AS>XaEb0H1@:jOgAn>Xe@WH%(E+O&uAn>Xe@WH%(@;KLeCgh0lA8#O`Eb0H;DJ;R07RSM"AThd/Bl@lM+>GK''3B83-6Z6phCh74#+>PW)1+XP''0JG:6+>PW)2(Tk*0JGI;+>PW)3@l:.0JP7(7WN''O+B*2jFE_/6AKXH\F`(_uFD5Z2/k0kmAKXo[DK?peDerrREb/f\@;^,d!!!%T!Jg^V!!3-&!!E9*!!WE.!,)?=!"&]6!"8i:!"Ju>!"],B!"o8F!#,DJ!#>PN!#P\R!#bhV!#ttZ!$2+^!$D7b!$VCf!$hOj!%%[n!%7gr!%It!!%\+%!%n7)!&+C-!&=O1!&O[5!&ag9!&ss=!''1*A!''C6E!''UBI!''gO3!($ZQ!(6fU!(HrY!([)]!(m5a!)*Ae!)<Mi!)NYm!)`eq!)rqu!*0)$!*B5(!*TA,!*fM0!+#Y4!Jpea!+>k:!+u:B!2''=(!.t9O!/ghl!1*_D!2T[G!20C_!2KUo!.=m+!-8-\!/1E=!07,)!1j1[!2BO@!3Q=&!3?1)!3H7)!/^c]!4;g4!4)[4!4`*<!4Ms<!1Eo!!58HF!5&<H!5/B2!0$us!5SZP!5efU!1a+T!6YA`!6G5c!6P;c!0@3+!7Ckn!71_n!7h/!!7V#!!2fhK!8@M+!8.A-!87FF!0[EA!8[_5!8mk:!29JR!K7&=!KI2A!K[>E!KmJI!L*VM!L<bQ!LNnU!La%Y!Ls1]!M0=a!MBIe!MTUi!Mfam!N#mq!N6$u!NH1$!NZ=(!NlI,!O)U0!O;a4!OMm8!O`$<!Or0@!P/<D!PADp!PJNJ!P\ZN!PnfR!Q+rV!Q>)Z!QP5^!QbAb!QtJ%!0RB,!R1Yj!RCen!RUqr!Rh)!!S%5%!S7A)!SIM-!0.&D!S[Y1!Sme5!T*q9!T=(=!TO4A!Ta@E!5JTj!TsLI!U0XM!UBdQ!UTpU!Ug''Y!V$3]!V6?a!VHKe!VZWi!Vlcm!W)oq!6,''<!WE-"!WW5@!9=1^!WiE*!X&Q.!X8]2!XJi6!X\u:!Xo,>!Y,8B!Y>DF!YPPJ!+c3G!YkbP!Z(nT!Z;%X!ZM1\!Z_=`!ZqId![.Uh![@al![Rmp![e$t!\"1#!\4=''!\FI+!\XU/!\ja3!]''m7!]:$;!]L0?!]^<C!]pHG!^-TK!^?`O!^QlS!^d#W!_!/[!_3;_!_EGc!_WSg!_i_k!`&ko!`9"s!`K/"!`];&!`oG*!a,S.!a>_2!aPk6!ac":!au.>!b2:B!bDFF!bVRJ!bh^N!c%jR!c8!V!cJ-Z!c\9^!cnEb!d+Qf!d=]j!dOin!daur!dt-!!e19%!eCE)!eUQ-!eg]1!f$i5!f6u9!fI,=!f[8A!fmDE!g*PI!g<\M!gNhQ!g`tU!gs+Y!h07]!hBCa!hTOe!hf[i!i#gm!i5sq!iH*u!iZ7$!ilC(!j)O,!j;[0!jMg4!j_s8!jr*<!k/6@!kABD!kSNH!keZL!l"fP!l4rT!lG)X!lY5\!lkA`!m(Md!m:Yh!mLel!m^qp!mq(t!n.5#!n@A''!nRM+!ndY/!o!e3!o3q7!oF(;!oX4?!oj@C!p''LG!p9XK!pKdO!p]pS!pp''W!q-3[!q??_!qQKc!qcWg!quck!r2oo!rE&s!rW3"!ri?&!s&K*!s8W.!sJc2!s\o6!so&:!t,2>!t>>B!tPJF!tbVJ!ttbN!u1nR!uD%V!uV1Z!uh=^"!%Ib"!7Uf"!Iaj"![mn!.Fp("!n$r""+1!""==%""OI)""aU-""sa1"#0m5"#C$9!.b-%!/(?-!.P!''"#U0="#g<A"$$HE"$6TI"$H`M"$ZlQ"$m#U"%*/Y"%<;]"%NGa"%`Se"%r_i"&/km"&B"q"&T.u"&f;$"''#G("''5S,"''G_0"''Yk4"''l"8"().<"(;:@"(MFD"(_RH"(q^L").jP")A!T")S-X")e9\"*"E`"*4Qd"*F]h"*Xil"*jup"+(,t"+:9#"+LE''"+^Q+"+p]/",-i3",?u7",R,;",d8?"-!DC"-3PG"-E\K"-WhO"-itS".''+W".97[".KC_".]Oc".o[g"/,gk"/>so"/Q*s"/c7""/uC&"02O*"0D[."0Vg2"0hs6"1&*:"186>"1JBB"1\NF"1nZJ"2+fN"2=rR"2P)V"2b5Z"2tA^"31Mb"3CYf"3Uej"3gqn"4%(r"475!"4IA%"4[M)"4mY-"5*e1"5<q5"5O(9"5a4="5s@A"60LE"6BXI"6TdM"6fpQ"7$''U"763Y"7H?]"7ZKa"7lWe"8)ci"8;om"8N&q"8`2u"8r?$"9/K("9AW,"9Sc0"9eo4":#&8":52<":G>@":YJD":kVH";(bL";:nP";M%T";_1X";q=\"<.I`"<@Ud"<Rah"<dml"="$p"=40t"=F=#"=XI''"=jU+">''a/">9m3">L$7">^0;">p<?"?-HC"??TG"?Q`K"?clO"@!#S"@3/W"@E;["@WG_"@iSc"A&_g"A8kk"AK"o"A].s"Ao;""B,G&"B>S*"BP_."Bbk2"Bu"6"C2.:"CD:>"CVFB"ChRF"D%^J"D7jN"DJ!R"D\-V"Dn9Z"E+E^"E=Qb"EO]f"Eaij"Esun"F1,r"FC9!"FUE%"FgQ)"G$]-"G6i1"GHu5"G[,9"Gm8="H*DA"H<PE"HN\I"H`hM"HrtQ"I0+U"IB7Y"ITC]"IfOa"J#[e"J5gi"JGsm"JZ*q"Jl6u"K)C$"K;O("KM[,"K_g0"Kqs4"L/*8"LA6<"LSB@"LeND"M"ZH"M4fL"MFrP"MY)T"Mk5X"N(A\"N:M`"NLYd"N^eh"Npql"O.(p"O@4t"ORA#"OdM''"P!Y+"P3e/"PEq3"PX(7"Pj4;"Q''@?"Q9LC"QKXG"Q]dK"QopO"R-''S"R?3W"RQ?["RcK_"RuWc"S2cg"SDok"SW&o"Si2s"T&?""T8K&"TJW*"T\c."Tno2"U,&6"U>2:"UP>>"UbJB"UtVF"V1bJ"VCnN"VV%R"Vh1V"W%=Z"W7I^"WIUb"W[af"Wmmj"X+$n"X=0r"XO=!"XaI%"XsU)"Y0a-"YBm1"YU$5"Yg09"Z$<="Z6HA"ZHTE"ZZ`I"ZllM"[*#Q"[</U"[N;Y"[`G]"[rSa"\/_e"\Aki"\T"m"\f.q"]#:u"]5G$"]GS("]Y_,"]kk0"^)"4"^;.8"^M:<"^_F@"^qRD"_.^H"_@jL"_S!P"_e-T"`"9X"`4E\"`FQ`"`X]d"`jih"a''ul"a:,p"aL8t"a^E#"apQ''"b-]+"b?i/"bQu3"bd,7"c!8;"c3D?"cEPC"cW\G"cihK"d&tO"d9+S"dK7W"d]C["doO_"e,[c"e>gg"ePsk"ec*o"eu6s"f2C""fDO&"fV[*"fhg."g%s2"g8*6"gJ6:"g\B>"gnNB"h+ZF"h=fJ"hOrN"hb)R"ht5V"i1AZ"iCM^"iUYb"igef"j$qj"j7(n"jI4r"j[A!"jmM%"k*Y)"k<e-"kNq1"ka(5"ks49"l0@="lBLA"lTXE"lfdI"m#pM"m6''Q"mH3U"mZ?Y"mlK]"n)Wa"n;ce"nMoi"n`&m"nr2q"o/>u"oAK$"oSW("oec,"p"o0"p5&4"pG28"pY><"pkJ@"q(VD"q:bH"qLnL"q_%P"qq1T"r.=X"r@I\"rRU`"rdad"s!mh"s4$l"sF0p"sX<t"sjI#"t''U''"t9a+"tKm/"t^$3"tp07"u-<;"u?H?"uQTC"uc`G"uulK#!3#O#!E/S#!W;W#!iG[#"&S_#"8_c#"Jkg#"]"k#"o.o##,:s##>G"##PS&##b_*##tk.#$2"2#$D.6#$V::#$hF>#%%RB#%7^F#%IjJ#%\!N#%n-R#&+9V#&=EZ#&OQ^#&a]b#&sif#''0uj#''C,n#''U8r#''gE!#($Q%#(6])#(Hi-#(Zu1#(m,5#)*89#)<D=#)NPA#)`\E#)rhI#*/tM#*B+Q#*T7U#*fCY#+#O]#+5[a#+Gge#+Ysi#+l*m#,)6q#,;Bu#,MO$#,_[(#,qg,#-.s0#-A*4#-S68#-eB<#."N@#.4ZD#.FfH#.XrL#.k)P#/(5T#/:AX#/LM\#/^Y`#/ped#0-qh#0@(l#0R4p#0d@t#1!M##13Y''#1Ee+#1Wq/#1j(3#2''47#29@;#2KL?#2]XC#2odG#3,pK#3?''O#3Q3S#3c?W#3uK[#42W_#4Dcc#4Vog#4i&k#5&2o#58>s#5JK"#5\W&#5nc*#6+o.#6>&2#6P26#6b>:#6tJ>#71VB#7CbF#7UnJ#7h%N#8%1R#87=V#8IIZ#8[U^#8mab#9*mf#9=$j#9O0n#9a<r#9sI!#:0U%#:Ba)#:Tm-#:g$1#;$05#;6<9#;HH=#;ZTA#;l`E#<)lI#<<#M#<N/Q#<`;U#<rGY#=/S]#=A_a#=Ske#=f"i#>#.m#>5:q#>GFu#>YS$#>k_(#?(k,#?;"0#?M.4#?_:8#?qF<#@.R@#@@^D#@RjH#@e!L#A"-P#A49T#AFEX#AXQ\#Aj]`#B''id#B9uh#BL,l#B^8p#BpDt#C-Q##C?]''#CQi+#Ccu/#D!,3#D387#DED;#DWP?#Di\C#E&hG#E8tK#EK+O#E]7S#EoCW#F,O[#F>[_#FPgc#Fbsg#Fu*k#G26o#GDBs#GVO"#Gh[&#H%g*#H7s.#HJ*2#H\66#HnB:#I+N>#I=ZB#IOfF#IarJ#It)N#J15R#JCAV#JUMZ#JgY^#K$eb#K6qf#KI(j#K[4n#Km@r#L*M!#L<Y%#LNe)#L`q-#Ls(1#M045#MB@9#MTL=#MfXA#N#dE#N5pI#NH''M#NZ3Q#Nl?U#O)KY#O;W]#OMca#O_oe#Or&i#P/2m#PA>q#PSJu#PeW$#Q"c(#Q4o,#QG&0#QY24#Qk>8#R(J<#R:V@#RLbD#R^nH#Rq%L#S.1P#S@=T#SRIX#SdU\#T!a`#T3md#TF$h#TX0l#Tj<p#U''Ht#U9U##UKa''#U]m+#Up$/#V-03#V?<7#VQH;#VcT?#Vu`C#W2lG#WE#K#WW/O#Wi;S#X&GW#X8S[#XJ__#X\kc#Xo"g#Y,.k#Y>:o#YPFs#YbS"#Yt_&#Z1k*#ZD".#ZV.2#Zh:6#[%F:#[7R>#[I^B#[[jF#[n!J#\+-N#\=9R#\OEV#\aQZ#\s]^#]0ib#]Buf#]U,j!BL4!!/Uu&#]p>p!''pSj!-JQj!,2FW!-SWl!,qpX!-AKk#^H]%!-nis#^co+#_!&/#_323#_E>7!."p(#_`P=#_r\A#`/hE#`A[u!,Mq"#`T+M#`f7Q#a#CU#a5OY!+Q;"#aPa_#abmc#au$g#b20k#bD<o#bVHs#bhU"#c%a&#c7m*#cJ$.#c\02#cn<6#d+H:#d=T>#dO`B#daV%#dj\''!D!5_!D3Ac!DEd-#e()L!:''XO!<iKu!DWYk!Dieo!E&qs!E9)"!EKK:#eC;R!=]&>#eUGV#egSZ#f$_^#f6kb#fI"f#f[.j#fm:n#g*Fr#g<S!#gN_%#g`k)#gs"-#h0.1#hB:5#hTF9#hfR=#i#^A#i5jE#iH!I#iZ-M#il9Q#j)EU#j;QY#jM]]#j_ia#jque#k/,i#kA8m#kSDq!1=,d#knW"#l+c&#l=o*#lP&.#lb22#lt>6#m1J:#mCV>#mUbB#mgW#!C[;%#n%%J#n71N#nI&%!C6`Q!CI/)#n[IV#nmUZ#o*a^#o<mb#oO$f#oa0j#os<n#p0Hr#pBU!#pTa%#pfm)#q$$-#q601#qH<5#qZH9#qlT=#r)`A#r;lE#rN#I#r`/M#rr;Q#s/GU#sASY#sS_]#seka#t#"e#t5.i#tG:m#tYFq#tkRu#u(_$#u:k(#uM",#u_.0!2^''&$!%@6$!7L:$!IX>$![dB$!mpF$"+''J$"=3N$"O?R$"aKV$"sWZ$#0c^$#Bob$#U&f$#g2j$$$>n$$6Jr$$HW!$$Zc%$$lo)$%*&-$%<21$%N>5$%`J9$%rV=$&/bA$&AnE$&T%I$&f1M$''#=Q$''5IU$''GUY$''Ya]$''kma$()$e$(;0i$(M<m$(_Hq$(qTu$).a$$)@m($)S$,$)e00$*"<4$*4H8$*FT<$*X`@$*jlD$+(#H$+:/L$+L;P$+^GT$+pSX$,-_\$,?k`$,R"d$,d.h$-!:l$-3Fp$-ERt$-W_#$-ik''$.''"+$.9./$.K:3$.]F7$.oR;$/,^?$/>jC$/Q!G$/c-K$/u9O$02ES$0DQW$0V][$0hi_$1%uc$18,g$1J8k$1\*(!,V^R!=Jo:$1eJq$2"Vu$24c$$2Fo($2Y&,$2k20$3(>4$3:J8$3LV<$3^b@$3pnD$4.%H$4@1L$4R=P$4dIT$5!UX$53a\$5Em`$5X$d$5j0h$6''<l$69Hp$6KTt$6]a#$6om''$7-$+$7?.V!rr<%!!!i9!#Yb:)ZTjZ!!"SN!''UA_QN.%%!!.?F!Y,23(]XV0!!7NJ!ep[VNrT6K!!8kp!iuA''^An?J!!=\N"*=MFf)PpY!!H=&"M+R9jT#HV!!T(s"gJ%2^]4Pp!!V]h"nM]u!WWG1!!^:?#1ihZhuEuK!!`,s#6+Z.#lk2C!!aJD#:''9S/H?#6!!bah#=eb!<r`J:!!dWH#D<''^N;s3L!!f(q#GhD*XT/U7!!g7=#KQlMh>dfK!!iZ,#U''0R.KB`1!!kmk#Z1R-=o\hA!!mcK#_;s]OT5ZU!!oP(#e0j?_#Oba!!q''S#i#CclMq4e!!ro2#n[.D)?:''h!!t.U#r2Je3WKIR!!u9u#ups3U]:_+!"&]+$:Y"&8H9*2!"-F?$Uk%''YQ,(&!"9,5%''0F;]`8KE!"F>V%?(8r[/^ZN!"KkH%O1r`0E;Sa!"NE;%VbtRF8ufa!"S#h%dX0*oDfC#!"Usf%n6O0A,m-f!"YIt&*3d%qu@9A!"^RZ&3g.+>lYF\!"ate&<[#)T`>Y/!"csH&D$mnjo>tc!"f>6&K:]^.0''r>!"i$-&SM.VJ,g1K!"l[?&`j!)qZ%69!"p.L&h!_m4oc3i!"sJU''&*C!nGj4-!#$CR''/]b'';?.AH!#''qa''8li(TE#Y4!#*HS''BB-,o)KI+!#-"F''IWqqOT6)h!#2jA''ZpCihZ+A`!#6%F''ditr3rg!g!#8]<''l*daJcHOJ!#<r_($P]5rr<fM!#@*c(./'';Q2h^@!#I0d(HVU58cTZ1!#K;K(O#iqLB&-V!#Ma;(W-4hd/Y"(!#R9f(d\3>;?.PI!#Tq\(lSG3df:7\!#]&B)0#WoJcH[U!#_^8)86(gcN"jD!#bD/)BJks/H?\O!#fbU)Q3WS\,[Gg!#jhs)Z0RS$ih4d!#nf9)j(+>TE#q2!#rWP)qY-0kPuRr!#u1C*#/Gn*WR02!$"''#*(g2N=9''=R!$$1_*/=M6QN/#A!$(&"*:s4O!rs>Q!$*-]*A7C54ocTs!$.7''*SLK6nc0^9!$33^*]3p=;udtY!$9>a+%$#M=TBOX!$?Uh+,g1AU&Z:?!$B#W+41''1i;ati!$I=&+Y`s?5l`'')!$Rp6,";PV<WF=V!$Z@^,''j55M?"ig!$\BB,.IUsa8dF:!$^_/,6%Wf(''#R2!$d-s,MN2Cli8:/!$hsQ,THe01B8[e!$kGB,[gZuE<%87!$mX+,a\QWec7!D!$sQ(-#Wc0QiJG^!%&li-A2@GirCFr!%0u2-ZoD:]Ds>h!%9>t.")(DL&`X5!%A''O.<PV>m/SV%!%R@9.h2P0CB,ld!%Z1l/><+qlMrLa!%h.M/\;!89`Qg''!&$510VJJ#iW(\e!&96/1%>6!<rb!`!&N.*1a)iU<<+kK!&Vt$1tM^ah>fCq!&]`92<=fr4TIB`!&gt[2R`ZF#QQgD!''*"=3fa8%hZ,a#!''?bP41,&Mh#KP''!''CVh4=L7m7K>PO!''G&t4FmJpO8qD?!''Ijn4OO3lkQ!a?!''LSf4Wj_f1]T[+!''O6\4`CBaMuZ#?!''S=%4lQH)rr>5&!''WFD5"GZ;D#cb\!''[F`50!XehZ,k;!''d1X5\L-_GlU*j!''m+U5ck#P;#ioP!(*1U6ULi@;ZK0p!(1f-6]D(5V>rus!(5$36f\58NW;J=!(<si70<NY+ok%m!(Bog7<8GtNrVVL!(Fm-7GRr4o)M5b!(J.47POm47K>n^!(Lo-7XkD-NW;PL!(Os.7c",7o)M8j!(S767l^Q>7fZ%a!(V#/7tCY1OT7nE!(X3m8%emmbQ(4(!(s3j9"=poaT+t_!),9N9M>F[@fT3H!)8+H9r\1faoG0#!)<Xs:)X+-/c\X=!)@#(:3$>0JcJQ)!)E[s:JLmcW;o`f!)PWT;2>3Lf)S\p!)dq>;M+sJKE+r1!)o0`<6kPE+okVD!*.>F<`T3$UB"@C!*I)<=RcAo3WN<R!*R#9=lo]f!!$3''!*`P*>CHQVh#L\+!*jIC>gi[Y)?=&O!*t9Y?((b"PlP0s!+3\F?h",()usAW!+:lg@+G<crW$@b!+CT^@CuSL63(JH!+O7S@hA]N@fU#''!+X%LA-`0GoDiHk!+iY?A`j&*+TQ+C!+prcB#jsad/[fA!,$QWB=%YOmJpot!,,sEBR9_mg]2%j!,5g@BqGB>`W0`)!,<e[C3T_naT-)o!,JtBC`NLlQ2kbY!,e>-D[uhdHiS)T!,o:GDoMcr%fgQm!-%i9ET7%>BE3)>!-<)ZFB/Ba#lo)c!-Q<^Fk6V9oDj%[!-TpoG"_mZXT3OR!-\>AG=V^XMZ@sj!-d/tGO#6Qo`049!-eeMGS:(%*<:=2!-g=#GWc%O70%R-!-j4uGbtIcY5igW!-l]fGi/RHqZ(mJ!-o4XGoZm1.faiN!-p^-Gtn?bnc3t;!.+eJHPlg2D#es3!.?F!I6IXZ;?2,W!.B.nI>IrPQN2H7!.D6TIDc,6df=gV!.H*lIPLnP63)I1!.J#MIUrM.FT?l>!.Kn-I[gCeX8m^\!.N#iIa\:Gj8a[[!.Te)IuaSZQN2N,!.UgFJ#iX"ZN,Ke!.W)jJ''e7Gh#Mrk!.XV@J,B:s#loJk!.Z6nJ1:PL=oa(^!.\b`J8YF<Fo[&?!.^".J=Q[jX8mdu!.``&JEQu`o`0OI!.b[]JUmfPnGn.8!.k@SJe.p6(BB%-!.lEqJh$hQ1&uoA!.o7lJqsDYNW=Zs!.p^@Jt`6sW;qOW!.qi`K#@Y@b5d.K!.sM:K(8nnq#H$Y!/!cAK2ho(nc4=@!/(LUKF@j6''**\)!/*H7KL>fn9E9`K!/+qaKQ7''H0E?eo!/45LKu<tG;?2GM!/=n^L1pXBG6!AO!/?[;L7nU&+omBJ!/E<0LW9CO@fV@Y!/d6GMj=@$VZ;Xa!/u=+NHbG_pAg8@!0EWLON[]eJH1iA!0Z=APJ7*^7KA];!0tS)Q>HVfXoOe+!1,/8QT>,5AcS0?!1/08Q_OPI\cA)8!1249Qf\:7pAgQj!14i.QnSN-@/u[7!18K@R#_67WrSNo!1:G"R)T,o(]]sJ!1>>;R7I=GIK5e/!1Ch,RFD5)kl@.H!1EogRMPsm+TRt''!1MXBRkOi33<5OF!1RU$RsP.)Mu]?;!1U.lS)448m/WYP!1\rISD4+7joCr;!1g+iSdYUj9)tQ-!1qL:T,.L"1]X/E!2$UuTCi2W"9>*&!2-7jT\9C>''EFhF!29r''U)*g(+98,s!2<<jU1F>!FTA.j!2F<0U]^[nU]@5a!2X!%VNCkUquEX*!2sE.W651?9)tqp!3''o;WOi/0b5eOc!3.LKW\a^U9)ttj!331%Wo=#Z(]^Tb!38''ZX%35kA,rZP!3:bQX-isgTE)%H!3>,[X6fnfo`2&j!3?M-X:YH67KBMd!3B<''XD%[9IfQR0!3DIdXIfKoV?!^p!3HA(XWmhJ/-)eD!3L,=Xd9$iY5k]>!3O9AXrIGE=9,L:!3Wp6Y0[0Og&S;h!3[OGY:BUV1]X^A!3]#qY>bM*HN:7G!3`L)YIjk=d/^B.!3bVeYQ+[-#lq2O!3gnPYa>EpTE)40!3kG_YmUQ:+onl&!3nQbZ%N+^`W39u!3u4tZ<.+4BE5?E!4''6;ZHE6RiW-:S!4+liZ[i+_^&YLb!41M^ZgRn$$NRQ!!4<aG[:]KIDud;!!4A3p[B9M;_>q!k!4C\a[XS:c\cB1U!4MFu[e^!5/-*.p!4m^]]$UMi#6;@k!4uV=]<D:J&cfQn!5(Ps]O1`PHN:^c!5.q(]gMk6P5r<5!5>6/^=`M$%04.8!5F-d^U=-WkQ&C4!5Lf!^h*S^MZCPo!5QeY_$^7Z:]S>[!5_;-_S-#f.KI@W!5iCK_f#OmOoWD<!5nI0`%_81B`Q)5!5u8F`8gp;&-0[5!6&gU`K^GB\cB_t!62;Ea!C`+OT<Fk!6;/@a1VJo"TZV:!6BusaL;/jirI11!6I%ta]JPbL&f?#!6OX/as6u0/ca$_!6SIFb''3p/PQ8k&!6VnRb0''e-huLqQ!6[J)bEr:QZiJ:m!6a@%bP;.^%fjfj!6cSdbV9+A5QK#/!6f6Zb_lJFV?"iO!6iahbjkbY''*-9,!6me0bu"Jc@K=Yt!6pQ)c(tEb]`?=,!6sd/c3+-m*WXJQ!7#6Xc>`j0e,[fi!7/L^cdDg>huM*e!71-7ctNL,iW.@\!7>Q^dE2I;"TZt0!7L05dfog$2uqF@!7Vbae5u_#B`QYg!7deDe^=HK.KJ''p!7u]#fRs7W[/elS!82c#g&V3-BE6c6!8Ae"gW9HMrrChb!8OaXh7E[CklBSG!8bcshqA(g2#uRl!9&D-iJ@QnWrV+j!9*YPiW&u<:&s9`!95O/j''2TEPlTjb!9<kTj=^Mo:&s@(!9DT/jVS!Z7f_XQ!9K:Bjkp.$%fka@!9WqSk9L&jG6$gI!9d)Vk`Gl0!W_J:!9s+UlFR&^+9:_9!:.?!lgFi?494_^!:>L@m?dn@klC,r!:J/5ml^[>D#j$P!:RAsn&PLtoDn@e!:V-3n1"G-3<8PG!:X+kn6uCeC&maV!:Z!Kn<a4FV?$+h!:[W$nAYItcN*Ik!:]1PnF?SKquH6k!:^U#nKIu''.KJur!:aCrn]:e$e,]$q!:h$.nkfDXI/rhn!:lBTnt6!Rq#L"L!:ui`oCDtS,lmQj!;&\[oM5JZ]E%U;!;.K8oeZ[A7KE*X!;0b#oqMN[\,c49!;7H6p:(+s6icu,!;H*cp`KS33WSqK!;L1,pj)r8M#d>2!;S/Gq)8<L8-&Hg!;Z]rqDA9L^&\#U!;b=JqW\(XAH;UN!;h9HqhbCNT`Ftj!;jA.qnrL3blIYk!;o1ar)3Un>6+S<!;q6Fr9aR`Fo_Jj!<&5arTXC]o)Sad!<*0&r^$VaHN=&"!</;brh9DlXT8@n!<3$!s#L/[F9)@&!<>Fe!/ppZ)Z]u)!<M6^!_i[s_#XX6!<^IF";:e=[/gFF!<m<@"oA<)HiXG\!=$XH#>Y@+Gl\2C!=82r#t4k$Z2k:l!=G+n$N:&6Dug@:!=VX&%&*b32$"/S!=f#/%VPkQhuO?m!>!rd&01c_\,d1(!>3`\&ift*_uUMt!>Ce#''E\@MHiXqn!>R6g''sI]Rp]2/\!>fkZ(Vg%g)$(S-!>u+C).EUac2ehF!?.:*)V5!//HHg>!?<co*/+D5hZ4`f!?JcQ*^''NFL&iAC!?\<B+?BNGQN86=!?lF`+mo@T:]Vcc!@&!R,CBM:q>hj,!@7jL-&hpP>lc:]!@J<W-_18d%KRu&!@X-4.CfI.`W7Os!@eca.Zsf^jT-k1!@qjb/(O_P''EKam!A&0j/9q7IJcRFY!A,&f/X?DhXT:#^!A6eA/kl@!X8ss/!A?G601,anL&itD!AJ6h0QR7KblKO1!APi#0j=Z5A-"F*!AX!C1%t](6NJs?!A_Up1IM7"ec@Tt!Ar1)2*1grF9+8i!B)/''2DY@lK)mnL!B49b2hh>l`rS.O!B=Qi3/R_r[/i8"!BCkq3N)s><WP74!BQ)=3g0S*o)Uq*!BZDE46ci/&ck+@!Bbu84M(VW+osib!Br7>5*u@8$3<A$!C+F%5Z@bLecA&h!C:Q''6.Q''&lN''<U!C@h.695-6:''![q!CD286C7d?XT:c%!CG$36KA/6q#Nhn!CJ(46TG07:''!`Z!CWpg7)&ajdK)c"!C[+l72l7r2??68!C^,l7;)]jI/ue''!Cj''i7_/UiaoOuc!ClMY7fEEY%08s<!CnR>7mI)F<rkhC!Cu5P8+QaP!<G_&!D"L;84!>J?NE]9!D%\@8<*^ASH29_!D''g''8BLs(f`=Y5!D*Ir8JM7t,QUIm!D,QX8Q#R\@KB&A!D.nE8Ws0HUB*rl!D1*.8^@E/h>p47!D3.h8dGGi(BI,d!D62i8p:;.RK6$k!D:lC9(W-W%fo<J!D>?P92#@Z?i`oC!DA+I9:5fRW<#Z2!DD5L9CW$V!<Gk+!DFX;9J?K@564GX!DI809S!4<Q2s[\!DL?29[Nl7i;lX@!DNIn9ah%s)Z`Y^!DPNS9hbX_@f];D!DS"D9oB$HR/p$a!DUB2:#5nFq>j=u!DXL5:+$'';2$$HA!DZ\s:1sZ''Gl^[&!D]Tp::^I$b5kAm!D_q]:AOue#m!gE!DbWT:IY@\<WQ!.!Ddn?:PJmGQ2sdW!Dg$&:Vd''-f`=n:!Didt:`''40-im.-!Dl\q:h]r,IK<97!Dp9,:soA@mK$/l!Dt6G;+:R`A-#PX!E#Bg;7Zd*ecAY?!E''O2;D8,L9`\.,!E+[R;PO7j^]@?Z!E.qY;Y''of#Q[j@!E1TO;ag^c?ia2K!E5$[;l''Ln_#[Ke!E8Uk<!iY*,lpt&!E;Jg<)`ltBE;(^!E>6`<2fmt^&_3h!EAjq<>GU80EG0K!EEk8<J^`VV#aT6!EIqV<V6An%KTTW!EMDc<`fB''FTGO''!EQ-"<keZ9f)\q6!ESgn<rrD(%fo`R!EUoT=$H^e:B=O''!EX%;=*t$MMZHnJ!EZ6$=1A94`rT8l!E\=_=7ZGp!<H:6!E^HF=>U%\8-)h''!EagP=I]Co\,f^\!Eeaj=Teb.)Za)&!EiM*=a0sMQN:6s!EmkP=l]Tdo`85*!Ep`L>!2mi<<696!EsRG>)WJcUB+Q2!F!tR>3#]foDr/(!F$]J><)^g:]Xd5!F(!R>E/_gT)i0*!F*hM>NZ#krrH@@!F.8Y>X8Bq;up6A!F1B\>bV7(]E)9g!F5''o>lFb0%09`Z!F7Yc>u(K,AH?(a!F:li?)Rd0]`DEl!F><u?4d3E/HK0F!FAn0??cKWQ2t="!FF4U?K2&mo)W2*!FHrM?T8''n:B=g7!FL6U?]G.oV#ar:!FO@X?f_;qo`8G0!FR/R?p+Nu<<6KD!FUN\@$:V!U]Fl9!FX@W@-do&"9DpN!F[ec@7^K.?NFST!F^T]@?^e$V#b#6!Fa.P@Gq5qp&SV-!FclH@O_Cf498nl!Fg!K@Zgb$ZN4Oe!Fkm+@iPMZ4TT&&!FpreA$uDJiW3R$!G"=oA82-UQN:X!!G''+LAE!W#rW-RN!G+=nAQ]%FG6)9@!G/Y>A_R5t!!-[Z!G5%,AodubR/pp''!G9:OB&`o)!!-^T!G=UtB3YIMGl_QF!GAkBBANZ&"9E0d!GG=2BQjJjSH3E/!GKFQB]/u*o`8b<!GNe[Bg)Q3;up]J!GR)cBpf!9\,g<[!GWGPC.SG@;ZUWJ!G[/dC68O3Vu^YC!G]p]C>],-nc<M.!G`DNCFoR&4ooFq!Gc*ECNKSmLB22#!Ggp#C]+9M*<Bt.!Gjk!CeOkG?3+k[!Gm2cCl\U5ScNZ0!GpTnD%6S`,QVaC!GtC/D.WfcG6)Q:!H"5*D6!\S_?"N9!H&5FDA3+h/HK`P!H(m<DIiidHNA#I!H+n<DS#peblM_D!H.B-D^,:$-38$6!H0LiD_D-01'');N!H0puD`Ro;4TTId!H1=+DaXVE70.<r!H1I/Db''nI<WR,L!H2rYDgh_*Mudjc!H54DDnc<kaoQG0!H6`oE"E%h+9?F7!H:4''E)?XTDZOgK!H>LKE?kR)/cfrU!HD-@EF/`d?ib7U!HDQLEFT#hA-$[]!HD]PEG5GnQiV3W!HJqVE\d`:>QJl9!HPgREp*OF!Wd?M!HStVFRfHT$itM0!Hmf2G(Ka=(''/Vb!I&VdGCop?N<+9O!I7KBH#E_/Mue4''!I<K%H3F=q:B>d,!IC=<HHQ>9nH""<!IP[aHt<>+q#Q")!J!oGJ;"#ST`K\]!J&W"JF<Mi&cmP3!J*]@JO]`l8-+95!J*iDJP-#p9EB]L!J,OtJVjJZPlZH5!J.KVJ]\"Eg];uh!J0hCJdDI0)?GF?!J6mDJuo''*[K1up!J8>mK%9sSi;nQ#!J:4MK,"E>-38`R!J<N9K2Vf''A-%=*!JLXWL''7U4^]B2:!Jf&''L\Ut-i;nhF!K/W4Mamf+Oo^M\!K?OLNdq.kPlZrT!KY\1O7!%0p]6HX!Ka5\O\l.A@f_^<!Ki9@OeVr>a8qH\!Ku+:P4ep>pApH]!L"9"P:6NrdK,R?!L,,9PYV=Eo`:>L!L>YFQ\kg37KJo]!Ll1PSP]EY=ok2K!M/]\SbW;XJcVJB!M<$dTJlnEb5n>r!Me`WUhTq+KE7m.!Ml%_Ut,RBhZ9PL!Mp)''V''?#;/HM\,!Mr''_V+UicZ2pi!!N,nuV[rm,+p"T2!N4ZQWU0_d(]gWi!NJWjWaGk-Glaq-!NN=(Wm1XFmK''@&!NS6^X''l%0L]OQE!NVsrX0Vi-b5nZt!NY/[X7-.k#6CnP!N\0[X?Q`e:][Y3!N^;BXEsuLL]OT?!N_sqXL\G6hZ9hM!Nc+uXUkN80`eC_!NgGEXaL5PP6%em!Nj'':XiCIEeH)f/!NkSeXn2XrrW0/.!NnHaY%n''@e,ca9!O&@$YR^c=9*)8O!O0lNYnmGG?NIF1!O;"mZ7uBcDum8J!OD(nZRc-`B`YPe!OIadZ_%9)YQ;)H!OL2TZf;(n%KWqW!ORph[&a;8b5o!j!OXBX[57olL]Or[!Ogqf[g)rC)?I<$!Om[^\!@''(W<''Wh!P@_"]`/#H#m%aV!PZq^^MO"do)ZZm!Pr1F_63mUnc?U,!Q(6*_SQ>k*Wa;H!QS(=a+XQ7aT9HY!QZblaBSbeEWO7B!Q_>CaN=P)jT3I6!QdG)a^kLpI0%Ha!Qjp6b&@C(N<.2)!QrOcb5hXe*s''PM!R"OFbC]i=QN>;$!R*M(b[LUsGQH$>!R._Jbe=,&(BMc>!R4+8c)h#kb5olI!R:rOc6!)4M?2#o!RD/TcTD6SWWCGr!RL?<cj9a".07ed!RS7Ud4bUK7fh"D!RYN\d<5Q<NrdY)!R\L[dDQ(5bQ6,A!R^uLdL-*(;$#+$!Rf''jdfoj%7KLu4!Rop,e.Mf33!%N]!S#*ieKP%E<rpjY!S.2Nepd_OQiYg?!S>$dfWkP2Z2rZR!SUu`g2mALMZMP+!S^9KgY2b`o)[VJ!SeRogbAib5QTY9!ShMmgjB.XPl][9!Sk$_gsZ;ZklKT9!Sn@hh''iB\3<@r5!Sq,ah/WPQ''*6sd!T--Che`DOTE3rd!T2T3hu!N5(''3@,!T=Igi@G#gH3*!?!TD`5iT(%!+p$\K!TLEdip?d,:BBL]!TV#tjGs?''1]c^e!TnY.k6qCS*WbFs!U!tokFDY:l2g)K!U)?@k^*?oYlX(F!U0pll#-UeK`UG+!U6]el,j%kjoO`A!U:!ml5]oj0*1?(!U<Sal>-LdIKA_q!UBdflP''Bc-3<Ek!UFt2l\PZ.RK;aQ!UOJ#m!8^!N</CH!URK#m*Ge#/HP6%!UWV_m9ft^EWPR+!Ub<AithE_q/-&&#58o3#8R$-pRM/T#7_5?%f?nKqqCe5q.^We$N()2+US_V:%qK[D&"6%pOMuR''d<tp,kiX$''smXBnr%#T@.]A`pL*_''Mi7!NMlQM''pAp21mP0X%pHg''^C&:4#,`Af!66_>%qa1/fMi0"OMf&>C.Z935fSa8:?j69bpVR`FpFYroD>Pmg%OCe(Fql4IoEY+0RbZ>LpD/\]!`$c40=D/\>mJ#qW+:f`#_i!e#Dr0e4kfcGOpJlo<<rC9Im?>YqZMiS"40I1)f,fWBa7S%Cp]#G#l>Ei#)i?dferLKI0fUI"B1k3VMhpA^87gGQ3bh6g(hMOVeM&nMcjt5;geo]pNlRCq,%kR3&r?6hDt)ohqd\j3ntu&-j7,dAmAYQAR/PPZ+7BLZ+;%P,k_uN+T600MteCiD$>amq%Y593@?013UlLph<jepga!si"M1jL>[CrP?!LsG\[euM\fVF)pnINi''nHUJ@"W<=@0l`9pETq''aJZJ)dg5/*aWM]d67j7:Asm;0C''^_O"c\A"L67,c#u4u2M_0ka(@!dO,)ad*\XhNs#e<n.22h>BpFZWU\Y\)@f*IiNqu''M0pDj&p"^G\KG\i:<Mc[iTa,@$gW2?*kiV,kX=iuJ_MkgWVUS"ZlTQXogMeI<P@s&%er&OLJq/$ij$4csepL!`5(&J756!O4-Mu,)aq_#MX*qop:5mZo`+noG[pB6EK-]@^GXnN%mpL"7:qqCcSqcjm1#PUNrpE#7e/W9?U>PB39#PULi-O08@@]fM1Mu+l[q^-%S"sNkO#S-a+pDE\4''dF%q5kq>Q[hU.q%f?p^pEgV$$4csepV-Ce''da7tr"8[<pEgUu$4ctGpLO)+(&MJ=CsIt5@ejgD%OCeFF;=OQ](\D_>9Adt(45(U_I:b[YW.P*Mb7bm:h!CK0T5fK#lA)Dq`FOR*qT.4''oP2,4+V<s@;U*rM[2pc[eFG/?)tuobHk[TE?>Z9pO`0g(&WLS+Sf.m#B_sl@/CFl#VH>l,l!`$LDBP(/`Z^Wq^46Xq^NYFKo:SBJ-blfU''B>U\]`+"?pl&o4`bE91&D%L$TM]lK_lPkpicBDqnNEVpCm:VY)E$f#S&,bpkBN5pD+!nf:0G,M[75$Bi%3,B/gu_/I&kGP_u5i\pgVfMcYg2?X?Kc8W.5dLXZV,*!VB!,3UfV-&_LJMsTM_pE#7LB>H[8c*X@XMp)J$$8^91*AI@4C&:jN%OCh@pSATjpdk9B#5abb7Z7-NpTTR6q_@gfMi7<aeVaV.CA.uKqb<"C:%uO/%OCgtq,nI1%uX-Z+86D+"e)TpT!jO_d^E783+#cV+&7`.WeeS!q]5s$q[i!NpE#4upFPq-pFZ+c1%4uU+''a_;Iq!4"UA$)1\VgV$,cg\$''oVr!RQmuRZq8eYhhqd7+m\gq0)$>El2(r4;2\t2?X8]CMi3^sR*2h@_i)$_UNrD:#ko)=EVDTm,a2Voqco%Rq`Tl7D@#upT,#SX=?SlS<)$"m^t.2J_9<u2,l"22=V^jiq[rSq#%1^pq\=$D=sS,@Gl&uspE9a.pN4pZ5kdD8?O.,epkedE(&%e\h"qob(b7ZE"<NIkVdR\^3F?K#M`1q=)Y,NT.JG7]kk>u:Mr/6b3OcYt[]tbH#lAf!(!3mq<)m:9:/,*$_SN[carcK;XVK3k>sUtf?:RLn\C&d7\]u9,,l!c%"r6mKq^K<.q][L9q^D=gi@"@4*o`*Y^7:dQq\s*;4H!C$Br6]o#l>PFNr&k?4805C#knJr.E;,B+8_2pKGDh@<]E6L=%c1r^>.PN^W@Q-qqCe6pEgUu$M^+o+US_Vg@kdF-5@g6p^.-I$4]>rV>+pCr-eH6Mu*tYIJZWppB1=+pD<T;pDF,E5kqAS0,5iAq[EZU$4]>-JJBR?%U7-OFVQ>4pXT0$''d3nopX&Z#pNI?''e3E(:_Mc=0ZFZE6[:dmF#k[j;pBC:dpNcX9pGMi"+8[%9q[-L[/2JtZq\G+e#`JS#pI+mLpT9A<Mq"0BWsEXn"]98''Hp`etqbm;VpCR(*pLj4RpJ^g6+75!AD:))&:od*E4:(g#.O@`)Gb1lUMjK?[PGni@pT-*-HVFZb]kO0=M[92d<Vq&9+88Mb''j5(Ya77jPftXRu9KGcB''/gpBb4phf-P\*<pO)]I''e9V$b5![aAecj(r''pH&''eKdi&Hj]n%a+RMpi[B*$4b52(,-*i.fAcN0a\DSpNcMY''f$++>PE76c4r,B%egA+cM3,/1^X`8plG1,''f?=.r"8[;q/$j)$4\?UOE;3r$4b5QFSCS+3!p."pNlXP''fcU2pHnUjprjI6$4b5RP864e%eg@;p\P[f$MX/dOqg+e%[6X1pQu[Z$MY>=57.np$hte=GniROiV[1#5me+Epjr/O''g`8&p_FT3$4`9poD"@]6jaE.p_ESn''h&H>b4l!Z''h/N?PP?::7g]b#Z2&8Q8.#ijpc%sR''hJ`BPP@*2U(p9-%U8_Zq/$j>$4csepW3/I(&Nab2>;jqqZQ_/pB1[1r"6gA?56"hpO<''WcAMi9qq@V<>S[!fqDJ/)-2.Q@C&8#;%RBf\pS&E"5PRD=&W?NHr&scWMt[JN_"S<8^]b2npt#<N''herEqq@S9M%r_l%OCdJF;7OXpG_i"''i,/H>PIX^\J7pJD#4MR;$mdYpU'']d''iGAK>PFA(''iPI>pfeJ4$4\?UV"hJ8<=8HsH50Hf%f=uSc1n+M<sfFApal3E''j(h?Oo#+n=UGXCpa,[k''j:qSr"8[5pokK;$MeNA>RCu=&bfo4YSCFNq9&nG$4\?U>PHth?4%2?&bff2D&$Cb%ek:ipokK@$4^:_pokKA$4^;7_>(PU@LA(k"VkMS%U8\spph,M$>]MF''kI^^>PF8$''kRfSpfnPH$4cs-b4r1UBF54ppH&%''''kn!bqqCe\pn\^?$4^;8Ynh*^%OCf>(2O<fpC$cl(2XBg,kq''-U_RbS%OCd\E><C!%f8''W?hgi?E!d*PUA##h.M_hm#<BLqdiR-/Ad2t"S%Kj;<sOZ5Feh9hes<#*Mpr%,<sQ("S>mX7mQUnC=A_(#qe$.l@!?j%M?nP^#*4WFaI@WT*tJ2ZpIP*s''g)CPgBJ/bUA(GX%i+hN#MiM$6QSH?YQh4qHWhNg<sOXMTlS_65_*utMa@^H<sN5`H>FX7.+\[P^;\nMpLa_h[\''/$N!Pp9#)A-@:4&AJ*tCR2)#&%cG)Ld2ELmG6[0:WAEKb-q4H!TOL+3J^#*#sNUq)DVMk#HpH3hGt"f6L>K<1!cMmU*Ym0GiZMI_K]>Diasr"0G9g<KLi(&''3PAd2`=a[h=uqoK$:"pFZMpEobe"qDpQ_tZ_:\qHktQq[k\)?tig&2W8A%ugkQ?Sr)c-%%j%Mu,btq`<UXpE+tm-+E@KpC!)Di0O*G#l>MEHqna$?%`JjNYPQ`DT%IsMsdOa_3kQ=,kjh(Pnh*AZ,@^FMjmA%?3lL?pDAelKC!LM)Z+*(q^IFY0T5f.MdMZj\3($m<9+7QA<:tmEf3e7B/`]o_BoGqTr+$YMp[I$CXJ''QMmJbfX9`;0!<ltWCP$;Z=c7*h?&NTYGD&Y,i6J@5MoCUHLmW[g#knhGq]?#`a(i,BYQt^ap_`e%''lKROQY).fMdh0PGR-Lc7Ru/p"aFm8ArC5YAWq&+@gG4]cUQXA"f6IRJ$Y'':Mk,s?U^5O:d*Fo-"eVr^Xc''KCZ%SosZO#.57aM>98c''YG`Of;N:Kq%":g:QOaLf%(*tBRkL%k0Rq]1Uh<;6(_)iOS3qi^gupQGCqMt^TUp%oegMbs-oMi1X5-&[[XpEb`Uqa^nb+SSG$,0''L(_"T#W%f?k38GR*;48]uN#5]nR48]uN"qDpQ&bnU+6reDFMbf71Vd-rQ#kpP2"g<-PI>_HjB5DTpMbT+VXGFFnQ2;@&N;FL@8,"*`pD/\IfSfJ.Mo9_H>cc5NVR)3+MpH4O8[&Kt''@?tOZ?VpuVi.ROT<X<cMkb?V<XAF5#)2e#+K72Uq[JH>6]3=M7C6g%G6mqVq[O@PEg_63CQ!:aH"h=*q^:,%A"e@AMlM]6Q^t+H#S-acpXAqb''laTX=SE:?E=*3/pq6Ah''nc0D_Bt0Hq[u%Iq]kt^feN43+85nreB<sG#VQC:;e^)HM[2a\_W^6m_pTXBMl:]_<<t5ObS>.*MF/,"$4cs@pXT$%(&P3upTOjcpF$c''R>7#bS-\jZ#L-SW1EJ?1?"JmZ#h]ECX.#B]MlVc+J;\W0D.JKAL''VLI"\O;^C5YoH:pOWOMm&&@S#<6EH]3ZBJI(EC-2//i>B=^kDL.bH*fHh]Q`cJWW0%7WO,f0aO9c=Aj7dF+F:.bVqZ[dW$4]?$!%0B"p^@o;!!%Saq[EK*JH-mPrr<$C%/W6_$]G&bs''-uH[KR0<g@r>Ul4kWQ%b^T`pWXH9#.:%MBchX+Mh-b<Mh?ppNI@.8#kFVmI$9>KMk5b!''T%uSUV*@pXc''juf3YsO*rCQe:[85ZOp(LZncudrIUZc5ITmn:p[Ju=$Aq1cEs`ESg@rqh@hj+n%T`>Aq*Gg>$;:SH$4]>rU[f/tC\nM7CBjQ5"T(U]7/IAh7/KCL$hm''d7/%)`7/''(R%f=?Ah"]Y>GR=rXaJ&CT''mU,rqqCelq2#i4$4^;7>5)J@pYu&mrJ^IhpO<FGE2nGqMn+bGRBj/oA#"I`Ml2K)OJ8''IiWk$jLPgeD#]k]g`?4jnq]Pdu#>JW6:eZ&Cb8q-=T(mpQMu+4H/b]d0#lJ#rq;f]sjR)d([aY,k#Q"f^-2SN$%f?p^pUCrb$4csepGNe7$4ct1pF#a`''n$E!qmuO]pZN@h_*.P/#5]qGB,)gi8g#:u9())gbk(Q1:s11-7g-B%@8''I5@:!8V[E6Li[C@:g,kmMsit["MpLEq&''n-K"pLa.IpsBh)$M_=/+r,S7pHJMa''n?Yg+k@BZ$4cfBpF#a`''n$Ga\+_'']IgYp8r%f(4$4cfBU%lqKGma?8pEUK''$MPV>[hXE#q]XN*JI2lkppA$Uq](FsJd4JE;G9km^!%OUpC-d[LPtmt#atQ$#E)0,J59T+8T8$p2iIPQnLaJ_MsQAr,I!4&FpRuqpZ!"_.eb:e.L$C*pMp$l''ho&00)_aa.LPotpCS,j$4b5RPPR?UH4''BPr=Thp$MSrB&JZf''%a+OiqE,LE$JkZ[''e0RbI.n3f.gcd/piuWl''nZj!rLjrU$MSrB&JZf''%a+R7qCWM&$N!s"%M`sjpIP6+''e0RbI.n3f.gcd/p]1.^''ncou"GI3W*W:^-.LPotpCS,j$4cgppd4^+''o!(iF8$7]LC+O6pojI9''o32,PP8S`4;CQt,Q.ZY1("MTpiZEq''m^5a'')ZP\1("MTpU^2`''nQei5lCa!1("MTpkAPs''laTX=SE:?E=,)2H5/1B%f?oiqE,Ke$LIY"''fHC/r"8\3qE,L=$G97O2@9rl&`idN''nQd_qdU@!$4ctGpUL&P''laTX=SE:?E=2FH6kqTe%a*Guk7rg\poU>,M@''j9piuWl''nZj+r\P?O$4ce<pQGA8''ho&4kkrsG4::iSpQ?7S$4ce<pnmmM''m^5b!;o%r4::iSpQ?7S$4ce<pZVH9''nQej/,[p44::iSpQ?7S$4ce<pltV3''nZkkX8L3W4::iSpQ?7S$4ce<ppBlN''laTX=SE:?E=2Tar([th$MX/dOqg+e%RBeLpeV_&(&JaC(&&G%2YRs`''`/UA'']1kD''_`=9''`/X&htn,^(&&I;''a5*A$i,&Aq%\epqa''s!''oWK._\J.<%a+NjqE,Ke$C:Zi''h/N?b4pql4;E/LIf6qp7LBXJpWiUt''nQckr_jP$$4b5RReeWOE=2SFpC7pX$F]oV''h/N?PPB4q4;E/Lc2<qD8dZ&lp`fM+(&L8j%/VOQD>,OS+SSY9pD`&SpF5NDpD!L0+8\>#lkM_l%U8^*pb*B#TrGV]c3X+qf)$E`;-YRI"WmT1pE975#JI1:_T8rt=!!9"ASFqt#_FUp#2m7$59GeO>?F@P#^;.0M2R+HKo-05":)#`S;EqtpD8bIn;I#lMt\>EVeM;"%OCccq2#h\$;(2h''i#,12tqt?:C7RWpb2H"''m^3>r<a97$MQLRKG@8i%OCdgq2#i<$MthATG:3/pG_i"''i,/H,kr/NJJEeEqj%,I''i#,12tqt?:C7RWpc\G"''laTX=SE:?E=-=V(_odQpG_i"''i,/H,kn/2Q5,&[>6KWe3rOIA:($_SpOj8W$4cfVpk/<a''oiXu+Ft8g$MP^f''p&b4,kjY"Qkb_j%OCcdq2#h\$CL^$''ibV7qg&uX$4\?V2u/:FH4"gm''ibV7qg&uX$4\?UH23:3JdP0JA//)OpA9.N<XK<^pdP"*''laTX=SE:?E=/j9''ibV7qg&uX$4ctGJbb-;9a^%[D&$7^%f?q5[eYapH4%)O''jD"Tr"8#cM%tULQMYM6>7(l<&big2HPLN-qcNS&''laTT"$.0$$4^;7<;CeS86c>2F.%ZXHO*&I[:\(%"gN3LCo1TNRWjg4M[92(.f05C2>]r5qZ-@PpH7m<!;B//Mt]8$pCI-OnHe$c=KOD]"`fiVRnKL^pB(69("g/i+t$Ma5<i;ro''sE=f,kK,pb_et''nZkk2#Ci!@1!KKpGr&+''ho%#qd^FN$B4ic''k7R\>PLqgM%t=DI8L_g$B4ic''k7R\>PF0RM\UgN;u:/A@LA(k"VkMS%U8]eq1095$N!El>SU]TN;Ebn@gW]MpfmQ@''laTX=SE:?E=0*@''k.N/qZR^E$4]>rWqWt;-OTahpVIYl$MtD3rY9be%U8Z?Xqd*,p]L9u''pAuA^D2t?%U8Zdq2#h\$MTY\M%se5%U8^$q2#i4$MSfCo+c$J%U8[dq2#i<$MR<oM%se5%U8^0q0Nir$N!s"%M`sjpTj_u''l+-d,ks%gM%t=D5lD-,D[HtYpKIB0(&K-Q8,"/#Xp2")]5Q#R#ko,#pC?pVpGjbu%f7"`7uLShBho$/$?$[-\jdqo>";%N>L2d-]?nqI%OCg6q0Nir$N!s"%M`sjG5W?pD[Huspm1al''m0k4rA56=$MSrB&JZf''%OCg0q-t.^$N#,I.htedpG_i"''i,/Hb4pPa1DQ/^PPpa].LPotpCS,j$4\?V/,=]1Pm[D(rJVId$MQLRKG@8i%a+R''pEp]fq^9sQ"[-d0=Gp"6:Vg`/Ml)E)NMhpF\d*M:GDUR&=,V-iMm&&O\%U.f#lB\YD>QDQqj77upFV<9pEp.=IJ4<gqbrF=pTXl3,kk8[''uu6LV7aO#DiTC9HO/7.5&ab-Mbo=._J&.kVMh(+Vih=s#C)&LM0Oq[MfYDHYD]us\''hMeS-O)/KURgs#ku+>pB!Utq^*B]-At)_K)6,cpDX="_kN^KMnt=KH&H<n<_8*QKEtM-"X&(l</W5a.a:TQM[9&9pOj8W$4b5RP579UH4''C"qns4&$4\?V62??PH4#&s58@''''%a+P#qF_QT$M=71''e]n(,klodM\UgN;Z#&\;@3oVpdP$4''laTRqpQ95$4\?Um.kQ7E=,YA5o!9)%a+Q2q5+mm$MSK9`"ap4%OCf5q"#5d$GlU(''iGAKb4lnNVA5C(qdTN$''eg!h.fAcN0a\E6q"jf1''pf:*FT%47;[TQ">8:*E%a*Guk7rg\poU>,M@''htpaQ"%(&JUKBYduM7uIZM''e0"kq`"C1mJ@Fg''d(_Z\tlLE#ZUO@puocD:X/bZ8c''Ar#FbNL("0Z_,Ulqf77CG-mdIg9clWa]pk&>X''m0l\Sc"H^1("L:pd4dd''m0l\1,''GC$MO@C''ikYOPPB(m?knq6qhk=k''f$++,krDUUD9%$q[NFD''ibV7qg&uX$4`9p,l0,.E=2S-r-B)5$4\?Uiq[p9E=,E-''ibV7qg&uX$4`9oH2#T!p[RtiqsjD@p^Qs0r1j4-phL''kA7T)+;i=GfB^1MQMk?$,OU/N''H&-^%GDfO\F.A/lMn61&d]j)P&c<^U%OCh<pFI''V*X6ptATCn208k/"LtW./rW\=JMis![#kruK,KKZ`q_''Mt"T(df60]Te/0:^ISW9n=6s=YIMdD<;_IhkeVi.=1VNM4r#C)#LM0FkZMfYDHY)DrH*knfO''+"IWpH'',eC^--[Y-c?0ac!K6Ou`jYPP?6qVA5C(;#G,E1("L:pYYc;''p]3=;&*(<pA9.N<XK?2$hrNSB,-"*pDNmO''f67->PH/5WYL*mLAQuG=:4qfqZ%@6$4ce<pnmmD''pT-4r&,9H$4^;89DO)QPmV@)=VY$GqiUaU''j1kRpC$aeqF_QC$MPJ9h\@sT%U8]^q2Q20$ATuD=:4qfqZ%@6$4ce<pXD\JQO<I$prX=.$4^;7rV6C-p.,FHWLC--PmFo*7#>#DMb49P!!i6]4;Cs*qiUaU''j1kRb4j-VB,-"*j8Br42$sgtpQ>;:''nQe"r:Le.$4b5S-2?d@pD3WVq\K(9pD3WUq\Dsua8Dn1.ehip[JShdpF>s:a3FndB1Nb%qm=r[%U8]SpYHY^hY//erWi0I.''PlV7Z1DfA5ER+)YY/qq\m`V+A#C#`r,&p+SXLnageh&bb/BA*Y/)[pQ55K''nZi>qfii6$4ctGpQ,-7''nZi9qfii[$4ctGrrE^l5l)62qkQ@KU^$l!_f<IH''fHC/r"8r0$/>OV@hnm-4SP0Hs8U%`!%/Lc$4ctGpS.Ll''pT,(qg9,:$4ctGpS%DX''pT,#qg9,_$4ctGpM''G?(&KKZD;PO]@V9),=,TkgB&/B=MkQ0-OU/N''H\cj%IZ%frEM/5hMmf[t`3]d[r"8Z7q\0d''\>ZpRYmC-/q]Pg@fEXZKBOHa%Mbh''!hM\"aQ]8#.#eC7_LOk>5MfFYeQ&E*WhYHOR>RCu=&bf<%/er@5T0sDP$4ctGpLF!&''jD"T8bZrpD&)ptquugE#2/nf''fQI0qa(!8pokK=$MhjJ>RL@@9,1Y<q/$7>$4\?Ur;(%@JdVBjrdGS@$4ctGjS>MbJdRqCL)!u$%a+Oq7hq?tqel/P''fZO1,kl"C''pf:)*;C]m?4%/ipK[Ia''po=<>PGl.4;E/L`DRF2$4ctGpT"''P''m^5(;AEOG%U8\&7hq?tq`">U''fcU2r"7CJ''pf8pq6:ZA$4^;7o(d5>R0rhGL_VoW%f:hOW;1BIR0rgiL_X8(%U8\gpeDQN$N#/DZP>J-%OCeupcoR@$N#DK_%g;a%U8[RpcB5b`qq7`''*gTtM_a&)Mu/e7R>[!t&c;`hMt^fW3VN]8iroqj&bfE&:)3N0q]Pe2#?,,j4N"L`qmuMEMi7?0_m>9T"V/]MM>B=LH4''BdrMC;k$4^;8:&0V\H4''P28/5P?%a+Oq7hq?td*EFg$4^;7KLZcD$N%U5oG(dA%a+Q(q5+mm$MRj)VA20"%U8]!q"#5d$N!Cc''k%FZ[@d87''q#Dpqc+A>$4b/P/pe?-(AB''J#l!!GHM^q+-6GC/;0uS8#h]#(rGD9Ype(kcda@$upAp''HEViI".SUsiMe\W*N!T:k#F1.HIE@BQ%U7*NYSI)?pE94_#KsWbcc<#"9-4!R#Aep@D''":eKoCSC#l=`0VhhL4T8O!7YHQt.pfn''u$VA\A#9H3i>&[tI#h]FmpC$c$qA''fg$N,bY?kkd2p[e-B''g2m6>PM:q@hj+nq^O97@LA(k"VkMS%egA+TDDq1Pm[G5r9b:^$MX/dOqg+e%U8]tq4e[i$Mt_<Etr-kN;Ebn@gW_?$i"0,4;F:lpWiL\''q,L-GPjcB4::iSpQ?7S$4^;8#Pj2kRL8f7pEp]E$MtZ8''k.N/qZR^E$4cgpq#pH;(&,K;&c9?;3VV;&&c?EG#$\ZLS4ebGqaUGnq_@tjqfDKCq_Rt4+4#kMT=i8O;##M6&c:u$q^TArDHLOo<Jq,+7.L"&pFXh_p)h,/Y''$[F#S-U?ps&PV(&.\3N0fHaMis"mKDQn6qZMgBMbS2!=^&O2UcXJ?q`6)$!;f7_7e$9TpGsDNMp%p1]s_+fERTj?%?''T"X7Zbq*X7(''?uK5,>Dl1HM"_Dcqk*Up''k7UGGl%d^qeHD!frqp/Mops^?^!SX%a+R!qE,L=$MP,1.2>/VU\GT>6OF>#UA+3RM%t=Dq_UhYBF56lpWH&AQO:e-<>@h-U\GT>6OF>#U>JHUQO<U7q",;7$4b5R0DVI[Q4!@`r@&IJ$D[A3''gi<<qkEhUq"#5d$7n^_BF565pgs:a''m^5]T_kc)6jaDLpc&#*''m^5a''DtlGBaP?6pTF@*''nQeeDZ";c6jaDLpNZM6''nQei4oGg)BaP?6pZQ]6pK*UHg5G\SMt[EQa86gP#l=h""X''ISTSpUD_S!&(Ms?59@urt^pE0\7>Pg^hqZZja-9:rI*fKn!`)QIZD[>lW"n-]?Di7GM:/baYM^=9Z[YEH@q^)N4q^12apHNp/@5nF^Pa.9$M[6>TI<K^QH#"L?Mf=k_Ta5mE"itkgKXZjFhRT`.[r/''I++/usM0t''a%OCd0pG!E[*<qW&!QeC:,C0W''2[,e;Q&_Jp#caMFG''%bMCEIJQF-9Ru#^BDSb]Tk<\;LXK\ZEi\DPgY\I#EK2I"houZ^m!XpD)f@pAc:nd:g$XTEtE`^''/&6JWl"cMlEbL]Sk''nXE0>(#ko8BM>%31d/,,Iq]1SQ7Z7-GM]q)+WdtHM4'')TgJ<teEFc1!FG=mcLMg_[ZYQt`&p^d1t''p]4$j85kl6jaDLpYbi<''p]2''r)OPH$4^;8(&785pM''@6r7q/]pMp-#fEP>!"eLsDNh;48Wh4]_FE2YB+)d''YP#e:_GZP''mFf:#''M[81MXN.efVHb3jMgpS2L''Xa#WJ^oiqqCe\pn\]gpEf\Zq^"]ad/2`*MuWg`O(nUo,\3GFs413+rr>YSE<#t5@NYsVs2nX>s8SCpRK]:IQ&_Jp#caMFG''%bMCEIJQF-9Ru#^BDSb]Tk<[u1OK\ZEi\DPgY\I#EK2I"hq,!$!s0rr>2Vm03Li(X*0b!!)Mgrr<a]o`"mn19gcY''RfWR!!\In#jhkFM1^\:M[3pHQFe75]%I;u>PJ*lVA5C(pD<^!''h&H>qhb''eq6h$+$MtM6V%m_P%U8]Cq!]"e$4csepVHX$''l"''cb4p&S;&+]jqaLKt''h/N?>PKuLPSJfXbPdY?CC1Qopm:gm''m0l\.fJ3=7LBW0pf7-"''m0lHr=fu^$4b5RL&,0lPm[C*rbN<=$4^;86i!JlPm[6erKn=8$4b5R!r>J''KF1odKaN_:0GR%a%U8\Cq3DbK$<mXe$MT8QAef(g%a+Q8qE,L]$MVj?-P`''Wq\K.G''h/N?>PJEuM%uHdpWiL\''q,L(!W;X+CC1Qoq'',Q_(&3CX.f=l''1L=KA/RGjF*r(?a.f=l''qdT:Z=8*CMZAYE:]9kcdE+k/6Ma$''D`f$dRUQ247#eC7cLO"`"McYgWS;XM-pCI!tW/LCc#S()5kkcD9:Vpf0*i=jfNMhpF\d*J9G_pX&=,V-iMm&&MZ+/;f#l(Y$+T(:+93u$s:Mm/V*r#.#+T)WQq[:Y=pBMbhMnGpn`s>>]#A/B?@Z*2O%em7''3r3J(JdV6Xraus:$4ce<pYu"K''nQee5lI\tD$gc:pU''d0''nQdfrE0k-$4\?UEqu^MJdVA_rPTFh$4`9pKDI28E=2SFpC7pX$MOu,VA2]1%U8^&qE,L=$MU#f''h\lDq_S!`q2#i4$MR^p''lXKi>PJ-n/er@5pM<549*u1+1\\obHPLN-pFSE@E!d(Zp\O]_''p]4$gJSbZ$4cqhpVQ^s''p]4$S4FB6$4csepNdUE$4^;7dJ-*E;$s>t#o-!h>B4FX#knu+):&*sc2/VT:IrP(kk?4:#H_%<EmKXLpD*)i&,/$W4Xg%2q\1+^pVciDpWaL+$M\ZF/IMAaq[XG9.L/L_S$T>uT>D\pr7C\u#5;Q?pCH7*Mpl4T3P3bNVmVH)#gQ`M&c5NKr#5k;*''QUa)*=tt&GK$D%_2<epMq"=$N*Bf#Sim;%U8\Tpd>io$EEh,''hF6eEbSMZpDWdYpC[<6rGD9O_?[2D\oQ,T#ko)$pCI!WpH9r!$2YDY%]B&Eq/$lDMu-995`>PRpXY6+pFP1UpEoV_2<t&W+8\h<q[it&$4^;7dJ-*E;$s>t#o-!h>B4FX#`JGDqgnVtloL(&JbL:FMo#Y"<k<=tM[9%lmIq.c2toH`pBg^2*tHHf;YP\Vq]c<4q`+<Z/GD>d#kqg&''_a!LJG4Ni''DEmO?Q]/:Mu*r-K)7V8pEg*/kf1F%M[9%_cRo#Mq_^blq[+GB&W:bqK<PUkkkM@VFqs`rpB(W"Q^4TlP`(<SQ&#_?":&k*BT74o;N#=<HtQW]:mst6#lA*.''`09TJGXfi''Dj0O?h[.d(A.>_+8[Ah/k8qpqZo^VpG;P$dd-W7*qp8)U+MR@#S&?Y[.m0,`/CL3Rm[PV)N0Ks"fdlSW?.:^Oc#E[#knH,DiS^pGDf[`C4LPLBq8^t?&K!c2(^!K9`%<C,PO#:pD8bMgmIgN#l>MEGsuXj<Jq,N@*A2nSFPqf%a*Guk7rg\poU>,M@''jfanT`I&J[#-qs!iR(&''0_88k!(Yc483+3j`8pTXqs",kR'']Z.q:WpYf>"cN*XD!k0I>/j%-qZMf_qst$h*''QUa)*=tt&GK$D%a*W%EYU(<q[rR2*r"IcD>]Xq&bl;%+o=2&qf?!=4[U=d7e[0''qe>pt#=<"3aN:]se/o0)pX/b(("''W_.3r.g6q1A-mI.^8cl[)u#o3=O./O>J4o72*q[`E9+4#kVUohE<<;.O2D>XqA&bgqT)@''um>GOfJ#S(#3_Y?5.h6^?63EJj;qZh?+_oSM2pC&/<S,4<CpN69lZ7,T&q[lj*D''"W45PG=R]P7`H"[Dm$Mi7H:pf*00o(t68"hKrm.(5''.@gER.phoiO(&Ll++8ZZF[J=\;U\bYu%Jr0_nbWn''%egA*=806?T*k<pqp6)PD>+tC4SNF]I/>)]0DfB(q[\V^,$%G89F1AI#-H7mZe13/Mpjt_q[Ei/*K0eEMZno]MKau&#lAT8*W%bhC*!kPq#L2N''qbmD>PE779,71]p\sn!r07/]#Aep@D''":eOGnaN#l=`0VhhL4T8O!7YHQt.pal0fpCRW?qqCehpn\]b^]p^''RACskMjoTjM$W_YEK+XjG`)h[?=,B.8j=r[r.bMnJ:MJXJr>>AJW:$5":(i\Y)/d/#i`%kiue&nh?OPb$i&$BKGF5)lisJVQDkpiMhd1TL^<_X#B,W9NH^:XMem`fB3;*+RmW)>qe#^Mq_.hjqf2?Uq_e+N+75!2Y/B''$SLrr]Mte:h\;Q:B&be>E"[k^3qZZj+2"gSmpG(=cpCeV>MnE#^9aD5mpZqPn''psH5s8Vlkk_oK@n,sR6IfKHB#OmEHs7H''ts8V`d&HDe)#OmqD*fHJNPa@^BfCp0upNu[Bq`Kf6+8aXd.JMEj4,`ifr*KV66Yuf&Zc8r%s8U\2=9q_&!&sne@fHF7!D):m\&9>G[VFQ+bm4gRXnX4:hA,np#Q#7?./.''B5fW6d''d!,)q]>XI#;UU.4obP`rcnJCnc=QViu[q+#PT\rYWa*tMcjt/:^Hffq]PiSpE94_#KaKbb06Me;''$5F&beWY(&90Q)?!/4s8TcV5lUg9mXG39eqh-A!)O8Z*rc3T\''L!4!#=3.rr<*a>lOdDdkh"("XRR_rr<b%iVrl[Xi?;!!.1]Vs8V"n#ljr!@mC4ts7h''>s8W&i)#sX/''/T[grp=J#s7$-5MuWhPoJqj0s7b(Irr<%U=TAF!]sI_=!KX;]s8DP2rr<,[HiO-GeNj-7#k#M.s8T9-rr<<>_?^YKSG*Nf\J>"PpF>pJpC-d.q[E5Bq^VKdq[Wpjq[iuApC$dDpqmi)G^XXPD@#8_"hMCD\;SLf^kemo[UHINSmmUZMcX[p;[E8Bqi$I-eGC_RMu@Me.Z95ZLt:8RKDX6o7uR8qpbVY.pI>CUQ''m`#Ml;Q.Di8`D%OCdQpYHYZL^0rGQDkpiMiim^L^<_X#B,W9NH^9d1hUGW+8k[''+SS;0_oVQeqh"Q%Mu-ZOjS)@B@/Da<"V1F`me>!Aqrd\lpZM8_pBg^/pXf9\qq(]Vq[!K;AG<;%iYCeVQ3I9g&ic-Us3DD?rr<YOD#aOelQ"*+V2MLB\YBFFpB1YSLi%EdMh[/is8<u1rr<-/70!;[iXGhe)YCZJq^2(Us8VoNE;onLB_;<)DBb2B!(<.^MrXj;Fi\V''s/JLq"onV^0l$^g61tH]s44Tprr=ppSH&Vh:h#?-MfXSeIgCH!%L''D(NKU<"rr<qn22hJ7''.japs8''p[rr<^hGlRfgf?=O#s(?+8s8SctCl:(K!0M2krr?5d2#mSMOCJ7h0Pnu-,`;g9pTaPp(AVhE.f>#+7:fk!=_t%I*r)i6.f>#+7:]e!=_t%I*r)i6.f@3iqZP59pBVhiMnZ$ta/;nUCt"<eMmf@m`X"p:%a*2pD&*#N#Aep@D''":eNf8OL#l=`0VhhL4T8O!7YHQt.MtlN1\GV6Y.Z95\D>Pf@Mu88*[J5CY%U7*NYSI)?pE94_#KsWbcc<#"9-4#2pE97O#PSTtchdqg6Ao#d@o!B`#7gJ9p_rsR(''":DK@g/''PC+hZs#^6Cs8POg`;fj1_c6X9Au/o8s#*!@rrDgtT`5$0bfp(e7Pcn$!;Q6)rr@QV4oYMpaZ0>#QoS:K!6-q<s8N>DW#tn<r)=E''$MYV8&J^uH%ehOL)u04D4UV)XqiV]kEq^UO2"tbZDtb+C4SND.MuNcaMLPU*kSB!S!)e0@s8UUn%0$;lq:sK!rr=OhCr;1SMiWdXMN\>C+pO''PN.Hn7MuWh9[KQX1qIf<ts6!,+s8V`;SH&WUjs:!,_ZE[7!''Nris8T.62#dP"b=)C1S-SPA#lA<4*r@ekEZYdZpVQ\r''k7UN!9r0=Gnp>Z![aiMe>]jnMp%$>Mi`g[#l>eMNd-M6MgUH_s5Wf@s8VsQrr<#^_2A9mp1_,<s6Yc(s8ULaPlC_=I_,RZ]T#bf!#n&es8T+2A;^`j3@=V(qaLBOnG<4[3qkW)pAt"S+,g.!4t[QLs7DH?rr=ohY5eOe7r82*.r%6R%es0$)u04D4UV)XqiV]kE;(CM2YUt\D>+tC4SND.Mm8&AK<5F(#L9*B`4r6f<$)!^pF>u_#PT2rf_[*=qZr*Z;KZeO^d=eLM[92nq]>Vkqf3bgb4hb-8JU]is8SS=5l^ke._u)aO:Yn$s3;Xjs8Tk&T)\hti_KORZc->Ps3Ea!rr>8RY5\KC\5N>,EoG1@!&3ZKrr>;*2ZEbN(.KD@4@^.d!.@2\s8Uf^9`G)]]eKKdL.JZms8UD*=H!4ZeTr58s6hdls8UpN=TAEfDOCJ(fU%Wu!#S-Es8UG8,l[iQ(XW3^b&r;o#ljp3(5MqiS*>4us,:mSs8PBH+TMI-V1JXH@l-7Hs,:-2rrAe:`r?%3`*30@ANQdh!-@^_rrBV>INOLJ!(``rs8VYY@/g3k"Q''1YjL,-i!&?BWrr<FKI/a0KY[[V4$ZFo%!!.8!rr<PP7#V''F#q:+Ws8W%ZAH2]0Y#bQ&!N7^Ps8TmQrr<;Fq#CBneqj>+#849@s8;bkrr</Q#ljqrOmN)J!^[=qs7ihZrr<''sm/R+\i.V+1!*;kos6#k^#lOPn)@$cHPPB"i''brq?qsHogpF6D=Dk");WLq$Lc2?2f.ef>):BpP3iTg.cpEhlSq^`ie(^BjW5!So^40AAkpJE"B>PHM>6ks8?X7lo87uLShBho#h#GmfPV]M(\O,B3Y#knH,DiS^pGDc_`@qRS>rM''$/pT=b'':V1PkM[9%mlh:n`3;59dpCd?E*tEepB(rtRpDN]8#Jm3V?<qSt<?M)JqZ7N$#/eAg;BPd&#E)cHG+N@QpGJfPI$Al@Mn]Pl4U6nlI*><^WMZH*Mo>tHAa]FG*r@J^;>VjAD>,La%[4m,NtqC3#*@BNZg*J$MnE_]</XdnFs(r6qZ_0Hq\sNP:Q,)TMu+ps"#K[JMt]u)p>D200F7P&#)59=?mU^bMc6j<aG\''BVsg2_nXg!Z.&Y##Mt[A\pECs?qa:5aqa"om>948"p_3BV''n^+HC,:c?Me&H<XG`d=QEHMZpH-+nWg2S6MtN#&"#eO''*K0e@M_dhZqZ[?#)[;86XJ=(!]Sih7Mf"ApJV.K_#l@%m"[mNI?Ah715e?gmpJHkC3/ce<O7rte%[m)Ep_jmA$4crNpItAg(&n7JL8b+P&:%CXs7)0.s8VA''+TMK09[*P:mrL;bs6d3Ms8VDDc2[h0jPBk9mi*MO!"iFGrr<\-SGrR$ZS_[^&<+m6!"hoKrr<aS1EZKe"TJH*73@Hf!!N5$rr<$_qYpNu^,>oj!-X/(s8DO]J-Z,SW^uj`!''NRIs8UES$NC*A^]5GU!"Ka\MuNb\pItSe!9u`I!"@R&rr<+_lj3Uk''H#@"!!EHIMuNd#!]pA]jbP\ls8I"c"onVldObFuru4B+s8Gb-s8W,f^An64=,r4=s7RKlMuWhP.mj79!5lMMs8$!%rr<''`6N@)X=Hrgc!g5kLs80GYrr<0N"98E">@da6$`AOTs8D:Vrr<?S56(Z_rG_c:#ASaHrr<9/J-br_#QFd-;n2l-`5j_6!''72Ps8SuUcN!pIl9>7J]bSEas1DkZs8T<mkl:[ciQD0#6K-,fs1KI3rr>n;2''*8)g@rGYV%l/f-2Sh^,t9N6qqq[:9;Q.5HjEp]Ck.%Q*eK<(N.HupqZI/%LouT,M[8=GYN$`!8-aR"K8P5<#\J[S]-$dYf`r#DpQt[E(&%RppF>t-pM''@6r+ZH5*''?,2+,`mfCp@Q]?b_0<M[9%h#=rX.WN!"q_B09bg@rGYV%l/''#-*uTW?.:^Oc#E[#knH,DiSLjGDc_`B4j"B5=R9Pqqq];\7+PAWf*[5Ulu)O#CVG]MLgZkAqH>\+8<A"#7au4Ik;BkY@li9T8Tk3ViD&W":''R9K8G;?#^:]`W?:phpM''@6r7q/]pMgEJpD3N)F;:PX%\3=!(8M9Ip@gcFneIu.%a)idLDB\urr@pJH!^LNLUN!<!6gn)rr@U]@/g4?p-8QWr<^:]MuNd3`T7(!gjfD)!-."[s8SdH+TDFj:uho^s7h+0rr<B1W;lm#%?cYL!#^dEs8Ub8E!?7A=_icls*.eMrr=XiirB%fBJTSf!3OcNs(gfe#lal)!D*7jrPdb"s8P_fi;`h+rjZ\rs8UXGT`>&2"^n4F*r)Q.,6n_Q8GP(:[M=^HKlqi`#ko91"eN)gYD]ZDpF-(AMm0"ks8SQa>`1n+:1.Qi#WMW]q^M9jq`B`1LAYD:qkEg7Mi7>(pD`k$"eDlkSth40Mm\1q@0d?RpTO=!(&JL8jSL3\pKRQ`LOTJL5B_]sMen<.P$O+SRemQuXFI"!Sr<=QMlZRQYjD_j-MSG^Q)9S%OGfKaWHjS]#d!b''"^Rm:Q>qgUMg8fX=pPUBpt#7X(&YT=&blY:q_\1Yq_*kc8Fh]92>^mAq[rV5Mi7<Ar!85T2>:VT1Q.1:+H,tMpL+48q_S"SpokM23;WmRN<Um0#5\I[Mb(XAqZZj7Mu*\Q;i?S."oG0TpB:4.pAg,0c<-"jpBCd2,kq*/*>PFY%OA"I?krP[ln\;c*qpt=ki@]s+pe&c#)>NXAP%eTMdNuPac!p5[(;X"Od(g;M[57*qZ-@jpQLMnpC[<LMi7HEpBUS."oA[D@Ps''2#S):_!7.9crrFD!TG@M,OIAW<s5grds8TsU5QCbm6e71qs,81gMuWg)!<E-"BNNO[s/,errrBV6+,g.![MK:/rr?1dI/a1<Gm"''H$p8A+!1S`A#lal*l+"G,s)M/_MuWhV@oWL.d-,u`s8VmdHN4#L#CujSb\I:[s6(!os8T$X<f77`s/0jMs8U2"NW/u"ks#+I4Vkp7!''SQNrr=59L]7?''1Gf%2D.&#=rr?'';h#@@k''/Tpns*8gKrr@!(bl7\km1,&4pCI1OMi7W8SLb$M%PdaTpAbqdrr?@mQN.!-^V9^J6B.*,s-*=*rr<n:6jWemGsreS!0`H`MuNcmoQpF0Mi7HCrrE@U#)iN]NILa(s*#,5MuWg?m**t;"oeQq*3B/?2WId:s5>ais8UKjbuOfDXJbQ2s8UhU&0LrPlXQ6=s8U3RCB"8E^]=E7ad1&,#ljpi%CuN=niM=#s1LEVs8UgX_Z0Y,KqeSI7e[8is.F[ErrA8hp)j;7BLjn:rr>IH%0$;H]-I=U.q&Y^!"[''q#lal?hDG64#Z0X_s4IL?rr@06;ucm\N6_J''p5&kTs8V&1PlLdU1D9`f^Qh(as6"cEs8T7h:l>Tcs8UU7!iu>$''dWeY!!:Aarr<,g<rW.#,/+!V"TUk2rr<dm8W3TK48N=as6Aq"rr=(3^5N!kNt.P8rr?d''B`A''01I-lu!-uf(#S&rj^%lmfs8Odu^Pi-lcb0AZs)62Ms8W"?_Z0XejI?MUs8PT>s8V4Tbl7["4fjSA!!-norr<j_X9JV("=$qH!(93,rr<U*g&D%H5CEJ2@@<RBrr>BYKT#j10OK5-s3_K-MuWgnmb!Hts3Rq&s8V+2%fcR]2FRTFaa2tHs5;O-#ljqbP4JYQn+R1hs&$`Vrr>N..#\-*I.tqd!%[;Zs8VMq"9ni*S(S/Ks1/%Ws8UgSs8W,ARq2R!pdG,]s)IPB#ljr(OM:bpjeP0A!XiSXMi7<Gs8J/ue;FM1!"F@_rr=:8\GlOLk:?Q4%]D,^!''iffrr=7@D$^.A*L=kJ!"Xm,rrBd5_#OG?>j[IL!.s3*s8U"Uir8uqaKu-N!(:%#rr=oqV#LE=M7iig6P-&Of8KY/LrEd%s-J7hrr?FfT`>%.Isd.[%U7-NN"u55pEjM=pF#LqpDb64hf-%Wc2[g^7KEGg.UrJYs7j/*rr<Cs!/o)-S`8iijnfTD1G7^5#E/ImpHGU8q\9B/?<L''''<3u3<%TrI&rrH''M9GRR-7i9bU!(T[Mrr>G>(B4@Fh/NAo,e4\Krr=.I[Yt.c-qm85s7L5*MuWh)P-BlEs+"8ns8R4'',6.\8<&t!YP/Q5Ws0f]k#ljp>+TDTE!+[Hnrr>&n"TJKDfTcC9QALQYrrD)-oS`_LGq^B@s0/)<rr>^<i;`hJ@>^!Cs/%sOMuWh!\mGF:o,Hons1\fAs8U9f''F=^=0bsoh)Z=mS)@$cM,POb)D&#/32;8<FqmH/hq/$j.r\`F7pB(1K''g)CPgBJ-QpQPDk(&SC8Aioa!0Df?CpLa<BdJ(ZTC>8W#k6L`rg\Ya\#mLn;&bhaiC)%iur!!9I$4ckiqTSc4''p]4$gJSbZ$68q''r9tFT$MQ%Jn.dYb%f"*@PkahbQ4!AV8/6(NroEuA''eg!h.fAcN0a\Ec=Sa?=o+dPupRFbhE!lQ\r)OP2$EEl*''iYMMplP=CF;6_Ar=/RU''fcU2pNlYWpokK=$MhjJ>RLDhpCS-#$4\?VI/''o\>mgDN"C)<2XnNDB?O@;<s8$2H''fQKtA"j]"$4cgpqDe8S''jV1Bb62&Wr&O]E''fua4pNlYWpokK=$MhjJ>RLFe9,1kB%a+Q*q6^s''$MREr+r)R7pO)]I''e9V$,kombobEc"FSuU_:($_SpOj8W$4ctGpJLao''p]4$(IJoq$4ctGpJCYX''p]4$&k3U?$4ce<peCRl''p]4(])5;<4::iSpQ?7S$4^;7o_A(oQ3tN*''k.N/qZR^E$4b5R2#4NoQ3tP.bS<SS%U8]!q"5Af$MV73obD6L%a+R8q?dsW$N!s"%M`sj[f**=7LJl>qN;S9$4^;8<;He6FUF.)''laTX=SE:?E=2HGr;dXK$4b5RRedR1E=2SFpC7pX$F]o8''h/Q)2>Yc:H3t-dpg<kl''m^5]$;VCV$N!s"%M`sjpTj_u''l+-db4qG%%M`sjqcNS&''laShrMpZ&$GQ?r''p]1:>PI[`[hY29pLR,8E=2SFpC7pX$MUk)!>TAW%a+R8q@XN_$N!s"%M`sj[f*BE7LK#MqUZHV$4^;7*VrJF9a^VkqdpR_$N!s"%M`sjpTj_u''l+-d,kn3Y''rMB]pNdRQ$4b5RRJIF/E=2SFpC7pX$MR*i!Ym0lpO)]I''e9Xc.JQ[RFUAU(pc80T''m0kE:DIjVqcNS&''laRmr>68E$MQLRKG@8i%a+R''pEp\*$MSrB&JZf''`V8=+E=1t)HPLZ1%OCg0q>(hK$7nsfE=2R]r<sE9$MQLRKG@8i%eo5`L\_,gFUJ$!r>cW-$MSW9&J^''.%ek;Eh>''GRFUBl$'',?N7q]LG)NsbV)bS?3H%egA+2tna9rr?^E-jK_Oh=2ils5W[Ss8US`56(ZP%8d*)dZ\d2#l>&fp%Ks11"bdc''-FuI[sY8pTQuiLQt6Qt+U35d.f0_@qa?>Jqe#^Mq_.hjqf2?Uq_e+N+75!2Y/B''$SL`f[Mt\a[Mi6=JMi7<gqm_QBq[rQ`MZs.\rg8rMs7)Rhs8W&P,ldo9PPG1Xr7bc^s7F[6#ljp4YiGuu>PGN"6kri3pC-cr''fZG,b?_#?M[91o/,KqU48V/#qZQX2+3KMHT"i8N63iGKs7O]/s8W)A`rH)49cX35rNc"os7YKC#ljpjJOi?3!&N$&#64_kAnM)CpA#L(s6C+(s8Vs#lMpnJ]&JWKMeJf7Zj?OT#)t5!;"l2mrr@-67Z79H;$oMe!$q,Rrr=>cE;oo*%?Uqr!-.!,cN!p>6PKb)!!+IKrr<@(8,iPhPsG?L$*/</rr<B,5m[8&#7gJ9peppq''p]4$Hi(\q1^X^spW<4''''p]4$@R_)7$N#t_!#8WD%a+Q6q6^s''$7Gbf''fZO1,kq95D&&?D<;[sU?4%2:$ht\9q%Z%"qt'']J''oW+l1^.:e!->+4s8Qb<0E2$^a)(eUkdeP0s13O9s8V*p"TSMQ''YOJGc@u7Us8U/1Y)?/oB&nlJMkc<0OpJW(H&$X$GDfL[FIS2jMuNc2U=fJG("9Vk!$%Zarr>^+2ZEb2KG+:bbGi#O!">#=rr@>_>lOeul0XE/!6Df%#kr`D+nmYeBDZB>*r@ekEZP]ppVQ\r''k7T.pB;</3@=V(qaDTbs8QIj2?*YR>GhH#R%[db!/Rjgs8VG64TGGm*VBC3iu^Vfs4,[''s8UAUac$3!a;uaf;8Qr+Ml2K.Ni%sF\d*M9G_pX&<f;''hMlhp;!&1kHrr<eqUAk35UgX3&9F:Xs!&1@+rrA9N<;uq+@%RAu>KmZX!,>&MMuNdP;],l89.9N24WY+-$i$q%";Q%dq^D><''g2p$oD=[cMuWf6"b?UQF/]0>s(G[<rrBRLJH,Z5\\S7F\pD0ls5Ojps8UXa_#OG[L&d/3s2[^GMc%?''jGTpoUQ247#eC7dLNnZ"McPaXRu=D,rr=aI_#FBLe%kt`*2*B4!)($krr=a+!<3&BWPJN6%$EmU!-uLJrrAeX^l/3maLjbDpO)i]pFlDVqe5jJq_\1j*Y)EL=8>6!FUJ!pq`ts,$B"Q](&L!<qZ6R_+,g1!?p6jU!)Zt9s8SI[5lUh?YX&6gm!V/!s106Os8V+$5l^l7ec>aMc=OeLs8U.]5`8LVB&nlJMkc<0OpJW(H&$X$GDfL[FIS2jMuNc2[fHF.($372!$%e"rr>_!_#FBgW.=mJPXC!$!"32Mrr?9J!<3%68:ZWu!2EHm#kpt?pA6uo%OCf!q6^s''$MPbB//>#h%OCf8q"5Af$MPG8jV=a%%f?q5B)&SF>mbiP8emX!%f&"&"VgcL''h\lRq`4TD''eg!h.fAcN0a\Ec`uG5QpokKP$NB,a58>jZpF?+1''ep%*pfRC0pokKP$N7j><Y\O?Wq]d5<!j-0$i%O69,2a[pE9@N''f67->PL/QM\UOFpBO/&=:4qfqZ%@6$4^tJBE&#<f?b94!(SYBrr>Q*N;ilGCIJ1&&A+b<!$l/gMuNc!9[&Fp!%>01GDg<rs8RUQ*<6%]4!O_)PuKgEs,t=Ws8TOC64!Vk@O::Brr?RVW;ciXZ6oSP-.uE#!2ou4MuNe;[RQ2T!-tVus8T&%+TDF7<.+`GSbh9&s8SrZoS`bLagtgYs773Ys8Th=Y5eOFc.!%!!&55lq^)2UpE^%Sb4f9>9,1/.pIbEX''fua4>PBB<M\SqnqdTG@''k%FZb4ku4KGB.I>6KWepDs;4Y!;t%]Dqnn^]=*]Mu/V9![>D[q`9Z4QiI$?5QLO1MnK&iDEn1*pO)u@?,-FTqbi@;rrCTb!!W*RrrNZq!#9ee%OCg=qIgUi$><3MKF1odKaKm>I2,KapG_i"''i,/HpZ_L:qF_QL$N"H6*>O;9pN-''@''o*,+pNlW!q25u6$D[M4''oiXu+Ft8g$MP^f''p&b4pC$c/qGS,T$MVjD=;?`$qa''s!''oWK._\J.<%U8^<q3)P>$N"K6g(fbXp]L9u''pAuA^D2t?%a+O^qFD@$$N&*aWXAKhrO!@i$MSrB&JZf''%OCdVq1occ$N&*aWX?H<T+t*.pG_i"''i,/Hb4gG^[2#_LpRV77''e0RbI.n3f.gcb3pE02''''rq\Wr>-2D$MQLRKG@8i%[6XbqFD@$$N&*aWX>6o%M^`+%OCdWq1occ$N&*aWXAJ8qdU@@$MO@C''ikYOPP8\b[2#_LT)=<X1("L:pE98(''rq]9(do*=$MO@C''ikYOr"7BR8/8-3qp#tW$MRs*D\Y/;%f?pdq1occ$N&*aWXAK)qeR!O$4ctGOnlC"Ws\T23#+=Y%f?p#q"5B&$MRjg''jD"TpC$`IqFD@$$N&*aWXAWCr8AAQ$MX/dOqg+e%U8[Vq1occ$N&*aWXAJ8qdU@M$B4ic''k7R\pC$_]q5Y72$N"`=:DGu!p[e-B''g2m6>PCDXobFM7pD$(2@LA(k"VkMS%a+OHqFD@$$N&*aWXAL!rQ>pB$D[A3''gi<<qkEg6q1occ$N&*aWX<hEC_^Uj%a+Nhq5Y72$MU1k3>FjfU\GT>6OF>#U>,J9''rq[f3u)E9%a+O[qFD@$$N&*aWXAJ8ra-C0$4^;7IJJ[6WXAXK(9.`:#5s>mCC1QopOi:B''rq]9'')g&i7LBW0pH/0C''rq]:$N0r>CC1Q8pQe;aQO<J2psTsG$4\?U@n.9#$MudVFVSTt%U8[`7hq?tT(t2X71''P%g@knD''pf9LpurN.$4\fj!2TS!rrM7bg_Khh!bGd>!*hK[rr=..PlC_.D:JRc9E\OWrr>3dUl56Q-;RnHs508QMuWgmAY=t]s1&<-s8SEf;ZHdK]l=#ON$Y4us3P!6#ljqjZ7Z+VpSMR&!$G7Rs8Rhj%K?DF`i/n;#EKc,rr>!.!WN-2mb%O>..''h1!"LV^rr=l1WrE&<"eu"s+VmQIs7''-Grr<i74TGHR5<=`&s1^8MM_"\''2uioqR=P>;lgk,Vs7F<]MhD$0!,V`9s7#hJrr<)=5R@Ai,jRkus)%h3rr<p/J,]KS"el2#!70Lurr>@QIfBE;P-Frd:,T\BrrBj=6AtjD>^lPLs4O&urr=kbdf9?u`*30@*^S$M!$1uPrr=*cgA_-mT"+e#1(RWJrr>0[15l/4L5spds/"Horr?&=.0''<],i4IZs(9YlMuWgRMHKoYX%"B7s88^Es8Q.[ed2<Us*d*1s5nk:rr@o2C5W6*qa''s;pZrXp!&L_err=*SH2dj`;Y''hf,aO5c!%qkqrr<FpRfEEN9[*P:i3P6]MuWh''<WrI&^8@k/s6!%0s8T%_J,fQ(KjY2ds6KW&s8ViH(B4@SD:8IaN19#1!#ZXjrr<:=4pCrd-^B;`!"6(brr=3r@/g36\''P''S-:M>B!#''Y4rr<a,cN!q7@0Z`3"$LW''s7Tq8MuWh<;=''5@s1GT:s8O5DK)bkdZ[i)UlnH0Rs8;6a#ljqp*l%^T$"uU(s85]Gs8U`R4oYKu''0uTtRuW1%!#aP,rr<<_a9DSDS`9JF!&>nprrBflL&V-4F[1lb!0oKnMuNcGqVhJSjo@aJ!%)>/s8V0QJH#Tb7r82*''i*K_!#SFnrr<VBAH)WTje@\5!%oKq#lam=-E-tEXRnRR!))!Is8S)e`rH''p$\eW\Xn6u?s/@)fs8Rl4KH>1.*!ZtrpbDTP''p]4$?2SFP2$sgtp^d1>''p]4$(&TBn=pbafq#gG0(&Z)K%0$?Wr2^,&rac12s8E[l<f@"XN,blm?Aj_F"onVR@rD>Hp4*/Cs8AINs8Ur+!$;1?rIg]!s8W,jq#:<o"9/?#n,GHK!!)Nh#ljqdLbeu1!KMhks8RrS`r?#Q(tATcqtf7Trr<JlHN4$DCBOS:"l6Kas8Nqdrr<NO!/h-_!0-,Srr<uUR/[._AnM&C249mTpKmn!AGY3hrrJMk+TDK-F*%Qqq_S!7(0UtCs4*.Ls8V^k5l^l`EB=."i2XR6s8W%NS;[FIs7?$c!!!-#s8VQf3r]0[nGijps5f%lrr<([KT#m1M>bHo!#-:"s8Vumi<B5]%-`*<s8?^8rr<5YZN''t)(tJWd%Nkb0#lamak%=Vn)]>+E!)R9>rr=pERNM9)s8Lg[0F.UY(AH2U!C6l1MuNcmqVqE:Mi7H8rrE5#p5AtMk>r#jrkJn0MuWg?oXk>;b4phf-P\*<pO)]I''e9X1p];1M$4\?UgA,Y%E=2R]r<sE9$MQLRKG@8i%[6X4pWaNJnb3Xmnb5''=%JLJ4U]#$6rrDe3)N4Xqc&h''9"eLsDNh;48Wh4]_FE2YB+)d''YP#e:_GZP''mFf:#''M[81MXN.efVHb3jMgpS2L''[eZ)94;GrrE$Xe;K7Z&c<`/"V)gQ&,4Nf<XKuDH56<1/GfSI8KWljs''/&frr?"OhuE_D8Cd_?MRCA%s7KKE#ljqL)IEIDS/5Q:Ss5M#T8NuTT7(m)Ed;FBDi8\"<h]kE<s?fjW.h^=#i<+na1#r`>T\?OIu/Q-#lalC$Ng>.30UcSrr@!d[/U+1f>@Of=`EO''!(/O[rr=''DAH)X?@;cGK*X6puA9(e1/W5#''Lsu_)rW\=JMi`j[#kruK--,l_*Y.oPppBl1''laTX=SE:?E=2Tar%SpK$MX/dOqg+epF>qU''m0in>PM:r"r27fO&$L1$N!s"%M`sj[6k[<$B4ic''k7R\pC$b\qAL*$$N-t&ZP>S0p[e-B''g2ou2Y\(''FUAU_pgEq,''m0jm:DJKhqapZi''k.N/qZR^E$4ce<ZhO>34::iSpQ?7S$GlJZ''laQj>PIpgD\[7!<)46<$B4ic''k7R\pC">%q\;4#p[e-B''g2o?pTPBP$L.;-''m0in>PM:qqA",[/5I"#$<0e9@LA(k"VkMS%[6[8q?.OU$:ark''hSfC,ksIs6kshOqe?!>''lOEhr"8[8pokK=$4\?Ur:mf;:Q&1l>$-]\Lm<FY#l?0!#,H@(I#DnKqnNI6!nL<E-6Dn.Mq?(8pCR].)[:soFEp?6<JtgeMm&&Sc&T>t#fDo2p78t8MsQAg8^&WA#l?RXKGE:K\^J''fEap/K@<HckIgB81"_NFAM0jj\%\<?YF;<Pg]<J?UUIE:K^Pf+M[$JCt#[@$:"`/O-JqAmdG)D`S+8@&W*^p<I_-Ed,M[91p.Jj\R2u>Amq\/]D+0,*?''iYMMT(k>@`t^[o>@qYIF4!^S=,UmQ@XqU*#eTsI"fe&dPa%(3TT"8K+8d>W*mk4q<P!4rM[9%lmIq1d2to'']pCmED+)LjZ''gu<Ro''O''8dF#Qq-mr4f73<"DpX/b(''i>=<pB_R*Md(49<=&1$Wg8sM*gDSFMNru''pB1_>NbFDrM[2.PB/:Y-nb40C#H_%<EmKXLpD*)i&,/$W4Xg%2q\1+^,kmtn''iKs/VL-_sq\f[(q\\?UpD]"rpGM4.pIt<N0(\rs+8Zk40KO[[''aXOP#+a/>VSS/rd^Ddm5^F_+*tD-Ab4nLB`/CL3Rm[PV)?tce(c0nC)iOSNM_-*1qb2qJs1fAerr<H*V>pS;TL&SX(<7a$s4!''=#ljq/4#[-=`W+Wk!)*X7s8Sq]^]j`<)jD]L!#8:1rr=)@8,iQ%n>$!`)s?_j!#5@5rr=oqjo>A=\3Bom1@0u"s8C[lrr=ko?Af*h!&Cm&rrAd@m\9GOXT/=Ld]g=_s2iFc+92AX2#`F5s2/2+s8VWeXT/<[:a#f<[,n%^s7lYIrr<i[<<*!r:a,i=)`o:&rr=+T4,_[[na)/>oD?ZFCMj+Od7*-rs8!uEs8V3;2#mUUgrBBoqT(Gl!!!>As8VqBVZ-Vr)p\K`n>etW!!A3jrr<^Kbl7YRN''mUF6d_q6!%38Err<Y6<rW."5_K(:&6=UFrr<7]`rH)1Xq^m9"!+]Is7K7U#S(SCZhQp''<!mI>>8>GA\tlLE#l?%U1TtHN*hS@nNMhdBpB1_PLkU_<M[40MQDu&&XSX.;QNq3?>bjoK#l>>cq[iW`q_I=2''DEIg%Vb[Dpd>ir$>fWE(!_`KUoqK=<;.O1dKce<QDkpiMiim^L^<_X#B,W9NH^9d1hUGW+8Zu^BYdrL8;dcN''e0"kq`"C-k5,hd*$5Y9pS[es(&J".,u=Dj+,bf1L5^Tfp\kAQ6@;6SMcbmJUjBHTq]5sA+mhbn%>tMd/a;s&62*r%pB:@H+!CH,''p74T\''0cPMlpNR3=$*?pSW*JV[=R@H53@c%ei?b4SN>#W!`7qH560-lLtGU8KWlj!&V)Ks8Vg_B`A&bI.%%7mtpo@!%07F#lalCd,t?.''1fJ6rr>9@_#OEpmM5a%5L]E-s6o@(Xc''ZHrr<t:r;Qa.fi\7S.96TO!%&%:#lanB#3Z<ls1VBMs8S\/hZ*WI;CqkJk5RRDs66M-s8W!4LB%;<aL(sI)^V6Ys6K;>rr?2!.0''=n&"NY"F@+=[s8SBR@#P''b\,Q7(s19MA"onVT"''#:#*u<$!s3,cBrr<VLT`>&0,M7qO%>uZ)C`s)Y*X8.CZD>3ml&2!"N^=$KrW\70Mh[.C#lB8K,u=78*Y("$VtWLmX9oF`pHA7*''s.fQpGM\+pG!E[*<qT%$K=eS3/dN.Mn8W_Mq3g%GcYDN[B#:tMk>q-!#"\Is8W%Q/H5\^[6Xclq`%FP!"`<T#lal>ek#f@''BPkjrr=*(2#mTC5''[)-.oL?ds*ih7rr??/Ul56Q/$U@Xrr<s5i;WcgF[,m+.K98F!%0/a#lanDS)stUs0o%^s8S:68H8_cK\ZV-mu5Qls6F"$s8W#qZN''sg7:?,q(n7E&s6?>?rr?LT,ldnk&7ke@E;<TAs8SB^W/L]U\q!-Is2=i:"onVVTa(Ms(m/M3s37Jtrr<LJm/R+''L1ZA@-&XQKM>IJ_pDX<q]W@mRM[7jrs8UP+aT);-aZ+?rBhog&qZ>pbgPoW`s8UP(1]RKr]-@:ToZYS[s3F*i+#Ah''XFm__%PmdjneM$8KX1=cpDB-rpCY`TH"U;lInCeN-.3"BY^fkiB6cuhK_S@YqeTj@"8b.V7''\''3Dtc''B_=et/a`=@jUp[%nXc(.(pC/RXq^!9nqs4!-pL=r^pDZa!>5KH>>"JN0cMO=?Ck.%Q*eK<(N.HupqZI/%LouT,M[8=GYN$]7A,!A*6l!n`=o/a,#ub&!8R9X/n[[)o+8:oq<YbDH#GmfPV]M(\O,B3Y#knH,DiSgsGDc_`B4j"B+9u>u?)LDT#l>;dq[r]eq`Np9"SWcUb)<Nr^W$OG#>/0+735KfBVBs`#l>nP0]l+(./,[beFsUt%U8\7pd>j"$MT[*(&n7<\mGC:"OoF2!!4%nrr<6J<$)&>#E-Z]rr<@[,ldoBdk^q''"SRZOs8H,b#bq%t"_X3>P&lOUMfVsKA7<YeVbN''Tq\1RX&c4Ze4QH;ApDG''qMm8kg`X"m98m5Oi*`e24Tn''KUq]uFulVR=#pG_?dpCeSX0))aJ8JT1%VJr"m#ko5AJbL!;gA;hI#l?J2+o=t17d))k1`sSm]qMX.#`rrcMi7>!qg=<[,3+RbH!>33?Af(W@*A2nSFPqf%OCeL1DTriq5V71s7'')Srr<8''XoAA2<Dsutrr<M.Xd8te)HB_#Rf<?p<C$Tan5WEe!",aAs8V@a>)WF\mT!0kIK0?>Wka;fs7]MY*o?X9(&(Ds,l93PqZcqRqZceNq_!g$9`-1?<;Qf@>)Qkr-eM#RiQgcA*fILN]Mn>+%Z(,cImHX"<u(c8aQ6h0s6t/]s8U=^T`>&Hr2fqul&3X_s5$Udrr=$!Rf<@[`b$9Mrr=9sh>[Hg1Go+3/cgh/!$:$Frr=b@gA_."CeFa-_@&d3!#%)es8U=dJrB[/nQu%ts8PTKOn\Sbs8UemX,I#XG!K=4s4AT#s8V_@+ohQsiCF7S!.Ka2#6+Z/6sBTj@/%tH!&WN<rr=,9=T8@&8c+GG!!Zh`MuNbkBtOEFkCZb6!!U!3s8VrAi(<tKWQ+6''s4Pr>s8Sbrj,<s;dS*4<s8QWYli-s.^O?.^e&_^l!*;/1rr>p5%0$<F7ATq`/(?ia!1**m*fL$u1H!)Ms2q>;rr?I;g&M)m,M<"r7i9bU!":dnrr<G`2ZEahWkb8,!"$0bM[9=_$PgV[!&:3As8U"J)ZTiAnE(hm!.NgU#6+\2-05++LfdLR!*._ms8TQT,Td!cjf=&ms8UE:G5qU0%Trc2b4&sAs41Sps8Ug@''`S.T6IPo6fFrB,!$+fKs8UA_)iFt3A,*>+DADu)q]Pdu#>8B37o+!&bT?NIq]PeF#Q"nR8,!60e;Lu:Zc<@KXp5G@pa,[k(&Qk^+SYj?pF7Sq4s!1O=`7hI#knH,Wg8sM*gDSFMNru''pB1_>NbFDrM[2.PB/:Y-nb41#fE]O.\&upf@8S''U>PKN=hA,r/#Aep@D''":eKoCSC#l=`0VhhL4T8O!7YHQt.pfn''u.O_Mb*_)&jDe)ZMpB1`$QBnKkP`(Z]Q&#_?":&k*BT74o#W-1,1EZPbpE94_#KaKbb06Me;''$5EqtG"(D&$:_chj.G8,$3a+T#>8q]!`UA+q,?A''Y>hqp3R_YSI(0#;`PsiZ=_MY)K9=#knH,JV]#;Jr9nOJ<m2Wpal^\qtlfVYSI$SbPS#,q]#:*pDZWsU<iQQ#7gW+pZ)#9(''"=,]BG1Qs7^0qrr<(<)ZTj2gaN1&"0\:%rrIE(8GaP0rn62C#QOhs^:=1C!Z>,?s7I&7rr<''(lMpnV/WkrRMdTbD.L=]3NO+_B\VpIf$9RF/rr<?q/-#YK<''($Z$%21@s85dc#ljmr=Od''frrEQ?U^-o"$/YOYs8D=]rr<CWMZ<_V!Y#)/$_Mg)gP`GNOmNE;#)ZrHE*J5+%f7+C!5D]DrrKG*HklY]/#B!?!!!keMuWh!kH=jbe2E)?"onVa8U1:8n4''AV!!e#Srr<^_!$@,krr<Qi=T8@*k%=Vn)d6SJ!!!lP#lalTV5!tiH[[phs8V43a8c2>:uhf[s(c@ns8VtMjT#83Bu0iLR%Q^&s8U(H6jWhmK"$d?!,i9<s8V[]ErQ,8.QnjQ!#Wh''qi^[rpQG7fpCmE@p[J&&"qLP/c7KbeY@li9T8Tk3ViD&W":''L6Ko1J?#]5*XWZV&<q]H+RpC$c7pS8Pu)>>eBpBCJ@Mi7=,q]LfTrGD9OMi7?ppWncp#Q#L!/HreFP_u5i\pgVfMcYg2?X?Kc8W.5dLXZV,*!VB!,3UfV-&_LJMsTM_pE#7e"[BglTEl&%Ieh2''posW<qq)-FB4F_BDPji`p\an2qq)-FB4F_BDPji`p\an2r"95Yb>%^2*m]bVUUA"9=M\n#Mogm`TXhoF8-]Y!HMPh_DADu)q]Yjh#>&Q<:L%e7[N>2@q]Pdg#>&Q<:L%e7[N>2@q]PeL#9q>cpAc8\Mn>al_kgJODU+0^MmK(e_?g%D#7gKSa7ukRr35o<pXf_qYHu9\W,Q,cqu$12pXf_qYHu9\W,Q,cr&Y."J:MJXJr>>AJW:$5":(i\Y)/d/#i`%kiue&8#P:[2qZ%[-Md(72;fTNOW(;h@Mdpp9<!^bS%W''npYSI*)#Aep@D''":eKoCSC#l=`0VhhL4T8O!7YHQt.pbiB#\@''Z''WG5''Iqr.8lp\kEl$VA\A#9H3i<GZ>I#h]FmC<H=U(&Y<1+SXLnbIFt+a/NfH*rJ5-1TtHN*hS@nNMhdBpB1_PLkU_<M[40MQDu&%4U:]h8^I8=*^YcgE+;ZLf`r!opqQU.(&K-Njp(]apZD?0Mi7M;pE5BPpZD3Oqr[W0MZjSkpVQ^9''k.OE&c7G#XpU+M''s@rSpM]l[pbW`[&c_iF;6''ZrqMgRAs8U`S<rW.+EcD''YgRP@+s8UReTSj*Us&!,bs8SSQH2mo0i5GZq;''.q#s%tPbrr?Oc3WK,;bsVL2Yaaetrr=WG(5r1m.I$d1!!fSmrr==g#lal8;nWJ:!L,+SpCdN*q-''HGrrCuR@.tZ@ruYF;eHZ''RD"e;:s2mc<(''";!Xj[OTs6pd,s8V''CIfKH)c^t1:gEKDms14TIM[9@_XBQtMs2o^<rr><(-iX0VNnOF4@b+$K!&^gsrr>53])Mb/I''"Lj!''1[#MuNc)2MV83kL+8J!#7QSs8UVind#a"8H/a\M)b6^(''"<PKjar\m5U@1s1N`Os8TId&HDdBQ,N_&o>b\I!%LLArr<hE;BGi<!!#@[.f]Naqkf:0q^MdLs8W,5s8VNGbQ%V<NR\".clP(Es0T/GM[9@_[,Vf!s6`g.rr>F*j8T*?3Z[qsrr?,W2p1kPrrAOWT`5!sm[4%Sh(pnfs)cK/+92:pG0''[`"<RCSs8P:A#4bUj!."%k*rc4;c&dk`!&-g2rr=3j6iR-,:a5o>,0Tl`!$fZRs8UY3L&V-.a):qWja0/j!(\UAM[9=_@regR!.B97rr=tXKDtqj*d@VaM+^8:s0sjArrAaX_Z0VUbfp+da3;d-s0sj@s8Q=B*<6%a"Pt41g@rAF''sJ&>+H.&?$M[j/Z3h*=N;)b!(&5$1+T&JM3FZGX*dilsN-L?gq]Z9/MNEaWMp%$r[AhX]+U8MSOn\8Zq/-!Or,2g#@U_>=I#EQ7G`E(,+pX<hOGf0XbDX9GWRM1r#7gWZpL3j%(&P<B3FZGX*dilsN-L?gq]Z9/MNEaWMp%$r[AhX]qcj@^Y@li9T8Tk3ViD&W":''L6Ko1J?#]5*XWZV$)#7gX#dJ0p\rHS&Zpj38%[''\X1RZ!GgSqm[H+pWaZL5UhF98c_WD*eO$#7gX#dJ0p\r=0&gY@li9T8Tk3ViD&W":''L6Ko1J?#]5*XWZV!+#Mlboh&`#CQ&;/h#koMJK8bPCLPnf`;djN0#k\E4qdB1ip\kp%"BF%M*r?168,EZ8qu6=4pYcA#P,u(!NG;*-pE0YMqb43frY9>F+:$*i!!7;\XT&8LMEUt>.Uihd!!]"dC.fWGWV7P1`Wu5G8^I8=q]8a&qZIrMAGED(''c"u)jSLGKqmZL-pE93?[g)ROqd]@jMu,1%D?^%?53Y'',!"j,%rr>A$aSu5p?1X!S!+[lB#lEgU(&%n+%L9hGHsU*!KN0*(AGES,0,9KPMqD=Y32-]Q0DBA]7uR6hqdWukMt^`Y+H)0UYkPVb"nsOPjNSeDkg(!M$4^86E;)(%q]5QQ#&J^<D''":eKoCSC#l=`0VhhL4T8O!7YHQt.i!6?8Z\GuJpJHj[pAg-&MpZ4J7%ah_7D8q9Q[t?YTo5nNT=g*-Ml^uY=pXjA#)W''Y1XQ"FMu+NQ2F`W%",e>^HE)N%pH)F[Y(2jhMfjqmA9UY(1Q-[_K<PUkqqCdjpt?I\Q^OZkQ]%>jQ\c"?#B>`:N-L6d/m_m=+8mJjCk.%Q*eK<(N.HupqZI/%LouT,M[8=GYN$]7qqUqnpWjR6pR_YfQ^OZkQ]%>jQ\c"?#B>`:N-L6d/m_m=+8`*''0%^!*#Aep@D''":eKoCSC#l=`0VhhL4T8O!7YHQt.pX%b%%f=uMpb<N]Ns@JEBAsu)Mlr&;NX5@^#D%\bMLp`lD1IqP+8C3gk$GML*dETVMK+IY+pXHoRuE\l#c3l9D]]H4pq)k-H]_="8tQCaTa.K^RACskMjoTjM$W_YEK+XjG`)h[?=,B.r/(_rO`6>&M[922@O>)[]DDp/LA)%:f[:k@J[^''"KF%J(g(gt%%f>.\M&"_@-2/PV-.(jFpYZ86?F;F-Cl<=iEe=WH#FUR8N0T;,Y`sZB+8`W4#7gXbpVHX$''g;:;q]Pb^7P<''cUBWWd@HS]3MklB/P6gO\I>NT6JVseGJsO"jpjLg#%X[ui(AD=apDZZt>5KH>>5M\$>5KH>>"nf4b$YJO$dD39#9MBQ]V`$U#YPF"?h\%FpKrXZ93u$s:Mm/V*Y-Kq!a[Cupbile!(k["pCI<''jl9>?s-TGZ#6+Z3e2mX0q!/"]!.ggJs8Tkf>`8X^PUEU>s8V,t)?9`tp-er\I9G>)s(&A_s8Qne%0-@`-"6fRJsi)-!$"OM*fL$uCY2Pb!.g8Frr>:(nG`Isj4OA3#9C)Urr?\>!<<&[j&Gmdrr>X?3X>]bdPf2Hs3<q>s8V''Mrr<#4TS/7''s2,;o#ljq>bg$.f3I8L@s#39lrrEI\5lUicVPsLp6<RFj!6TJ?rr>6.gE):Q!''KiCs8V''MI/a14?Ma^%dPjl"!&;0m#S)(Y!<]_pF;=fV%In-3!(''gjrrD),mf*8UK+]8apBLZtW2(:1!,g^]s8Td$*rc3iFohsLs#2U%s8V/mC^''h=.F`\Ds6%=(rrB%>ErZ0GT)+BFs*9J!#ljq^2?a''[jiYI?s)#mUs8Q3Y^An5R$Gc]Arq/L@rr<A.''H[8TUf$LYs*./Ps8F\DJd;>U_[4-Y!%mW+s8UdR^Ae11;.q!\,kkR=YSI%1r35oDMt[8I+86*>+871Aqbd-m"V187pG2NJ(&KT\YkKH%h=qK8r!rHDMr".<iVX2[-&_XOposW@M`(DE3qs9j%OCf1praDdZ*M"`QA^raSV@FB#Bl,WN-^EZ/W5$:IV&l_Er?[G,`DC"p`9):r#PMaMu-fT`WZhtp[\&@(&(Ju#l?$.qZ6S<q[*"@q^@Bs;>^]Xq`OU#MZjUf!;KprYSI''qqZZ_R#5b%icAVQ''pWADP/Hmr6BAsu)Mlr&;NX5@^#D%\bMLp`lD1._M+882#V?cjdpW`pP8,1C''(#DO"4WZVA:Ip=6#W%D5SbLEfpBCISMi7H9pPk+.TDQolqZZ_^Mi0+[$&a`-"nrh>Utm-i#aZ:6$4\?V#5=o.W<s,]pQCs[]o/23VM''/=GCjOe#ZlPGP*iS8PTTYtXqcDIAscekMt[B>_F:+''pDN]YMt[DQ3/`^l"o""7qZm!<M_,+NMpm?S87IfnO_p!^q^c2;<`-^hpEq''W.uV*uS"H[2Z%J[%#S((^piR>G*!Z&PZbjbm=\9`nq\AulWf-af#l@p%&GKH8Mp7ENa0k-UVRMK@#ko;bl2)hXq^,qPFrh,tpqZZI(&)nK-Enus-RCAA*$1"sVI/OYa''k-]Mb+3O?2"p)>mH;^B_su0Mt[qlbdb@,_STe,*Y)DtpP]jaG5!=qm.Vmtl1Z/=Mr/K_0$R2"KU.P@#kqX%&Go`<Mu.2^5,sP<''aRE<=\i!rZh,:K,l[kI!/(:P_KZV,rr<$Z(B4A,g>Mu2&SNp!!+`2Crr?G522fD2VJr"m#ko5AJbL!;gA;hI#l?J2+o=qTqud9%7d))k1`lB-Mrrf^pD!u2)?tIUDfA^7#Xi(DoH+QIpP&@p''mg9\pN.-Z$B4ic''k7R\,5@W$0,:o&qpP5:''t4PI!X-"?%S$2oneFZ-SZ]Z1QH^N"nO*RRAXC''5YFX#6&=%#-)#Fu"AG[#^QhXAls8PJ*?N:&CjeDeT^R:Pjs.<n8+,a!jBshqjEcQ#T9aDlr<VJ<DDmK!/7/&`PpB1;(*Y)TP[.m0,`/CL3Rm[PV)?u%kLnBBmMl3/6V2L[uRu3Ph#kS@ANG+8qMd_NZJol9OTO4!eM[92;/Kt!bqaTcopG<u-MuNc;`#/LS(Ch2[!$45crr=&/lNiSijbo&kReqJjM^%2>"aO<jG[?:66t"41esu9s*tD5ipokLD$4\3Q;frh^$MXJ#''ml''CSk>U\pilTXr)<o<O`6>&M[922@O>)[]DDp/LA)%:f[:k@J[^''"KEs1*dM6!o%Rg(/pL=s9,PN>VD>PIQ70cadq\AjWq`''N.=o7:W9`&5l1Q)DHqdK7N(AA"0AGACd+T/GK%VkaDpd>j0$>TKD(!hfOW3!uEql]Z9q1ApPQBnKkP`(Z]Q&#_?":&k*BT74o#W-1,1ERhHC;sDU8;dcN(+]7lq`4O5jnfP^)]oPobP62ppDaD0_R%,"\62EFMu+7d5,sP<BF&l=0''"b]&EVm724Xu1c2RbK7HFIK$CpPa!''@b3rr=NY''''RT;[u9,LpDbLDq^3lj->*-u*Y)EL_"`$epNHE\YU]Mt,q]!6*fDtS?g()]!''@b4s8UW>mf*7l7H=FJoj\Vm8I0Su0&eV[&EVs91S"c/pLsFfClA$&#gBfla25]''+s%6gmJ9oZYSI''opJLf1qj.M#_-Ed,M[91p.Jj\R2u>Amq\/]D+3oeUUoqK=<;=Z2"oG/%pRV''("oUEB''iYP7QA-.KMi7Ijs8Li.?j.&7qt\b9U_WVApFhI!"oL?<Mt^*G+H)0TQN_''=>bjoK#l>>cq[iW`q_I=2''DEIgcAT90Y.t=$<;ur/B5EJ0rr=-\m/R*_2Z<XU;$Uq;s2rFcrr@![4H&qaMsTM_pE#7e"[BglTEtJ''pG<Ua$MTj@(&*]GqZm!<M_,+FMj0*oKt;`4@Z+<G9j_4%Mb/h>Z%pg73<fug9);N]$Pg&VpBZ6`hFYUJ*]]-S8;TnD1Q2!upWe]k"oL?<Mt^*G+H)0TQN_''=>bjoK#l>>cq[iW`q_I=2''DEIgcAT90Y.t<Bp_,1P$0qij(UKpn+8r25fbIHnpQgOK\dArA-257NV%l/f-2Sh^,t9N6qqqZ:\7+PApWs-=;7cK%efTgtBXgI''#l@'')"_<sNPDc,mWN2Z(Mp@6^F,X9.pDX<npBEG#q^%0t*K)gFMu*U7+l[gJJI)!3<s>aWQ[k!:#\mmm8fmkrM$7LCQFe75]%I;u8bdc0g(gNPRACskMjoTjM$W_YEK+XjG`)h[?=,B.9)B:r-2Sh^,t9N6qqq];\7+PArr=''h4,a+=8.8/k!!9W-rr=$\HN*sM-a!aTs3;bf#Aep@D''":eKoCSC#l=`0VhhL4T8O!7YHQt.q]Pn=Z]<]Rs8VHXHN4$E961(4b=?IMs8OCRs8Vf2(lJZ3JsO"jpU^)4#7gK"q'',PG''l.[ds3X9rs8Vp?rr<#[hDG94s4kEis8''ejrr<$*_>jQ3H`6rE!#r`Rs7!''Wrr<.\IfBB]Cs;nZ%u`mU!(5/4rr=ErIK''9ZY#t](!''l2:!"`1eMuNb]Mo>Yqo<&f-!!=7Ks8Vahlj+j1aq_jQVJr"m#ko5AJbL!;gA;hIq_a9`+cH4kMuWgm''uU%O$iRC2s2gp"rr<hT/H>b"Ndh$.k^U>Hs7[G]s8Vl(PlLd[TW8%li<%Aa#\J[S]-$dYg#tTn-2Sh^,t9N6qqq];\7+PArr<0,Y)E;[Fnejrrr>NB*rc3[Cr$&N2/q^Xs5:CNrr=h@N;rqVgB.BT1`BVW#lal[ZZuKMU3u=%pJ7mjs3oE#])VfPb6/pes2$VjMuWgp?TeAgnbfKgs,Bhts8TIfUAt8h!/1@P(F)oZs85\9rr=!",E)R%*ksdpesu9sM[0geA,"UMYSD[@^^$d(RACskMjoTjM$W_YEK+XjG`)h[?=,B.8j=r[r(-Q)pdjWH8G=8$fE]U0[ElmmC.fWG+9u_5J8H?ZMhR+@NX5Lb#H*B\M4]\3iifQG+8B(GpBsR=qZe0/Mct(0:C,VY%d<Xs[2%h([t+2sMt^),](Z2_er.ph\3utqqaJ4&A=%k2MkQ''.X.R%_cAScFN*6M])[;/n"uFX''-&_X@M`+%_qZDa"id.VU#kpD^"g3BBJ;\Q.C1MN\M_g8PQm^DipqQ\KrGD9O#7d!o#PbM<r&FFJq]PiSps&O:qkaSlSbLD5r&>J''$4cqOrrJHuJH,ZLZTo8;$NC*45QLQs''tXe_qa$kM%McV`r)3Fi''tak`Mtl!&DADu)q]Pdu#>8B37o+!&bT?O5#NKI#1`gk!BSgY`#l=`0Q&^ucP`#gHQ@Ncnr%86O$dD39#9MBQ]V`$U#lCb0%\NKIpJht''0F-WNY;@;EMeIrcL^<k\#F1=3N0K5+WKr''N+8d_rq[:Y=pBMbhMnGpn`s@S"KEX08BAsu)Mlr&;NX5@^#D%\bMLp`lD1IqP+,p"]q]LfTqrS&T?=??"D6(l%%f<F/!;Z4OrrMa*5Sa>!.=_E\rrD@Y^^''l>@=S@Xs1bErrr<lE_#OGZo0=Ass3i<FMuWh7J,oWLmEEBGs5p1Ds8UcLJ-c/TXc1%Ls8F>lJEHk3d[>Ujrr=H@_#FBT5QLfa*1=VB!%@G(rr=N6!<3$.VL\^HjKh,Os4U/^*Y/(MrrDld5lUlWR=H%Ps!`Huk5PGI9`PFu!+CBXs8Tj25lUg$%)DoCc1=1As8UOpJ;aI-hgb_,s6\%Gs8V5Y5l^l;VLSsP!(b>L#QFc<-:%S2#:>!$!!aj$rr<^_!$;.?"keEarr</`JH,ZL=b-MP#(Q^Rs8EH-#lalqbeOJ`s6\%Grr<)k5l^lK5QLfa!DL:XM[9@_a)aNGs6,l$s8V;NJH,YhbeP>#rcZ''Wk5PG0RD9(-!%:OVrr='')!<3$=R=P;;..]_(!%L56rr<M*JH,Z1ZU"Qjg.]:''%fBW4!21M8rrRRa^_JR''rceje#64_hftdXfpt:2ts7k8ts8VG9!$;1?qBg`Ns8W!7JH#TLVL\^Hq1&JF!!2[V#ljq61B7[[!"q(Qs8W''-!<3$7^]=E7rj)TlM[9=_3/kZQ!#K6trr<jIJH#U01I*&^!Z(Am">KlUY.t&""qLPIrr=B%5lUn5;a;)poB-&Q\r=E0rr=oM_#FBQVEk.])Q&&b!&[IN*rc3H^]9;m!![rRs8W+%JH#TX=b-PPrX?RJrr?:u!!iQ(qTQbT!!&l]s8W#4!/pmWrFUS<s8UY^5`>[BgR5kWs5^LOs8VG9!<<)GN5,`!!(>t"#7gYJrrD<-_#FEUXM>SFo.^4E7<:^!s8U6J5l^lG=ht(;j]R-6s2qYJ*rl965QH`Bs7q0Frr<%rJH,Z@VL\[H!V8P^s8Sk#!!iN("Z&FDs8Q6;rr<-d!/pjW!h"Rsrr=L9^l/3m,\B=A!#nVIrr<^_!<3$PF$L$2s19/!#7gY/rr@f9JH#[t1I)]Ts$^uo#QOhHZN1%*j]R-6s5dD!s8U6J5T]t*p-8V9s8VnF!<3$!VEk1]o;4eQ!!2[V#ljq"ZTncq!!P/Ds8W+%JH#TO5QH`B!!8S(MuNc+R=L4q!$l0,rr=!4!<3$4J,oTL067+!q\BG:s2N:`rr<jI5l^lJR=P;;3/kWoR#CtE(;KqM!!,d/rr<Zf5lUfbo0<T]!(b>L#QOi"J,oWLrX?UBs83bMs8W+%_#OH2-:!Ips8VG9!<<)oftdUf#:;_9!#-c1+9)@so0<NjqjdZe@Gh.c!J1`q(&n77o0<P=rr=e__#OGo)1__e.@J!Os2kcNrr<Q#!!rT)AAA3F!0+<Ms8S"S5`>[BUC=s<s*8ZNs8V+kJ;]?c!/?HJ0T1kdoD\g(-@h!Xrr?LT5lUg$ZU"Nj3SD4J!%R+r+8^''X!%]ok(&n809Y^l4!$`Asrr<Tq!<<)rF$Td*iYd:Hs5Lfos8VQ''!<<)m5QLiagu^jDs8T=05R%_q&cVm)Aq9m^*OA!G]*]&F]DhkiVL\[IAYstms8Us/JH,Z49Yg].k,*\/s554h*rl98ft`OGs8''sTrr<%r5l^lV9YgZ."$chls8T^H!!iN(%An[Us8EGBrr<;J_#OH7=ht%;$Ojh/rr?PM5`>XB#oS9n!&a@5rr<=G5lUg$%)</K!0BmirrJ`pJH,YDAq5g>s0jdLs8N(X_#OG?VEk.]s)UI*s-r/$MuNd/VL\^GP-[CW%f?q=!8AuRrrU''KJ/,a)%f9]7!8AuRrrU''KJ/,a)rrDScJH#UtOoQ62$4ctGpKmW/(&&;%#E-WtT#6g!\Hi07b?H4ks8;%2s8T3sh>dN@(t=K@''+"I9#7gYDo_C?ZR0jH%&bgMF2&5uu,R0/e^/*16#e:1HP]`p_]*OGB#7gXbpB^T#''eQ3drr<@nRf<?oAnM)CpG4Z+s7X[\s8Vd1)#sX0jsC''-p?(T=s7R>b+*&s/#6+Ze(5Mni1?j)a!&Ee`rr>4uM#RH<?#]iDbmOUQ!&C:1s8Tq-rZ;XIg@p0nd1sD''%f=uGq"GN4Suoi9Uig*Ms8U1t3J.;2`QQ:Cqc)MJ$O?\3?8moE!"6g3rr<hUErQ,9OQMK$!%4^!#i\[t.f0or2F8GpqqCdqq"GN_#1RJIq\1MV<&>YSs8U_R&H;_GaFO<jYAW(o!+%U7s8V^O(''sdFi:g1Us8U''^#ljqH1\d3H[A9M''_4G@J*tJ2%rr<Fg!<3+Q?[NUg!AtDgs8SYJ`/FWq71^aEs%;G<rr>$82#dQ`)&N;Q2h6R>rr>J2M#[Isn,WLgS`%Qm%f=u[!C3:XrrT]7J/,j,%f=u[!0''6rq2lEls,7eFs8OjN@/g3t9"Kr\!(D&Prr@Hq[/U+o0VnaKK%E]r!(^GlMuWg9(mP%#c!$bD%f=u[!5HANrrOjNJ/,m-%f=uS#l0;lJdN"bg@oO\o+dPu%f=uSA,+ss_?peMg@rqh@hj+n%f=uSdJ8V6H3t/Zg77tq''ho#Fr"o)mqj/&l=[W''h#7gXbpWutVFUAWUg=^*R9aVC-g@ptI''m^2sqqD&M9p1&%`>/CQ=D`Tgs''P^)rr?/<JH#VB!rrN&`<?5@VilT1!2''Dos8T![JH,XVr;[!2qqD&M9p1,''`>/CQ=D`Nes''P]lrr?/<OoGES!tkbIqqC</?5:?b%f=uSF`\A5$4csepBgSC(&J:bpYkT<#kpe9"qLOapMBTO(&&%''qr&ps#l@*["qLOapMBS?(&&%''qZup&-i45I#q,HQq[)]q%f=uSiV1\6qr&psi<Behg@rAXJ/+=V%f=uSEqt%sE=*3Qg@m`*Q5,&[>6KWe%f=uS4VksC%f=uSY5*V`K*i+cg@m/oM%uHdpWiL\''q,I>qqCff"TJH>N<0(Zoi?nK!(qu$rr>L(L^!eY''K/D[s.m&Srr=:K-ia3b12d*l:''G$`rr=^n15l/4)8o_Y!$##Brr<pXFT2=YF*%]f!3F"o#QOhAJHl/SSure-!!Bubs8VU%0)tt46I>c4s0[CWs6#WZrr<G%<<*!J[DW"EUplBas5^fTrr>]f=pY0.\M/\ps8T2i_Z0Y;-Yrqrq^MOG>+blq"!Tu1''u^Liqm6;&\_2N5!96<E(''"=2i^!PDp32&e!!H:err<@&5Tbpa!!qQarr<9N5lUfr*WZ3?"kg]k!"$F@rr<845l^lWd/a1H#4DQls7,BiMuWhLKKohCs7YS?s8Vkg5l^l]F$Td*qH^lXrr=qJ5lUhK1I)]T!-ajHpR)!\S)utos8TLhJH,XXAjHCr[H9aS!1oUos8SSNJ;aF-GF=!]rqfiK"onVX5QLia[kg;Ls7*E\s8V"(J;\CQ9)elH%)DoCeJWo;!''AF*rr>"?5lUg7N55Gn5%]?F!&=tu*fL$u*1;?Ws70=.rr=.o_#OGhR=P;;6;50#%fB?,!0mu.rrVq2^_JR''r[&tBjou=m]`.tOR=P;<MV3Lps8Stf5R.5g!h$k(s0GE"rr>$;_#OGdZN1"*C70U1rr@Au^l/3m*fRo7!(Jb0MuNc2^]9;m!%i^$s8V=K!<3$>5QLiadFj''M!"GfU#ljp`o0E<U+XTGXs8V5YJH#TSblIeDq1&JF!!P.YMuNbe9`U+O!#''k_rr<bW^mP-%+5)1&rr=R.^l/3m''luY?s6sVcrr<%rJH,Z--@cC%!*?r9#64`&ZU"Nj8f<0Zs2N9urr=V''_#OG.^]9;ms/,BQMuWgu^]=E7dj@><s8TR]^l/6m],?/!!''#qQs8V`_5lUfu-:%V2q1&GNrr?kp!<<)U1I)-D!#E?Ms8VlIJH#TSbeX8Ypt:1Us8VVq5`>[BlAWOYs5p1DIfKGu^]9;ms2N:`MuWhNk!8qH''luY?s8''sTrr<lE^^(GIZMsplJ,oTMc@>m0`X34Qg&D(BJ,oTN<k3_qrrA5EJH,YC)1__e(_"4[s1n4ks8Sa55l^ktZU"Qj_WHCKs/298*fL''ua_$)''!"k1*s8V+k5lUgHF$Td*eJZ0.s8V/d5lUfeN55Jnpt:1Us8UUeJ-c2TI9FAc!)T)6rr@YJ5R35I!/\r#s8S43!<<)bfmo"\!)qR$#lalS5QLfa*C''W)!$HdlZMsnL^]=B7,JX;!s8T^H!$2XI)>IqAZk`L8-26^''?1A+/q\f0Cq6Uk_q^VL.-26^&\FBb5q\f0Cq6Uk_qsXFI-26^%oC3"pq\f0Cq6Uk_r4)Xh-26^%.e*]Qq\f0C(AY<`rD*7T,mOqW+N,&j8b)]<pm!-0%f7CC1\[1MpZ(iAj7eugr<)Qo%f=uSF8JWGQ3n-!g@rti(DV''"pONHi$4csepVlrF''up[Z";]#b%f=u[!5HANs8OLDJ/,m-%f=u[!/NmjJJJ4bN#7*Fs"^F$rr>S^^l/3m7<S\2!.?8Grr>G@_#OFdf7<l$87)@Ts8S#pJH#Vo>(?bdqqD&M%$1Jhs''f>c(!$^lqqD&N6(e5Xs,gN9''u1.dqqCd+G85c<>6KWe%f=u''pnnj$$4crRSG8us9a\QL9aVC-EqhQfV%n:`>5''Q_H3t/ZQhSdK''nZi''qqCe6pLb3a$M^+o+US_W?^1AJ(&OWnpGq!u#7gZ=pJq$N(&LTLg\X#$"qLQ<PVX''K9(>";3@+k>r*T1s1_obW-2T\a,mOqWg@rP_=r#-d%f=uS_tsiWqc2f@q`snP"qLOap[BpQs8N1=!=&Q(%K(_U!"g6err<Jd#6+Z93ACI5&2"^t!"S?+#ljqZ#:f`R+Q3>)s8U`$4TGH0g]1f"s8U[4JcGc&itD@l.1nlGs4=rjrr=PT56(ZB?T\8f-%Nr6s3fZb#lalMpt#HF,N/k2s8VQ-B)_i@i.M(0o..i\!"qaIs8VWk49#9m*,5cZ!;quZ"qLOZq2#h\$4_=VM%t=D%f:5@L)#:I%U8a^''nZi''I/.7eFUAVPq.(46$4^eGJ/+=V%f68%HPLN-%Y4A%''laTX=SE:?E=*3QDtr$$apJXU3VesUKF1odKaJ=e8bn2XRL8f7pEp]E$4cq;q"#5d$4cqKptun($4cr;ptun($MSZY_?peM;>H%`WXAXK(9.]OC&*8oPmT_I''laQjqnDjq''rqZOq]Ya[''urTFMuNbq^]=B7"dX]=!%Y/Orr>N&JH#TXP5km"#Q"sZJ5V:s#ZV*>qc*BF(!?po8GRrSbR+jUL''3nO%f;]"''ho#F5[G1O$4cqk?PPd%''.*Ad54SB3#7gW,qnNs!pCm)o''A+W.PQq]q@JOIL-hh$G@.3j.#7fSb]G6@:H)GGe#W+jORWt$HMgPe\Lkfjh1]%Bs#3Xg<nK/8<7f/hn^BtJJ^\`<lpRq%9hBb-@"qGHU(&OXMhDk&^h?FI+q\0c)hBb-@-/LWOhVJGH>qZriJii^Y"qLM6`teIk#QOhRQd>^3obE&Xs7L%[s8UX7IieXir..Css8W"EmJd.d6WF*cj8mI(!!/o<#ljppbCp3$!"euIs8W"ciVrl`d]icOrNRaM!"h"CM[9=_L?u_U!#H;6rr>Z''B)_icR@55l4U2H]"SWo5"oCFfs8UAVB)_iI''0uTt[@*K`!/BjU*rc3P1I-lu!!q#err<*qg&D$`q?$Zs"(`P[rr?OcHO''TNj8m!ps8H3[s8W"F!WW3"]WD/5r...l#ljqTjZrkGobtXG!",7arr=QZ&g%V\"%sAK$4_JQ''laTX=SE:?E=*3Q7T1%T$<mXe$4crV7hq?t%f8I+HjUA\3#9F>%f6e6Kb_H3%f=4@(!R''qI6JBIBa/U,J9#a[Q_PV(=(qn[IXlH\I@$]MX]K3A>IJ%R*i=jeQ^aP8H(KM^MnFtVZAZ@$%f6J->SWP3%f:HQ(&J"..bBU7m+j/EM^8$H"V,6J''pT+9qn`/7''rqZO=BH;j$4_>B''m0inpC]+oc3b''U##l>_$=F"^$4cr!pZrWI$4cqEpXBq#$4`R"`YHc+%PmhW(&[k)q:CQ"q"XXg%Pmj2(&[k*^=S;<q"_W-%f9UO''uL@gD#7BNaU/OTf45WnRJ3-DR0PtR9bmO+pAt!h"qLP&q^3,f#,Ii^UnXK*Euo;0V?`ogStr*QGB4h7#.nEP>97aAFFSX_H_#8FEJk*+A7Sjc%fcR7TE+uo"$ci$`<m+PFT2D0^,-T)!(@07rr<=1[/U+PpPo1Q(S]97rr=6/8;mKJ,7i^Err>KrLl;95)`a:Drr<S`T`5!)$2jf''"pZ^Z!#"u.rr<1ZHjK`P0@FeEs8Tb:-3+#?3hZNQf(n)#s6LB&MuWh.F81[ns5(NkZ2aj5Y*b.Is5];UMuWhO''!VE9o`<89s7[[ms8V3[2?3^RHCtNRH24ZZc3dq^c3b''Yd.rP69aVATq2#i4$4^;9KGB+H%f96$Kb_c<%R9c^(!d6es-oF,rr?KO^_P3''rrD]9!<3%-R=H%!$4cq9qZ@S\$4csPq1''4)$4_1T6PX_NN;$WnFUAWUL\luE_@$$\(;^Cgqlrd/1u:(OpHf)ps8O79bP9^)rr=QnNW/uNbColq"QlZ_s8Fj&"e^L>LRO.@MlX7Hi!<!\LhhKeG)QD#r.@t,s8VmdH2djE^3K\Xq*nur!!+,t#lalVrQP9A:Erj=s.=b3MuWh8?*aM1bNZ\>s8!A4rr<*96j<VjgZ>10!"?;(s8W*;?N1!*8\B;+</YEqLHPpc#*>mOR%oT>!!H,-MuNb[:h''J)s,&r=!!K,@s8W*5]EnQ;_%CA\s-R4#"V+&u`ta465PG<rE=+/l#8M4c%Pdc^''nZiepE:9($4csXs8UK^!#>P63.M#/s/VX)MuWhH#_;pTa++0is/VX)MuNc=hgfkL!!nR7jGS-[s7YB$MuWgqZ@MrTa++0i!*!JoMuNbfpON;D3.M#/!*!JoMuWgq+FsIl''S$2`s7c_I22hJ7''n?;a!!nR7"V1E_qnNr)rrAtk9`G)U!Y#,/c."cR!$WOPrr=5c63[DhaQ-P)!%stfs8VHP9)el)UuVLTd,UGl!&/mos8URe?N:&QE0gP(nBbYEs6sK,s8Tu'':B1@;5qNBB!$T<hs8Uq:TEY>q$u!$J!"$)&rr<o,o)A\''<4r52(Y`L#!#1Xl#ljp,@"S[o%fcRcTE+un\6FIu^^:SK"8L=[^BtJJiqXo9Ws\T!U_RkV%fcQtTE,#ll9G=a`<m+Tr`kNbs8QP8J/--4%fcR&TE,#lO^!>N^^:SOrqC$''s8Rl-()?lKpbK)R!)p\5MuWgq,J=$VR%F0Ss3Os!s8Q_?#64_N3LYm+s25TFrrEAL;#^Mo_+4b0!++<Arr@KOeJ8,aN#7cYs"^FSrr>S_",m0Z7<QKI!.?6arr>G@X8i3OfF\&_87)FVs8S#pK`;%s>#>G5qe#Z2''uL@gqeZ(l''laQjs8KM^Ug"T6!!@<;s8TC(r;Zf*oQpN;)DB)0s6)?Ds8TMMhu<[KKUi)BlV*6:s3PQ$s8Ts08H/ZRUR(r[dcP3B!%VPYrr>:mMZ3Z+WVler^]=Z>!''e1Urr=VLGQ7]hVelA54a7S=!(pGRrr<b2Y5eOc2?a$[8`(]ks0hQHs8V3-49#9_F85b89i_B#%fcOT)PI-1T0bdXs8V!!_#FBT3.V&/f5YL(!$T<Hs8UE$p594Vs1''7=s8UnXR/d3$^]=E7fg]TRs3<L>rr=H`N;rq!6eD><4JPjtrr>''s</^bV,2s+4!$Rl6rr=08MZ3Ys"5!PQ(]H>ms6(]Zrr=HeWrN+P4/W#X4j*nb#lalcBtF<E.],H1!&qP>rr=dr4oYL/\XNQuhc[eq!''idLs8TPM^*!CTcP]lDs8U]%bQ%Uu90N=Ti*X4us5UQj#ljp/_@6JEe1gJ/rr<V0])Ma?3SaW7)Z5cu!$!=2*rc3Yces`]!$TIqs8V3VZi:"<''(Z)&n9C2ts65*Ws8V@L`;fl$7V;]#lAZ>Ss5Fk,M[9@_j#2_ns6naErr<e2B)_iEF#+p<!?511s8U[4B,1IHiYbjVs8V:Q/,oSaEN9''=l%4ur!#<3=rr<Zg]`.sBb=)@1+R9.0!#``Zrr=!pqhka[!#l)Mrr<R5TE"rR"7Z?jmT%1)s6P]hs8VWEmf3=P=doBjiAO.I%fcO`@7^4T(''"<IDOC;urrAD4UPiY6rr?EQUl56Q6mu1;!4X<ts8Qg",6.]Bs1J@3,kA2>!+ah0"V1P4e/I<Gs,8]b(''"<b$crAJnZcj/s/?tQs8VU/CB+=8fn54_s/ahdMuWgVmhGd%%cB\Rs4.5\rr<O+li7"''PP>(W''LPk"!!$C,rr<<N]`8$1-78`m-=k""s8TGEi!02]"dVXXs.nr^rr<W_%fcR``M3A4C=gf3s4\_+rr=Xp9)nq\19gcY=-!.Ws7,rYrr?(-]o2mj<XZQurr?.rMuNbe!g!?]/^ui]!"[F"rr?fsXoAAHj-K]F&KWk1!$k#Zrr<4f5lUgg"-s5ms0N^&#64`%*r>p:ffM@s!!"`%s8VjB"98D>anu,<ld"l''%fZO])Z]m>\2$;as8UXX_#OH)YsA?hW>kp<s7%(Zs8T1RJ;aI-XOk7Gs8T(e!<3$/i''@>BecGjO!"Mm,s8U$%!<3$56U:YO!+5g,!!jmds8W$E5lUg2AAAKNs0N][#6+Z,Q@T#8V!A$\!"gd_s8Uim_#FCLf>.FdgEHXt!%lD[s8VRD_#FC9Nr]4[nbRe9!*0KCMuNcX$c%]#!*E!Hrr<N1JH#U$e3O$6&(!TA!,C]4rr=>)JH#T]*^K`*,Xt''!!!SWQrr?7*J-c2TZl6^as8W$>!<<)P4$`fG!&6b=s7duBs8U$[!<<)bcN"4\s8K*R*r/;@/H5dKou-,#%fcO0K`Fm`/H5dKp&O@_%fcOd7%F&R''qP@)%_H8lrr?As\/tYM$s(K.rr=.ehuE`P^VKjL&RbnDs7oLP#lamldM`)b_$2.grr=Q*_uKc)o`5!l0d>9Ms7Q"Drr=F?M2MZ>!3+3Qrr<?)^@qlO+92AE9[3iJs8VEX_J]DRZ[`#ss8VG5mYh,Fki7s.!!IKSs8V''P]Dhj=N=6*ms%.,/rr>Ij>Qt0-j5N0#!",/7s8V$"_#FB=?#]iDiQ4'';#ljp@/^sb"gC&Zm0cpo*s"*73rrU9d^_QkL.J,n*!"Mc>rr?*\!<3$/j+..0;^R$Qrr>tG5`>XB<Y5?3s7%2Hrr=MI!<<)hXoSJ%4)=oss6I>5s8W+l!<<)ng-GZ<!nkBhs4Nl,#laltjZj%Ms8$G[rr?7<!<<)edfBCJ,W\3js-4utrr=>$!<<)I1Vj"j&''[B>s/9o;rr<N4JH,YKoK\?7s/GWUMuWgTZ%2lSnbn"<s3`F5s8VRA_#OG"(dS-$gDkbDs6ej]s8Uia_#OH2C;BlLV#5`Krr>^R5R.5g!oX.Z!%,Y"s8W,E_#FB>fDtpO4#R*=!#.-f#S-n6`..jfs%%Y?(&n<Z!Xt"es2i=Ts8U@m[/U+hXU+t,dCo/Urr>=NN;il<UK%6n&cb5t!"B^!rr?.f%K?Dm?[_tSVnKD9!''ahDs8VKdI/a0U(,Gpi^D$DB!''-gr#ljqA;Y^:ldCoY]!&ceDs8U@mJH,U(rUc!O%fcOe%m^-r3N2unrr<hZ!/pjW'']q[\!"%ULrr<\''_#FBJ@6fbNs7KV^rr<''E_#OH41I1s?"Rs5,s7tu2#lalb_LVXd#''I]cs8VeC!<3$)]g2VtrDs"!!!T\oMuNbaU]:\p"pb/..EoU-s5SV0rr<d(JH,YjKg6^Zs2]loMuWh;*l.gUk]"?;s88+3s8UGr!!rT)1JGRgrr<,"!<3$68&5-)#ebcg!!_$Trr<rs5`>XB''SSf1rr<BmJH,ZF.0,;+s70%&MuWhCgd(o>k3IQts8Le=s8VM@5l^l_<r`O+s6@*Zs8W!Q5R%2ff2htPs7n)Ds8VFKJH,Z8)1[YFs4\d6MuWh3,QRiE)&.W$s6!(krr=?.5`5pJ!''Therr?7Z5Sa>!iAa+&s7"7Js8VM@!<<)\"[N+fmN]OIs7H0grr<@U!<3$01I*">rr<T&_#FB?>QFd(#FWC-!#>o,rr<1_5R@Ai&j:dF!!@"e"oeQ4%m^-p!iZ2"!!5[+rr<&9JH#TR''S-2`!t%:!%fcOqb!>t/''9n"^s8U%UJH,Z(k(*L3eSp''=s1:7@s8Tf"JH#To\3U)of=4*G!''2A*+9)<mqS8$h!$sdYrr<rsJH#TWa2%]T-qAdns8U9''5R.8gq2.H;s6loes8VUA!<<)mJ,oWLm%2"Ns8UkE^l/6mqFn^)!#dg^s8W)R5lUg'']mpCg!/Zb%#6+Z''@6jhm"HS(krr<)^5`>XB!iZ/*rr?6N!<<)?k(*I3(<jSos46kY*rc3gW;utuW0r/Ns8T5q^]sf=")EGe!$<Wirr<L%_#FBFP^rc6(QX*)rr<nB5`>XB%WHsus6iInrr<*j_#OGnqS3@Hs8Nq-_#FKF<.G_`s2rR$s8Oju_#FBl1I)0E!>Pc''"TSMEbeX8Yd!u,r!&ZPt"qL\4pS5P(!u$oL(''"<M9`Y4nfq*`os43Ebs8TaFJH,Y^>QFd(-=MH)s46kYrr>7t5lUgJ;?6^s-R8]l!%D]6rr>?uJH#U<MEq4Ag0m8H!%=fHs8TjSJ04dk!+A.ms4%WF(&n7S6GT2ms5h;:s8U]\5l^l;T"tC+lodW6s5djCs8V,0!<<)Z*l.gUm%2#m!#h8Urr=Dl!<3$H,Ja<Z''4F0+!#h8Urr=%t5T^L9s''d=*rrPP`5Sa;!bqhWbs2rR$s8RS0J-Z,SkH4gbs6f#7s8VQq5l^lH.00DJkqbU)s7D_0rr<HV!<3$9ZToT3!/''&,s8U6d!<<(=*l&$\s3es''rr<oNJH,Z3.00AJ/$f3srr="OJ;aF-&tZo=!")&Crr<Qc5lUg"beOMas6$Nb#7ge6($gDM!pQJq(&n7KW;qkV!")&Cs8Vc*JH#TR''S-5`jTRmTrr=h?J-Q&Rr%gV<!&>t<s8Ur:5lUg*"[N+fbd0Qm#ljqAdK''=Igdf0[s4=bGs8TYEJH,Y^>X8;h,?FmFs4DY5rr>1*^`WRV0uq(frr=7-JH#Tja2%]T"RpsA!&4WW#ljqL''S$Dfs7n)Ds8V1mJH,ZB>X8>hot>nUs6G!HM[9@_jTRpLs6lo%rr<m6!<3$Hk!8qH*.S%h!![S]rr=C_JH#Tpgcuqks8Ml;5lUmH*l&Nj!#]ppMuNbhgd(l>$%N$U!"DW;rr<`X^^0u?lP[M<!&ZPtrrEi<!<<)AbeX8YSWnX0s8VYr5lUfuKg>\<mN]OI!""/Us8V5=5`5pJs3CJVs8Ufi_#OG]iB[GC_@Jp3s24NFrr=7-JH,Yq]n$+_1Tg^"rr<GI_#FD9k!0[]!#k^Lrr<Yd5l^lGa2%`Tf\Aals4Y>?s8VK''JH,Z3.00DJj^s&Cs5diXs8VK''_#FBQ3''dKD-(_oWrr<Zp5lUg&R=P;;)O\A_%fcPe]n$+a[q!2gs8R\=_#FBl1I1s?M2sn,`;fkk@6jhm%M+*is5L^W*rl9%a2!UXs8Vas!<<)h/cbqOl''-](rr?VQ_#OGWblIeClMCS]!&ZP4rr@Be^^''l>(QUi]!"g*arr<V?5lUg#n::N=(pcL-!!iB$s8VQq5l^lKotVUYs8H`B5lUom8jF-ks"_g6rr=o45lUh2*l&$\!#ZK$rr<M2!<3$01I1s?(<ljZ!"mudrr<E15l^lW]n$._n#4#Cs8R:!5lUgA1I1s?HQKs-rr<oNJH#TYXoSJ%%l6KN!#Eeorr<Yd5lUfl"T\T&ot>nUs6lo%*rl7a1I1s?2)@Mt!0J]1#QFcOk(*L3kH4gb!#L\]s8U[C^`NOUjs^:gs8VK''JH,ZCiB[GCn-VG\s6@*Zs8Vd6_#FBJ@=\CXl[&X3!"/r1s8V5=5`>[Bk\u''1s8VT4_#OH0"[N+fmY*q+s6CPQ#lalBFhe4ls8Lm,!<3--8jF-ks"_g6rr=o45lUh$%tFob!$<W)rr<RoJH#T[P^rc6+"712rr<5/5`>XB"3eR\s8S\+rr<9`5l^l`gcu/F!&aGb#QOi%ot^S-!+A.ms8EmdMuWhVHN9!(s6$NbMuWhB\:FVZn-VG\s7D_0s8V.HJ-c/T-qD&X%fcPhFhn"Z$hut%s8V(`5lUgC)8Q:Pb07[$s2a=fs8V3$_#OGiW;uqu)E:"^s+/c%#64_\ZU"Nj&K--!s6p@\rr=89^`NLU$cg&@rr<@U!<3$",Ja<Z$%N$U!!<Qn#lalN4b*e;s8&kus8W*^JH,ZIot^V-s.7%+s84Z<M[9@_naO?os88+3rr<0S!<3$34b+XS!,oA4rr=(7^]tALrtN>#rrP6#^_QkL7]o#V!6m;"s8U-VJ;aI-es(^bs(UVGs8UQ*5lUhM)1_bea23@brr>R;!<<''Sbl@nWs8O+`_#FJ0beOtn!(,X0rr?W^!<<)7.0,;+s5*7\s8TqHJH,Z+O$N^F4n+"%s1g&`MuNcDiB[GCROJ7:s1=]7s8SI^!<3$`f)Ua/!$_*Orr>:8!<3$CP^rf6^aT9`!''f''8MZjUfXS:QHW>5;&M_P$''bDQN6qlId6:)3LqMrsb/98`r`qqCdaqZ@SV0OG&>Uj1&0Vi8Y;D?blGM19E$s8V7^5E#RAq5V9$Mlm<qqqCcJpEgV$$MXr2+US_V]_Ai0M%t=D%f=uSP51accO0^PS!eg,!+F*q("*Hh!;+Ltrr?JqQke$V%e9:,q-k(b$MYM:3>F"NpO)]I''e9V$qqCe6pm`''B$4cf=pEB?@''m^5]\bhL(1("NcM"`Ot<Y]ofptP[g''f?=.qdK4Lq2#i4$MV"''%M^l/%eh"<1&5f(H4$PHF;6nFp[e-B''g2m6pYbd!q,.rR$M]qa$5M"s%ejN.0DSfeH4''H?qcOZ`$4ct"pNu_3(!d6es-oF,rr?KO^_P3''rrD]9!<3%-R=H%!$NL-eR=P>:6VP91eHuejpi#mS''e0RbI.n3f.gcc2ptYUU''eB^i7ee#>/IM@e">1#k627JTk7uPT%aKt8q.P]`^A2XC-&Vs$JGemOqp(,o/GM=2%Rp+BpWaL/$4]5o\G9tV9*u/`pe1A=''f?=.pCR)qq.^ZABDX(R+o?Q^Y4lm''pE''''6pG2IapN-(Kq]khYqeI;NC]"DPpERlU!;A#&pCpg.<Vobm&6ggb(cpmT*Zk)&@MSVIr!`H4#7gZ.pF>uU''fHC/JG1PfL_VlV%_h]#pobG,@Jm>''.?")5q/-!AMu0FND>,<6"V18jq1=87q/H3u#>P(_7f,;DqaHF$qa(";GF8a6;uL\0-2:mQpH&4\pCW>X4nr6>r*''=7U\O\<(&;hG+T-BfqrRTrq]1TQrG_KTMi7@QpZ;<q"V,tUbkUT@pCmJKq\''50Pl%s*pCmI*q\''50T)6YFpCmJ[q\''2Eg@tII4::iSpQ?7S$4bAVp4O1VDuB>-DtbOPn+YE2mfs>NpuqL2("Wfi[j)X?$4`L!0)->"U''_C!q#:''X(&&F?rqdE(JGem1,l$g5%eg,$%/<:,dg?TZ#5@TiMuWf_[/U(*G31+Ns,,U(rrB#9g].<HDIWr?pDMBaa,ft>[#=[8MuNdL5mIAhM?-9J!.F3+s8Q''t\GlO9d]a#2q\M@":P\gm?]4f?#l)W*''oOS;9Jq&#p[AFDH-B*C/dV?UqaM;dRmOuMp5A1Y`SR-k%egG.OG"AG\bI!8VYBTW4H'')7qh#&TgHsXpg''IRCMt`e>o_ZH%''DFtS"gPc8.ed&7UrtC>1s@WZ%egA,8GE?''Mtd8K+GYmPmfb"@GVU?8C&8nJBa=M@FgTmFMtc];+HMHXrrrE&!!!&sDuTfos8RB=*/b+",53AW+p[iepD<i0,M,Wh!6HXr*tJ#>eG''"Ye-Z]`+SW#70,8I6qcNS&''laTT"[a"_$4ce5pp9fM''laTX=SE:?E=/ZB!u98l%ZL0uq2Z8:$D[Ld("irl"W#f!%f6V.<;D.]H4''C0r''(pt$4\KZ?MTNpH4''PkqcFTf$4csNpNQFi''m^4ls8G96!#=#k%P[YGq4\VM$NL-qR=P;;@EcM%cjKdQoZ[C9!+D:G(!m<f!''Zg$s8I;f^_PW3%WM1HpR`2R$N(&Cg''S<<ph^04/,("W@0`lV[t)JVpE,=Tk_o0MMs+He6E$TJZE]JI#knchfD?ch87;;sq]-aPJG0ut^T_KV@s^p''+%c>7eHYaKVHm(V:3Be`7>klTI]Wm5pX''0/S[I;q%S-<0poG5-+,g"/qq*LpIKaQBEM5dY#_,j,DBG)j"f7NSOH>B^MjA4DEsVLaqr!D0K_HFDMt_o/%U&OrpC%cs@_D-b^WY:(#G3bM:3JGj$m5A9pE14JFS@b*me8@.&]+3Y*fKbWqZY2IX9e\,fCs-?Mt[GR</ZY[pG3us>_;i$@#Onl#S-_=pj`$)''s%`Pq`jg"pOa3=pIt<0pEB8JeHkR?.f0YK5mR8k/3s(UMu,47s8O^,ci4"%K+e4ah0:[S!''5MqY*"NV*fG>mAo:BMpCLX7XPB;bMmSE:G5KGZ6]:\Y#S''t2pbETa!!N"Hrr<(tD#XJAL-P\<""_at!!eFtM[9=_"sZD5!!Le:s8W&[,ldo?7A:n%55-,m^^'',/\^o5q?V2Atr,VNQArHGR"nsHJgA<EB=,TOnDdnBiF1,&+F,OmgB7:*r.ef8)D&)pLq^>D?d/16A2to!"@DDOgpMflRq^BAZ!?_%BqoKTMIKkhnTChB+rr>ME1lMA6.A@7Ns3)8"rr<3P_#OFSkr8tGIes?bpO3=%-@[9fMa`P4]8$&6#S-aupE0D8T7?nVrrILt!;dl9+:%cYh.t:WWf+6M]q5R7pCd^HHiO-1%MXNps7Z!LMft#:VMkHS&:a`d%f6n6KnC-;HhZXrFn]YJ9T/d3q`Tl34o67XMu:3]*K,jMC9"9-2>`15%TE+npYlqRqj%DV>+K0HMku?7QFWarCA.i7L59\lIZ&r=LlR%`#l>tD)$OX>C\Il,%Z>RiF+n@Y#^lLZ"hB\RP,aG>MkG`t57!="qciudpEYY#%R0WDneF`)^<7Vmg%uihIJ4fWF9esjVh;C8^Pf_!VQ-)&XEq42#`]+XMj]O>XpA[d"c/7_KT!qXp^d6Aqq23'':O6Ll%RTs!pp1_4,`DO7qtKt$p\4P3Mt_#bbkDC$"V1DVpHeS<''st''b]H6fIpB^[\qZt7IF)6;BMdVH)]4.Rb-WGOqKg5qDs&kbYrr@Io,QIepAnM&CRtTVAO,/*''Mf`i$Iqo>a$ss1>g763A[KuU916hYB5>AN)bK7HY*qpZK"8`''&q[@Y[Y9+6YpR_/j''k.N/qZR^E$4_sgX6LFVNf00\RgAc+b4c8@kQd(D$IF]hr(Qi/Mi7@(pIpL''qo&^lV-Dt$Xc''WYV3M=&pB_"XLh1IZM[0ecpoF.g(#95p+G:Kd$4]Q",57oKpCYiR^Z;+l3Ze#8#5;R'')nmNn3;WaR"8b2%Mu0j\!Bm0=s8Vi99)el8?#]iDr&(pLMiimTLjWNU?[-&dpDdB@[J$#mMm837L&;/P@Z0uK#S)^cU43pP60n7SpGF%N_LB4:\-Vg6pCdA3#()8SO*HQgqZm!O;YtS5"i:(!pM:rH;Zt(eC&8_D+$FXI0P/_rbGF_!*tBUkeUJ=;Mmo"FNsKRr&I!0.Fbb[/#]tl][ib@8pL<k$r0dEdpHADL#:Z96pD=q]0_g%iBGL9sq]>XI#Q"OMD(mVjX7.2)_YYDOg^!]pY:]K]rrC#8WrE&LY#bQ&=V(T5!/g7G*Y.oFpd"QV(&,HJjMOJI1f7")+8eCu-l)V3o_T''k9cj1(pE0-%#PV3Wrr@c^9)emKo="BMq[3''1qbA71!W5@j/5"CG+,eLV^rWkg3q!5XE;Kl%Mu,=:%WM4%qa_Ir&dSI:m=o<Ss7t8ms8V)Km/R+Y.#.d%p=ua-IuB,@IA$rD%ek2A?haWu.#[s@qhQBh<X!uGD7`,ms8VgQ[#=tak\R@#s8GU&s8UJMT`>&e[R:Du$O<DaS;`boSVrD^R<Al1*W(<_L\q8K1Q1ucpOLlm.KueN\REF7V2P?R(-hm"!!GOerr=1W!<3$/^]4WM]_E-6!#=Au%egA+M!u/;$4ct"pTs[6''laTX=SE:?E=1P%r]Yi4("EX$0_d?tD\[7!qcNS&''laTTV#2ANg^4Neph0DZ''m^3P;&*OIN;Ebn@gW]"p`90q''m^5]EVq=%g^4Pc$i#_WFqo<1pC7%I(#TE/4SRJ''%2JmC.VNj\rr<O:K`D)8_c6X9!@-1qs%5DT#ljp\.=)3u!!,I<rrB2"o`"n%<f$bU+9DuO!%guOM[9%e"T)$qs7Pn0qcWt!!nRc$rrE)>XoAA$,p!6is81Lks8P]tG5qTeq3q?`gJDAZs2B&$M[2QIs5XkSa7g#bs8RK/aThbF#T<R?s)Y+nrr=,+!rr:)=3pVCMuNdj;.tmf!&9^crrAC;%0$;4+q4JO^4#VZrr>F]&GH\7s1J$C#64`''=Od?NU.BD+s7GT*rrAn)N;roN`p/Hf%c4)Y!#>M6iqqp=!!39@s8L`)''*%uUI-r*RC\K1MCBsk?Ns6m0!1Xg\rr=GBh#@?jl$+8@MuNbiJ,k#t!%:''Zs8UJ0Zj?[3<ULS$!,/t%"onV>;K2X95)3tSs3uQ!rr=*j!<<)6J,kN-s-G"fMuWgN4uE<>Otl>''s3\e.s8SF_AH2\:f?XBrcR5so-^$NK#S-T4pK[Lo(&n9nquH`s!X&N''rn;u)s8R:k!$D)RpEoWM#QFgc#!i1gS/-YT!%7TXrr<l"J0(;?rr<[^!.FkI-pN7^s3X!F#lam)mK!7eBY(t_s8Tr6JH#U5LOfF)e:7Q!!$6Xjs8Tia!/pmWQR)Wis8ScV!<<(^1''%@SdD\BNs-KTJs8TIX_#FD\-c#U,OueL,H@$BQ$4^UDq#D00!93nVrr<*''!<<&PK)krOGC9H5qePpQpM1$6!KRFMrrAQ)JH#Tsq8!"1([6GkSr<UK&qBt1rr=H3JH,Ys4hq@''!*/Ferr?`D^]jc<_GYpa!''Z0gs8UT!!<3$?J,oWL^OQ<Bs8SE2^l/6mTftaAs,o,;s8UKc5l^kNVEk1][+E+n!7*%.q^7OfM[9)?pJM`G$N!s"%M`sj%_DCYk7t3.pE5D0YmU82"L8@Eh"XJ8/J\#=q\o?j#QOhf9?7)4ot@[2s44E%s8Tj41&q9aRN6kW!)F>Brr>FS<Z[2!!)@d''rr<pOJ,]L<IPh'')-J6lK!&k3D#laojRq)a''!%+T,s8U5h./s8cH=6dQ^kmAqs8T%o?3pT2\soR?s8TB3f`1ueW&"DQa&gQ4rr=DHm/I&("-t#&\+hEfrF,R3rr=Zt4pM&ehX6$rs0Sabs8VYV5QCba#]bk''s4U4KMuWg!/Iqd\5WJrHs*2u_rrAA)rJU[U8e.5Hrr=RTDZ9\[I6df4)Mr_=!$]Vcrr=0SDZBaf4+dJ4/bi6Ds5eSmrr>>b_MeEo=pJl%rr@HAPg,-\AW-Qg3s&1Ws6eVerr>YT\GuTg7O8!65ed(#rr=Y-\-<EgpWE7W''kd7Xq^%a/,`;s*''F4@[`-#0(McXRR+Suo[0DbkG4cB%BpETp5:q]d$%X/1V#@W.>CEA7hL5T])#l=r6U4eehT8O!L,,X,2+89CQ1&D9@gE2?YUWD''M#koA63r:mp"V)gP0)3L&=GneQ@j)-B56[[[Zb<)kUl1^SN)Y^:BKI@6(''lSj"8=s:pB^L9"eGMpcsY@][>X@?_"%adhZ\@KBi\i(C5[5FMo^g]UWD''M#koA63r:mpq[NEI"aThG8@V!E#S&K]^%fDYs8S"s-3+!\3SXT6_J)"0ruRKI+8`_Vs8THWM>mQ[->*;XPC@`U!,gJY*rc4Js#c5>!%@odU%]7Z#ko/@q]q+"s6$!MG5qT:@0VYis1`iJMuWhTL1[cMrr=GI5lUg-:Z)3Pk`C8n!%J,As8VY.6N7$AX+cH;rr?OS)#jT8gZ\Y;/)O)$!<jUQrrB''hmf3<TmM,[$FCPs`s&fs#+8fdTs8U>"1]RK]bg$.f)QA#^!0UB<rrA''cG5hP91Gf%2*heJk!&DdCrr=k,9`G)e.(''$Si-3KHs)a&Ps8R*MT)\i"_U/>_hXG"Ss2R8V*tJ#Qp_rsR(''":DK>@NePC,Xqs#^6Gs8POg_#OF-_a+5%Au1%Xs#*!TrrDgtJH#WebeX5Y7Pd=0!;Q6&rr@QV5lUhsa[#n+QoRG3!6-q4s8N>D^`WGTr)=E''$MYV8&J^uH%f>/X_>aL>J,g=)#64_QZhTIYs2_T4rr<RUirB&J"_%E2?3MAUrr@t>B_Mf4s)`6.#6+Z6q,dRr@%n)0!&lmfrr<R8o`"nA>c`hhV"YLB#64]]rrE*!bQ._Ds$s?\s8S9X''`\1,J,oTLT13Gms4r2*rr??8RNJ=0%[QiaqFVJs$9S1t''f$++QM?730,8I6qcNS&''laRKr-K/6$4ceRposOP(&LhspIt;mr1<cspJCeXpFH"LpHo.\L]t#9STg!-#lE!SMcab?>D`\^/I''U]"nr@igO5di3XGK4#I%k8,Pt(S%U8^`qF_QL$Mu"F[2%X-%`8"=pi[DH,6iVk3;X0Mq`]oDqdTF:q^;8kqgS8Qq^;,F+88?bpC6bZpH&ZX-3f&S:f]3,,)](FJ+jccpUKr0qmQd%pB8jem#1TMMkVeeAdAm1q"+9A''grB=qsF-*q/$j)$4ct1pVZh[''laTX=SE:?E=2FH6kqTe%QO3MF;6_A%ercp]_?I^m9fSlqa;M&:\VHuT)52cqiGGa<Z_,a#PTJ/pAt$-+88\-Er>G$ed)3T@.5<=!/_<Frr=3`1]IHgN6NIAM^]D<2"s`=1''Z")E_&fGDa,<RpfmPMq/$lD/,QmS[.h-..fF5Y.eh-\[JS/Aectk"hV7cOpF%oaq\gRR:Bp\."J,r1pF#a?pl#sb;"43QpCR7oq[iKur:0M3p^d*d#,I%YY_8QkMe`UqdJ#-bfE\WnpETQ-*Y.!#\b\r6H4''OJrO!C"$4cItDu*''@9a^b$r^mpc$4aiGHhp,FPm[CEr](_S$4c@r:)<SMq/-!Yr:''Tlq!e/1rGD:Tq^V=U"qJ9?IeP3).LPotpCS,j$4aTA0)''B$S-o0`pBVM)$4aTA0)&rm/.2;Ep`:/%$MtD</d`(mpO!b8$4cfapE0,0''dNUApD3KQps/adpD3LhqZlotr1*YW#5_k@q^5DcpK!e!Zepr?!fQ=LpJUa)r,W)QQM5e$c4r)A%eqpVA,!5CjU)K]\G2+"jpDUcpO!b:$4cItHkt`Lpc\I0''pT+9h"Q13iX-1CpkAM4(&[Rq.f!rZT)5Yqs8O=%a8c2,J,oWLU3&Eqs1*X[*r@5gpLpGuJ+lARpL"49pM9MNprjI6$4c=qSbM"V2$sif#I!n!''g)itoCnC_4UM\`pmq3L(&[Rq.f!rZiVdWf.erK<%\*3?pQu[Z$MY>=57.n8po!n1''e]n(>PJs.n.eA!%_qbn(?>f4pPJYS(AB<CXTn.dAt/ObpQ>>`Q6IDhk5-V^D[%E_A:XQ>qjdCmHgDiV#3c8*#"9c(pHA70pC`Y5+.EK/.f8iQp[jp[bkDa''q`"C8,CW''''%[-TEp]qU+$4cebpmq-k(&PE6nG=^6D>;BQ.ea_QQMUaZ!W+>N%^PkApN756$4chTqIp`@D>Pg\nG@P,nG=^5nG@/!nG=^6D$LRGLAGErq^V=ZpQk[bq#U@Br:''T0q!e/1r:''T/q!e/1rG;cLpI=p!ph:K;R/@Nm&bgVLnFtK=pFP1UpEoV_2<t&W+8\k2&J^lE%enNM(AVe^2@BC8ph:K,$N!Wr&J^lE%\*3?ph:K,$N!Wr&J^lE%_o7CFqs6K%erNh@!!.X@eUi955/R]DYk4D4o8n7qj347qgX)a#l?(F\bdlTD>,OSbP*=fP;^JYNVB0*#l,#7pCGRtq_J$t6mhd>q[H!`pFZ+kdI?l>*tGsY1\[7OaSVA!.f!rYecu"&3''7!a+,g"<ffA)=#lAT<SbGX4"o#1p''c$Tg#!6G"e^gt-gE6/4"qDdM>]^]U$MQLRKG@8i%S?EOpph,1Mb&/-7?#''b\\+os^#s%ba/l%o\Vmg#,DlY_MhbSBKhI%ZLL+or''KUO:6]:g]#lBA?6MED45NMPLpG_h0./+&F''HV)f#o-;E%O1\:pFd8i$N&9GV\QZJqZ6o1$4cr`pal3E($Z,9V>/^4(&1H"2Z#$1Mu+K8q^PX(#Yk2>pB(($pc&''^pB()4#5f^4''rK''=i/@=9#ep$Sqp#EV2>=EO\J8*OpA9.N<XK?2&,4WK=r$?1%OLj4pG!Db$4^F`pokM"$4^F`pokM"$MT5J9,3^!%O_!Up[],e$4\cTpokM12@#0;*/XOu6Ac''G)[H*hanGr4S0,iH)>l_n+S`/G%[-Sj(@:e/Mu13^+H)0QYkpeG.JqjKpY5R4Mi7M;pE5BPpV#qj]`emEa7ukR\I&gIpVQ^9''k.N/qZR^E$4^"TpokM2YkK:85PJO_5PH;qYQkYCp[\*i''k@Yeq["!K$4\?U[eNB.;@3p2DtlKjYSI''gqZZ^5r''0oupcnKl"qLM3pLeI\D[I!K`VEF,\J7Vm>Ae.N#ks\_+T%K1BuaGV7uIZM+ZB33q_S+/lh_1d(*Ck\];MdO#lCe!+SW#DX\ZQIc\i)''(@1])pGhn''2>7g^+<UM4q[""b]1++o>=V+O>0u[-]$SkIp^@pL$4cqAp[S!R''lF?gKZ=l''?i(H0!r$jqpe1K,r''1''cpcnWu"qDi\pokM#$4cfSq9BcNYkoR@5PmhC5PlT$5Pm\?5PlT$YQk[4anaO(q[rQ(pNHEBpe1K,r''1''FpcnWur''1''CpcnWur3-D9ZhZ-G4;ISl52?#_*r>s38c-^."nt7Z5PM>cpGJl>bTH`?g_K5a%egA+W:rChmgAsMg_K5apmUtE''jD"T0_hU@4;I;lqr$6EmKsFLp^?iG(%;P?pJL\%pL=r0q]t,XpF(q*pGhC2!V\nS9/?5<4WjPJM`!A9q]c@mpMg!Pr35o<pL=F%p\/qJfX"$j-=K>.5@W%2o!Hfr*tCWJp_=O"#E(dV9AXarq_.hapIC/9,PP]WMi7IBpE5BPposY)MZru.AMQh!pZP*^q[Ng1Eg!uCUmf+ApC7B;2>7UVM%r_lZ28&H<=8HsH50Hf%Q4#Eq/7!f$N!s"%M`sj`(q+J$MO@C''ikYO<qkkR3>J^3HoE/EAd=(f*@NmGM$Qf\rr<2Ji;`iW+9;EA!\bbss8V!WO,F:mpMKX=pI-1uEX2=f.''PiU8;gMdA5NX,#5:=Qq``!r+AkQPdJV2^+SX1e`jE>''*Y/''tp`K<i''m^5]+%@"1$4\?Up\//4pBCF\#FX5AZHnHIMl(H_6jWN*#(cLc1YV^FM[92;/Kt!bqaTcopG<ud(Q7G2R.h=$q\fZa7;m-FMc#CB[XZg5%O:^2pG!Cs$4ctYpK[Kt''jD%@D$4)N%f?q5\G:IdE=2SFpC7pX$MOW`''jD"Tr#,6@pokK=$MhjJ>RCu8KD?V`dhV`[pMp+(q^i#1q^-q>8;[]M)k.*,7@''YA=Guo:#ep$hr''0qZ#PTCEi5m(@#MM,Yq\($+qZ7M_SU"pSB8]k6qZ6*h%ekVO+8=5!qZ-A1q]PcTqd9):q]Pg@pE93?pL!f-pTFeq+g0bF+0#S"2p(q1*f''Uo("Ah!E+aNE6m):,mKO/9pZ_H5''sG;u2BRhReb:2EMtcoKpF.Pq4s!7Q<c2GF#knPt54eY8`VUcT73g4XbP*.RcNhFr]?_N.-hpU8M\UOFq[E@f''po=<?hZ&GM\SqnqeZ.J($l8;qZ?OAq1KKJ$N!m&P8/!C%TN2u(ACW"YkoR@5Pnj`5PlT$YkLrj&bc>2%en`PnJ;-)1/1UF!*&qarr=RNN;ilc*+&XF/At`l!1/kQrr=@S$NL-;jIH5M,D$@(s.?rerr=bZ[/^0.Z%<8U+pR''$-he;KU5Sci#l>nPMu.9cqcl>^6UpfC=nbUJpIbeh,R02(8Pf4U48VH8pIS]c8;m4\#l>qQMu1rnqkE!F+UAS1pUq@B!%:X7rr>Oc_#FB>kA:.u,[8Ro!#>Q$rr>dL0)kneim@`*Z1^Ze!")iZs8UmR!WN-ON=Q!g\(:K`pE0\''pGTYX@uL(H#l>_KMu*^(q`@mV*`r(SEVDALe-Ppo#)bfpq_hFN)H-;JGP=1WpBh3''+9mc$;Ru[''nG>$J%ei9bNq`bmMtd8K+GYmPmfb"@GVU?8C&8nJBa=M@FgTmFMtc];+HMHXrrr:<pE"VS*$4u$pE]JW#PTJ;(]OI[f0K?9aXFqH%cmC[pAbrc$4ce8YP7o/4::kpZk`*<N''%jG$4^,2_YCYV@LDiAqhc,k$B.(^Y6kd6YP7Q&o*Y5:q?.Q*$>TGr(%hnDf_<&pp''UOMq+MOq$=E["(%hnDpY5H4(@qlSq99ZK!"''4gpUq@9$7biq(&%\8%f9l55PLZ_s8RjK;#^M.jBDQ`5I.Nn!9"lo8;mNJ_^(cPs![=Ss8QH\AH)WI&E\mBrrA''*j8]/D<ltCAa6J0Ss#J;Is8Qs)T)Sd+gq\h>rr@Q`3WK-FPf*P$b3R+Js$UWccAV]&1,%Pb!3odXrrAG5+ohT*UOiZ-cN!oi37\$/''c;K$!&t7lrrC%Bp\t5N^39PVl/@I&%f@7?pD*E2rr>!i,R3ucrr<%I/;sQ.kJsh$%#^&<0`)9:MuWgt3)KJps8W+Ne;O>,)+<9W%#Y9!qnDjq''rqZOBDCU(pD-a68W-JsIesQ[\d&07%$L\k!(L[Qrr=P9!<3$&Q@Su8)h7pH#XJ\*qfDPp(%hnDquQUB(&)L%VE+A]M[8SQ.#VR-qeqDi",m$`:Q,)n#knc4a8Z,pGE/Bs!&KFO*Y/(bq6Un2!=JSRq\p:E!=JcH(A@h:q5=,D(&%_9q]#Fc(&%_9qqCoe(&%_9qq:]_(&%_9q],@a(&%_9%f<%t(&%b:N;8>GbtA;"rr=fp/H5\]`b,5N#3@!-!&$@$rr<A(Zj=&E-%:DOMbsaV#QFfD(^0m;;*B:Arr=[P4obQ0<5\_9/O<V@!%gK$"oeQ7,b4o7mb:A6!!c+Zs8V[Oer0S.o&T(os8VW?$ig8$Hn#*qnSti6s7.u@s8VC(\Hr38*O;pLs5Ha8"oeQAGE)V&,CQWm!"-W/rr=!O]8Q[h(C02_rr=(PoDejY%?g_k(2ukFs6/KBrr<iT\Hr68ejm+I!%GEA"onPcSacX\(fJ]qs8UJG]`.saX$m!fd_<6ks3eWk"onVjgLU<a&L<nHs7j"?rr<JH*/jgs%3$RNrr<NXr;Qa&K@p2(%ZXZk!"I-Xrr<bo=:"s,i_<8L!$/AL"onV`LiECogk&B&s7JKjs8V/H9T/rNkkG^Is8V(G&H;_Bno4X/l&VM;!#HWVs8V<C<!`L(.C`4Ss40]A"onW%LM["i2cncLs8UJG]`8#Z<5\_9/O;r-s3eWs"onVjgLU?amb;LVs78;4s8Vl%S,`NZjP5[ns7+YCMuWhIEN&m;#_VFBs6CW&rr<MP&IAF:i_<8Ls5Ha="oeQIIB`bOjG8Be!#oUYs8VaS4oYKu#OmZO!$/`AMuNbmE+8hI&b:bX!#HWVrr<iT\Hr38.C`:U!%GEA"oeWA;Pa<o(Ldpjrr=[P;#^MJX$m!fd_;d^!%gK-"oeQ7,cUeD&L<nH!"?ggrr<9r4T>Bj)^:4?!"LIUMuNbeN`Q2[pO"Ch!#4Kts8VXGp^$m"*O;sM!$/AL"onVXJkl=G)g@DDs5]M?rr<DDPlLdIp^rGas5HBYMuWhAO1>5imL>9Xs6/K5s8V<C<!`O(ejmUWs40]E"onOoDnuDQ"h"OK8P99fs36PQMuWhQ)W:Vq&B8>^s7TMfrr=]4RL!=+QmK7n`JY#A#5O.5(!Xo+rr=fp/rT`0#3?p+s6ht:rr<A([/^0Q`b#La#(H)KPu3GF:^.F(62,aBpUU''XMu8P.(5n+J.ea^:Mt`P7!fN!4!W+L-qmH?TMthu&.Z95`D$B\tqD/jb#(g-''G@-86MfPMF[g5o`#!^%(f%.dXefG<jpe:Kr''pT.(&Gn^-r35oP#PV<ok)9-!pBZ\8q[rQ(Mi7=Q22dCf9D^Q(qcE[WMtc?;%\EEEpZrWd$M]_dlME%^76Juq^\?:apFP1UpEoV_2<t&W+8\jmg=c`@>PEXAEtu"gpZT+%M"_$<c2/lH#l=nIg=e[9q]J?i4PTcRpU:A$/$\0[*tFe8DYQI3:WHC4\6]>jML^S7M[92&pM]dK#2?@q5Tbo''L38&n#kK8UZF6IJMq/1.-90cW/0=]>rGD9YpR(\N#-EfaOf"HN`)=Lj"V+f42"rpD=2.[4_Gg\eKRAQ%M[2aUcg^G9d*^:Q7O0(6AqXlIE<o/2()9>t>Ae.N#i#5!rJL=lpT=b'':V1PkMmJ>GQ`H_aa%sUj:rW[D^7io3g5G\]2>7g^+H$L8FSC.uq!e%WpR(h-q]#k<reud6D$:FHDtkmZ/f"6tq\&dFr35o<pcnL`"qG8>L\OLWpGr!IpC[=fqmJZb&_['',pF>p_pJ^eu#7gWCh"TV>8MSKeKD-M_KCe1LmIt/c"oIcn%Y+5#(AJF7#7&5_Ak=*AE!Js9Al0Uiq[p%:pF,LrpC\SBHjBBY-gUXX*r?W>p\sn!r07.s"qEQca@@!B$bZesn$)O9+86ubpG;[NV`>efMdh0S?3p9XpLO"%qsaNfpE92B#I^G:b0@894<?Ti<Hqe?*Y.s:qH3Il(&O3hUA)q,oD:M*qhb3NMta:L.Z95^X8@bJX8=l7pW`U,qt^."pIC/9VY@?Rqm#lFMZo%5Z1k-mZ+#XLq^V=ZMi7=q"V18Pq,Hhuq]PW7pI4h4q^@C")#I0gpJLf1Mi7I0q\]'')q^@Bs7Jho<C&>R;7uR*^pKELP>5''.t"cN+YpDs-7d#3hZ&bc?bMt_Au%\po9NtqC3#*@BNZg*GSfXtls<c2(;!?XQ''%.OPlY#S:n;e@^*-&Y[0L=lk0-3f\2+QGHU/:>KISSsEnMeR9[<f;0[G`@!0#[@V3KVO@$Mr]f5Y`$JY\SefYW:r?=m,<ls*fJcl]hPW;X.QkZb6[hd-JePdqZcp_B_u!T%O:b@pG<VC^j)qjUp[7_\Vm)<pB*>#q]1Ul-&XQKM>IJ_pDX<q]W@mRMnFtKGDg;DIKsqKBhod%qZ>pbgPoW`+,C/:A9UWe1Q-[_K<PXY*<qQIdSBNVJ]2)hE/S(]Bln]&Mg()(NHpQj>R.-ZUPPh+jGUmZMoCUbDREWHZB+`4U5Sau#S-=uq"Fb''qloghp]C3]qaHG?Z2:S[pT+0@Mi7ONpF;)ZpTaJ''qm"P,Mu,!u(5n+FQ3@aUpg`e.q`FORpM0GYq^@C"2Z$@0pJLf1Mi7M;pE5BPpKI;Qqc_I,Mu++\!fN!2Fp/B(pSdh@(&K3/bQml+q`4CUMu3eRoS^KYkP*[,7>q%$q_O/W4H#-p-=:/=pT+0@Mi7ONpF;()pTXr5,56W^0,=?mg85+i:%q8<qgS::MmrF^pN$-ZMd05>XZVN"q\!OMMt^*G+H)0UYkK8u"nu1*%b^T(q(<E)q^P9,4Oa5cpF>pB#PZO@Z1h"Or$_=Mp]C3]qaHG?Z2:S[pDqnEMqS=E,PPL=M&!>n+CnSN^ALb#+ST%EpH/7UpI^A@OnZN_CA3P].#[s\qb`:6_2F5k"V19Tp`B6J(&SX?&bgVLnFnF,Ym0s5qm#m#Mu4an%ep,"oD:t7qm$%!"V.4"gA%leqoej?pHSR?pE936#5:4V>5(XIqiUWcpM0GYq^@C"2Z$>T%ei$[1\Ukaq#U@Cqka1spSIa:rGD9YpYY_Qqqq,eq^V=ZpQc$oL%r"D(&1H!+T$-T?h\O:+T/J<+STC??i+@-#l>5.!r$jC%eo2_1)BZSpWW@Dr*oQ"qm?*oq^VP]pF>pppU0nU#7gA#ZPN=#pKI:pqr[cpqd9):q]Pg@pE93?pL!f-#7gN,q(``\&,-;6`P6"V+8^!^8QTM$*ch,iYQjhMn*B]\+8:-fpC\k>q^<N_''DHYIiVdWf.erN-[J]Lu%elRj+%I(C$bZesn$)O9+86ubpG;[NV`>efMdh0S?3p:tr-/(CpE95qpL!h_pE92B#I^G:b0@894<?Ti<Hqe?*Y.q_pagM%^5Kai]UZ<T\:V8LpFqNPb*B"5.H:SWCN"8gM8RB:hM_+.#koQ$pDWoJ8c)(Rqii.[4K(TY;$_dYq^b>#pH&$ef(TaM66Gq6#Q(k)"T)d-?2J7..f1LcC*31.pHo[#Z>IR=a9_Ma_SERqS5Lp[M`Y`?:L"/8p@l[N''sih+P-UL[IC"U2Mt\!F]ZcYF#X-<6Ir&bD@>M"mT>6B/#kU@4+tklQq^`eH=.<ToB/PZXa,BZq#kn>RaPe37"pb$*qZZj:q^q\7pB;c81`uH+pG<V.TR<YqYmB*QR\QLGGsWR1@X;p5FpJT#pojI9(&&pWIePi!%I3gSMu-tAq\8oTMu/$_qe>^"+nn6DaC1WXMdMBVFF.&HGDg^*H&i59#H!0LLo60lMo)]V`J_9E[9BR(1mmq*PP6^9q^)N!/l5S$M[91c8*Tb(pGLCbpBi#:&W<A8P@b(1-MOtD8/9($VJr"m#ko5AJbL!;gA;hIq_a9`+cH4kMu,9[-he@"aC1WXMdMBVFF.&HGDg^*H&i59#H!0LLo60lMo)]V`J_<F[90F&!h%TkQhLakq\fZa7;m-FM[2^YbOjAUna%>-?MG<1!#>9^pM''@6r7q/]pMp-#pD`uZpD`jm#7gWNpU''E)pY,?\pBCIIqZZ^5r''0o]q[rQ(pN?cOHh\r^U(p9-%Q4"`g_KQhpg<n\Mu*PPf)#jLf)%OepLsJ3Mu07C.Z4H?HhWWr,o-;''pF>n`pK[=e>bD>rHh^tF4H''(YqptWnpX]4''Mt_u(?]0+)>`4Lb"V+K+&p+l_>k@ht#5;Eu?i)sDqZ6TFq[</Lq`B`1B`)67>`4LbpKWW7q`=I$MZjTVprrI4(&L&dSG.1#q>3L:q\o?bq\8dXqaQM<Er5k5HMdm>6AtR[pQ>1mqiSLKMu,!u(5n+FQ3@cq"8H0k(&J1/5PIS?T_gj02#B3fpG_t3Mt]X:T_h:WV"[!0kP%+$q`MiUMu++\!fN!2Fp/BM\bBS.n.kljps&[cpD3LhqZ?Qoq^VO5qmH3?pIk5mr1Np!#7fJ^*;D`5r''0sjq[rQ(pNA(^9D]k05Png^cM%S<"oJT%"U>P3%f#N/q^V=UpQk[Xq#U@Cr"&ZN#>nR,boc\Yq^VKG#Q#/&/,(G5pG2Vg"qG#8Fr''repB()42>BiA+T%ZV#@2,=]-$cJq]Pc;#Q#D5!a>="*prh`"qIs5_"[I9>*<?uMo>trW;A(AXp=h8mj[uR*]Da1iqmlm.f!rY/,To8j?*YW7/)Z73#+C+hS/kGpE978q]Pd+=RnR&#B#`MTSp#[pK%/6qc=#\q[DRfm=GTRVtY0*N"u)0q^VP]pFH"LpE^''`^Lg%Zql''6=pT=bq&h!#B-lrjdpnS]"<sSI;qZ=G-!Zifb2u=`qYkK:7SF6ZmX*%Vgqc3q3pYtshph:K;!t+cIqgB4V,6ia3FY3J&M[91f7HaD++8C<ipQbUkpC7!k*rA*Yq["Q_q`Y9;#%)AUb/B:;Z_a(9Fs$G[#3&.Z3\!]nqZ6RMb?FXP*rCWb''`06O@NP8(Mt[kLR.iQG%e9<4p\5Kt":G&ppBhZ8!"m!Hrr<Hm!<<)kJ,oWLmXP9ZhZh;#Z;jOp=$c]o_IN<i*rl77@fQH.>dH9es-K8WrrA]cbT?KpMrrf^pD!u2)?tIUDfA^7#X`%ApAlB1nC\"spD>^?q\tIj(5k"=Du1(O6O%IHR^Km0!"m!HQ2^gs5QDl9pYtshph:K;!t+o6r@SiZ6jNH4Re>j1pF6IG,6ia3FY3J&M[91f7HaD++8C<ipQbUkpC7!k*rA*Yq["Q_q`Y9;#%)AUb/B:;Z_a(9Fs$G[#3&.Z3\!]nqZ6RMb?FXP*fKo7pA6$-7!/e470a=mpFc5Y''qL\AGotoJbYPNE92SbVq[^PRpF75Bq_m%QpDS>`qaK]B7L/OUdasfZ":4lC#''iXUE)hf%6Xe(1!?_(*f`m$%(c0nC)iOS/M_mnAq[a$##&eCJ[D&2sSKITVq[+)4":>Y9mIu#(D&"r9%eqpW1AWdAPm[Cur<jA%$4ce[po=.&''pT.''C&F83lO"-/p_<K5''iU%c!r)<`7>q&Jql>YLX8=B)Mu@Me.Z95ZOnTuV"i\5g8KTMh8QTM$*ch,iYQjhMn*B]\+8#m5&h!#B-lrlq#ku[>]bPdLpM0GYq^@C"2Z$@0pJLf1Mi7M;pE5BPpI<Ab"i76W6m#Y=6u-[?*r?>Y#PQNgpC8;>!seQ17a)tr%egn:L%t-Pr:''Frq^V=UpQk[Xq#UDbqlU2(s!*HBs8VLC1]RKLF?0C$\BN2=q]uLABVtNRpI-1u?j@0^oD#O)q_e\;q](Ii#XXCSq\oe7/]m_ipRE>HpDNlnpB^X.pB()42>BfL%dEbZ_\GaEAl0Uiq[p%:pF,LrpC\SD48UQ*V>IXoV>Db@D>,OShtOM`%TE-MWte$<DH.bT$bZf=d*24o+8E);+T$-T?h\O:+T/J<+STC??O%)82#*X9h\H%GpD3WUpD3LhqZ?Qoq^_Q?qm?*oq^VP]pF>pp#7cg8pokM2YkK:7A+s@-A+p9+&bcA$FuB%fq]PcTqd9):#7e??Jen(rq/-!Zr"&ZN##SI+boc\Yq^VKG#Q#/&/,(G5pG2UPqZ?Y\pD*rC7//)EpB^Puq]Pd+-O*jlTt;E@<r4$:<sSU?pB"Om!Zp`''2>_Rk!X9//W:t]7bSBjgr64mbMt[t]b_uDCpD/[Fq^V=UMi7=qqZ;\6q#UA9Mu+4df_ZN\f_]cKMu@JrpF6@WaS5oSm.\2Oqn;_0Mi7HEpB$82pNAEPMtfsB6]3DjgF;mOqa6:"r35o<Mi7>C"ml-""V1FspO)dR''fHC/]D-jL-P\*<pO)]I''e9Xc''_hkIPmS!PpKVeT:($_SpOj8W$GZ@e''pT+9]D-jL-P\*<pO)]I''e9Xc/GK5\E=2SFpC7pX$4\]_???oW$MQLRKG@8idJ/)(E=2SFpC7pX$4cgtpdY!/''o!(iF8$7]LC+OcKD:B!Fqp#Eq]LG)NsbV)bS?3H%[Qm.qCWMJ$N#VVknPr\%Q4#%q/I.7$6]43''ibV7qg&uX$4b5RT(e3ZpB:p$,PQU$pEKm,YbC=U&W6qp!-UaIrr>O#kUcTi+8gTmqj$mkq[N9kpL!Y.pF#]apON,TpF#iI*r@sUq[tH/q`"ik2>=Fu''rMB]pNdRQ$4b5RP57fdE=2SFpC7pX$MS*/fG4,a$Mu(BI22K$#*c?cl1YdJ#lamJ6id5e7_A^Pq_oVpIg5e8pD3W8pIY*dpCm9KpO;jeq\8cPqdLWD3K*bI/:RIU#S&`e5l"Y"E=2SFpC7pX$Gu`;''rMB]pNdRQ$4chgq+1?"''laTX=SE:?E=-IYJedAS%egM/]D5\HE=2SFpC7pX$>KDX($c2:PPBG")&7,uqcNS&''laTXM#3t_jpDSEpdY''a''laTX=SE:?E=,2572;p3%OCfDp`1*H$4\3R#5=o.W<s.&pm1aD''m0l\Y5Ot-isH9''pfI8G''m0l])d*pB$4cIuRJId9E=2SFpC7pX$8VRP(#oW2?hdk$>SV5cqcNS&''laTX>?M^-$4ce<ppBlN''laTX=SE:?E=2Tar([th$MX/dOqg+e%U8^4q0Nir$N!s"%M`sj[6k[<$B4ic''k7R\pBRnrq\;4#pq!gInHt4;(%M\A<qjK+\J8Q\pC[:[''s7n&4;G%,%eg5''[/*E1E=2SFpC7pX$N&''FC)&i<pq!gInHt4;(%M\A<qonpNYQO@qcNS&''laSh0GS%(pC[:[''s7n&4;G%,%_qe!qAC#f$N!s"%M`sjqka2''($Q&8,ks_%>SV5cqcNS&''laTT+o@uKn-TZ4pkS\5''m0l\7K&hnj9cCo#P^U\0bng<qel?0''lOEh[J5^W)&7,uqcNS&''laSLrLXhc$4cqApd"X[''laTX=SE:?E=-^`r"X,W%^c!(qD&eS$MVj?-P`''W/cD:Vj9cCo%em"!FVU>PpWiL\''q,L,)uTUKD[Hu[pk&>[''laTX=SE:?E=2G&r4Wp/$4\9T:AJ-0E=2SFpC7pX$N"F<($u><>PEO>!#>9^p\sn!r07.spD3WUpD3Lh#7gWTpal3E(&RLuYkJG#&bcA$FuB$JpLFI<pXT''GqAC#f$N!s"%M`sjpgmSC2@BC8ph:K,$N!Wr&J^lE%egA+_"h4ME=2SFpC7pX$MQg`3Yh)jqr$6EmL&`Xpd,^"$4`I!!;MTiTF)2+"o&c*0bo=QI;1Qr#YJX"X<3H-U5cS8*p<8!/I#"*XeQu*#H=br]H5@VXE0>(#ko8BM>%31d/,,Iq]1SQ7Z7-GMg(.d[;08mG\W.;Ma4lN!;B?KpGe)jacH0''#S,8WL%t-Ps8W+q@/TKts8V4nJcGc''<lk=@i0f)ps4TkG*rl8:[uC2.rr?Bi\d&07TeWSI!''KTRrr?KL])MbA6cL5J!!!"PrrUjDJGc!sMu0X\s8O=%a8c2,J,oWLU3&Eqs1*X[*r@5gpLpGuJ+lARpL"493V3$M(&KloMu+KNqZoNG#l>PGpFXM]"S\E.aS-SPs1f:)#QOi(m#:uEs6Rsfqu$]us5L&os8W+4[/^1$<C$TaTG\Lds8UecY59+:!(JP:#6+[[>+gfR!(%nErr>q''"9/?$Ie`pC<VH@spoju5pC$a;q0<]?$K:nm''gW0:>kaY-''kRfSpfnPH$4cg8q/-s=$4ce:q"Y\B$4bM[(ANk(s8Sapf`(qL\5<2*P>Nb.!0''LQqaHGCs1r`[s8TsRf`2!(NDTWT,!7:N",m0Z@S(hEs/NE8s8Q*-M#[KX9Lt*9X8=B)Mu@Me.Z95ZZ1kg+Z1hL]"oKP=%fZO*oD&=cT-gN:!$r$Zs8V!0=9T0Ypl"nG(''"<8P&C:"9''%,o!*X6&rr?[Miqk-^s8V6uNrT.=n>-*ap#pGr!!s0@qZDcV!(bOUs8Tg+6N@(`/X$/6Qs[RcpJLf1Mi7M;pE5BPpKI;Qqc`_dMZs!?pUpM+9!$8:!*(<$rr<d42#mUBgEHe2deGEg%2G+Z"aYoJM0+X]/RGjF+8CHb.f=l''qdT:\=8*4H^Pg-s^SV;2/,LRCh"r>j)[3%AS%O[%#l''#K.f=l''MgUD1Ljo\^P6DH4p\Xc>(&JI;4BMDh+8g`b.0kh+8GGH.Mt[h]5`:Qp;$H!i[HZqc@5ArPpF>V:pL="^^\\H]%e]UTpl?0eOo$g;/k3DG-KCKLpGDmM<WS*X!'':+&?V2F7-2\r%p@fm1!r$sErrBO2R/d2Q/<''T/<)I?/s$>+UqhS#Is)4k.s8P2_$s9%sO8"\VpJ^qhpETqQkkK]EpF>oLpAt"#qZ6FI#)h;[`EK`O]0<&IM_g8TEE6:I?Zf5(3=,M$pF>oV#NN>%l05]d1EI%=p\Pa#%JN!"pL55lq^P#>1L=KA/RGjF*qu#r5kblg5kb?W.f=l''qdT:^=8*.F%eh1Bh"O2Oai)Q_Mt\e/rrBNY`;fjUW%e5OCO\JHs''/XPs8M:qB)hnBR@=0U:>YdGs#hM2*fL''ul=OZ.!!"^es8W,`HN*sHcU.[3hln4/pYPW\qbIEtT(a9"6.#?<B_sG(MuWfpbfp+eV''K7Es3Quks8U6rVZ6\UT))u?9Q4p.#UR@b+T$EX+M%7k#.9Hjs6T9.s8V[#I33n3)4:a0!.tQa0E2"mpIn$t%f83[#58uMq_%W*pQ"t]qi:E!q^28fpV6tC_>!j&KGF@nq`IsW@NYN"pt#0Or'':#\#NN>%l05]d1EQF4pF>oV#PV^)4MUb&*Y.pHpj;c$(&''?X(''[<I?7>jRQi=Mps7?=_T''c7WSs@_FYP\S>pG)@*pE(LO+2R[c<P8Y3*r?''&q^W`b;[+EB0jOTK+8h](-2<]0oD\e_I.!0t!&9*=*qr//o8&uIMb"+_q_&3O:0f^R56(YO6WF''c''8>NIs)PcRrrCi#*$5ZfpW)b<2J]MJ+6s13!''C<XSc8[LrNb&spE9?I#)P''HFZbQfq[iu2!1s?mrr?^0XQoO!+89a?pCShJ<;Rm:<;R"-q_EsP15l#N#l=i3q]bPdpG<p$chJ1K@28MJW_WF9+"R(2lNd/d:%p%4N?2Vg7t=lg#kq3n./eqq,knMJrr?C.<;uq$Ta(Ms:].<o!2Nrt*Y/("d>\n8hY/;m:&*oK,mFkRK)%t3e.qjN?ZA@2s*FSks8V?dfZs44*fKc?qd5;?pK.5<Mi7O_pEb`Upc69NM_YJ5F1V5bpR:hb^@sMZ7NV;Pq]uIWpIb5kpWsZTs+]$Ms8S6ci;`hI.u"$''LSZ-ns,M36s8SIE7/m6sY?_)-F\nn6!.dP.rr?ZW>lOeF]4CpAIP@Sl%dPJ=+<LFtpbW`cs1j-bMuWhRE@:bd&ng_6s8EM]rr<Lq&.")rq\Dh_Es6!J9D8r<5Yb''(Mu*kfqd0"Lq_@hLrrBmaFT2?>/<''<MpK&Dorr@WO#$Cm*@K-*daU#!Qrr<pe!/pjW"hQ&[s8U`9rr<2?h#IE<-Ys''Q?M=Ts!!WE&q1&JF!"?XCs8Vo]8H/Z!<t,-/pQN,e!".r^HD"fM/rKuF]_D-n''t9+7P.7%gq\]&WposWFqa1TE?=>E;?FAf7p]11@qu@!!@eVobpCA;TN;3hVAek@Gmhsp\!"FV:s8VJlnG`IuHR/Xkb;1u5Fc0.Q>##A$*rKUE/Gi*EW.)j.Qp:q<G1he3pL*n&pHA82pVR0,U7I^CMiN^[MjAr#_aak?P4rJ]K,*7`^"&bL%X@jj*bu"=,$-0b=9&<G&SV1E6M(!Ps0G#7rr<fC#ljqFXNc\''s2%m&s8W(d=TAE#VelD5iP"lAs8RYK[#=tab.n#W!$lGKs8T&`!<3%VOhQbR!"HoArr<%l6N7$1=HrjcrLj2j!)VXsrr=L^^]+9Q,M<%rhQ[(\!#b=ls8VBt5lUg$l9>7JlTDrgpBn_?s8T^Eo`"ncOM:_p''K&/Us6jt-s8Um`bl7YhrBp55ch@p-pDF7N#QFdr#;#`Vrr@!4eGDK1s&7"Gs8S?C9`P-B4RE+JKu4TG1%ut!Gl+!GU5PdnRsKR:I>*$+#]]nEnZ)`k!"5gBrr<S17/m5pWVlbr$<7"gPTLCqp[S''4(&JO=3`l2f+8^$O.edlej1)M]l*t.X*rLWaQhM*h!Vcg''pL="\^\\N_%^Pm\N"r,nMuNe>N=Q!gTni.;!3<](s8SC0&H;`X\5N>,1aajS!$Riqrr=hQYl=\>?*O>/<SJf!!%.ta#UK$Gs8Va#8H8_e21Y`,L@?Des2jL"s8TP1QN.!(iJ@O6mWfTJ!"#]Zs8VdG*<-!A0Aum1]N<DY!#6cL#VGoU"oeQK$@i*UnqXIL!!g`+s8W%Vbl7Y_./*]@n`tl.s,b3os8RD"lMpme3aVjdD3D,]s8O/&AdED^pilHZ(&QVfrr<>=qYpOB=]k\((?*I:!+(@#rr@UW49#;e+c?:".cae5s3B\qrr>dkXT/=#oJljN.N\Hds%Xpm#S-7rqfESI&,/-"pL56>"nr&l&c7pmJd4)<@4a'';[Gr>''K)7%qJd;0^pGuCM%iu3upu;$_''oV?h^gF)@!$.ljrr<t>df0:f>9s4K+R@+,rr?26AdIEspCR4/s8Rc3O8o66*HD,Ze!ZU''s%[0>*qpuca/-#iahW$n=EA"3*rD3!''DIarrr=fhIfBCBQ%K&9q6MpXs-l^+qZJI%A8NQ[pBVl<,6n2J1G_;r!1U;Ns8U<e_#FCX9[3;`pCuW]/KPD^p`^LJ&,/-"pL56=E;M-^E!J1*@4a'';[Gr>''C\sIq&bc>''mK`VupGuCM%iu45pJ:S]''g,Pk/rTTI#U''FEb54s.F8l6F$\nZ]B(UEL!/#]=rr@:qO<3]a-8Gi+s+.%Zs8Rg]`;fl5=doBjoUe6+;Z?_U8@8Bs@^f#Pg''@WXZLB""rr=ebi:dg)ZN''t!J,oTL+b0Rms7q0Frr?)M!-nj.pDNmFpAg-K)[-`/q)\:,(&n9LE+D`D!0WD5qhY:P#\\8Ys211`s8R.BeGoP/V^rne1A<%!s8W-!^Ae5(dOk_''!0=m@rr<o:6N7$KDOCG(K%\rZ!0<=crr<n!YlFa7JW0X/G^_Ijr%[pl#7cUc5kb<pm''u'':Mt\A#MY@D\Ls8ro9`''-o#ljopTS*:ETjN6Js)d7^s8S0$E$$S(-05C3!)Nl5_#FBkq3]q:!(7kdrr>XLb&7(Z*]=7]q^"!\q^m1$q_G[>q]5H7q[8>V)?gVtq()4r(&n9M7H@5D!0Oi4qhY-.:\u=4=rp3.,gHYp!!1KIrrB4,W;ciPkAC5!$o)Su!$4Vorr<WNlj3MApF#_a#KD"lBoDj7#lHFO,mOqS+Sa%PknQ>T!W-)b15qFAZhFOq(lRO7pBbGiq_X4SKkYpC#akKL(!4D@hM_+[#krcE<lOqTqi",D<r31E+:"cprr>JO\GlO/mp,km/\t!Xs8<M)#f67?G#DI1D`o0g_YYJQGkW>kp`]qB!%Kc]rr<)Dbl@_0nUplAo+$0jHhSE`MOk"Os8%''"rr?`j6N@)*KcpBq2''9O]M[0gVp\+E9(&JO=3`l2f+8g`b.enT#j1)M]l*t.X*rLWa.edQL!V[3''!V\ATpL="\^\\N_%c@&\pX9lWs)3pbs8V!.NrT-sEG5CPGURV4s)(XVs8Vbqhu<[]1$no?E6].=pcA9tr&Y/`s#&&arr>1om/R*012d*lp?iXp!;=%#rr>)J>lOejn"0OZ]+AEmpcJ@!#7gJ/\G1LfqcV&<-23B?c\oN(Y+,dp7/)<-,Vf)eq^)-/#QOgRC-I.Is0J!-q_8''MBZ;@us8+h2rr?[KPlC_pkA246"8a>K%]fU056X=P!YS(L''oW+keP25,!Q+]Krr@IW</^eV>m6s\s8TlR+ohSMc''&,,hiH[ps0=CtMuWfm#]kq(s50J8rr>Meq#CBj55P9Z6.o?Gs8W''!M>mPkd]icOG8A;YMfK"$s-.,-rr>G**<6%FR@=-V"m+hF!2+)Brr@V85lUgno=b/(N!r&pMuNf%P-Fjcs8SPP3/de:Ob=R0rr>AtB`A''*k,A:[&=OU=!'']3mMuNc]4=H-f!&HKas8V*]<;uq&if=''=YgKHVrr<)tCB+=u.XqBtMX-"TMkgOV!%Bp1s8V?h/H5^h`i/q:n+bE4s(r>qs8RN>)*S$"Db50p%`.o:q1KL[&,SChqdLZFK(gbiJd:>G[HZqc@5Au%E;(jVE!Q,Hq`;Lh%iu4*pX8kk(&M]Oq[YP+MuWgY[6X`l*3K>Bs5RX[rr=-<s8W,\js:!,aO`WUs4a,''s8Vh`J,fQ''?[VnRn;Ka7s31U?#konTrr<S/r;Qa3M7W]e&''9+s!$6;Qrr?>`Mi.kPjb4s*2Kr7^=8r7T2i[h;6-+*hQMVqW#Q$.J"uc39pH/*RpAt"1*fL$u?i`f/rr=nT\6c;@Vkj=m/H,4!rr>7b$jbm*pC7"?*r?9@AJMnoXNJ$$I7?XuH<<j@Y.l"fqgQrgJ//$4pEfS<pIP#oqagI?#7gJaY4qo1MuWe\]WD,5bl7J=s1>&Xrr?L/#64_l$+gKCs36hGpE]b=1)E+Zrr?F7"TJH4jZrhGbk1i5!(Z7GMuNeP)WH\T!<"(bs8ONWOT,;IO''M_bWL\#.!"3-.#lalan)4''gs8U&VS-T)oTUMPRs6hNNs8Oca@/p8A]-N=7rs,JV#ku7:!69"_(''"8Ko5k6;s-l,"rr<up3rf6"_\2tL4B0"Prr@)d+cH@#P=-8f!+XW?rr=J_`;]fu.6.>-%9]&(pE]e<CMf4LrrJ?_1''dgZA!u-Ps66s_rr>,nXT/=7fpI]ts,NllMuWftS*9nPSal(Hs3Y#Cs8TtFN;rqIJkcR]R/%$_Se_8*NX.<arr?0qd/,Kn0H`%G*Zk3n2#A!H/GCCSp_*<8r"6jPW-Yk"`JY#r1?J-%4<OHdobIK,.K^=`!(ZtTGUXkHD,!Jq[D3lp#LU8lc5mJi-MSs-(&n9`F?'':#RZ!!r3WB*;.XqBtn$RcIs''bsnrrAE._#OEei5GZq-<5Zts(TUQs8Qd55l^igcf"j''/&piR!0=Fis8Q/72u`m99b&8(q&L4M!)p+trr@dL>lXiOje2YR.N2^ps!l]js8REtP5kR2->*;XW7#S`s*PDls8T%cR/[.lU!*H9RU.lO!:''mZrr@aKi;Wd$p^mH*=0Neh%dNgpEu"F-NplUupDjOm#QFd;7:?/qa(B#b!.h_Ss8O+-Qlc!=q[<`,(F3ts-ia4[R@=-U+FE>Ps.!\5rrBEZ(a&Xs#;;0ZXc''XoV#)BW#QOgj4otZ`;;O21s-UY&rrBDLb8r2/mM3:?O1lYb#QOhO"''#=#dJU*G!!AOCrr=Q`GTZ\eqo'':U#Q"l_KNoSm`s9E<K)60&%f=uSJb[V-^BtJK8[%pQ''t+=&G_1''[Jd?:G]K;aO"lm(Tb_saPo_Tm=%f@o<pr=-,Mt\Lk80Nlp%f=uS#l.X==,U?qHZ07FK:i#IY.b(/UQqFVM[6#8fS]pMMl3PIU''QpFMt[Ha@0LapG''Rt`#Z$Ha%f=tMq2#h\$4csRpM9TB(&L"#-U/\Pm%amOXe!2-W-i]-L5LC#L5UeE"cSA!N$!t?Mkhq_MfJuZJr=o8HB`*;I\hdfLn0HdM[8"@^!5&-`]G7Pqn8s''`te?rjnhgXh;%lEM''aMP%ej`62tr^Ts8RXAH2moqbfp+ehR84>s2$QK@<2AJ&>j(>!)$I`*r#I,*rFFls8S6_"TSM>gZ\\;mA^$`s4/G4<.D7S!''U?D*rc7E!6"aUr!Nc0s*XOWrr>DKmf3="#sS@hG/Fq6rr>1,''T;tk1d8GL!#Hutrr=MPjSo34$%i0W*PX`:s3mgYrr=k-P5kRF.KKJK79+qtrr=i57#V''F/f\^-!"kCprr=7F;#^M6VSNQ<s5(a[pD*JDq]5tP?-N)J(&a$a+STdJlfe63pNm.g\@''Z''WG5''I6MDVm#PSTtchdqg6Ao#d@o!B`#7beK[.m$(B*rDO>SYSC]r8$P#lCe!+STd,kWS]>q]Is*C;sDU8;dcN(+]7lq`4O5jnfP^)]oQ3bkSCWr35o<pXf_o\@''Z''WG5''Ir2TK6pKcJ94nkWTpBsR=qZe0/Mct(0:C,VY%S?H%(AF3n+AiA:?=??"D6(l%pQG::kkj]?;>VL6aTq\Nbt%L5*n6+\VR+;K9*YrNpUU&e''k[kgr*0u_MnQ''j`X)IEpMT1Xq(;Id3sTN?=fFrM#l>Afq[WK`q`*^7%egna%f;"U"6^Ks1&(#.7HjV;pK[S<rGD:8#)rEel%oQR?-N)J(&a$bGNeqipf.RB\@''Z''WG5''Iqr.8lp\kEl$VA\A#9H3i>&[tI#h]FmMYKs@ckV+##:3qA3Cp2''pDh*F#*JXT+.''t@$rQa##PSH`Sbj9G98c_WD*eO$q]Pi^pE96X#Mlboh<^Y1AKL^a"E4TYH@0gYH''t=tRA-`''%_qeFpS&Ds$hk_:+T!5S>l,Z@>U9XP1A_%rqapZ3mJ@7b2XC)gXnS&%q]PV@(&J@DMDorT/rKucF3DV?S*''GH*tDHK./2R5qqh&ip\kEl.O_Mb*_)&jDe)ZMpRh=*r\aEmpn.l6\@9W)TOC\=%f>MbB)-9Yq]PkrpMT1X"qLArq3MllYkoR?jp+Oc@7O+1X3;XZn,%"s;>VL82>86h)qk+l#Q"nR8,!60e;Lu:Zc<>E#7d''o_Y?Y:@g]L83>II^YaDSX#WpdPE<U-!?YYL&Mf"PsP^!!9E''bn0q^VsL7e$9TpH&%.o(N1Z5ots$K"H?8#jh9mqZmE''-YBrl*tDTO\GKMGq0;cZqrS,V?=??"D6(l%poO?8r5f3@$dD39#9MBQ]V`$U#lC+s%TiC8pTPD4!.R\dbl7YUZo\3e0!!"l!&n>Drr=&0YlFadga`@(ZQda;qq^ufpY?)S!.4H6s8U\,2#dPf#djX3>g1D5s8UCBmYh,Fe9YI$s726os8Uf/[/^0fXcs+k!9(dgq]>]]pDsPL>PH#08/5VA^\>8Rq]Leo=p9D+Kn>58Mg_(FUP&olGm0FgO+rRIMhm4FLkuB[3sA5[AibhmMu-!5qZ-@OMpmU)TX_64BBAlS#E/=947`7jT*WEX"d+q,P)GK]TQQiUN<i7B"b2MaO,K-YO,f<dO9c>2bkSCWr35o<pXf_o\@''Z''WG5''Ir2KF.kWS]T#PSTtchdqg6Ao#d@o!B`#7b8<7J@o>S`[TLa5>!4`&""^$4''c/%i*:<bf7#i#W_V`"]o5#7mT%<VdQ*4PR(dr)?l^dV1>Lk1&DYPq^II#-O<09_U/UHpJrg=1FDDn%V#4C(AN=`Mpk.XMm<VcT8gK)kke9`<c`D%+,bE1Fe<ma\R#H8F/=>DD[?6]#>8B37o+!&bT?NIq]PeF#Q"nR8,!60e;Lu:Zc<>E#7gXkpC1pRs8Tj%RfEEaAnM)Co4DV7s65r?*rl99&seIUs7J4Irr<)1g].<B''nZGc"ES\ks8V6X!ri6)Q*:5fj@2?5s+RUirr<d\56(ZXf*_c^!#X]]s8Vi#HN*s_]>4IHrW<f5!#eGFM[9%gWrE&u!n%#JHMoK=pso6_#7b&7\/+kDq]Pdu#>8B37o+!&bT?Ns#H*oVV&kt]Ru3Ph#kS@ANG+8qM[1qA?SET"63mAqbt%L5*n6+\VR+;K9*Yt($hs\qh\D&bH=Cl?qcEY--ut7C,mZ2m<VH\=p\=J*qp5OtH''4R;Mj9NpUR_\b>5&F/rr==#[/U+A,[13J7X%Q+!&iT/N;"BO]j(4oqc8XP%Z=FWC1dg*KCpm\P6JD,S<pXAg5DRmMg5R<8,iS3s*anJ)T*1&s8W-!^]+:XE@Che/Mf6`!$KJ)rr>F2Oc''MF!)0@Orr<4''aT):`;/$"0VQQ:.qmlGBpY#lP!,5)\s8V1/ErQ,i[!McP:tL^Ks8U8Od#7r(ct;SCs7#+ms8U_07fWMG''n?Si!$qeVq\B%>pDsPLqk*W=pokM115l#<q`k=5GCt4"H]*!:GI)N"gLLJVKTUhDJ;\]#G("N>q[33g"akHHGDg_P;Trmp*qssS%/UJ<DL@_?+,cMLS=6,Wl1Z5&T;\''RMkZ-''JXpnL#U@.hI$9/EMj93cP*_W0#S-TDq(h]7(''";b8U:@9f$)A<s5(2>s8Tql1gtG)!"c#>rr>\pRND4rq]>X^#QOge<WrI&_qXDTs6Zf`s8UXq(fPskrr>4^4!+D&<rg29*rH9Ks8RK?_Z''U''4RW7L]Epe%!-Z6m*rc4&c4l3:!&QmLrr<i^_#FBa"m#[`/d[.0!$/g:s8UQE^Ae0hfTQ:7k:-K3!(Bn>MuNc52FNK''!%o7-rr<Xp!<3$CX\f#t)Q(=Vs8O7^5PGogJbpJn%QX<:2\l3H#&\sPPTPgLTUr*Z#gpg!jkd5oMtIAM-6VdS.f0eS&l&6W*fKo"pI^C&qZmHV/Hp9>Jouuq#\()UW?1fr#5^[[i"]2F0VaQf#fWgWeb,>*2BIcdKj@DK#S''eWpokM2YkK:7fE]U0[ElRqCLJ9BK8P><K*_>_qr.9eMi6e(MraW+"cek-Q&Cocf/DD2MaE>*E+;ZLf`r!`p`]Bq(''";jk%=Yndk`i\s5"W^s8TaUbX@!]!&[Okrr?0*jW=06q]>Xr#=+CJ1\Y#nrr=qW6AtjD0-7Y''!"_mjrr=D)#6+ZG,QS2Ns4`OJpD!D?q]5tPCA>:](&?MZ+T.u>93u$s:Mm/V*r#.#+T)WQq[:Y=pBMbhMnGpn`sDR4pMT1"%emL.\/+hk#KsWbcc<#"9-3uhpE950#PSTtchdqg6Ao#d@o!B`q]Pdu#>8B37o+!&bT?NIq]PeF#Q"nR8,!60e;Lu:Zc<>E#7b%`pokM3GkW?UTEiZM[ElmmC.fWFiV+JhrWi0*8^I8=*^YcgE+;ZLf`r!lpU9k8(''";<(tJZdWon6r,ldmWe$f;VA$(po!*70]s8RFp\GlQ''2bY=n!%\90MuNc)PICJk$e^%0!$ZA)rr<kFJH,ZJpItVeaDM#ks8UsTIfKGNARLGrs1oh1MuWhIH6*"c!!.]Os6NZ?rr=I\6O<_lH`YKl!!&%-"d]2ga0\,3s7I"V+TDH''m=''s!rrD[/h#@?ajs9s,NOjW>!.[Lh+8BpS(]XNpoXkG/s4WoJrr="-kl:\5EG5@P$u]DNs3^I"M[5IB%Mf!D0:A:/!(UX5s8Ul,<<)uDI''!AJG&3*:s1M-is8Uu?FoVKdZ>T^Bd''.!Zs12!trr<l/"TJIe$2jf''LC&4Prr=/7Lq+T;qoe_GpokM1+T/J<N9C''<"qLC;ppg3+(&4F,bIFt+a/NfH*rFpj+SYj?pBsR=qZe0/Mct(0:C-]eq]Pg3#>8B37o+!&bT?NIq]PeF#Q"nR8,!60e;Lu:Zc<@KS-KO3pXf1.''kI`QpB_R)Md((5:C,_P+T6QZ+LLn/kkj]?(''gs;]5Q#R#ko,#pC?pWpG4]$''`0!p%T]b,QPKQ#)?iD#.KBF]qgSPFG=:<f!-P.arrA?!rr2s\bsVL2o.g:F!3Cn8s8S98gA_.oH5utb@*p>$s,=,6s8Q_/-ia4[Go$G[)M[MurrEML])Mc5!/)*e!&6B$g&M*119gfYFNhu/s)<?7s8TWfLB%;2K@g/''a)lY-s3/^3s8TD\nc&S/$\eT\ONbuL!1,(9rr>`YM#RGk!/1@P1Ga+p%eKG?ptQV]!=(`QK:\"!MlEeG_3,)u+SuK\pRD$g#<_lG?2GigM`%OgpK)VGqh#.N"H.65LT1XW*!Z9UpBs=^1`lNfpE93)#PThE%HI1:+,fkiqd$WsOU1h#"L<jKE/QW47oF.eI0^<tppfN&pf%&4qrS,V?=??"D6(l%poO?8r5f3@$dD39#9MBQ]V`$U#YXo0kQ_Upg@q*2-5@[2pm_I1$4cs$pNlRj''hO=.U0OZ''55PuspBkj=!##2YM>mQ""4rImMm]=uW<cGL"aGb$s4IL?IfKH%r+_,q%em_6''fk++#<DYn''fk++#7gMh:DGnGh$5t;&J[=^h$<h#pCS-#h;&>5.Jj\l3SiKrq_7aV''fk++#7g6!(&%n>i"e?/h$5t;&J[=^h$4Gb2GY&Jh;&;rq[+&uh;&>5IBOC[#7:t8^J>S)h;&;GpO5mQ3SiKr],!E_h$4GamS=QXh;&>5AemD_h$86&&J[=^h$4Ga>#,n-"ptk7nbXLFpBM$8q0E0(h;&;Gpb_kA''fk++#Q&2Y''fk++#Q&/R''fk++#7gKopZWDQh;&;GpV9Q>3VuY/"qLMTb4p5sp_!6*r"0,CpJq$8(&%n>%f?7Z-Pc@tq6^#@"qLGMq.1:$h;&;GnG-W13SiKr%f=uSS+e6E+U\"7"<e*^pR1hg''fk++#7eWH!Vf(upBV*9KD1`-lkT7$$4\BVn+Rk<pBh6;G5(@uGnp&]$4`g*D>4,HpC%E,*rH$RpC.H>qu5:bpC7N?qeZ!Upj!VK%gif@phfd,(&S+,+8?0JCA2995FPN2#lCIrm.VUsH1qdQd!i9]V#(6"%[QkQpj!VS!-S%]rr<H51+@>fq\BETDD*CgCuhT;p]:76r!E]/s)>\0rrA<rB)hn56-K9.FIATl$25q,pEC[Q-jTbPNPPo#s(pu9rr?"^q#CAP''gNgSMhd+;M$Wtg#E,1?VB-6F$hn?/i>)(u$4]Q#&blAApCR`B9DBV(!>YJI#?O_l5p#nuqZlju#5;F''!!!!"a8Z./s8S#)#ko_Pb?4KsqdpoH=o/Hu:''T@g7opcBPP?d"''oVfOpJ(MbMt`,8pJCc/pF?%^qjmL''8I(1Rs%eA]qb@(jA"jBis8NebNX-d%*sW:Np[7hC(&OU#m.dRT"U;YEpIY7#*qpBGHPQF@qigdZpCde0MX#ML.0pEnpk&8E(&&=J%f?7Zqcjm1+8N;@*sN5PHM;CR!>Y>B$4`BRpN@;K4oYM`QA8B<!+BSepDWc@e+YI9pF$:@2u=c@q[=PCU^$T8qgT@X(''fb6HSt[''M#[L8e@be]"$<C[s7.[.rr?9A>)T0^pQ"tX#LCUg;''-:%p[7bq''dEE`q]^sm"oO/Q/8''n<%/80$"oeRt*dI\b-UdM)!%-Z\rr@k+pl#.P2`VZ[p[J&%qrS-A>''jO<C^:N1pLj7O("rom!97/+MuNbXF*@T`g-)bA!"1Wrs8T7=:''gd@pE01X#E/T^Fmu4,s.@a1rr?dj3<0"^/Iqd\"5>(,qiptb#64^8+@>f1s8W#S^<.M@pBO_''?@e*K*tF8(DYP[rg''@WXaPtSH!%/d@H6j[1(^DH]G=`kQN;EkSPQq-f7T;GK!5GSSWV9R<pEU"9;YL_!@35<1qd0R),52Rp`u`J!#?D%9J<%5`%Uf(=pdGql48U,s0F*;EI:6?8#l?1IK)7<]pKd[AMu7nq+,c''P<<_6HeA7gP#m_$-pt,:0(&&CL%[d"TpG`o^''ajgJpL=s8+8jIZ*sN3Op`&u/(&&IN%eiQjP4t=YpZVJrqr7o:.8EAS49kic__X--s8U)0ErQ+c0rk9RhLo)4!&r2(#g3F[pF`B<.j+M"q]G]L#A%jo@NJ&6WV[e7is,P`G1i>a!/TLAs8RTrB)_k1+\3[.#5;-l"SXPA*tIZ4[eKn=quZU7p^.9#+"cLL3Ze18qZkCCO9TKT2)u^nMj45A!It/rrr<1P!!rH-#E,")QN$qmeGfIJO=LD4!";FRrrC][cQ;hFi!7cP=[jJC,2*h,%LVrqr9P0m%LN^C!V^:%i>)(u$MTnaW"o%:$4cq>pLs<[(&&7Hp`[QjpCIZAr&OLJq/$ij$4cr-pJC[&''d="ZJG0fo+pnhW1\n3hBT$nqHCS`OOPk,:#^h2=>Pf9''FN;MgUA#S''L;%jRDMt=f,l8:6#fQqTQF3$EK!ep''Ed)85Uj&^Y%fEH&q,S7)(CEM+72>Q/pB:A*"qLOupH\K\''r^_spB/uC`BeAeFo):<!VLQ2+88b<R(@iOBlS*+>CX;PR?tIr+8i8Ee],SZpB)V4DfHqDqZH]so5plPpJh?sVfQKbEcGc*F/Q(*Q+O^O%ekSLi:d]rpD=5IpkJP$pC7pGW-6*#c\n=(S^sCZSY#QaaU%e"pBC>gV$HIIPDb@rX7laTMta:H(lO=H"T+:=-]@jDMi7I="^ujiH=V,B^m2b[pAup`:/FDNLT6*+KqO''q@H''_6#VZ&Xd0?V?@5]3cDi&aqJk.5?MMl,*?)D_\Mt)^WpC+19^<jm;caKQTQX,MR#`CS;$"&TJ#S-U(p_EU((&%b6pDdT)q`l5"''oP+BLAQ#tq[<9(pC$nqpB12eTEaS;Q&>gA5."8,BJ`sn<-1goqb[$-I+!oYpDUR9$E0VNQ$aZaMfM-2Mu*U7-I?J.X0BgppH+;]MoCFZM$Wj%pCR''%r?DP#Mft!^O7sfb\`8V,Mj8@I-O?aL6P]>5$4cgNpLj8t(&&RQpa,hU''qg5FHlcgVE^D+2qZDa''ctTS^YftJg4,_OF`J1gX#krY:#P.ehpB12epD3K+q\BBjpN&CBq\>"pq`nO@q\pXO!="hQOfIK#jGTBmNr''%e,`DU:Mi7H8nV[RH5."8,BJ`sn<-1goqb[$-I+!oYpDUR9$E,$Vo(_#9''c$H]$M=2u(&&XSr0%oj*"&YAKba>&$MZ+KC_c[c$4cY%h"_["pDOD2qZIZ.)[cM,(AAdUW;D8`pDjV9*;i/=pE''b>6j36,$4bJYq"GmGpE9nA-28>mpDF>4mIr"DpEBqSpPJY&pC7r4(^aIB$PiC\$4ce7pK@83(&&s\p`]AO(&''!]r-\Bs(&''$^%ekeRi:d]rpD=84/GUS,pEp:XcCais(&''*`pAu-).1-QPpLX*p(&*M7#%2+QH"2b%McH0WVkUejYE5Ia./*cXMc5.::\u?_1?2a8Mn+bZRDGd,q]GP8pnd]spB:AEq`jt+#Di*YA&LWj#l=`$"RcPcN.P(P%c*fPM\Z*hlMD[t.eLKlpAc90"75r^pB12epCm9(rKR0^pX]3E1C*da2G>58pB?EhZ_F5U*mORD#)72GIr^GQ91RjV*tJ#]pg!T1(&''0b%^u+^pVRa?.ge`B-PcA,$4b7HpZ<4b/IM7SqfW_K/d`)jWqRVNqZup''DYH]r4nfSmpAjplq\5Uu4s''b(Wah?Qs8V''7\GuU,YibucjF+?6s7oG/s8Vmrci3tNWkeZ7o&qh.!#IE]MuNbq,#/E6P*;7SpaGl2pC6j"rF5X,pj#"!]`rF#GUX_mDZ9\C<;upthC<uKs8URK!WW2gMG!pKpksk+s55$0s8V0Y08ol1bY67ep[Vl1pFcmN"3hST0FA;gSbLYLH^7RK*hW=gpB:5LpQ,31pB:8fpCd3''rFGd.picNuqi:r\#H`0>?p7@m5opN(pYtr+''tN",<Gckbq[akH%u[4,8rEsJH;Ss!U2@:[rr?(#M2VB62?%gs"3?D!Mj]rjV2LdbTnnj*)j0(4Mt[71_eQbSYf*uQ\X''r8pB:3nrCm(k`<N,:Y$ebW7XSopMfjqo\oas1rr=G)K8]a0B:jU[rr>34!/h-[2>:2fpG!!bU\As,V%r_[$:ao+(&''Kk%]9";l4s%M$4aiFnFuSjpGE<T^\\oapGN?gTW\#:''enTApD*Fmde=XR!$7''HA]$^=kHpbiT!8RhpB:FmqZQ\5#$t/''DF''1aMf#(jM[2pTCg^SNFj2#2Mqso''MtDqWAW''9@G_LBmG!sM6X"9/7,Xtm"+85ek''o\cXQ*ZChMnsYNAn$:$KkH<`M`?rZXU#E=S+lptpGWHS5PqMspG`KidJ3>-.i%e=$4a-22#&^=pGrWkY5$ihpH&`ZQ2%0jpH/e1qeR#A4UM\*pu(lm(&''m!%[-V*(AC$#qi(<H(&''s#%[F-i?PW<$$4`imq%XY=64+4&puqGl(#D-j.3:I,6>TClH(JWQMm3PpX.RNUpZM9MpC[-&rF#L*piS=gI0TQV3)1hDpEBE,pM9LbY2mSEqZMWgDJsr$*bpUEP[^2gZ*p7:M[6hdI;g8<N;$''@q%`Wk$A%q:(&(*''pBga6(&(-(%Z@4Yjq[V[$MVK&(&(3*%]l]%(&(6+%eg.&pLP*68IG2VpXBrP8dZ&rpb%%2pIbjNpB)0)9F;9YU%`RBMu+@].ec/Z#knH,+HTU2MqX*Zj.W<0#j(q5[u9GD.KuZ)j)g2+Mck!hq\k(mqZI/u5*YU&Mt\-Jhd,dL&ul5VjnCZkMt[AQL5Uue"SX.!`\@Yo$uK#pM_PM3k4^,9-hfRo?AesspFl+3EYXN0)=]6O5(X(7":$''2<OIb=Ml)p''n<O@Aq^T(5k4^>/V242TM^=9`E(KjFK*_>W#PUEHn`l&,)N3WZme[Qp#fl''$22dCe"T?o0Mu*YOF,S$m"oA^F="B1_#l!HT,S_^$2tpX:"oO_b[2$-PXLG]PX(#ONCL1DMBt#/oO.5mu(&(E0%_/M1(&(H1pIG!@(&(K2pDNmo(&(N3%^rb:''k"+X]cOP=W2lE3#d<t;pOeB^qigaWMi7A,pC<+>pB:G2Mi7H8pB?JK3!GFbNcU,#M_$IW"H,t[pIG!@(&+9r2Z%t.M7S8SH,p7$K"(KV(&(Q4%f78R(&(T5%f>nm>ka6npJVD/qtKkMq,A+''!XAB=@-IJQ*r?\13_"l$EsVXNqZQX$r2'',ipnd]gpB:?s#*8L%R(;78iJWtBP:$VGqt5=43>MEV?nM6p+85d?Q0=@1jGW)WQpZo2#7)UP"S2JepB12epD3K+q\BBjpN&CBq\>"p%fIOI1Aa`[pDsYOr?1tmq^3-Q*t%m5"SX#G%fIOI2#0-HpEBqSr?(tDq2?''_,74qZ+o<\`=quti04p=C3KFG?#''>cNN/!=+QBC3:Mh-e=?]/o^H&ZI1Au&h+L\Ct1#cS$MMlqi"KUH_F<iCqBMj9H`V[*e2,5W5QT,%)J$4\N^V%s%1f%(!(!,\"=s8SW=r;Qb8C-DG9M[2<Jrr>j/qMY@R18"XIs5p5^rr@;;#64^T=AfD7r!c:6rr=Jsr;Ze[C-DRs@b(\^s,`M`pE,;!h$<u[YX&JOs8U>O!<3$:=Ao2!LL0iW!.CcJ#S*[)8,&#YT!aukP,nr`La<75BOQ0rMaiV*R:`?&p`]Np(&4X"&GHA*JbqP+IKt]''"(];7M[91mqZZBlUR-.5+,a0@3Eu@`bW4]mpB->eMnPLkV$Qr<#Q,HL''q<:2c''s4''8kOS.HqDG0RNE%6/tdM*]<AHM]4eBO>\@_R>d.hN+4^+U''dr,?-hf:d^qoaF*r#j(r2'',jpnd]opB:HMqZQ[<qZJ\[q[PYY,9QX`MA<FkUu`ZAq`>":F*rIYM[2gEh8CBF_k$PP''ml6E`?(ZKN;!JLN;''@LN;!JMV=tVs"T<ZD"SdrQ55V>aW<]PKS7"NV?9oY,kki=6]reTL\7r9PH:WHPHC.:P*tGLKH2()KG6TirEb00bB^-\LMtNIBM[7q>G@F<:@k/Yu''oPT!>)NZ)H$F=9pBLLAY`u5OX<3@aM3i^`VM2%,Y)Am0Sr98$#g$KYWcjtaP`)JuR@&o/MjB!`I%1IaT`qQeikgWHMoK_G<iNa?X1+J+#kmuqrFYp0pk&c];d<[-MfFYZQXYjY%__WpFqs`[fZ)h-5/AWh0T0(L6;Rr''Ym#HIK:\!j#eI(3b9$E@pJgl#pBCM>qZZbO4StQOqZh:B;N!+4qa:*hq[iKP*oQc9''lIr<;]]b5@$alhU7g2AZ\o+#UO-_tr)W\i(!N#cR[\cJ920e.H[D)TbT@>"XS:3ZM`@\''`_aZOdr"!#hi#s_`l?''=WRHd^Mr8I$:W?5N6`E#&#l?g_)Z(EL5Tfa=pJht&!8fa4!?jE\qZ11''.]W5"p>=j&*tE1cpkTYn[JMQM;]`<(^7**@Kj'':@MeS+H46?>BbDVXDQ][]&Mo.ZTMt]5ipB$kcMt[bgpH\Tu[eg()s(aDHs8S>-c2[gEO5U''<PAhWcp_nf#?R]bmD^Lguc/5#2pB70mAKD>cpR_,$''hjNqXAb#_=))J\AuAr/!?\<GUPo-P.&.FTs7r5lrr>Dkmf3=C@JC,WAd,/]UkG=tWf*@8Ml;Q0@B);m_jpHm[>Xcu#kn?lpEod&>Pi\o5%pX8\/r8?af>(;M[9&0\4AaZ1Ab9i=W\-RpWrXn(&LGs$=mLYTR4''g[Ysk`UXG(TMt[d$Md;6H21oCq@Z)q.@>bCN:i9ZQ\8ob7gl(Ed]p,pV_1RYJMd@Q,7Z1lH-d"E,<f:U.Me.f[WFjA''#koN`pE*TCc#gCETSp7:Q*-%2MkOdX6DLfOot?:VMmR]?BV2f7Ts9Nc#kn-:dJH-L%Y"/eKba>2p<`O6+,e!X[9^%qNi8tJR@BVFX,G;^og$n$.B3[N":*M$Y\T/''#Y%d-qZ?Wt;m"CfMn$!leY!3B":+fQCd:IJ+cB9u@$uP9H`Ln>Lid`EArAn[+n7tp.N\>K"S8sF:1A*]qZA?QTsr7SRHu"*FP$=''''hJ3)Zj*h.G$uJN?9S0%Leb0EpBO:\Mnt=hR`232q]GP7q%`c/r"KB1AlX(]Md;6GS6E&.pB.5@Mm*K9:[9kZ%PsjS?58Cq"35G?H3e:s"a=p:DMr685I2^21*610#/d!o\YOSU;''5[R##K3/Z,sGDe/tQGaF^UR#ggGf[''N#o>9@=4A9qO>#V(/4Z*V0?b9+c_luoFf\r3;QMlhoTq\br_k_l7.Qa2O<Mm.i0MlVc*R#@aGMk>?cC6f,lR"gM&,tD''$+,b''%Dk1cpNI?b5M_g:g)et<.)$g_Hp\=PB''e9)97O(m:IA7m_MkHH''VNn!Ic1_I$jbq_iMa!''r,Ps/Lqp,''GBmtASMg()%S:I]!#a^I:NL>k6pDUIDpB%ea\Bqb[''AT&N"cL)#pDs,9pB1:W*Y-2Vpl?/J?EJk!Ll?,-FGkU/qfhd!q_7c+M[6?RQF4><PplO(>PCne&0Hi1!#2HKrr<&!_>aK;eNj-7!*)8`!![rR#l%Nr"T2B,#-)s<Aj&RC:EC"opsSt@''on37Mirr''U59&NM2mIUM[62CQ(,$DUf/a9<]2%XC6i_1D$^#MZNdITRq?I5#&a;CAt=1L*j5d*L5UeEL''W24qaKWDL\L#/pAgMf\nIBXqi=8A5kbp5MjB<hN0stGp''-b>PDbQ^#_rV_O.)JpUl1^pR=(AaTlA\CUl1n7VSnAu%fIIG`qd:_8]=u**fl5>N/Wbr!!7p+rr<*(T`4um%1`C<!dYuIrr<,[9T/oN%QW>Es5n+;rr<lWpl#.P*(:tU\Zr''D]<H0Z*fL''unpg`?s6*hjs8Uhm+H-:"mZ693s8VpL+TDECTE,#lr(l76S]&(`ePX(;1/_.>*Y/+%T(ttnaQfPp(8lo&G9:a]UAH55&rUC\EKba=A[.QWEJk*GL0AQn)sMFd+&Dbo(&*X\"T+)]%a+SApE14F+U\,np_ah@)%$lCptYZ[(&&URo_Sb+i:d@<#(ZG:qZZQf:5f!KMu*bV!e1#1#XA1hecu0RpeB3:!''OF^s8MPo0)kr''Vlob-i77Q(*fJ0W_G.Yc[CjJWh?a%C(AJmSH=R!Tn''@O(s5W_Gs8VL@AH2]$$j]gBq[%WH2iEF%M7JPR#cRWS(&&^U%es-$g4g@:%HGe/#TnuGD8K&[V45E2U<3b7a1@1epB1>NMZojL''?JAcN9H2:BU_DPBT@#DMlho-SVs\0TnAbkTa83S_WW&##0r.FDn/i\:7"M]MjfR"PDd&2m/%Ij2u?U72iB.l=$Ka"9;On3#lB43=o3&f3=''?r"0`"-480j@pIQG(%pp''GQC4WmC:IQ]Mt\>"QhM3uO1L=^Mms&e$r>jZ48Tpe9)BDKcoUn(*j(@,Qb&rH@YnZSBF+K^pC:''**rC?\'',ATfEE?11D-oYU]WJZ@Xkt5q,tSjGjp$->s8VTUeGoR1''=Rr@oF`_Ts7GYM@:UU0q]LfO\qmnT[KuWLqt1\1Bllfc,)]soCZWZr[un^h#g0kM=W\.N*;cWKjGTS*W2U&/b6;g''KnE9]#ZZH*kT;Sbq])U4#PS]L%Uf(5pSemcpTOIf@>jkOMis$^NKOSE('']V>Mg()''Mu.5_TZrDlO9e*s2)%42d`ihkUQ;46U''UW3#)%#PEJnfBq]Y2XpE92lf(T^L/fkLNptb[a''oVWUfd30pOS=M,>)S<Xq[AC@2?d*HGf(Ts'')NjWq\"V["\XdN*sh`tpD[*+*;:QL#LW8r*r?_&''g#<26:4GLg=FZQc-jRD4rt2qq!e$)''oVfLq^$KFm#.m)WJdb^pB*e&qZ%p!:&=o3Mg^P5NI;*,$jMNSMjTEh#e-P-]"O/''@31:["oBNpq\i7gq`"lY0)$\epDN]LpCGsO/KXd)IMFk8B0\RO[G]`d\^T?S=uRK4pIP(upXU)R(?=*B)>=Omiqj**9T)_n>%29Q@@^PZq](MX.uX9@M_:haeP6B1R#ChK"jiF\MpRCV",ln?HD13W#koeQKsuK=DQ`jcpItJ%q[[*/<e@Q5Z\u''o^Qd<q\"IYJq]<6D!V];0j7css;.s3095qYb`iQhrb,/''8*Y)u\\+atZpQ5^T03%ZGq`Xf^qZ]Oe''-<''[MgUM4#knf5LmO!dMjOdl]s>Z-X&_b4qlpAiCf*)U?,b86MkuN2PbSN]*sRLBMKFbu#l?1I#<2B&pEAPPpECXgDYUg;L)#WqEm[4LbG_PVMp_n*'')NK^qZ-L1-9qAL*fG]0KoCZjpC%8WWlNu;\RJ9=E*l]gCaTG=XDp?kEC2`L?cLV<MkcB0Q(\K\+9mUBMKFbt#l?1I"?Q9&pF"tepE^jjpH888pLG$5#W_2I$Q`0'':juS`T=h5tMnKDc.*!th,u=C=1!rbV*j1F''OfOmq6ZP>J5R@60pBs7\(&&@8$.APg*rJP''";P0SG%"ipU:7YBT<b`$Eb$6c`V]cP8l]1k8R&dNbJps1b.M%R*Y.q<prW8V(&-Ad\>-CC`M$^@*rBUUM]d9iD'']J^$jNg&V"KZ=#kq:''pC]XMq\C5NMd(:6@9^3<TLt+Jq]R14q][-ZQ3[:5n145YpEo.spCSJD%%n>nBnL,JCjBK#J7=EB13(js+8:?lg8!-Z*jgj2JXp8<Cm/OjBa>2mpt,9^''oU:ncuI*9l7p4&Mu+`W/L#N<*J\?dBT$P^q\$+0(V''>K#kn`3@.sqFpC3&T&.%EXpH80`pD&Ya3\DJ3q\a>t?i(B?pC%89pBIhq*K0Y&#S(bI](^poMpc[p6);PuY.fh>#kn`^c2.\d-O7_[=''/dL?<J@d-`@6jSlSo]EC2`M?H1M;MkcB0Q(\K\+9mUBMKFbt#l>tC#rMAupEJekpE(FdpUL&1pr+!6:#70;;i=e(BO5_eA>!+a=c6a3Ddm[k@A@%bq[\Tb,E)F#M^tP\g.ho3qZZ_X#58RbpL8oLq^2[D.L''neg&,.Q./OGI6YX2i]o0i8Y`%&GZ]o*:*r?*7%/129Xe2JoYa]TG*r?E@%/129Xe;Po^mJ84*fFBR?[-)epD4%*\!Xdc]Ef!JpnIM$(&,]QpD>dEq\]24qZKXj%j$XMMfar"#kno8L73sgMjk!nX1QWuW`;t=q^VncT4OO&M[91l-oq/>q\JljpC6j;nCI=Z+8Zh(''iAFC:JY<0`l>O$a2kSj:`^*Kppg'',(&%klmJ@22>)QU7@<)YJ2$^7CYI5L\Mp6.^MlDW7OJ\EOpC%:FH>8.LMbf7-U/-[Q+B),]+8bO4q\o275kbia%JJEJ''d!5fNYP;r>Y\"&]>qt"]?&"&=]$4MpI+h4pR;olRKrQo8aQ<f*`\,$H=LMuY?d`$M[91q68A?L+8_K3M_^Sa[6"Zg$jL^tHIIf%#kuOJ\tH[O\t<;=*rAe.(\^`2Z_+b=_Ok(;*rF.dM`Q8`DF"R&$jO)mQe./U#S(bI](]eOMp#hL:8#XuXgO)0Mt\t'';f6''jK:7[cMjfQgMi@NAMhc\;I#E@XM_WdofQY8_VLj_;MdU=SBo@CtI#NN4#l>%/#JI*I>=i=17m15!eK9^EOJJ/8#l>_KLNA>pMfT1$./+!*pE92In^."R*Y)BKVY>0Ipk1R2>[U3H98e(RH&[*1#W2j_I[,&6E!U&pGA(H1YHK"*Q]@AnQ3\Z=LjFu*Mg>Xek%W8giMbKPMl)*''H(V-sX-9KL#lFT+5AX.S5[D@X*fHkUUm7\\q]5rrFGb0uF9qappBNYO,kiJAh=i*7%eh:FI.q7gpAe4_q[=NBMc4q4?#-cTU0!7bMeIZ[F78igpY]/3pLsp1$jM2nGAh,>.9cVI@>k#oM`R^tY!WKh(''\?hF4#on#em.L`R9uR<Z[0GML18/#kn`3Mj]HnMjt''cPJ>5USQB,=MaV>JBMSp.(''_+_VTatG#S(5:^\;jcMqUe3MmJ>-MjBBh#l>AALjk82MggRmbYO-i#Y\K)9-]#KhB)Gkq[EC4#Q$=..JGjs(A-b`)BKC_3;JX0Y8)ui*[fqD(mqM%SZRgY#hgo;83o=J2]dlUX''WJ\<-)teMbaU;e6CVXd^\*SMmIr>EN7c0Tfn;r#l>Db<r34#''Iq<#*?L-dU!''d\#l>AAAP@/4Ma7XGDtcpupJ:NTpFG.q>9<[ApVIY\EcPr4E2BS6V5C8oUN1,kK)8ggCiOH2CiQ>OWhlPlWhj]O*Y.6+0DD.TpYZ;58A[G0?Ai3>C28<pEM79.7#Q+G<Ju*[I@#kaMj93dNg0nI$jMN5Mg:5+MaOXDg5GN[Pk;DB#cEYoEZb/hpC-d)#HX>nZ*KO)CEEB"#;o^U0JlJKi?!oWO/eSF#l>_KKPlZ`Meras/GBZ%pEoVunF$$7*Y.pWpkeGS6nbFs+,ckUTpD;Vq\BBdEeSIjE!Z=spGZRU''_aEX(=)YB*fJcr^Ho''HVl[jqd#7BOe1$;KMc4b,>$\[9Ue-IM+Su.1q[*-4nkAc`+/t0sOJeB<7a<LX;YM,g#e[*O>?u2O=<CcE%(ZY`S6&imF#3\2+8[/T=qt:QA6`AMZF[WPZFd]RA6^/cC\YC5F;9].K_l19Mu-QZBrtd8>)P"k5#R:fMhI"@N._K2''aBW0W3O''p#dLs`?Q]/A#E*DNCjp>LAn6L)Ma32+`J`3''V3%L;UBp`=#)@;XFGk5Hq^hIH2tnTl+l_>P+s%6g8bg=$''G\Zd=]HQ%:N9BQ<s\O>#,o2,_i)KlpB!YIqZr*RMbnY)?=U<GUJd$I''8nP&Mu+3H/Yt&G8I.U+#-*]`O/e*DpBUut!fQe@H(b$T#koeQL9Z33FfRCo&c3&nq\l7,(8>.#Mt[_f`156''dZd@#*fG,tFc1POpC-QrdE\/N*Y)u\\+atZpk8MQq[Ed.BO";,Ek]@2MmetZUTXt#)$Y:pIUA">Mu*Y*7J?qC\r4+bYc.p*CBm(?:c:OE`7,idV3%L;UBp`;#)75VFGk5Hq^V=D2>8?i+m%JQ,T[GXptb[V(&-Gfo31SZ#p*0+>''sjoDlmW@?]/9L@XVp0#l>SHW3<V8]o0FZP%''>[MgC8+Mgbs+$jMWVMOKHm#dfc(]ssA>AKL_@#@sN7QX5RUq[r]D7Je8*+nlsLpCI!Qn_s3R+8Zh1(&(Z7%U/Y=pKA=+)+`ic+!+F?>''aXj#knE+U55M#U5K<>pF)d1%.<uoUHL=.-t)oV+8j1R%/4KA^rWUgf!&4D*fEU0:L[E3pDF1>^S])1bR")3p`C5I7u(7hAW)(sJ;acUYI_rS]mXW:%eh+@C\U.0G)LR''IZ"IZ`<XN"AP"R3Bg+3I%^GbC+,fk<YP$TC$OHVI#"KtIq](Ok%g`&NpBg^>pNH9IpGpLm/for%@DkO+_jSEJMp%%Q0)J7<MsQ@hN0fWm#l>/;K6`5sMg(*V2"sW%M^+-aDLjX&#S''W)ReLA.plkR`qrn?$TOjU''M[91fqZ8VO&Gm.8!Bp/bpCHuMpD>"L%#Pcs?s-9$?G+:t\@fl&[TQHK%[$P`prF3E*!^/R@[US]?]/EBD/!Xc>*rHN#l=p3.3]l2gB[U&pD6Ks''_`15)p7n!pEf\Pc2/4s?Ai-?A98+O8dDVeZ+.K1?Xb(7H]!3/IgGcW#)ek+SVs"rZBDT*MnP%VA#O#Gq^;:9(&(Z7%ZpIppL+eppKHq\+cH(<.bX1)Mt[9&15kldq[AC@q]>uQTja9pM[2.3>;%q_?J$@1Mn,.XW!N8N#=!$$2F(QediOFDOJJ,9#l>\JLNJDqMf]7%/GBB.pE]JNlJ;1F*r?B?OVMq\D1HD[#\db9[''$F#WunL&XaI''l#S''u3\G''DHMt[9;iqibC#ko#,%f7E-q]G\iMtcK5(5n+KP6Lh$pBa(Y&,-S,fCp"$q\G2,:gI7$:LLiT`jNJ#`jo8L*Y.pgq<[nc("c''C:*09EMg?rYXGs?BXc&L''V2L7YMfs&lI"Ve&4$HsE)$P''.B<=CV-B%a30oPo/MdrJkWcJI?!m:aoSU$ugUl2:MZ`T.gMjJ%?E!WlK(&N+uGVZ:F"dkF?Ngbk3W1S*K?"@2FBm68P+,c>APDk\2qZmCYG_L=!FpL"]C=MtO)U%jc*fJ!IYuR(qpC+p`qecS-<4["dMrBTVhi$NQV1YUoU''Mo?"dab*I>`CWEclJEG(H''R*fH/>P)PM/8G?Hb@-Rp4UqaBsbQn\qppp1*''oVf$qbgWg[sFBrTo5KJq[<[bJ;Jc6J;\62Eh[d48bY!RMa!&/BS:&WG`-d*I>\@m#F::=NLbt5Y-<Rk@q::,+*rikN.?fl3sV.2Q].8h#d^Rb<*2qF@maY0e/sU;O.)/u#l>AAL4"c&MgGa,*;9t2pCHB[+11bF*fILQY@XH7R\d0F[YqY9X^[g/R&70I\-NTA=SP>Z72:aT62O`#Mt\>"qZ6tZK8P;>K8]UdpK=MSq\''67?YieIAZWQdMjTHkOI$7M!X=F/M11A3#l=eg:\=A_lc&T+*Y/&lpj2[E''oV]kg**=!pKRr]S<''2%RgAm(#%N(IZlf/H6O$bcHFk6jq_n`V%>@&''Mu*kfq\8H\pCR''7o$@%P*r?"q''gl566q:CidFb\=gtT)55TUCdp`]Au''u("J"+]8*-7V,W,T_klMggV5#knB)L7*peMjapYU853(UMaQ_9a?SBqk9dCqdBd-+SQaHpCI!0pCPjK*?L.50)HZBMqA<4qf<K96XN8M7''YJfMrWF*gR-N=_,#tQ#S+HA3;7J/pB!eCqZ\*?McY47@Vi;YT3@0M%Z<_*Mu*d<-`f)X9F*I&#.0N"O0so8Mt]u&Wr!;4pD*sMpFuI\Vu%I//t+5mMt^Y<^mrp"MlM]/H''<-$Di/IkD[?4JjZE2BpD1gApBhu=!dYSUGZ@.$HGdeCREX.0S4u^!%f9N+5tr*g\Hhj=;U5.OqZATGq[+C&GE6p0GR4$F#)/P%Ru<dB^7i?^adum=*rE_X:NKu<;JE;O*fI1eXIH3qqZ6tICP$5XB*eABl;@9WpCtm$pC\MWqb-\DO;0O.2(D(6]ZM:RVj"!GU''UVt#(1EDD2W6:q[r!\pC$^?aQ`F;*fJQtb<MrCUTM4fa9_D^\1oET<Vlk>MgLD/OF%9-!X=CHMOBBj#fO''G^pU[n>[MVX=WVT<Sd)U*IS_*rBDCT_FVX7GmJ?o*?&N*>BPaNa[I&mr#j"+_2_Hg[-UP@.g`EbZYa;DaCI;JRM`V4A&)B2=&GI''cnFmJ8qq:`9''kDK#?t48UZEp.0\[J,EA01J\qumg5G"tP"DT''K3UX7B9SkMs%%_qg&pOX.S!)D)A"<L[''?Zp-p@Bs%.;MthX''LOMM&,Qmn3qj0Z(X(q7&A=7Obf,lE>p"tlF[^%=#knB)Xj*NkMq/12rGiWJHqcsrFiqbCV8pj.SPr9)%f89]AG9^OpCf18q[iWD3@jtC*fEde:o78!pAtP:_fsOeb6Z@s^sUQ6<_4?j8U!dF:C-[r#-,\5b_saP%f8onj,b!e#=a>90h$&lboVe@PGXbB#l=Z-HuXgVMeras'']hp\%eh9gkP#r;MpQat7&Iu!Wk+,3#knuZU*:X5#K!j*76kg<73=7U#IU^`:`g2AJ,''cTQkf?8#)9X3Y@spudJFNB,aA0PRJRMpMt^Zd_2ZjjaH]q4*fG2uFc1POmfn]?M5#p&#euV@`k%aS@3.)j#E,"-Sr93H]p$=Q_jt%:*fF<N??TfapAtPl\XU6i^5M5Kf.)\aMdLjGChg1_TNR1TMdC[D@r/,TRp_-[q[ZLJqZ@pu0;LGV;$]WG#5;,TpFV!GJ`D7#BU2I#%f8''WCA2fbpY?)K%Q_i2$Mtr/1&Dt4pAtPTQAV#eQ3baBYftFj?;)F;/I,m\@[:G\#l>#b2Z"!](%+!S'')*I"jnBZ8qZ:pU8R>Xm87K3Tca:aBe>u>9*Y/''''WVF(?qq;;P)VHh=*VUB7g\2W\%Plu>%3Ar9@Xr''6#kp7_aIfQW*la,JCY4Q<MkH3(P6gma#A]!.L2)VPq_soH/NID>.j+NBqsY?p<=05Oq*+Om(&%c)jSK9*;i=b&@q0#T=IrHLq[/6V15l#2MbBs2U/2-i!=!SdEn?5p#eckI`nQYJ:**p6ZNnR7c.g71<*:9#89-q89aLIo#,9,8fo+#Z%f8<^A+rh8MpZ%K8tsOrZb24@Mt](*E+t7(Mj0-aN0FVF!X=C+Mg:5-Mu+UjFKLJu#RFI6KO5d6-jJV=JLO)kF&#8?]#u1RSr]G*SI#)o#(prPE/SZ@q[3$np%Jj`a7g;i%f7sTD+tc?G!?4;>XEj4M[3fW#,d*?Fc1/DB5_m*A9=QO*fHVOSs>fO0a<5TKm/H!#WBt;g!AiYhB%TUI\^qQXHKZKX-O%h%L5^JA4fR9[`'';GWgKfSV?m&##''ag6@uFh&qZH=fn+RIDde=Cr%`%jjpYHY)T2\r8Mb%kQE_Qi6!=#:<VqI!OMtKg.qZ_sVMcP+5@W/M^TNmCpMfFAkIgCgh"g=r:XnNU<#eQK.nuMKkYD`,j#l=l3Mu+asKtiQD/;m0!4ebaYpAkJ=a`?!kc3V+U_T(>n92?U:mg"]mMi<RR#fj0U^E*m^0_fMZ=VZke2lqqKMj]]pPElLO!X=7&L3\]%MalTQM`h>A?>*1nE66`RpjW)H#ENteFGk5Hr(RFn,3MMk)tEXEpB;TJ^A0nM''oVf148/jS.$Ud/SZRgW#iSY*1H/&u3?F)]Uh-rQ?YjdjMcC$Cc;36T`6mH`MkP`qJ=Y>0Q8sjiMbe^qE`HmD7<h4Yq^%.fnVd,_MqFW_WmV1M!X<<sHngO5#l@Bk/GfbJ7e[Sj<RCK>*rCok";P3^@9H`R[CNcHXLG^>C0r%ZJHT=sA6iJXZF@9CYID*AC0_kjQMD56(&,iUelg*X*a4J-H#I/AX)4_IM`-K9qZ0ELFGk^<MkQ''+S>DaJ#l=Z-GAhnEMeJ#C[p."5pBuncpB\!]#c3JpFW^K#n+QtjYEZH(Y*X!B*rEVU1Jq+.;)+or*fI%[X-oml,mJ^:J8^?_#l>h?*E;bCpF>dcpG*d"]D4Ha''oUOX^dtBKVQ%Xpd>R0`eglYVMd1@=>\19AW)JT[qZ&*0qZQd"jZW>>+86/$e(0cX#a3u;S[aR`]U327@>[u_+(Zk%#/-="A1UPt2+T`ni#dlMNM;W/#UK\)G(jspEsVXhpEXGH$MP>1%`%ff*rGd-ZkZVU>Z4R8]>).`]#2Ff>ZMmUqcrn^;AK"uqZ?[''#AU8KS6_%(Mb?m).uSV5GER4WpAtPOSVNhqT*Vm+TsM8CC0D\U[Kf`U?;+%,ZcF2GWgKfSV?m&##''ag6@uFh&qZQ=fnFm7F^@s0"%]fCSpOF"L9A1L0</Xk*AR]AY@%^V[q\kAmqZ;]Q$]?L83SdU>1a`L<Oh$O`MtN#&22SR7&.&"G#)0O6[q_r?1A<3oWV\B-p[ng/R*sC+PYtL&;sq(!`feKt_O=;.*fFHY@=MbmpAbDc\!4C\\Hi]B<qo0Z(&2tL!rG1e?Xdq`:2$lP*fIe(]r&7EqZ6t??[>h4=,S<E6M?>GMmShRU^6j(#>fPO92''!(aW?A?R&ZRO#l=Z-G\D_?Me%bC"7]=YMoCV)Q)qitZ^J@^\d/fC48<:ZC)-L<#NBUW-6?<J??pBsF0KAP?AiBQBRXf?#l=T,U8,&oXc''ZHP%0D\Mg:/)Mgbs)#)eb(R#@C=[#r#3\W1$0*rAM6AtWV!@>bEg%5Kg<%f7(03VO3](?"*E(*EDTJ/(U]>t@Lq]?JR.aOAV?9M-?9qa^E^pMq#A;s=)`*a">(I:R''ujTk+1pHY.)pD4,#1p/k9#;&dL&0CbOpB((u#K4$^`QtSc9cf3cF$FJ>#knB)Wlh*_Mp_n./GKqpMadLDKNa6=bGiG/UoJi\*Y+#%#5;@;Mt[e[5D4^5MNWm^Mis![Mij!\#l=Z-ML:>1MgUH[$MR#QM`D&P?A3/93A%`Fah36c/Mh0(+%V;\S8?Dj]6hAP_2J%!XnN[^n-Jmm#"L%Oq\Y7g%1)i8pC-p:pKmS*pF"&V,T_lkFim%F^6Q:8Mo#`0q_S"^pM(H<Nr&nThZmbd@[:G\#l>)f2>[m\)!j<X''_`C$htIm.qZ;Wi7q>Rc87K3Tca:aBc`pJC*Y/''/pji/''(&%\5D5(^2AW''lQBm"K/D7!W?=c3P4D)a?oqtLEn(>q.G(AAL0h=h`[%Pm#?%3Ar9@Xr''6#kpmqYE$*&\WL'')*fGE''IZ&a_o`g>AM4KQqMmAMP[u7AHZYcFX#l>J:*>S<K$4cqPpn4T$Mt[u<m>I@sgl(nA/Gg0?p]UHqMi7K:"`1PNWE+o_1.b%m0[iYT+23ZEX/<60qiM+^G[=''=B=,]#MlN,DR\gAf!X<m_K4BgL#l=hn=Rl,!e''[n(*qt3jqZ?''uEG&Qk?&Ju%@%F[9YGAWLZ\uJ3VJZYLq_S"^pLtA#pBEh?qZi;jlL4TSMu*nZ(lS.GqZ;\6r/LsX'']CqD(&&@/htIj,qZ;<`8n)!q7UWpTbHAn6e?i"A*Y,.E6:2KG[;*F#Xp@*n"djJ0B8^_eFF/:SMcu%''_0`0f5kcMt;tgb*Wh,ZYMm!E:=dhu)q_9i")$Z7nMh)t.J:E6(L''[Z$0gta^"`h=eVc&F8M`Fjs22bn5A><iEk.V"MTm<MnUl1q;S"Yb5MjAaUHjJF&1&FN=#E(AAQ]IMlQ\u-NTQt6`D00D4@Z+$YBqkt2!=-8\^Oa1Yfo+RiMrT`8Bt@33#knGJjnhXRVc0p@b)=o1`5[_e#S-_\piQ6d''oTeKZ<a31RA6X;[Yq\?X^I^(R\?X;[#=Z9qh-VNpB:j"!bV^r>/=mZI]e4q%ulKL#]Xp?FriXu#*t1=NM)18Z*f9uB4?R,+*NQcNIZom0uO=(Z%5qI:O6#*A$a`.Mk?''%PFW!V"9sR''LNSMt#l>D''8G<YbpD''h)&KVG:puM49''mYC_GTLCRF2M^MGDh$&Mfak(pGR\_9oF7GJTQfQMdXMDMfO`*H])\GM^\<_R>X.bC34au$]FmIMaPsKpH/*_cHG(&m>L";[mH#M"H,J@+c6(b#X)p\-eY[,RJU=b$7>LfMt^hA\E]!pMkkm!G,2=8SZ7UTMmdu6C8%Q"RAc%H#`HK=YZRS);P427P^8XHQO%c3"bN"jOFN13Mh-D:Fc6+spG%2V:^HtH7MV$Z$DGJGMk#]iIZ&3(<+8j/D?paLAbXaB''u[#J\VnW:pCd?(X$]5N!,DBC*fEdi?GLH)LMVfRM[1^9e;MP=`2LRkb^J$"#jqp`Mgg\9M[4@t(DVj=F),$$>blGAMm<VtUS591UNKob%f8fk`qLGfI>dh;pKWWiqu;S4./.b?q[<9o]itZ+Ng>WjM[7A&AjA@k@Rs:+Y/_WBV3%%<Ta4c3"]fJRGDe`m+koEZ%/1mufCpEBDYFA4"s+9O1&+!.kS;cB]eCR#9HkO9,dpqO+=d`7B*FfRP^/10#YJB;0HQ!8#3CZNAW&h[:0D3t6YE:5*fHt\Umn"_?EaT9Bl[F99F1M.pB>?ppDWDLpBVgue8W0''XMq?@^l-^#]lp_kWX/J3dfiXNEj^h5#dgA.Z`L!DBHE(`JTHa"#]uD`UW&Y[V]H?F19(&`''hbMRpHBYH@71=s3G9j56a7d.0)#mtb4cPkV?`!GMj0-]#j^n/[Hm62#)eS$P`1t8V?ci/:<NGEq^uG&6QYt''P81^-UVsmBE`sMP9*\:)R`-B8qool!6j?h8E`cLXUq4%,W7`4%/GD5?''itY;"-tq@-LBI''nfE^WMjTBi#l=Z-OF<(9MgPe>FE1f!F/ZDdaTmaSpRuYdpL+@%+T!&"q[`Q8q[c*k*?L.90)$BLM`qDcpN%)%e$m`QdUbK]M_dRt4+9Ja<QC$M#S-_Wpi?+N(&(`9q`F[r(&(`9pCR+1(&(`9%f9l<!)A%ErrRa:!#>P6$\/3^s8SR=!<3$[J,oWL]>+FH!+s"Hrr?Ln!<3$gJ,mXi!+^T[rr?8R!<<)45QLfa5JR:!s.qs\*rl8uJ,kN-s5?3Cs8Vi/!<<)[5QLian3?sZrr@@1!!iN(/\h@Trr<nO!4s<P!%^A8MuNc#^]8HU!''.gpMuNbf^]9;m!"ZjFrr<1P!<3$/5QHoPrr>rI!!dTFs8''M2F8u:<5QLiak<K$*#ljpY^]=B7$@i*[s8TW[!<<)9J,oWLj+%.0s,Okp+9)?8J,oJ7(''"<[5QLiaiBRBUs8U?Z!<<)D^]=E7hEV)@!$Zpnrr=f>!<3$Q^]=B7)1V_e!&$S;_>aKn^]=B7*l%b^=<7sh`tg?9pF?+1''ep%*e+[JL''brq?q]PbJ(&&:EaY?op8GA[5#d^D(M][<?!sOU4I=316%Z?;(EnoEO]%i5<!XSNI38=<]*rFOeD>,La%VYVCq!]"e$4cfipGM\>''u6TEVl-;+<`X9WDf9]t^`N64(5ps^]je"DahXgfM[9&+g%tpL"u^aHB5)Xtko]dP#5^U''1A<-i0"^i]pCSI)pIkB#pD!KeWX.n%gA?mm^F0=SF@T2@5)"rMMhm8sqZ&62q\K&EkWAM=pAjF3pD+h\p_!9>q"YXf$N''GlOqmk7pDs,fpM(cD@Z0sqpF)L);[C/CpDhi;pDM_"pCR4!+8[MmcDQ#!Ao2`k+%lfLpHABep%q+7#lA<4*r@ekEZYeh)#%Y;YSI$br35oF#5N*=q^VITpF6@WLA*Y$DAE$T8d2j(#58O!mYggaMo>>uMr]f:DRj5]#gqB'':''N2a.C4rRMl3,Dj,;?DXE1.@#knnH"_H.,dNOPG1lEb^Mu+?L9<VU6A-aYIpNZu$?J/bF8W.+cB/b`4Md3W)fE_u]@/#NPBGL7N_Y4;qMt]@?pDPO=/,LG5q[WKiqssJZq[E4)pNQ?apH82%*fKc-q_IXo[Ko\+$jG?ugcUMl&<$Edq]@XJMb/glW*A''`@.t*FKrg*8MmWi`Us-r[TNFi.MaCEC5[k!/<;24DPSK1&OE6V,#[0TRp\=V8Mi7ONpF;)ZpO2?$(^6[TXa7R:pCW=bn<;l<qZ<`#8UFuX@sbH+*Y.o]pdOWdpXApEqa-5<5l9sG5kj[C2iIEmr/5Gi"aOa*GB8[kMe&*2ZAY6:Tp_eaq\mcaF''F3)MeJ%G([4Nc(5pV!aLJV3#S+`H?hYo_.LPotpCS,j$4cqRpNUcp2[U%SpLa0F''f$++pRh1tpi.%ERrN:^HZ3tGHD[[?S>N)(M>Ml>hi#msVU#OZqtp+;#5>t.qht1\qn\2KpPJbsMi7Ih>`/c*c:GZ,M[91`4>eZ@gGJX++8?=O(&''c`+9rB`pQHBe9*b2\Q1lWbMt]pOpIudmq`F[7+o;B="s3Ls#0jc^`SJ"/+s)Xp0ip;a#h8`$r"95EpFQ+3pUV)kqZC[q@#Jr]L7jHtMk-!#N0+DC!="''lL2r2o#XH.''hY.EP(\RO2pOX[b,5X>@qtH$C$iM.D,`?r+Kq"!sMk-$$N0+An#(UTGEf5$t;n5-RMt\o`\b@kWpG<0MS_FnVO9VBP)kcp4fS^%0"JGW%q\L=aq[N:3q/$lD.fF5Y.eh0]\+^L3[g!=^pu_A7("N^%pXK!rpL=rS#(f*N@S2Q%Mf4YmQHn!gnVd,L#krrJ!qZ9hqZ-Kp,Q!''6Mu*gk-dY.oIVjg]Mb]1LY`#lHU6haLRKu+="`SWO98bK^qZZ%WpEY[DMp7d2X2SksHHM0?=c:>p0Tjol]%[%B#5a<''''kFmnd>RK"pJ\K"V5:S9qbnPo->l7_>R1i6`VF-^8.#iJpKRFB''oQgjDjPJ@''4sfbMu+.nqe,Xi@d3VFhY.EP"s/]s8,H3AMr4lNS"-^[TQ+$SpF6CA&M_r^q\DFP4Wa%g<u&8I\64_Y#WYk''>$=_9efKb.YJ/td#S''r1@i"j)#J@Fhd*]-o?!Vq`qZIu;&I8&4g%Pj@pH/7,cmJW''q\hNm&g.%\#7g"n"ScF@qi9CO#O$o5Cl<''7:hF,4*;_X/pBpX*pDDWY*VU!apCW=X/X''cPpEKlkpGi$ZlMEc''#lAN:''Dl)4=8PbHqb$UOpPRDn$hj`FMs*Fcqa?VRc3FjR5kemcbS</G%PILPq1KJ1q\3E773=nk.a\LHUSl&FW,5KTql"N?</Y_N</V%Z+Su>i#/Q4r3l-^[lME(*.ep1OpDc*Dq^EQrpX8g.q(*8p#(\[I<FfHiN.d+BM]n#U$#`?b#h(p?XM)''=[ZtB2DHMfW#l?(=8b;ZZpB]FG-m"<5<o?E\Q^X5/QCP$dZ@]B?mYe[=^P`B&QZ6X[pBq2_B_Mo3*$.P,:F0#!E/Sh7JCk.Dbkm"sM>SM3Z>?=BMcpBOD/=!%BWoGtMnZ-tZ*joJpV6J8q1KL[@f%,A55SjeDYFqD4niV3pQpf\pOAOW#cdd4pF>uUq^VKdD[(jP:\TkGU5K<U&-Vk@8+61-pF4P[pC-d*d3e`Bq^k5`q[FVW^A*KXh\A!U%Uf(OpQ62KpGa>S-`.1D%D1?kN]b)R%L6!]=`8Fn#ja2JT<b_p]o*0YY<OrFs/PnLB)hnD"skoE7#PcgK<GRX,R0P2''_`/&pCW>X,)c17pAp3H4U;Pl6`0U$''u*`Qq\SKgpD+guMo`E8gBdQ&q$HpbMu,d:mJB0CmJAi#pQ>B3DG^R_B6\WAM[4cBQ*MLU^Y8RF#7gJEZM4524::kpZk`*<N''%jG$4^>9.eeE-q[s,V>H.?2+87\f(\\13(\^Z$.f2q5qZk=AE<hF!1@@j1@Yb;(qc5fQm.^Sd%ef\@pkBM?$4cf6p^Hp=''rgplO2%rXabu0k\GK#,lhhgu.Z=0/ph0h>pHDpTq^RO$"H-&BDu2Bt:&FekL2;<cG)L!kELVlnMjfZbOJN44R0A7iJoQ]fMcl>B$MQ*0pB$8hZBruF%VtfNq/$lD.fF5Y.eiDb#3N=$/Kak%pF>p)#PS9RoD9[Pq\9;FJb\@&D&#\N%Tg(4k7tK2P5>X@7,j+1pE''2\pF>sA#59)qf_[*=/;sB6@=S/.#[TXfK\B`:Oh@K_]Sd''1W,5KUqjf\O9oFFoLp[N!gA?O-%es`4)Yj+C4UV)XqiV]kEq^UO2"t`+pL]?X(&''>HpK.^UpB(SoEijZ!Mt[gAXRMG6#l=\&"\F&O@q0kicQ;rbD$>oDOE6V,#[g=0B_Omk''___,7uIZMB_rkJ2#D;8%\WSIpCS/8F8''PG&cCG]&bg/?F8KhO&bt/U&I/g?RJ5G0EYXLAQ"QV''H%L9qG)JeI<P+18MqOW#VkOGLe-05r:fE;L"H3.=pCTL].#YZpaJ#r9]ktf9`JY#r<6t;3pF>o>+nq#oI4"hI?Mcf+pF6BFVoITCpBN8H<;S"].lf[jWo+qVYbAk-V?m&!a9?0e=?;@@#S-U&pQ,+K''qpP^L80,\6;f"cq^)UG<8o%p!;?KQo_3qYMtD#M@F)6S[@+F\#iV[q:M#-''@39uWJWP2V#W#B_YY3;\\VgaLjM1F1pC@''#f_Z.#=,S_V10R\e9VY=?#W)?#3r;r"pF6CA+M!c<*qqDd*Yk)OP?*T4#lA7ZKQ2!VZ1f4ZMq4cS[)N@]q)8$d(ACr+c39t`XE(_,hi#VLWJdp;TR_rFMd9S5G_?@5-3`/)bc?Zr#)h_*\GH\m:5_joDMnd.L;U)7q^[U%1]4f\2Yai[.uOQXE(aFW<JtahKZj]HB*FJRmPEj\]o0h?X1nr78c5[o%elCcg@oV&MdhraS8<J&G_UC"7>k0XMpI=7S>rK]#VOU1?u/Y<Mu*X8q`FNa481.]\r4Y''Z_Y9Oa*P^_#kq<EpIk61pK/U5Nr+5Oq_MRU4!42H#,eB=hUM9)/GiED-?(Iq4&i6<\sJkT*i+^rB:F;TaS,Z<?`cQ$8;frq;-f+W,mY!kpf[@8''h_G?M]]\1!!S:ST=_n!H[0RGBDVo1&mNQ#`ie%c*k_4UF9_UCDR6UK]WToP`GA6jpE0\7)Z)eRqZcpb-;aR`*fE[gDmjFUBk^.s3sb^3j80)UK(hn''hqm9hi;4T;%^5WpF;=N\pH$(`@NYAsq^VJ@ql9Bgq^VMq#Q&!)3`l%d*qpcO8JV+m#;][p/M1;:iu[qb#7gMbpHJ=B''tos5TqRfi=]p5kF`i25]cQpFJea\1]__a(3K"1;FS?IBpNH;@q]#8^ql(YlMu+2s6n\i3/-WcBfqZcL#kpOF,l::4>WuRH.t#4l+87bl.f0MW<H/1^f1`b/M[91i6Tb/Vq[h4;pC8;>",kXSQ1bInR.o5-X;1Unq]H.<+SYaJqn`1,Mu++\_2F6KM>&KXMt`)&.Z95Z&c4&9Mtd)P%[d!&ph:K,$N!Wr&J^lE%[6XEpQu]mR.i*)iWl?JUm.F.#d''8,;]k`9#58mCaSQ&\G)LBpEe+MjYkopIq$1bbEI`:l#\esl_]SaXM?WkmZVL5s*hnRhP,=NN%ehgS<qeoqMkH-&OdtQjUhP`n#]kE6Al<oXYo`X.pOs@V,bLgkaGU=tTn6oiI"5WIqZ@)t(Y?@p%egD/"g9''k9oF+*?u$%6#LtNY/Nrt47mA&Q._f36F[]:m:Q,)l#l=YW1&!''i4fRN$*fJl\j80:dU7\3QTV2WPpC.jSArX0kR?sbDQ@3frMg^G2LOTR>TD4-7XVKEj\Cul7#koZ*g\WNCqpt^_pF>t-pE0[pY\69fAnX:K.)h,A,R*oP6gm@"0*k;H.`2LLi`=PpbQn\;pUG;[n+RO*pI-1Qq^P#>898]I=)P"S*r)r9.f?ITq]+NXpF.-npPASL(<-#3`VVjn''8uUFq/-!ZMu,=.\Pr6#pCI#qq^[S8q\`r=)>bqBpCI0&<r5Sf2Yafdq^[U!MZ%Aq%YXR3pML`C#tbB5qZcd''9C@`4G`0N7%#a2)a)8FsYmAb2qb@>F_''u^KaGZseVrN]>Ml)#jBa?a^pT<.C#''nlekPGOCq_X3Z<K$_kMu.)\&TNa+-];MAB/b`4Md3W)fE_u]$2AlAZPC*UE''dHFD,!TFc0$2DC]#.K:YX"c2>ep/q\%L1pGVaik1KDMpC7!(n,!M7%X[t=q/$k)qf2MEqqd7Pq^RM^qh+VmMtagWh2D0dpF;)Zq/$9FQM3B6n.k]0.gGm^qqd7Pq^RM^qh+VmMtagWh2D0dpF;)Zq/-%,MZjTLp]hR)$4_U\1A>Z$q[#ju]DDg,$qp#HpNVV7pC)u@Mt_,e&[RDi%#_$SVrN]`Ml^up>6ss7_$+E!,17Wmq_X3Z<K$_kMu.)\&TNa+-];MAB/b`4Md3W)fE_u]VtjHjH5/c)>@qJJA]IBA1Q)P9@/C*(8Ge2>F8#b5%JLA,&FAQR>9Adt*B*X6q_b@KV669"Mr0Gq@uG8`GDC<oE!Z1HE<VWb\(n?KXGa3-Mcbm?Ahco,#cf6TpAgi["Rh9C,`DC*<6b:ZM[96@ql:J+&pTp#M`D(?"+a6G96Jq^+!-?UNP(Ia#S-ThpE]Jg''oTN+XMh0/Dj=gjE<p&nCM74%S[0C3Z1hE:d:ri*Aoq:9:''g_5mR-@8)UmL5*fKb5q`W=''*QYt$Xh0M4#kn]''&%akaq[Zp.$6G+#X^&SMq]/H/4[k;+*=*n=3qjQZmaLnH*fJ*]\oP"\pQe_m`+u\nMdQg#GBm\3E3$;dMl)`ES#?Vi;"nrEC8#jGMl$cOS?]9$SRm$eMf<i]C39dl?2%n)Y8+pQWP?BHDb(p<pF=VspI4rn[jV&%2Eq!X*rN5:L\DDXnHTP2pLa5<''fcU2fD)HBFqlY;%ek\QJG44%`:EX7,kojd.f7cn1r0Fk%RSV@)''gP0q]u%_pFC"Q!$7(f#5^414SL/r-0F"W4s''SN`"dA!-%&QY:49t1*l&$X.eaPj/<P=RMlm>jSY*6gTQNaG%ep)!UA0oe<<e]=ZF%i6TSo_''WdmW,?mUa.$OHW]pAuT6!;?Kf!qZ/<*fKb!?1185XI,uKU5SQ"\5S;eMdUC2<J:^OqZmB"&"D5CMsuYs3:crPMaiUrH;SHTX%]$WMu-Y8:\ui"5R:UWpQ#OQMt7[h>c:)L-4''KI@;Kq''@B0''#*fKNddB^=h%Y+4bpQu[Z$MY>=57.niZM4,/qb$S_qcifFpI+`]i9q_Ff4E_`]EhO7%L&t]R!Xa,#]40V1]%_<chC<2?1l7a*qo\nZ=05)#W4a=W7kS_C\K.P#LrW%M[93&qZ?Y7q`5f/pHIR3)AVuE)YZW(pc8.eq^ma''])7_Lpcmr"Mr+@pMi7HXf8BeBpGqt[(5qp^pJ1F?r!rHNMi7@@XI]T]OdhAtMlM\uF,PF(HiO-G5QLiao0<<Us2VnTs8Urk!!p[C"9l&ti6R\+NgkurMj]Lt&GlI,8W.MFDM<+Z#lENV;iCD''q^RM^rG;]Jm.Y,dL_VlV%Vb\oq/$lDQ95EL>5JXkqagSre,''CE?M@(Qkk@Iepj!,A.f9qp3!VR$2u=(Y;mk*4\%;#L%enQN1&21l6d.bK.ea371''L>#7''J2"#lA*.''`06SJbsul''`09P@NXood]gpE#h:]spB]A)e''.\:pHpD,#Uf?R"`mX-+t&9Sq[,aUpGM\''dcgE4+7G->,,8*Cn+R1VqZm?8p\4G+p(dH62"gSmpG(=cpCeY?MnE#^9aLJ:#''oqmq[Vog7#M?JB)<hM0DftjEVCaU2>:>tfo+md_mc$im8<T`Mn=nbTW4Ui;tg7qH$aUbDMncSGL5LppEobe=pOp?5$K0O%epY1OE))MMnbgnX3#,&H-M6QpIP$npC?rgpJsrYq]ICL8Lkm@q_-nppD71Uq[,hBq\kB0MeA5cS&3aZmYgf>#krrJ#PIroqZ&MtqgolIqZse]dm8D8IY`H2#Z,!''pAuH6-%6$p+863hpCn\DiV6Li8Z6g@MoZ1/TV.pMUh''?@*rKFCKb\42EQj?t#kpfY[&''V1<VnctMaDPUCfUfOpD:.0q\;4#ppNX,6O%UiFeO8g#\`c4Hb!^_Ar?pC#-Pq_XO2t#%u]*gMu,8fFGY-qG6n*apEUL$#-*TNB9.KIUbr=I8@`TGM[8nYBMMH<6]:gNM`^EdpFV<#NMMZ1#S-U$pP\c[(&&-SpBBT8pH&ZT)CjVpq]I*[%f8Tio(QDd%JO0&`V12CQhP=j0h_6[-2TE0q[WKS*qp.m"m_ScWhQ(`5l2llqec4A*_D8PWEA!_?M=jCKrg''7MmWi`Us-r[TNFi.MaCHD5[k!/VYG3+jV@XqYBA*JcNq^l\@AoF<ZiHA@>JEHAdE/p''kTR''=>Yq(Mcur_lNe_5"ipKMh+.2]M[9''8pC$_ZpMBS=0&6=4q^X`\q]-c:,O#"<pG5qX%Z''jWpQlVsYJ-[GM[87S>?ssC:\t8:;N"/FIJ4N`NV>">S+di;e''s9]fW]?d+86c[pBiqLq`"C>q[`QBqpYFGpC[9/pG)D0nE''C(pDEc8g\W09:5`8-Ap+FipR1cQpU:mchPY)lEb'';uMeS)YQ"QV''H%L9qG)JeI<P+18MqOW#VkOGLe-05r:fE;L"H3.=pCTL].#YZpaJ#r9]ktf9`JY#r<6t;3pF>o>+nq#oI4"hI?Mcf+pF6BFVoITCpBN8H<;S"].lf[jWo+qVYbAk-V?j>5oCi],cp]r`h*j=mh''2_)"V0@dpOF!CF/!<KApoAXLi\I[q\BFMMoVC%WQ8N!CtjmB,E):5h2D"rMoS*A6(b''=jgL*6#kn?Lhtni!.f0Q)qZe2>U''G)>DmkL`#kr-3D\\A$NgP`m#l!0\i3As/bH"uc@qB9L$m,9X_?],392A3$?MaaF@Z+`aAtTD>pNu_fpM1M%pJ`:0%Jq`X#j&\Pqi3eR0*h@XAbuQ+*_Q<]#[6gC:uhFMpHXW?Qg<T(p%M%9#k6%7%f6GjG\gu$I_!cHq^MgI7-dP@!qks1pH''E+C;fn5(&XBl.eiDb#NiF%/Kak%pF>p)#PS9RoD9[Pq\?FAgVBf''`4K_[*qq,gpI4s1[jV&%qZ/SO/05;qchJLUHPQEiq]ktkqfhpWpE]VnpK8U*Mp8EBh$BQ%jbo&l*rEI*Mu++\3f=/jq]>VRF(U=9q[GCTpF>nlf]r2E+7G->,,8*Cn+R1VqZupDpHq<l5;4S]#XL3L9@Q>50T-2HZhYI4Aecj(r''pH&''eKdi&Hj]n%a+P:FVTQ:>6KWepFGuT''e0RbI.n3f.gcb3pW[gqKF1odKaR\d\eRsIpG_i"''i,/Hb4n:!0,8I6pOW8&''eB^i7ee#>/IM@e">1#k>PK]DKGAJ6;*#Fg$>fSG''i>;Jb4lB)''laTT[eMWn/.2;Ep`:/%$MtD</d`(mpa8$9E=,\@L)!MlD#4MR;$mfUpl[EJFUIjsp^Irh$N*Bg*Yg76q[ir`$4^;8Ot[Vn$MuaW@hhfID#4MR;$mfUpojNe''m^5]'')U,mL^FV;pf@3K''m^5a.f8`NOU;T@pdY*5''laTXq>I]90FIP(r9tFU$4^;7`qaNfE=,kI$l)\JWq]d5<!j,Xp^fD"E=2T\pL+dj$MQ%Jn.dYb%U8\N3#-E?<;0!";[TQ">8:*E%a+Qn2\gHBr%@_&''eg!h.fAcN0a\Cppc^AHFUJ"0pEp\S$EEl*''iYMMb4g,S&J[#-qm$#1(&n9o6^EZ1s382ks8SWi5R!aDQ&_Jp#caMFG5qU+s8R+bCEIJQF-9Ru#^BDSbl@_-s8T$O[u1OK\ZGf249,DkDPgY\I#EK2I"hq,!#_ECrr>!X_#FBE?p]bTpB-?$V7agec`6DkpB?KL"TSM[bColq@amC;s2HmCrr>J<aT):cdrbTi3ng8,s19h@rr<o_@/C(b#lCk2%U8\6pd>ir$NL.tDVG-i3NITDrr>&X[f6=19=4^!.>iTS!#Z''?rr=.Ho)A\D!%/%OpE99Kq]Pd&#ACqYUe$F@''oOO<&<$EEMuWfmZ0_Jj:b9lks+^X3rr@@@)ZTj-[DE4Ls31Zas8SSSZNZqbQ&_Jp#caMFs8VBas)`:,CEIJQF-9Ru#^BDSbl@_-s8T$O[u1OK\ZEjO!%\*NDPgY\I#EK2I"hn:b4i,A''nQeicG()J$MQ%Jn.dYb%U8[l<u$;o+K-#R$EEl*''iYMMPPBb*kS84IqjmXl''f$,\qAC#B$4\?U5Pc959a^V4qb%ZH$MuS4''ibV7qg&uX$4`9pK)+aJFUJ#:r*pHs$MT;O)\mZ+%OCg&qAg;s$MPiZ''m0l\1,''GC$MO@C''ikYOPP;:_''nQei2Y[=g1("L:pL72=JdPu^m1iV.pA9.N<XK>#pgIGCK*qLfp\Ya]$4\?V!aQOn$MuRQk7pu(pA9.N<XK>#phBRZ''pT.''K`(0Op[RtiqsjD@p^Qs0r1j4-rrDe3!!`K''c&huS"eLsDNh;48Wh4]_FE2YB+)d''YP#e:_GZP''mFf:#''M[81MXN.efVHb3jMgpS2L''[eZ)95"[rrE$X^l+-F&c<`/"V)gQ0);miPmV@*CDBkW+SU0sq_''Mt"T(b4MuWf^7mR(S<%l&es-Q@Xrr@qb!<<)l=F^\Ws32HIs8ST*5R!aDQ&_Jp#caMFG''%bMCEIJQF-9Ru#^BDSb]Tk<[u1OK\ZEi\DPgY\I#EK2I"hq,!#c4Frr>$B^]j`<E%&O%!!_&jrr?2@_#FC%1B@FT*F"''o!+]Mg#l>YIH=19(=GnbhI*d]!#l"<&N0fHaMinA?KDQt8qZ%ZI>PJs00,8I6q_e:u''f-1,qqCeJqBH_p$E<oi''it_PpC$c#q?.OU$E<p?''f67->PM.m4;DuGA53kA$N#t_!#8WD%a+Q4qC`S''$JG>l''f?=.>PLM[[2!ZgDu9&>=pbb^paA*:E=2:3X;*T"%U8\t3#-E?^\FiE=pbb^pm1ao''laTX=SE:?E=2G;r)=Cg$4^;8Du(=dE=2SFpC7pX$MP&.<>A[E%a+R-pYQ__htJVrD>Pj\V>IXoV>Db@D$U(@>pNU3s8USQVZ6[r<Bp_ZPa.9$M[6>TI<PYjkl:[''H#"L?MfY%^rr<i8!=3pO"jI#Hl2Ud^KsusGhRT`f!''C5^[r/''J++/urM0t$`rr<_-fDbh#WkeW7%,<:iMtc*4%U8\5SeZV[e+_$#=pbb^pj$<`PmX5['',<A3%U8]r@MP.8D"nVX=pbc;&bhDn''nZi=q3r*W$4ctGpQ8_rK*qJVptc`i$MeNA>RCu=&big3():frqcNS&''laTT$!\3''$I/Fc''m^2sr"8\/qCr_2$MPBQ''laTX=SE:?E=2FB3Ybj+%a+QfqF_QL$MtS9_%ep:%OCgUq@aTi$Mt_=1DO4''%a+Pn3#-E?qaU?\''fZO1,kpXb''laTX-2=MU?4%1bpn0keFUJ#]p`^G4$4\?V<]Ut<$N#nZIMH/r%U8]G3#-E?q_S(0''fcU2r"8["3#-E?T)(J_?O@9IposSt''m0l\/,fehE=2S!qDo?O$4ctGpTs]!''m0j3rWj6Y$D.)T''jh:X>PN8&''m0l\NVWts3=68o&bi\''''m0jDq>_7;$4^;7YZDQk$Mu^VTbTQp%f?pq<u$;oSGAin?O@;;6MS\!8elXZqfDX^''fl[3pNlVcq1''3+$N(l@''jq@YpHnY''qC`S''$N$[sI2+dM%ek;EPkfnGE=2VG1DO:)%ei<bE&\SP$N$4dR2%ai%ek;EJiFKb$N*BhI2-,s%a+Q4qC`S''$JkZg''fua4>PJ^(K,&A5qp.#4@1!LepbFfDE=2(,@21j2%U8]$3#-E?qmZBL''k%FZb4q2k''m0k@pEp\;$4^;8:e)7C$N(M36PX#:%a+O_=VZMqn\#Z!$4^;7N`d*K$N%F0iY>l/%egA+Pkl12K*qOWr3-nu$MX/dOqg+epH84K''m^2s>PN"1//<I<eTM[[$N!El>SU]TN;Ebn@gW_?$i#t_(_qZ1r2]b#''g)itoCnC_4UUp:pd>j:$N!s"%M`sj%U8^8qAC#f$N!s"%M`sjpFpG!K*qKIqcjkF$B4ic''k7R\pC$c$q<\o>$N,bY2\eF^p[e-B''g2p$%/;^q9aVA7pJ(K/''ho&0+T#+QFUJ!q0GS%(N;Ebn@gW_?$i%"&lkOXMr/(>0''g)itoCnC_4UUospbNY2$4^;8;YhFLH4''B_AefFqq^O97@LA(k"VkMS%[6ZKqF_QL$:Xlt''g<!"''a-`.%U8^Dq6^r`$B?DIA.!,L#o."Y%[6Z6qC`S''$N!3gYn]G0p_<or$4^;8*r1C&E=,u6''k@Yeq["!K$4b5R62E5LE=0nf3#+aeU\GT>6OF>#UA(V^JJE/3qe7l%BF56lpbXrFE=1@mhA&?aU\GT>6OF>#UA%JD''laTX&c$hiBF56lposSt''m0l\&H2qME=1@mhA&?aU\GT>6OF>#UA+`a;\aE^qaCBa''laTX&c$hiBF56lpn^IqFUDdUU_Q3''U\GT>6OF>#UA)Yt''m0l\L\X:PBF565p_ru^''laTTD>UmZ6jaDLpYu"%''laTX4T''%2BaP?6p^/tqE=2Ggq-4Y&$4\?Uff0^d$MuXRrY9,S%[6YKqR[J^$MP6h''m^5]T_kc)6jaDLpUL&8''laTT''6k7<$MtM7<Y]<U%[6Z%qQpuW$ASF+''p]4$j85kl6jaDLpZMAe''laS6q`>OY$;gY$''kn!bPP?9s0,8I6FoDX]E=2Ggq-4Y&$4\?Uq"]IUE=-O\=qu#aq_S!G''kn!b>PJd+0,8I6OS`/q71''P%g@oCYq\=)XiVRR/C''kGTp]!2fE=/E8]bNsC%f=uSHoMj\$IJTh''l"''c>PM5h''m0jUq1BDN$4csepXMbKFUE?g3#-08%U8[f<u$;oVthSQ71''P%g@khR''nQeHpt6Bs$4b5RRQ)%%$N!s"%M`sj[eEB/7LBW0pfocnE=2SFpC7pX$MU[s@23Pb%a+QT>nqu!q_Or]7LBW0pb,nfK*oo7''l+-db4ibU''nQd"VA2Q-%U8[V=VZMqpKYBHCC1Qop]5IO7LJlQqTBV"$J9bAK*i)mpk\bg''m^4nQ5,#ZbPdY?CC1Qopm1bl''laTX=SE:?E=2GCEYW^(q^VQ;''h/N?>PM:r)&7,uqcNS&''laTT<_jHQ$Kq@%''l+-dPPAAY(DVQ0q[NN@''h8T@,krGVKb]4I+T7!/C^LZ9p_c%+E=.p(@229>%OCf%3#-E?V"\:4C^L[HZ1lfF8ek&-pTOQg''hAZApC$_Xq108T$MT#JJJE#/%em7''q"dStH4''D&rNm;1$4ce<po4(s''m^5]@f7A`D$gdIZ2"V#)&7,uqcNS&''laTT_#9l?8.#k$$i$t%Je`84qcNS&''laTTU&>63D$gdIZ1t*j0,8I6pL!m,''hAZApC$aqq19?$$MQRZ#Sh1`%em7''VDo<1$MRg"@22<?%egA+9K3c,$MQj\@23Vd%[6Z7qC`S''$Cq#[''hJ`B,kpHsJJE/3SGW$qD@-l;pl"td''laTX=SE:?E=2FCr$rLR$4\?V6huBME=2SFpC7pX$MOu+qA!lT%[6ZEqC`S''$BG%^''hSfC,kpBqIhcr1q\&iL''lOEh>PF9V9,3$cpMTkK''h\lDq_RtMq25u>$MQ1MD\[3u%U8]73#-E?pL3nZ''h\lDq_Ruf3#-E?pFH&f''lXKi>PN5/''m0lPq>_7''$4cqhpanuNFUGhX6PXPI%U8^/7hp.R>53(P=pbc:g@rV_jqVkCqcNS&''laTT;u9c6C''kIF$htk?KGB.I>6KWepMKk.''l=9f,knM<KGB.I>6KWe6N(d:D[Ht!pbDTM''uLCUMZ(X3:($_SpOj8W$4csepTOE<''laR]rM^O$$4b5R.l\8`$L.<W''e0RbI.n3f.gcb3pWtl7E=2RSpIZ/q$MQLRKG@8i%a+R''pEp\*$MSrB&JZf''OnXDAapJV(pJc5L:($_SpOj8W$9e.Y(!6jnb5#ZG0GSm@qlBH/''nQeFrJVI@$MSrB&JZf''%OCiAq6Ul_$N$7b''nQei*;uNF:($_SpOj8W$4b4<qB$GH$MRC5JdU0/N"mfLpO)]I''e9V$,Y.[;''ho&02ddAP$MthATG:3/pG_i"''i,/HPPE/nP824I:AjMp.LPotpCS,j$9IqW''nQc&,kl<SM%tULq],R-''i#,12tqt?:C?hHp\biL$4b5RM>&A4.LPotpCS,j$MOo&J/*\Dqg&&_''nQc&,krDV+r,_;qg\Jp''nQei*;uNF:($_SpOj8W$4b5QdJ>"$JdQi''F;8d&l1afb.LPotpCS,j$4\?UE;>D,JdR&,hA(#;q[iKo''i#,12tqt?:C7TSpke_m''e0RbI.n3f.gl"ipZWEX$D$oF''m^2s,ksh)*#3c,mtDLA$N"W;N"o(ppG_i"''i,/Hb4phf-P\*<pO)]I''e9Xc)u&S3Pm[DupEUJJ$4\?U&,I7\9a^VMq_/bM$N"W;N"o(ppG_i"''i,/Hb4ltQ%i*4opAt5-''e0RbI.n3f.gl#)pZ<3U$4\?V/,=]1Pm[D(rJVId$MQLRKG@8i625a@apJX$pke_m''e0RbI.n3f.gl"ipZWEX$?Gl+''nZi'',kr8R4;EJU?MdP6Pm[D(rJVId$MQLRKG@8i%a+R%qAL*6$8;Bf''laTFp[f1M$MSrB&JZf''%OCfsq1KKJ$8h_*''laTX&GJd3:($_SpOj8W$4`9p*B4dR$MugXRh[[c%OCf$3#-E?=8@Rc<=8HsH50Hf%[6X4pWaL/$MP&+3#0RC%OCeEpph,>$MO@C''ikYdpUCs\$4`9p>P]<SK*qL`r8JGH$4\?V(AW(fK*qKEqbS#-$MO@C''ikYOPPJAX4V`8MqmH/I''nQei5lCa!1("L:q#1#q''m^5aRe@JJ$;:8,''ibV7qg&uX$4`8EqE#Ed$MR>T''nQei5lCa!1("L:;u*d89a^VN?kn8#9D`67<=8HsH50Hf%[6[uq3;];$N&?N8JNuf_YL/GJdMu5pNcRk''nQccqd^FA$MO@C''ik\9$hpA1apJWBpU^2M''nQei5lC''c1(*c=qDB"?$4\?V1&;b&K*qL6q]lo.$;:8,''ibV7qg&uX$4`9odJ=q"JdQ>nEYWR$q`+A?''f$++,kl<SM\UgNL]-''EE=,eCL)!\qpA9.N<XK?7&bg#8D&"r99)5k0apJXV&bff1YSC@L9DI]capJXV&bf9b''laSQqDo?L$4ctGpJa*eE=/01I2,rnq/$7>$4ce<pej''dE=2UnprF14$MX/dOqg+e%U8]''3#-E?;u)._@LA(k"VkMS%eg@;p\P[f$MX/dOqg+eN;$0aapJV_pVHX8''k.N/qZR^E$A\@9(!6jnpC$e]qE#F<$N%^7.i!XCr%%]q''g)itoCnC_4UM[''q%`_5''m^5aSbE+!JdPHRAeeb^N;Ebn@gW_?$^^]O''ho&0?AoVN$N)FPeJ11Rp[e-B''g2m6>AO&A''ho&00ObcK$<-h6''k.N/qZR^E$4ce<q#U;V(!6m]g&)g)4::iSpQ?7S$<[&=''nQc&>PF0RM\UgN;u:/A@LA(k"VkMSpM]db(!6jnpC$`ZqC<;4$N)FP`"bBAp[e-B''g2ou#l%42K*i)mpdFrr''nZkjM>JJ3JdPHRAeeb^N;Ebn@gW_?$hr]X*u0A7O8a/7E=2UnprF14$MX/dOqg+e%U8[fq25u>$N8faE=,Y?L)"/)N;Ebn@gW_?/GQgQ:DJ0_CAUsF4UV)XqiV]g<sfG*pcnS^''m^4GqeHpV$NC+jfg''ftpK.b4pFQ''AqFhVu$@;U4''g2p$oD=[cpK%\3RJ0AMJe^ueK_s%0@g`59l.J=I(&(f;%ehOL)u04D4UV)XqiV]g<sn]speDRH$4`Ku_Y?Y:@g`59l.J=I(&(f;s8O;j_"U>6apJXQ/GP,!2ALiOqa12-''g2p$oD=[cpK%\3RJ8r@T+utcqbI%S''k7UN!9r0%Gnp''U$4ce]pej''dE=,\@`YCWDqt'']J(&(c:%[m(e3#-E?<;@7D@g`59l.J=I(&(f;%a+Q+3#-E?<;0!"7LBW0pZsjSE=2GCpL+eP$4b5R!H]&G$B=kr(!6jn>PPH=CC2?^e.p+5%egb6EV`9BH4$)=b8$cZ%\3;Iq2#i4$MTe_o+e&.%egb5FS[-q9a[?g3#/1q%\38Yq2#h\$MT>SM%ufn%egb6!H]''O$AJ;T(!6jnSG9?)U^ALEit]]D%egb6A,8"sK*qK5r_"!$$4`U$.f"N.K*p*+IMJXc%egb63&hXm$<6al''r)*GSG1l"''laTTBD5gLU^@TqpLO+>''ho%nr=''K6$4\?U,l+h_9aX\pcP:@*%[6Z43#-E?TD3=>8dZ%RpmjAZE=2TdpI>s:$4`9p2ts$]8d[fYRMEsP%OCd\E><C!d.lf>apJWBpf.)-''nZiHr<j?4$4\?V+8LR)K*qL7rLOaB$4_%LB_etLb6k-EW"mtmqumki$4_%LkkVP"bR1<HC_bV1qumki$4_%LQMIm&pK7k#Y)3t;$MPS=W"mtmqumki$4_%LK__qhpK7k#,SnT2pF#lT("irl"W#f!%WM24q6Un2=pk.>pGiu3$MPnFW"mtmqumki$4_%M2u0`opK@nYpH'',6$MQa^C_bV1qumki$4_%M-i+VoK*qL7q^3-%$D@<B("irl"W#f!%WM1]qA0m!$Msr&,SeN1VYi[ofa@W\(>9**YbV#>(!?sYebnPE.LPotpCS,j$4a<7+o-U&bR4+(r3-nc$MSrB&JZf''%ejH,,l)j''pK7k#Y)3t;$M^LrknPZTpO)]I''e9V$pJU`''q0!MI=UP$O(<d-\RJ`rt.LPotpCS,j$4ceNpY5Le(&(l=qe,X`(!?sZA,P=$.LPotpCS,j$4ceYpZ)''](&(l=1&!aEbR4,`r0S3K$MSrB&JZf''%at*;q>qCa$N#eZ-Paf3pWEEh''e0RbI.n3f.gcdKpR1j]''nZkj"8a>YbR4*or2(2Y$MSrB&JZf''%f6V-<r'''':b6mu*r<3q;$4cq?pXT)G(!I$Z55`M;X9oI7$MT2KZk`=<$N$u`(!?sYWr3)9X9oI7$MSQ9ZPE4;$Mu(abR4*Or5f\T$4cq?pbV`Q(&(l=qe,X`(!?sYZi(%BX9oI7$MYqCZ5*+;$8M9:(!I$Zb5B?rX9oI*I//%&b6muPr''(oO$4cS"!r7*VbR4)Xqu[Zh$4cgEpDj!T(&(i<qlYekb6n"rr''(oO$4cg7pD!FK(&(i<q]ls$$MY_@!u3Qu%em(!ebOA''pK@q$BD4D$b6n"`r&YWK$4cg9pYYdk(&(l=1&!aEbR4+fqu[Zh$4^24@/75Gb6n-ir"p1''$4^24k4uG#bR46nqqMq@$4^24\G<KHpK7k#Y)3t;$N#VV''c#I1%TrIlq6Lh1=UP$O(<d-_DYr*%gBnEmpiQ>:(&(l=qe,X`(!?s]MYn)%gBnEmpf.''g(&(l=1&!aEbR45Uqp6)4$4^25+o3#jK*qL7q^3-%$N&<Lk7u_Y%TrK\qA9s"$Msr&,SeN1qs+''](#''''*pGdQrGnnL0pjr>q''f?=.pH\HXq0<_!$M]JTneF"h%ep/#+o-F!pK7k#Y)3t;$MdBn/ep5N%eoho)YnXnpK7k#,SnT2q*OuL''f?=.pZqS&q0!MI=pk.>pGiu3$Mcd].MXfJ%ep)!kP9?;pK@nYpH'',6$Md0gneF"h%ektWK_bieK*qL7q^3-%$M]_\-P\KG%el"XM#%/fK*qJXq]lp#$M]AQlP28a%f>UOq6LgZ$BtMgJ:IV7eHuf`m.V=lZPC[kPQ1ToJ,g>7$4cs=pE9:=(&(i<qlYekb6m,+rIBCu("EX$qlof+q6Lh1=UP$O(<d-Ls8BT\!#=#k%f<C&ebQQepK@q$BD4D$b6mG4rIBCu("EX$qm#nOq6Cb0=pd"Y3u,sHjT#1kJ,g>7$4cs@pR(dp''nZkjN;Ft;b6ie"rN1SM("EX$qks1QqA0m!$Msr&,SeN1s8D/3!!LgZ%f<AIq0<^u$MS.^''fHC/ql''2`GnnO1pLq/R2@9pfpCm@K(&(i<qlYekb6n#2IhajK%QjD!q0<_L=UP$O(<d-\.(^3P$4\oeebOA''pK@q$BD4D$b6n"fK,$9O%QO4Aq03YK=pd"Y3u,sHp`d<b2@9rk:%sPA!>U4oqi(D"(!?sYDMf/e$4cr<pON)?''nZkj"8a>YbR4)R`"b0;%U/U?q6LgZ$:"EJ''k.N/qZR^E$4^86kkVP"bR-Z5;AEXJN;Ebn@gW]LpQkW^(&(i<qlYekb6kBKNYQ"1N;Ebn@gW]LpOr@K(&(i<q]ls$$Ffn1''k.N/qZR^E$4^877esD+pK@q$BD4D$b6k]TNYQ"1N;Ebn@gW]Lpc&#S(&(l=1&!aEbR2Ym;AEXJN;Ebn@gW_?+aEg.(!?q>r"9`,$MX/dOqg+e%ejZ/q0!Ls$@hs%''g)itoCnC_4UM\o4nfcgE>A4N$N$u`(!?sY?2P!D4::iSpQ?7S$4chjpCm@A(&(i<q]ls$$MRNsbnW>Jp[e-B''g2m6pX&Z`q-Fg1=pk.>pGiu3$KV*X''g)itoCnC_4UM\ncM->o>o!*;$8M9:(!I$?qn!S*$MX/dOqg+e%P[WYq6LgZ$MQLWh\FoR%P[Y/q6Lg[$MQRYUD;Pk%P[X2q6Un2=UP&/MA=;ApSIfF(#0-+0_]YaZPE4;$Mu(abR4*Jr1b"^$4\cb2>OTopK@q$BD4D$b6n!Hr8/7E$4\cb-Maq^pK@nYpH'',6$MVR<UD;Pk%P[YnqAC$#$N#eZ-Paf3pG)TO(#0-+0_btN(DVQ0qZH^@(!I$Z2uIk7g^4PcMt[GOGnnO1p`]Nm("3L"pc8''eq0<_L=UP$O(<d-\c23D6dg?T[>kd.OGSTsV$8M9:(!I$[p%sX^dg?TZdeA%`";QOrqZH^@(!I$[-2WE3dg?TZ$hqF3^D4p!df!>ai!Ktg$i!9g\J<<qbP`7mi!Ktg$hrWUWtkA3$N$u`(!?sY<W,?$i!Ktg$hrWUZPE4;$Mu(abR4)=r=Tk''$4ce<pt>JY(&(l=qe,X`(!?sY(B%DOi!Ktg$i%R6[2&F>$8M9:(!I$Z2uOI+i!Ktg$i#AN(_qZ1qi(D"(!?s)r?)j5$4ce<phT^A''nZkj"8a>YbR3##jV?\\%eiG5q0Wq#$M^Fp&/E\%%ej9''#5NicbR4-Nqq;e7$4chYpDj!Q(&(i<qlYekb6n&qr!F1g$4chcpD*LI(&(i<q]ls$$MfPUc5"h9%emm8g%fe+pK@q$BD4D$b6n%^r!=+f$4cgapY>RS(&(l=1&!aEbR4/''qn*Zn$4cg"pPAYE''nZkjN;Ft;b6n$@qu7D\$4cgGpOi;@''nZkj"8a>YbR4-dqo0B#$4_%L7/<;epK7jKr/_ZH$N(&Cg''S=/p^Htf(&(l=pCI/d("irl"W#f!%f6V-1ARCSpK7jtA,P^/X9oI7$MXAlRhb[$$MU(g7hr*4%TrHZq3r,n=UP%mqu%8a$4^25./BGLpK@q$O8E)qgBnGfm.m+RpK7ijs8A=8!#=#k%f>Ve>ksj(pK@pNs8G34!#=#k%U/Tpq3r,n=UJg=FqnHnN;Ebn@gW]Lp^Htf(&(l=T2-22$B4ic''k7R\0_[C!Rhb[#$MRp*`tdA:%P[YSq3r,n=pk"jr#lg1$4ce<pO2k5(&(i<pEBK"(#TE/pC$bUq4nc"=pk!9r0\;X$4_%L[JL"?d0`)6+Vi0-VYmA-fa@W\(>9**E;-d;!Ys)i^A8ufbR1<HC_bV1qumki$4_%L[JL"?d0a^d+r0iT$N$u`(!?sY*W2iNfa@W\(>9**E;-d;!Ys)i>5BBWpK7k#,SnT2pF#lT("irl"W#f!%WM0MqZ7M[$MPkC+r0iU$N"K13>K^EpEog:("irl"W#f!%WM0MqZ7M[$MP>4+;OWS$8M9:(!I$Z55]43fa@W\(>9**E;-d;!Ys)ipBLJJ''nZkjN;Ft;b6jp?Gno!>qumki$4_%L[JL"?d0fC>Kb]4IqZH^@(!I#^r''2"M$N(&Cg''S>aNqp$]!-ol@(&(o>rL<fgCYF:Rb6n!or8n_D$MSrB&JZf''%eknWYl=]K-%Ha)>71<RrrR2oJ/-98pYu+T''e0RbI.n3f.gcd]-MgC8!-ol@(&(o>rO;e.Dq]^VpK7k#Y)3t;$M^LrknPZTpO)]I''e9V$p^I!Rrr@<jJ/.f_$N7(+!bg;<(&(i<q]ls$$M^%eV\LZgpO)]I''e9V$pY#BArr@<jJ/.f_$N.C5!bg;<(&(l=qe,X`(!?sZA,P=$.LPotpCS,j$4cgjq?[*$GpRtUpKJ"&\c2_5g40q4=pd"Y3u,sHpi$(t''e0RbI.n3f.gcd\O860_!-ol@(&(o>r4Dt1o\+g1K*qL7q^3-%$MV^@g_D:GpO)]I''e9V$pQbQcrr@<jJ/.f_$N/$G!r(E!''nZkj"8a>YbR4*or2(2Y$MSrB&JZf''%TrHdqZ7M[$F0FQ(!?s]bPW1lgBnEmpGr*P("!B_62DiAbR46nqqMq@$4^243Vrmnd0fU]qBHaL=UP&/MA=;AqhP(a(#''''*=SG#V!>WuhjSBu6pK7k#,SnT2qel;a(#''''*=SFlR!Ys)ipWiUW(&(l=qe,X`(!?s]MYn)%gBnEmpH/6R("!B_XnihKpK@nYpH'',6$N"9/ckY:B%TrHgqZ7M[$MSfAL)#=Jqi(D"(!?s]e,/;CgBnEmpH&0R("!B_Mu&2DK*qJXq]lp#$N'',cXqf[u%eoGg''`S/Y-%Ha)>71?SrrQuiJ/-67pjr>q''f?=.p\=S*rr@<jJ/.f_$N7")!c-M?(!I$[M>QiY2$sig[JJVW!.#rA(&(o>r_<CoCYF:RpK7k#Y)3t;$MdBn/ep5N%f!R1h>[J#-%Ha)>71@2rrQuiJ/.f]$Mu(abR4/4qskIZ$4cj-qTAg<GpRtUpKJ"''MuNilg40q4=pk.>pGiu3$Mcd].MXfJ%f!X3hu<\%-%Ha)>71=frrQrhJ/.f^$8M9:(!I$\7f2`k2$sig8c!?)!-ol@(&(o>rI4bJpY(-4K*qL7q^3-%$M]_\-P\KG%erruGQ.Yg-%Ha)>71=]rrViHJ/*\DqZH^@(!I$[LAU9O2$sif$htkA!u92j.f(b4b6l\r=r#s&%egA++Su6Ud0d5V-l''r5bP`7mi!Ktg$htkA!u92j9_oYBpK7k#Y)3t;$MRR!72=_f%egA++Su6Ud0`SD+r0iT$Mu(abR4)=r=Tk''$4ce<p`TG9("!B_:&6LXpK@q$BD4D$b6mtZrE9ro$4ce<p`TG9("!B_2>SR5pK@nYpH'',6$MQLX''c#X6%egA++Su6Ud0f=<LD>FKqi(D"(!?s)r?)j5$4ce<p`TG9("!B>qLoZ:$Msr&,SeN1f_jhGi!Kth"8XAE!,*[/(&(o>r]gDaJ(fDfb6n$?r"''Um$4chKqEFoZBI/0DpKJ"''bl7`ug40p^$M^q(g(i*E%f#*)"Ej_EBI/0DpKJ"(Jc>dtg40q4=UP&/MA=;Aq1/AM("<R#q!B%(IfBC]-%Ha)>71@lrrRK"J/.f]$Mu(abR40&qp#r+$4ci\qP=,kBI/0DpKJ"''?iL1Qg40q4=pk.>pGiu3$MbP:#o1qs%euLh^]+:I-%Ha)>71=QrrQfdJ/.f^$8M9:(!I$\2>b$$e-Z]\;u1b=!,*[/(&(o>rIk1Q!SW&=K*qL7q^3-%$M^IprtX#j%et8ESGrS&-%Ha)>71>2rrW;UJ/*\DqZH^@(!I$[aSWsle-Z\)pal5o''pT,:r,*8&$N(&Cg''S=/pceLA''m0j]qs"pL$N(&Cg''S=/pU0l"("!Bc"o8N?pK7jKr/_ZH$N(&Cg''S=/pU0l"("!BCp^Itk$N(&Cg''S=KpU0l"("!B_9)8E#H4$GEmM4C^qumki$4_%M)YnLjK*jR8C),D/qumki$4_%L[JL"?d0fC=it[1R2uID*fa@W\(>9**YkX%N)&8DDErC>".LPotpCS,j$4a<8RJI%$FUDRU+r)R7pO)]I''e9V$Y]]be(&(i<p]p`Z''e0RbI.n3f.gccjpN?:W(&(l=p^m?g''e0RbI.n3f.gcd\N;9aY!-ol@(&(o>qptcI);9TU.LPotpCS,j$4ctGiVA0Bb6eaVc1`[e!.H5%(&n8^J:]KTs.6Q>#QOgT($_Ups5c+%b0d-e!!-d6rr?#f^)h.rL]@DC''Es?ns6gX#DN"Ppk>aa)s8Vnp_>aKOq#--N!&7\%#S-bEiVA0B:Xo].s8V1G!<<)qBmKaYe5Gf9s1+GNs8V\-&-uMGpC3LU`/DkG_$:JJ&bcM*J/*\D%f=uSXSNeLK*l\s4r&&EqcNS&''laQj=SFrT!Ys)iJ,0HdpK7k#Qi$^rgBnEmpH8<S("!Bc-2=,JgBnE=pH/6R("!B_\,#k8H4''PkqcFTf$4^25/bu+UK*qNVqudbh$4^2448T''od0fW&q@FBo$N*p%";TYu%eg9:q0<_L=UOnfr''(oO$4ceKpHJCu(&(l=pWr`)''f$++pJ>>pGnp''V$M_mD/ep5N%ej''!3Vdq8pK@q"#5a2k2$sif;>GD8!-ol@(&(o>qnN.2dFs*c2$sij484L*L)''Gc$N$u`(!?poq`ad>q1]XY=pk.>pGiu3$4cs(pX8mT''nZkjN;Ft;b6eaVf_9UcKGBaZ8,rP!J,g>7$4csPpS@UQ''m0j8s8G34!#=#k%f<cRq4e]!>RLN2PF6t$s/jM\(!m<f!;+M9rr?JqJ/-E<s8S%GJH,U:9Y_Cn$4csBpO;q3(!d6es-oF,rr?KO^_P3''rrD]9!<3%-R=H%!$NL-]R=P>:7SLT4eHuf``qPSjFVTN9q]>e9^461ueHuf`\bCmU(DVQ0F8J-9E=2SFpC7pX$M4;s5_&hLeHufa2tr"%6ktso9)E!22@9rl,kn\B";Q%d/OL72$4creCADf`pK7jtUkfaD$4crgpG;Vg(&(l=pZ2''''''fHC/qaU=*q1TRX=UP$O(<d*q7JK7GKGF5b$8M9:(!I!pqqCe2q@XNq$Msr&,SeN1%P[Ysq1KKJ$LI\e(#0-+0_d6q6kshOgAE*/g^4NFpI"bO(&(r?s8S:NJH,YObeOt?$NC+ublIbD@@;W\cjKdQ5+-s$rclZ&(#0-+0_b&3UD;)^s8SRVJH#UXbeOt?$NC+ublIbD@@;W\cjKdQ5+-s$rclZ&(#0-+9D>.UO;5qGpDj*X(#95p+G:Kd$4]`''h"dTXbR4)Sr(e''`$N)$"(#B9-0_btMFVTN9^\jc?g^4NFp^-d5''nZj7q`Ya7$N!s"%M`sjpS@^/(#0-+pB:8^qAC$5$Mu.I>SY]p%eg,$YPJA:FUJ")qu[\_$4cg?D>A#`pK7ju5Pr&-dg?TZfCqB&Eu"FQ$M^%d)\pg/%eh@F!r7WebR4.]qc+B_$N%:W("`j''qqBm%TG@3+$NL-iR=P>;Xj#!(dL-!SoZZIt!+D:_("*F!qqCe-q4JJK$NL-qR=P;;@EcM%cjKdQoZ[C9!+D:G(!m9tqqBm%I22KZ$4ce<p`TG9("!Bc2u41&pK7jt+oOV?i!Ktg$htkA!u92joClo5i!Ktg$htkA!u92jpAt*O''m^5]%K(Pfi!Ktg$i#JPN>7''Q:AlRUi!Ktg$htkA!u92jnbN(tK*kBP-l(YI%el!"q19@U=UMA1)\kIBp[e-B''g2m6pF>o.q0s.R=pfNOEYU\Dp[e-B''g2m6pOZcJM\Yth$MaAn*u394%ei$Y62>d@pK@q!f)''(pe-Z][e+re=!.H5E(&(o>qmcY+mFm(*e-Z]_g@s"jL)''Gd$4ctGpLj;U(&JbH#)c''=;YLWL#eC9@s1+GNrr<IjnGiObBmK^Y.d[e*rr=!g!!q*Z%f8$lpZW1b1Cj0D%f=rir%/EVJ.<h7r"0G:?Om"O%LrsY%M&BipV-CF(&OdOpS8!''qqCeYpWF<KUa,W0"qDpR_=u+fr5p8Zap&>$pqc^J(&Z3!prWdNpZ_O(pWF<NL*QPL"qLClqLA7_(&iq4qM#1aqf;Grq/$j.r\`F7q_n:.''g)CPgBJ-5pt#=]''heu/Actd7%f?q5?MJ4LpK\+9r"73LD&((u%f?p`pCS.\$4ctGpKdT3(&JsI%gIsh"Pe.9L^:Nrs8TCh])Ma?7VMi%r>%m&!%g3uMuNbtJ,fl0"qLMdpdOsl(&(u@0,F:f$4cqhpVlrF''up[Z";]#b%f8''V^%W*R`sV_A(<6alq_S"@q/$l@?4-RWpCS/7?4%/fpn.>,(&LMqFSd!RFSeT*#kpjea7gMIa7i(.%OCh>pj!VO8,%-&)Z+XR8,ESd8,IB)8,ESd8,IE&)Y\@J7gA\nqa^C%pI>GuqoSS$pcT?[;cH1T_c+q/_o''jI;oD3K%f=BBg%XkKMuNb_ah%NPrftA#!!Yhps8V_:h#@?Yl95LRrt4a0rr@`XXp&s$JTi45NX(!&s8VimGQ.XVh*W7`!9Q%@rr@HR2[03]"4p6H!!5n0rr<3lkl1Vp+jBrd"4Ah%!!7ss#S-bEpM0FL''d3noP4s_*-5@[2pYbcm''d3nopZ_F,pEgUu$MWNR-5@[2pYkin''d3nor"7-H\.s>t%LrsY%LrsYq_J`Vl1[%1G89jZ$9JCb?jcYhg(j?j$8;<f(&)/E3s>:f$MXeZ(&)/E3s>:f$4cl6*!E_EVA8i7$9JCb@g`48ppCk2?OAjtpL"@&jOt@C@1"[cA/4iJ$9JCb@g_u7gD0Hl$9JCb@gW_D3WB*6.Y%I"_RcBTs8RDO`;]f^[uC@ehHGF/s+5,&rr<3e^An4Y$GufC2A]a#s7(Z_rr>X`5lUh(];PlCqgJJFSLT0i!lDO!''tt%Ts''MUQrr@J1!#<0S%UT/:<@WP!!lDO!''tt%Ts''V[Rrr@J1!#<3Ts8Qc/JH#UtOoQ61$4ctorr<Ti_>aSR\tBf<!$S1is8R[feGfM?o^Vt]N^R"L!&bXRrr<OX2ZEa\5JI-tL@mb1s5$qPrr@J0lidmrXT&:=35GOq_Rb74pLFX2rl2:[s8UkF5Sa$($4\ll!IQlBrrU''KJ/.fh$NL+EZbZV@gdj[FpLFX2rkl(Xs8UkF5Sa$($4crEpf.,m(&N(I!W-s9!VZqZo_1iIqaL`!qqBp$DA@7#%f=uSMtc6HIL6QspCd5d(''"<h])r$4j@''"Is5-Mos8V&a2#mU3;Y''hf+s7*is5UC:rr=(%@fHES:72%])#IkD!$M-srr=+=1B.=ne9_/pj6K,5!$[%ps8Umm=<I9qpC.l;!$[u>s8V%[eGfLf@SZt''i28.+s4Y]@s8V7<2#mU4J,oWLjF@71s4L7_rr=7^jT#8CY*f4h)`eu=!$[u>rr=!I:B(;8V_%iJ+''@#6rr@@HcN!nN"Ip5,!$\?srr=&8i;Wcqqdf^,,>OX+!$0`.s8V+Z!<3$BfM_bLh68%%s4k3Fs8V.K*rl8t9[*P:iNkB@s4l8Wrr=7ggAh36/''%Yi)i4,.s8ND(1B7B.qd^HAs4LPkrr=93SH&WQVEb(\)S9P[!$[u>rr=!I:B(;8Va(1]+''?AZ!$RrDs8V)oK`;#l@7^Fui''2Vhs4L7_s8V8bR/d3B3ZS2"jMg1$rr<(r+88JEs8PGV?iU-n7m?qQ5/cads2GR9rrBW*R/[/t:7hIc\k\Xms$a2%rr>7$h#@@7n@nr&6Uu%o!5,hYrrB^AP5bNp\CCQY_)iqB!''0PEs8PNmB`J*$Z"j==7BpP+!4kpks8Tns(B=ES%pT8JP5+59C)%iur!!9I$N&fXC)%iur!!9I$4^D;(&''$i+U\,?piR>G*/t/e#E/T^019(F!$3Forr=FY+TDEfg7\HG(SZusMuWgV?1e-s*8\4*s!DO$"onVp:Z29Qks,7Ks7juTs8V07,E)U%hK]nCIJ49XMp;8%(e*Nc!",7arr>-l*<-!g@hS"M]!mUTMt\4g+6iYMM^jY^6tV8PFpRj9rr@D\4;Ikr,lRB8s6F=!rr=)A%0-@a.n#<qs4FI''MuWh$%M\sCff"Zds5Q_%s8URL7fWMIMZO1a!"[.+rr@-\C''>(mpqZ^2(&YfkpqI"CMZ3`I;K2[9i2qGCs8U1#&HDdZ2q@s.QHFaXs6pr//W29?s8SWJ7fNGrICT=W_fn*?!&6.H#ljqT;M+oK,-?HTs8RgG*rc3F;M+rKpoR?rrr>jqZ2aj-s#g;]@][iSs73<npB$9GMuNcg7d0jP%."9"!)R:+rr>l-AdJD:#?#O@!!cE+MuNd&[Gh?"MZ3ZMXa^9O<3;5srr=tu!WN-Na>EnsBf1JA!"\02l&4__rr?NM]`8$(Jl)II4G^BEs3Au!#lalSXcWS_h,83Mrr@>Q"TSMsXcWP_#?#LEs8T;&4T>CX!6"p;SPqBF!"Df(qZ;[!MuWgG\JG5Fo+X=es0%i,s8T9j=:"s,poT#Fs7i^XMuWg38c/`%qf2W:2<oYb_%m"L^pO7AU]1==FodO$!,HN1rrB<&K)YgeG0''^`:98pE!-l49MuWfXBQF+R''=e2E!15pVrrDpcr<3]*8b_uSZkXemq]u)W''dF(\ralli$4cs"p[@k,(&PT>2#"Qc%fCkONqm#sIgQ\_g%TPL(&''`oMuNc_ZhXP#''^ZD1!";4-rr=>T<rW.)M0TC,!#,R+rr<07/W9W/D;(Z_s6KPmrr<07/-Z(Reufbf!!m4Ts8VOgL]7>dJkh7(!*>K-#kp@brr=KJ5lUfiWkn]8!33j7!$,''(*jbSG6jE\kX[d7.s3/!:s8U%VT`>%`j^92-8dC:Ss1B%lrr<BZ>lXiFo=4f#0AEB(s4gYrs8Ui(!<<)WgoUPUl?*%*s3D_XMuWg`VIg,28dGCrT'',VC!&HDes8U%T&H;`.bfq3WpBP14s8UiR_>jQ7<Bl\L*tJ2$rr<r?Jc>_jJ:eU:!%CeEs8Vh\PQ(UoWIY$Km=0MAs8T''2D$^#"#@`=CD''!3a#LWhV!)g=jrr=iFD>sSsj^A)g@2bd\pIY[Krr>_oci=%1G"2K30]NfGs4`*]rr=,cQ2^h;j-BWE,HdF6!"(!Arr=tjDN"Mp6f<V''pIY\j!+?]Us8U<ec2Rc)kOANOXYVaS7/I4q#-a&=Bcm45#E/W^W+e6ks6j!=s8VM8ZN''sUXo\S&pR%*Ls8VE^J,fQGmF7''os,n[9"V1=Jq)A(k''e''LaebeAA+U\3.piR<#$MW*JitW^E%em7(rV:1C+:A#N"<e-N^%c^b.15h"qr8D7$4cg8p`]ET''e''LaebeAA+U\-Pq.^We$N()2+US])pn[]''(&Wja&bkr&s8T>o/H>aNaZ0>#LUbk6s("%/E;O,NpE9a*pE%0F%JN!Z?O./=%eumqK,++t1%G,I*rEiB[f,:Sq;f]sjR)_K#58Xji9?0o''F53G%fZOsoRQ_](''";G0*)%PZ.sm0s+!Ies8RGYJH,Xp)M%hf:1/VPs+9?_rrAIO!$CsFpBFOi\A\+G#5`cF.M_]fa8<@O%f6b1^Ut<]!1D3rrr>e=QN$r7]P@HHKL;(*!/BTCs8T?rI/a1p)PI-1Ao%_pqmcM-`;@&BqZ[9!Hh]''*qm]Gr\-EN@UA#Ms''dF%qqqCe6pEgXP.f14jM`mIapDeJb_Zs#)E3>,F#`djKq^VB2(&K?P.eb7p%Z:8d9W`jF!HP;m(&n7m*<?*>/BC*V!,4<@rr<Sk5j=3iMuNcdah[rVoR]@.!''H(Qs8UBk5R@Ai.]n7$s4pS''MuNd&[K-@-poT)H!!cDP"onV+s$6Sa:]S<2s.*(Rrr<L*_#"1k+cHC#R^iFus76p)s8T9jJH,YQR=GSCs7i^Hs8VkrJ;aI-L.VFLrrOHDJH,XWXah/ds2a4#s8UP,_#OG#b(0Nln/B(oM_C"gs.)&5rr<FT_#OGPG<l0.0e^<Js8UVIJH#TnXal?0s+X,Grr<:%JH,ZEXagTT!)N[2s8T;&5lUgnXMFl9nub7P!fQ`0rr?V#!<3$-li@%c:hG7X!)R9X#lal0;LncI#?$)1rr@>Q!!Nl0UA#Ms''dF([!VeGc,74p$pf$o"''mg;cN;3#[HOBM\N>6pM%P[ZqpcK:DJ-C%.I><!(I#E*,BpK$;QN^ugA!(D^1lG(9EBjeZC?^Y>Qj&qWU5th&Q&D/hV1T&VJ-FJEU5H"0m>JW`XkX2MXp#;mrr>`pIfKEuXcX@u!&ko!rr=Uk1]IGh21bc-&*4ksMs$#u!+O''_s8V_C:B(;VLp[3^cHp#+rr=ONOT5@:;K%Kn!-u!Us8VkrOT,:c;Jl[<s0)Gbrr>jqbl@^6;`+LS%8k(@!fJ4[s8SOu(B=F+''E8%3YF05,s0%i2#ljr"Xa^<MpoT^;s8RgFqumT))ZKgt=rdPD?.1VFrr<dfjT#73je2YR[rf:_!+jWh"onVb-S,2s,P:p6s6/=Mrr<Uo2#mU5=Vcqqs46f:MuWh/=Ao2!iWq5rs8U@(''T<"khSgW;!"_k$s8V;m&H;_U"5!SQj[X+mrr?]=HiO,SAuPb0L"FZN!#/L."onVlf?jNt"+P^us7<S*rr<&to`+scQO8WVs8URms8W,Mh#[QUgU);,s3aPps8US[@/g3S,Q@`Cfp\T6!%lt-+9)<J''`O$j!"2''srr<''ZPlC^mX@iKm!ZGANrr@HX)ZKdPAnM)CR[DY*s0ohf"onVUna6AVjjlj"s7''UNs8V:)4H''7>hN(p">HqtOMuNc#4!T[`!#J6jrr<U,KDtoi\5N>,,QmfIrr>X4r;Qb15CNS3lU79Cs+E[p"onW"o="]!j/N"Ws8Tk7s8W+h!K7!XpuI#4s8UTZ!<3$E??ZAKf1,i@!%jn%rr=R<T`5!=ARPN<-R8]l!%lt+*fL$u$5CDXs8L%''rr<Ep5l^l_jeDbT%BM\us8VA*[f6>U68&9<87\1hs-dED"oeQ@.D5]\g%#=H!#OS3s8VV!^&J''UE28El!%]r$MuNc%bR"4K,<l0drr=Rc!/pjW+h1GMs7''3Urr<jTB`J+d,M<"r)`C.ks8SGG&H;`%2[]QbH^c;\s6@73"oeQ3bR"7KrSY]q!"MA\s8W)A`r?#Cou)aorr=S)m/I&7,8C.X,YNml!%kR(rr=R<T`>&EgZ\Y;-=pTbs3`/0+92B3''KD$Ns6a4''s8W$T5l^l^MT#Pps*)`os8R]@,ldo0RG@fBAW>4>!(^6p"oeQK\_R2b)W65I!"R+qrr<i\>`8U^+^3f^]4J$OMuWh6XqZfos6(IWs8VQL+TMK''g)U.mgRgS6s8TN*o)J`VkO/?M''Y@oU!.2F<"oeQ)Ej5QD(a;ZR!!(]@rr</E"H39[#3[`Hrr=S)m/R+?[!M`P.3fQ,s3aPps8US[@/p8[R\9]\f\>Wis3`/0*fL''up%b!T!!+J:s8V]oSGrQj1+`J*o$m^G%f7NUpZ<3;$MQXVEts$/q[i[9''mg8tpK7Ft5Uq<a!lDO!''tt%Ts&GnGrr@J1!#<3Ts8Q&pJH#UtOoQ62$NL-+V1ARGI?FRF]a>7lpTaNh''mg;b&H(B"HOBK[pVmqp$N1#AHO:8-pTsWG''mg;^''DK''QHOB]TL_Y7Dp^R/f''mg;d"VuFl%fAi$q4ACK$MtD53u*)L%a+RIp[f2I$N1#AHOBKYpe_cQ$MtD5rY9be%TN3^pm`(G$MtD3pD&#^r-&p''$MXGl727''Tr-J+L''mg8tr("!]''mg;b&G[@^HOBW]qq)X1$4cu(YkY76HOBW]r''hEJ$MtD1+;K51q[i[$''mg8t%LrsY%M&BWT(mmPpLO^+F;FU_$4cu@rrA+=_"eKU0`1J(#6+_Wfmj2Zs8T7;!9OIqqoJNkpfJ8]$Mu!t''nH]%qoJNUq,nI,B*o.GaI`0Q(&)AKpG8-NpLssEqoJNnq,nI,C''kIJaS46[mhPS4$Mu0^(&)MOMYfOOpMC6IqoJNiplcHeD@67sIhh]r$4csSpYYbJ(&)YS%f=>>poP9!pWLti%f=>>q",:hpWLtiqoej]''h%f>dK^9[:]CEIo0E<X(tjESpMgNMr([1k<"-SB!50_0(&)_U%f;q!!%@G(q%+;<oB-&Qd[>Ujrr=L9_#FBT5QLfa)be''I!%]okZMsn<J,oWLlAWOYs41e4*rl6fN54TU!:*=o#QFcu=ht(;eJWo;!%]o+s8TJl!$;1?d#>bus8V"(JH,Z;F$O_U#lal[ZTna*qoG@o(&)8HpN.2FAdT%FqY)Au''n$E!qoJNemhL''S%f=>@iY?_G%f=?AibK9Z$Mu!t''nH]%qoJNUpN75FB*o.GaI\A+pLjp.1RAjNBaP@IaS4fjFVXXc$4csSpXT!G(&)JNq^/oipM:1oq`P\gD$gdMaS4Vi(&)SQq_N^:pMUBKqoSTipB)0)E!d*Pae8A1''h%f>dK^9Zae8B2''h%f>dKfZmq]chDpWLti%fB-&!/''l.rrHW_J/.fu$4cu0rr>t+_#OEF-@cj*EXE<R]`.t[beX8Y.h''3.ZA\__,JX<Z!"e:Crr=.o_#FBX-:!Lhs6\&2rr<)k!<<)pJ,oTL#]i92s7Me1#lam6beX5Y$OjfTs8VQ''!<3$/o0E?Uqf>%&!"$F@MuNbi1I)6?<sSa*7t:U>s3Eq1rr=<V5l^kX)8I<ns.L<\MuWh&R=P>;f<[aBs8"''ms8T7;!!rT)=24e?rr<1\_#FB[Aq9m]%eDsc!"6+urr=V''J;aF-,8n:Trr<Xi_#OH,9YcSds6,l$MuWh5N55JneJWo;s8EH-s8V''r_#OH3ErZLGs4`rls8VnF!!WE&\oU.:s7B"cs8Uq35l^l>5QH`Bs1n4+MuWgmo0E<U.cs"rs4+mbrr>9i5`5pJ!,;$ipFm?^s3"Q\EW?''u)1_bedFj''Ms5A#as8VI5JH#T\5QIW%MuNbr9YgZ.%SX[*rr=@O5lUfhbeOMa!$=!^rr<5U^]j`<(_"4[!!J7rrr</`5lUfb9YgZ.$>+hg!!P/D#S-aBrrB@K_#FD+fmjh;s-l7Rs8Tr$!<<).1I2!?MHRaps,W,Srr>2"_#OGH)1__e@rhVlrr>fkJ;aF-5I3WT!%cg=rr<`[5lUgPk!04Ps/&Kj#64_qo)Sgjj:&j(s5p2/s8VQ''!<<)Ufmo"\s2*oKMuWhN5QLfa/D7i=s8EGBrr=]n5R@AilV,(urr<%rJH#TSbeT/:!!>IdMuNb[N5,`!!1R,As8Se.!4)Y)\]hi1rr>KH_#OFLJ,g>as)^L+#6+Z,ftdUf2,+)N!#E?Mrr<t75lUg49YcSd!%L56MuNboZU"Qjj(<iA!!D@Ks8U<?5R7ksSc8]-VL\[HT%SW/s8S>!!<<)5=b-PP\L)k,s,?P7s8S$O_#FC#VL\^H\]hkh!,L^^rr?f%_#FC$o)Sdj7bPTW!,uuZrr@665l^l!VL\[H7?#%^s,n^Z+9)<@VEk1][Z(8%rr=e__#FBWJ,oWLdj@?[s19/as8Tf9JH,Z+1I2!?dXV>ts3Eq1s8UB4_#OGkfms)&/V!j$!(-9Brr>CW5lUg--@l*r/V!j$!&8(N*tJ1_rrD2s!<<)_beOt5$4csOrrB@?!<<''L%)<VX!+`kFrr>3t!<3$ibeX5YFf'']h!-!!Es8TsuJH#U;k!8tHS;b6*s8T?,J;aI-^eDQDs3i<Fs8VE<_#OGH)1W"m!*QWn#6+Z2%)DlC)tQ>p!#\pirr<Tq!<3$B-@h$S!''M3MMuNb`^]=E7djBVF!!2[Vs8UH)^^0u?''XL%/s8W+%JH,ZE1I-lus89Y4MuWhSF$L$2s(%ulrr?@j!+c*07Pd:Ns8TZO5lUhLJ,g>a!/nVm#64`"-:%V2b-OA5s62cKs8V1`JH,Z$ZTsHKs4+mbMuWh?9YgZ.*1=VBs83bMrr=iXJ-ZWhpNuYj(!?96hYWK1-hl]qr+Z%k4?2%g4?Ef%qi1=fpPnp1gBJ-XrrD7EkP-><s8V7\FT2=m^O6(]kA[6s!#i-qMuNc3N`M)<!''c`6rr=YuW;ciFC;BiL7G1e$rr@#"k)99>rJqlss.$=Srr<(dcN!pd:E0Z?!/[ZJ#64`%]sRe>Q?o5(s3WJ<rr@\*@/p6gZ>PU#s(s7%MuWg8eNa*6R"\q+s8R=iTSrjMfR_3F!!MgXs8V?#OT,;$@6sqnbIaVWs8Tp;IQd]2DC/s"rr<+e$NL/&ZEX?/$pp''Us2C\Srr<)^B)ho-X+go[s+M>Z4oYM#/;sf5s6m*ks8V-qL]@D<Wa>`*jFl@hs0T)Ls8Ti7=pY-.6^RcOs/QYs"oeQIb2WF$(Q:WZ!%Ce2rr<.A_#FBe''/PRH!(D3?MuNc53LXda!*`,&MuNcQp5"Y,!%4g8rr=8C_#FBb?*O>/.S,!os8Tb^55tUd#2KI_s6,dVs8VQAT)\iL:Z29QkLN-&s4d!IMuWh*JVoBcs3CQqWrN+4JOk_!s7GI<MuWhM;()DDs#OKds7NdNs8W([@fHE<q,mXs''(pkV!"3S_rr<X//cPeVE@Che&FGScrrA*B.,"Y#J/V_uMuNb_J,oWLpZ8-Zs8Vqk)#jRHJ,flT!/XqDf`hr\HN+&$dkpkB(''"<9CB4D7LOVDis8V32`;fl/"5*YRkqM2us6J=es8VAr,ldo)U_n*c<N&HH9oEM)>uV*Tq]Ga?pE94_#L0HYa1A3g?lk7+s,m/Ns8N:a>lXef"^q?1F.I</rr@c%1]IHm7ZNE,s/rnQpE5BPrrF.$T)Se"p&tBqOCp$Hrr=W:#ljr(ifO0?)p%[Os5cDLMuWh-kk5;Zr:_?/&dO?p!*dias8UCUSGrRMn)46GX+#<n!"E)d#lalpifO0?B]RqP%aXr9pW4.PikFtcpO;uSqgSSFDWP71q]>K\s8RNdTSna*IU7qj,e/bj1gZ)u0"?gtqePp?Mi7=FrrA?/OGiiLqeHB8!/00IpM7JIqafocs8U]qP)KA?bA0H(rr?<E/;j]/Yr!3Trr=b`Qj<Wk1`eJ1"V1=upjr/O''g`8&p_FT3$MWQWp(_9K%ept<?2"R=qh"R3q]G_Gp^IFl#/Kt@YP2*?p]^O:qum=X4Cr@jKF%H@pj!VP@/TBc+8C-UeHW:DG&\W$E;(IKE!PhkaWhi:4SXlZ(&Vu*phpANq5+m,[/1GE4ZM-ps1s!9#64_\9p5MV(UX,?s4;-hrr<JT.0''=p6l:gfs8R7r@/p8(HD(<<O^"X]s''2@)s8Q$hFoMGD0VnaKOpm9K!0,<0+9)<q-7"NL!%;3''rr<JcKDtorH=$UO*PCeGs8V@nO7rtU`PDfVZMPs`rr>8"NrK)0k]6_''a!$??s-VYds8Sa+GlRfoR@=0U_j6,Ys1i5Ys8T_f1]RL''bg$.f4VYR/!+>+\rr?F_2#dP,bg$.f4j;.M!(/Ou*tEPj4*24CMlqukXU+YM#>.s)M.;H(Mc.H4jp:]PMkeVqCPr@QQ&Cf`Q&D&hQAq@>pOeC"chiuc"f(8#cKC+lMm8,K@0jC;&-Ye:A<''9?qc8V''qZ^[056tJOF%=N6"c@efJr>,:IuAo<I0a2<F%=l@"h4ARpH`-LM[0emrrHcWP5bR=G/tEus6?;6rr=J:V#UJ`OQQQC*/oi7rr<uH#RLG1(GB%n!#;NLrr<\YV#LE.<C$Qa%b3iE!!t-js8V\YR/d3RAnW6Ds8UfH#ljquSb2s^hWmH,s6_P3s8Ug<J-c/T9/:DbrWJ'';(''"<ufE;0Rjp:\\s5(Z,s8T+n$6K6INFY9ZrrC<3R/[.BAn_2E>;C*r!)Ce%+,g.!OM*=Is2&C3rr?tCo`+s"l\>E>CK[)*!%^rUrr>oeErQ+h>ql9Y?Ah..rr?,0O9kjd=`srJs0p&<rr>?Ar;Zen3"Yrk5QCbiR@+$SNFliFMuWggGa/4.,LPlXs1i!Urr=tUo`+r^@SZt''ns@Z%s5`5Xs8Vi<%fcS":0.Dpok=(!s6Yf/#ljq86IGf5H\\d(s''8\(s8I4jZMsou''i"`.s8Tn7!#C/]rr=e/KDtp0hKJr!PmokU!-?q2rrDNT#R15.,)<?$s2g;Rrr=J8<r`3(FeXfos0*dJ#S''B!Sc8c0#]pg]s&$f7s8VOc/H>a^3<T<]Km/K6s8OAse;OA,-(X].!(>,Is8R=K%0$=10gYj>mbS$Os8SE5rQkKDBCs(HrrAZm$NC)5fXh(_4Xb@N!+p,frr<=TK`;%C_n??Q-3jMMpYq;7s/[MSs8Vpno)Ja6Wdk''K]#oL%s7WmV#laq\PPPOa!+i@ls8Vdg>lXic`F/`GWcsF%!!eCss8Umr\-VgR#64_pW%e5OS$iJ"s2#Fmrr?>VOT5>o6sBTj#n>Airr=peQq%D]rG_=H"TSM,e+iqC''O<Ems7%WGrr>s<Ef9qtM!+8crr@j6cMmkUG00aa8N@Rd!)/5.rr<^/kQhZ''p_EPi(&)G:&cCG]&bg;Bm.Vt6r!3#d(&6SY&cCDg%Z:&V(&SaMZF@EbPa2S[\cju<@q$]>#l)IF%fFHDp_?6ma9O!NA$e,`#[L[=P^p;@ZX3tJqe1$cf(iK7"qLN]J/-i6^cM`1rr<5<!;V6^s8EMo`WlGC+@e!_!$j)9rr=<T)#jRf%M\pC)sI"q!$^G7#ljqS3)]bV/''%,_s8T]''IfKGNWAsqXftpScs4Qk6s8TD4I/j5T:Dj*39_M$Ws0b_]rr=B.m/R+=mb%O>7(%XHs/r=\#lalTa0,FB/''"jts8V.q!ri6EHQ`@ggAcR#!%l6qs8V!X#lalLg0=p`!V$kM"qL\3Qp:ZO!j%f?(&n=)''L2m&s51?%s8Uj''5l^l=S,iThdddD<s5Xsrs8Umq!!rT)/''#I*s3s"."oeQj[=J8W;-(L4!%''kErr=AWJH#UComm&B8[-#1s0E#^rr>Wp5l^l;_a+5%-4p7Xs1:mRrr>ns^^0u?e2T_ns3s#Y"oeQAPlUjah1WTD!$qVqs8UM,5lUg+rrE*!ga0`As8EMoJ-HM\''):u3HOBYl(4-Dc`tj"/%fJH`nJ-BXpcoUA$N%p\HOBYj(4-AuqfDS;(&)bVpe^mE(&)eW%elq!>8@!_rdFco#Pq$,(&esE(&AXL%f:>E%Men)pc\C8pc\C9r&k5]55^<Rpl"p*r/:?.r/:K2"V19HpUh6!s8Ro6#64_XD,C94SIPGqs1cB@s8TF[^^0u=Ir1;I!e6G^"oeQrGL6?i5lG[%!+m\Xrr=7<<;urA_@2@sRu@#4q`9Z4WsJW"pl#sb_Y[^;C&>C:W:s3eGk]JWc1b33Fn_s2\bf;!BD]pqrrF3k!<;tpO8p$qs0N"qs8TnM*rl85oV;Hdi`b@As,)LOMu03+qaC0QMt`Tsrr@-d>5nRDR+2-9?Znp=!''i,4rr>`[&-rdC!r7]gr''CUkZC.5nb6VC["Z@]QFur.C8st(lqZI28Z3=OXI[arU#l$^jB4QF9>tYI6A-Lo\StOfb6HjhF/GB;R?"4&K8sjt0A-`\FrK)Ibq1KL_s/^PmMuNilLh-J&rr>uO!fI3l%bURl(&X4XpdG%!f`hr`&jI+X$N%p\HOBYj(4-Aur#,;)(&-&O"PEHHr+c+,f`hrds42]#rrG95!#>P3mL>6^rr=Tar;QaL>ql9Y8ftkK!*YfErr=XBGlIb("Bl*2s3p!>rr=Sj0EqLVVXnp0s-Am/s8TKf>lXi34KSS_T72%bs.bm9rr?GRW;lmmS*0eO8r%6_s0X);rr?0uV#UI\Vum>*!%],Zrr=Sj!<rN''dZ''@g!''&6(s8TKc8H/ZnqAoV9e%PDR!%p(9#lau=no+dCrr>iO_>*.-s8TIX^Pi-k2\0O!9`G)f0,f`PrrFn>_"gY=s8TIXaG^)t2\00l9`G)f0-#lR%fZMMAq9p]P?EDNdJV&jnh[U]i?\c?\cm\O?,gB`#S-n5k@T8Es-?f<(&/IIA7&S<Jq+-<>Qs''UZaB;`#lMaJ%fZMC^]=6K(''"7ClbE`)!$Fcsrr<u\_#FB[A,uW0+j.V#!#t/&rr<re5R@Die2T_n!$Khm"onV78q?sA_Z%@Ns4P7Ss8V,#_#OG@$@r0VaLa_;!)3*:s8U0Q!<3$G4M_!sj)[Kc!(=5Fs8Tt8^^0r?/''#I*!$Kh-"onV`CB4A7);KcBs4[L''rr=6C_#OGm!<E-")WSU=rrMX(J-HM`rKohMs8PU\5Sa;"nJ"4ms8Uud_#OGqhZ3]VgRJ9Ds5#V`s8V-r!<<)\e\DIj!%Z+*s8Ut+!!WB&7(%RF!''L?Jrr=B/_#FBSN''RCC9_Er9!&m;rs8TD3JH#U.6pUePfu$)T!$$s5s8T]''JH#U4!C-qjs3s"ns8Ut+5R%/f)jLF''s5kPVrr=>FJH,Z*W^-Ra+9)?@s5b4c#ljl6l[T0Ls8O,"<<!$lR@"`h!!=pNs8TTbFT;BRA6T!5(d+o"s7*eps8UQYh#@@Bk:?T4m+a#hs3plps8U,"h#@@#L?\a<jSIg7!%9F]rr>,V>lOdOLi`Ur`3V<#!%''pYrr<u;_#OG`<5&;336O_i!(>]?rr<]UM#[MF^%D=)/4Lobs1DlGs8V9"<;uq#0Vn^K7sBmq%em:)B_c!MpN6iCrV*)>rr=*,O;7M5$NC)5>U]XP$;p(''pNHuE!Pt1ms8Rh7>S[;=\o=I''s8U2(E<#t%;<n2]fnCFGs3Y7Gs8USM%0-@O1Go.3i9Q''rs/BdfMuWgfZSRO>s2IQnrr=.gm/R*bCV]rMIn-`$rr?DK^l/3m8;/2d!''!,(rr=,TI/a1V.1-@\s.%[H#64_f%p]/7bB:5ms6#Vos8VEh7fWM@$9X7Hs3mC+MuWhBMELn=)(<+Trr=hcI>e+*-TG$(!"#7,rr=RJpAY+)_N=ct,D@6>!#2qBrr=RJpAY+3@7^Cu''0U=7!%>0-MuNc8_N9]U!!Oths8V"0''`S.5]l=#OerO&Arr?OWp]g`u!]X$V!"m)0rr<&4FT2=FW:l/L!!d+JMuNcFdHpo5aFF9j!&oE.s8SlXE/Ou3pW<5Qq-Om2FUJ0IkG-]0!$4Ig(&)kYrr<C2.0'';S;<enjG7+?N+V.cVrpQ8B''oW+lerO,:!$52Ms8V+(fDbh:*k;7MlA@_1rr>*&`;fl)J,fcQ!%skQs8VUF2?*X_T"+h#q,[o]s8VN`iJ[a9kY^IAs55LDs8VNa!rr;KgaJ*\s5<3rMuWh*garI*#A-4#s8C!>rr=P7OpM*fR\%"ns8W&<YlFaqk%F_os$DhIs8.j^MuWhQ="=RVs435nrr=1&>lXi8E5_bVK)4F*!.E)8rr>j\K`;$7Xo\P&?FWEFMuNc.AnM)Cj!34V!$''cCs8Ts#I/a0ZJ,flTs1%a?rr<bC;?d+#g-Ubu!"0[5s8Vbef`(pVAnHu$!"R5u#lal@Xq^m9)<PW4!"XrNrr=E+;#^MDZS_[^(i+g)s7%m#s8V:[llM)bs8.j^s8W*cOT5@Z$9nLire2Kps7o_''#lam7k%"\r!!;i3rr<L*m/I%c]l<uO#,q6Rrr<<Led29U6CF;Bs2W!<rr=IR2#mTM_N=ftN/q6Ds0E%ps8TeXf)PcMk%>_Fp^?o\pi[B*$N2^R?kmhl9E]PH%enQS!WX+*rrA"GRMGl&Sn;T\s8Tp''J,]L_R@O9WU1Rs9!,7jkrr@_rkPkOXbg-4g@l#n?s1HS"rr>1*cN!p-An_5E?=maJs-V$Ss8R:!1B7A]1Gg0Q!5Y(ns8TWtVA3>8s5;,Frr=;DoD\eMbg$.fAXT"e!''JKLhp_T*0[.c@!$=!Rs8Uh01B7Bp1GiJ=s5fZ=s8R-r5l^kKbfh1/s78q.rrRkt^_QTd$NL).Kc^6o)FBN#s8TZLV2PBRaZXVCs6*>Hs8Uc++92Ag@7^Fue5l)=s3*8Qs8V$C_#OG6CP[oKs1,HkMuWgs8$;jl+47h&s/Bdgrr@O=]8Q[h?Zj8Err>TD*rc4"4`LE$*u'',&!+RGN#ljppf*V`^s61&!s8U8b_Z0Z!P^<B0lieI1s4@ZBMuWh+R@0!5s6>J*rr<obp5AqN1Cm`Krr=E+;Z?_''T"+e#/#`7C!"m)/rr=9t*<-!Q\5N>,/#`7C!#o?;rr<]qE;ondZSRO>!&h]TMuNb\/f+Kei%>`D!!'']Os8UZ2>R:?0@jq$Trr<*[;Z?_/_N=ct!53@O!!]CoMuNb^An[,&!(>6$s8U/j!<3$XJ,oWLUci[T#S-Upq,-rp(&)hXs8E"P*rc3Y6BDr^s130GMuWh!4`LH$kY^^Hs4N)Js8UJT8H8_><q-.hbVLsQs5<4Ys8T''6Ll;<5\[+&Ls8U)/Y5\JDdD#Y\WG@7g!.RMNMuNcaFi0.;!(_ebrr>#AE;on[''R]o\@jq$Vs8SV@$3pP1kmq&!s3#Q%s8V8HHN4$3"Wm^DfEsg#s8UQ9R>_+FlA@e*!#[3YMuNc5%pY%m!%0a(rr<@s\GlOZW;-Am&]0V/!$d1;rr<bC;Z?_IW;-Am)du;;!#%M7rr=IR1lMA62StK4rr<3T(B=Em/en<c!53@Os4369#lam7./!lF!!5,Xrr<YJOT,:\]l<uO#,q0Prr<:9BT)lj7+(B$s2]]jrr>!.!<<(p4`H;brrQKRnGiG*]l4_d!*''o(rrJ1KRfEDTAn[,&s37\\s8Ne9''F"O:o4s$Zs25FQs8Uc++TMJpKfT25cfSbrArH]hm)"ka!#%LYMuNc&6E,nC!")s[rr<(Gi;Wc_iCNtK!qjM3!"fAU#lal\bfp(enbV8Fs-RD3MuWgqbfp+dl,&Mcs8W$)4TGHOn>60bre2Kps73<MMuWhJXoXI\s2<-rrr=P7K`D)*Kg>Y<5p!Oorr=soOGj,=-hYFX!#,4Crr=G>`;]fj>X&Mos7GGas8U?H!<issq#L2N''qbmDb4h(nc5$?[(J^>%s8V`D&HDcVPe@%r^,r4ls0?E.s8SCUZAU>n:r%\H#l>qQPl!Q:%3kO<M[9&apCm9KpO;jeq\8cPqdLZE5)]:I/:RIU#koPJPH^eGpCW>`!+5t<MuNcBjsL-.^i#P>!#4''`s8S4DBF+Y;mQ;m%%el@cT_H_H1CF$Eq*Gg>$;:SH$4^;8-2672=pba?pKu\j?6EtZ.3J9n#.''MeX<+3rQWLq[nr(lh!K6[`MnNZ8MmeQ:rr<4Q!1<cd-%H!/#l>8>D-V^@M^+-]X\t''gM`lK&Di8@gK"k''=#`ncj(&LO@q]bnh+863KpB[8-gE,@4V#(8g%>tM?i6V-''+8Z3GLi%u`BT#ZEL%b]H8;d``=SUeKoG-1r_>=Z_q\+lLq[$!oD[?4h5h,Z=[@d\M<-Vc.@uF''p?M=MZpC)th[''."Gq[CFIH[C-iFc10rM4oj0Ml3/YVq(N.eb9=C#`J?]q]^A%Mg&c53*lOa1K;$e!-qN<rr<h87/m6(X9bMXR>[>bMfo@9pN$&dpd>io$EEh,''hF6eEbSMZpE0-id//j;q]K#<$,69Z=@bp,r:L<h+SbX($2jJj+Mn>b<k<=tM[9%lmIq.c2toH`pBg^2*tJ&/rrWA:JH#[F6@]gNs+TT#s8TJn_#OG<<ri:#I0Dn9s*R>Prr>[)5l^kg''S-2`HIkF^!-qfLrr>_P5lUg\W5/E5J-A4<!/G??s8TO@JH#UF/cbqOK(-Ptrr<&4JH,YN@6bS-!''''hjYlFaInA,)(Z&_0Ms0Y2/s8Uc+5l^l.1B@ITaFF9js2W!,s8Ue>JH#U*blIbD9K5<;!),@;rr=@YJH#U*beX5Y3''Dd6rr@P&!<<%Y>X0#N$NL)CZTsB_pC-k7q[ECU#64]?beX",s8Rbr^l+-LD>+HsMti57%ej9(6i!5epNR&>jSUVFpN[,Grbt#Ns8T04J//(aMIAaSrr?OX!<3$`UVQm07SLVt!,[Dirr?jB5l^l$P^rc64#9/%s,Vj6+92?Q\:FVXjGH4s!s\c+*9MbSrrAc(5lUgsR=GPB!'';u%rr=!H5l^lH)1_beaFF9js2dESs8V/O_#OGs)8Q:P`6?"=%^YsIpuN7j!''rCtB)_j>bfos2*r?EPhREOboR]d:s3lD''+,g1!cE''S:s0qBYs8UF''`rH(o&oRaLjrt4ls8Lga''`S.HX2b2>77,E%!1HkJMuNckbK,VA!#)Ttrr?@$7/m5pUY,SH-O%-gs8S@-a9M\Eot@U0s7Jj3s8W%J70!;e3Iq/0qPq>hs8U;`n;I>HqHYfT!3#I+s8W,*FT2>je+iqC2,-pI!%Hq@rr>Bh*<-"&"ItDM!+""=#lPEs''oW+lUTbm@!!I+''rr=9ZaSu5BTEG5od]r''Crr<''<])Vg$1+rS,I)t<*s8W**3<&shkV<>As8B-krr=Ap])Vg)=%rVo'''',R@rr=APGR12H!$/C%Sc8[59[3S;0[.fA!":Y>s8TZ#YlFaY\5<5)m,X]:s7=IZs8QOIAH2\51G^*Ps5W0DMuWhW#]p"G&p(M]s8P21rr<+Z8dPIsOOjgDs8S,8RK!8*2M_>4j!&.9!%#a4rrB/fOT,;'']l<uOiq:4h!D*V\rr@9GPlLd!JHl,SAGg9Ds,DL(s8S=<JH,YPH%>qp^s(%&s.M5**Y.r/rrJL*>lOk''4`D/9!.A1`s8S8aOT,:r%*\bO\BeF[s,k(ss8Tl@\GuTQ<t,-/VM[JWMuWgecWpJM,O#=1s4phJrr?=fA,lSs>UTmX!''il4s8V\&Ad-?Ws7?Q!rr<j2>lXil>Uk[3s4YtKMuWh1OmN,Jgpg8^s6-\_s8U*>Ko?!2^V+WFs8Ujj$NC)F(CL3Br7RM<!&5_N#ljq#"U,,1!!TF=s8SY";Z?_aB\!._b&]?<!-Kn/MuNd#E28El!(H;irr=usUl56Q>s3.brr>T22#mU1Fi+.Y--X[7s/PZIrr<U=8-o7q\1SKq!"I^3"onV8QO<`m%6EGIs6Ou.rr<Khi/@U8+_0/_rr=7?B`A&RhRWXd((AFe!&0"cMuNc=fp[j!!$Pk''s8V6*bl7YF->*;Xd:#QOrrKFCf`1rb_N5N,H3t/X>PHqJn.ks''Wb-eU&c_h]beX)frrB:I_#3]r$jQ_4)0Nap!9dZQ(&n:96@f(9>^uhSrr''N\rr@?_JH#WcqZ-Wr>^uhSrd"_Js8D#95lUkK9YgZ.>^uhSrnFbE#6+_J]n$+`^@f8VqZHlsjGH5&!HCGVrr?;S!<<&s]mp:spZ_Fiq&^@G);4og4nfup%dF8n=;LXW$4ce)eG''"Ye-Z][$hljZg_HXm%f>Ve7/m:''J,g>are#_$pE0/Q#PSrnX%4:JMdh3>G6khX''*YD*rr<i*!0mK`#n?rnTSn_IMuWhGJ,fibh=l$cL_VlV%ak%OqFMET$<mXe$MPS>L(u0FpO)]I''e9V$,kn,0\J8*OpA9.N<XK=)p`T>f(&QJW&bjcO3W&gQ&bqUdD>Pde%`8#BpdGql#RV&opQt[A(&&"A%OLl<pDt(D$478dp[%[#(&&(C%ejZ:!%<?trrGcC!#>BGpGVmhpMfkGpGVadpM(b-epPAK`<b8X3nHSX"])cYW[Wi3qeH!hq\o?K+8B@)(#2%''fEIU`P%onj#l>#W48UW,/LK6H%JLA$g@m6Aa,@ca[rhrdq3^nLpWaNR!<4i?pC[H*!6i7Q3WB+''R=P#Ds8HVBJGj?Z$jQ_59>,lU!,T]k(&n7YK`M/QP;ki-!-.\IMuWfGKg>Y>)g/srs+Mm%MuWfB<ri:!jGH5&!-''t`MuNc&6@f(9Cra<prrB+&5lUghJ,g>as)Vd;MuNcH9YgZ.dcNdurrO_E!<<(C)8I!e!2b8HrrEBX!<<(K4[=r*s.%[@s8Pi+JH,YC8&5-)Z''g.Bs*R>PMuNdQ8&50(oH(gJs&I:Ys8MM''JH#V"_LRRE!+t"OrrBYj5lUgsR=P>;7*!+C!/%dHMZjUb$hn3+E#&6n#+bW@pC8bK7#M?FB(mPE0DB\bEVh$U2>^Mu.>pc2;`P,/lS4<Ur#YUBMi7<Aq`9W=R.hZr)l''Wq#knef+o<bd0g7/c''-AHW>/GI)#S()6&Jk*jq/-%bq[rSm"qFl4&c$8Yr:''URq[rUYq/$?HPP:47?PWHbr*T1\Mt\=ff(UWjf(V7aqhFlQMt`tC.Z4H?Q1m]@h%c1[MmehKTsY1##l>kN1/;aqMaIb&dS9H/h:1[1Mm.W5Dla4_XTaQ@LQI4RpBepI^l.H8pD,==q]^qgMd:Th:''b.Cq_a<+&,Rs_@pO(8M*D8m#P\25(&K!F56\X%[@XCV_2H''+Mbf7GHZ!eJ#W;KM''tm;&K8XaUDf^,:B6KrP*fI1nW3`0''%f"fT5l"b%pN6iCrJ7Tjs8HfSXqgs:%8lKls-#E?rr@$u:lGAR\2[If!ZQ:#s8RTFif!j9da@jirT&hurr@$u7>q0G47K$F!,T]Y"oeS:l\>E>>^uehs8R0cf8KY/EV76L!7>S:"oeVk;<n2\plp(>MuWgoP^9S6s5.dlrr?.3>lXil4`C],!(_e`s8VUF1^3mZ6WXj!s73<-rr<dV_#OH)1Gashs4oY4#ljqMCPMlhc>/79s5.e"s8TD44TGGoW:^,ifnCRK!#TKrrr=N$''cr;5!!BP`rr<&4E;onBW:p5k!53@O!!]Cq#ljpgou%(7s8C!>s8VUF1]RLT6BM6IpmIP.s8Vbef*MEV_&9W[!%7HXs8T2B^]+;+)4:F(b/0DC!&@F8rr@a/'')qr-l\6I=rr>%TiW&r09[Ne>-@4YNs0RIsrr<PQbR"7KY?);8!"_Z)"onV6E1m42%M)hEs6Kn3rr<GY$B+oa*$2Tqrr=]W./s8rE2<L6*LWAr!(0frrr>7FB`A&Va/K%<lA@e*s4@ZB*fL''ur(P?7s8PEIs8Vmr$NL/+6BM6Iq,[n/rr?]"Qj3Qj"E:=>!#2q@rr<(Gi;Wca>Uk[3!"R5s#lam#l\>H>].Os#!&%S,s8RsX#ljp@]l=#OV#''$Ls/.Y.s8S4pE#oMd7JGI7!DAi2(''":6bePV+!<4i?q\]A4hI_9crrJOUJH#[@1I1gG"qLB>pp^"(''mU.upcoRD$N-t%+r,M5%ejT1\+d3DGmaFepUq;d$MV7.(DVE,%ejT2b4mb-pLaj1GPDO\IgZ+Sq]Zc''$4cfBpY>Q!''mL)[TD''-:IgYomqnNs@B*o.CAtf"G''mU/]dJ"n$IgYomqnNs@B*o.CB(t<[=;?>nq]XN*JI;0!mM13YpE9@K(&)>J%ejT1S+g5(pLjp.1RAjNBaQipM%tLIr2]]=''n$E!pLa0Dq,nI,B+"C:g_G;Gq`"G<(&)AKpG8-NpLssEpLa6WpX9lOCC9qc]+t''V$B"^D(&)PP./92FIgZ+Sq]Zc''$4cfBU%lqKGma>opEUK''$MQ@S+;OWd$Mu0^(&)MOMYfOOpMC6IpLa0Dq,nI,B+"C:g_G;GpG;^i(&)JNq^/oipM:1oq`P\gD$gdIB(tE_=V^[G$MTk8''n6Sb1]/@1pM1-5-G(#eC^Q''s4Vd^.$4cfBpF#a`''n$Ga^\8oeIgQ\`&bg#8D&"r9%OCh!q/$j)$N$k!D&"r9%ei?dQ2,832@B>]q/$j)$N$k!D&"r9%em:)2\nmjqr@Kh''fHC/PP?::7g]b#ZMF_"D&"r9r-&oH$4cjP*!D#lD&"r9ql9I/''fHEsG8<[U%f+s$"e>C*''fHErWqgKH2@B>]q/$j)$N,)`7g]b#ZM@5i#Sfo<rF5S>''fHC/PP@*3#Sfo<%em:*"SlmL2@B@jp]qU+$4cjP*!D#lD&"r9ql9I/''fHEs@JC*C8I>r3pNlXP''fcU2b4r18FqlY;%a*E>0FIP(r9tFU$4cespMBWK''fl[3r"8[5pokK;$MeNA>RCrdpj)Y=''jD%@D$4)Nql3:(>711C"C)9DpI"b;pokK;$MeNA>RLA.9,1Y<q/$7>$N$hr''jD%@D$4)N%ei?d#Sq4`qkj.m''jD%@D$4)N%OCf>(2O<fpI"b;pokK;$MeNA>RLB`r9tG;$4ci6qPEtk''jD%@D$4)Nql3:(>711C"C)<31&UMUC^L[JD]Ap.pokK;$MeNA>RLA.9,1Y<q/$7>$N$hr''jD%@D$4)Nr%\-=''l43epI"`cpS8OA$N0JiYSC@Lq/$7>$4\?Up\1HuD@-mJ6huf<YSC@Lq/$7>$N)IPi"^,:%es3''V>.80>711C"C)<2W_4(2$MeNA>RLB[qqr3,$4ctGpLF#9''jh:X,kn\@8/5#0%U8[lF;7^]Wq]d5<!j-0HH5fb''jq@YpVlo"p`:1EHO:8W`VCAFW"o&S$4cgLpnc@QpO*AYpVlmVpJ;V!IL6SZ`V<(#*YnStq^@A@p`oYaMtCAFpI:''HH]''-D,PNUEVu.e6.#T:VIJZ9f[[I@0pVlmVpJ;V!./Y<fMt\Xp,9i%n?]4YJRpGWDq^D4aDi=K@r$1ilRC%nL5^^!D%emsB!]<e>rrIE*5Sa=uI5X@j!3pmds8VFAJH,Z91P#K*Z$X:drd?[irr>YU5lUgV5=#8Kl[D,!!%GDXrrI=h5l^h>L;<fh4;u$8!''D18s8Ij:_#FFY`''F>&.0BSMs6MOl"V1:GrrR9%5lUhKYJ:nQ!3pmdrrI_n_#OH$1P#K*''?l",rd?[is8PiI5lUgV5=#8K[D9TX!%GDXrr<aa_#OCiL;<igLk`_F!''D18s8U!u5lUk.`''F>''G/QZGs6MO,s8U[K!!Nl,`W#t!YJC/<<ZJmirrI_n_#OF0KL#P;''?l",!#*S,s8PiI5lUk:ah[rV[D9TXs0]YXrr<aa_#OGc8-&\hLk`_F!I&fSs8U!u5l^l%jZrhHG/QZGreW_Ps8U[K!<3$4b^]j,pVm.5:`R:N!BX+C(''";/KL#S:I5X@j!#*S,s8VFAJH#Y%ah[oVZ$X:ds0]YXrr>YU5l^l88-&\il[D,!!I&fSrrI=h5l^l%jZrhG4;u$8reW_Ps8Ij:_#FBJb^f]n.0BPR%ems;9)''GBr$2(eMf8A8q^@Bp?^g_+Mu*hXACY,_+SUojD2X>1q`Tl3#PVXm[JM''CMZs!IMmf&X%ems;U<s_N,PNUEVu.e6.#T:YI/A&EpB^M&6+-S3qi(D`Mi0Lf22h>;qd\/bpE93i"o"dM@!i+fpVlq^p`:1IHN4#FYMb?=!*)i<r$2(eMf8A8q^@C&!*)i=pNll>Wit<<o`+s@%?R%Y!AF"_Mi6Nnrm8trMuNc-0Vk-@%ems<)S6aas/N:''pNli><DW[Rq^D4aDi=K@r$24A<DW[Rs8T+''!;h*7MjjYG/+S4Ks8L@SJDc?DrrFc,^mb<''eB^A`%ems:^X3ejHN*tF:]QFRs/N:''p`oM]Ml6ItpF(t"s/N:''qg/8B<DW[R,6%Wnnpl,frm2+)Mi0Ln!A?.BMuWh,cTlj]%ems:f(_'':rr?%q!;h*Bs/N:''Mt\Xt,H$Io./5%es/N:''MuNcW:]U69,)^jKs3qL.MuNf2npiWVMuWe''cTlmX!%Tb="V1:Gpe(<&(&T<R.#W$=,PrmIo`+s@%?d1[!7,R%MuNfFK2h^VMtHm.`:l@4Mt?uJ^FkoN$ig5ZTYucg!%Tb!RKX2q`V?1T(&0$J.#Y#$,PNUE,6%Wnnpl,fs"KPMMuWdhI),IbM^%mW;YrOQM^/6&5gb,V$i^4S?U0PLs4#@[Hj(#S`V<(#*YnStq^@A@p`oYaMtI&Le.%S0rrL"-DMsGM522!RpHFMnMt]CsMi7Hrs8G1->`8U^.kmcf"V1:Gq&&k)(&KES,B&M;./Y=^MjjYG/+S4Ks8G.jJGVNgM`^YsMr9Nf5)Y?Rq`]prrrKtj^mb<''eB^A`%ems;U=''eO,PNUEVu.e6.#T;L!%[VjI/j1/%=j@ppHCZsMu,\r2N.GrgP_!a55tZ#0YiVHs4#@[Hj(#S`V7mV:_i^Qr$/+tpF,e],)^jKs3qL.MuNgpnppHuMi6?e5)V=Wq`]pr481psMuWc>cTlmX!%Tb="V1:GpXJr''(&''-S,PtZ&M`^\rMi6?e>)W,''p`gu@Hs_g+7[m]TMu+pt,B&M;./Y:noS]-EMu,be[KR08`V?2%NYV;:$8_Q%(&*%^%ems;M"a^\pO3JH+QF42HjUAX`V<(#dM;M''$KM'':(&*+`%ems;9)!''8pNm8BA-DXR$4cgLpgj,t(&*(_pgb07HjUAX`V?2%NYV;:$N+E;pO*AYpVlo`pJ;V!IL?!`(AE7b%a+Njpt?HepF#hjMt`>3D>-)LpQt\mq^m_0q^2REI/=KjpJQo#qlp;7,l!l''jV@N-:%pgJ>TR:2q]pf6q`G/Y(''^>>UReoQ_i(j4QqNQYMi3T\?b''^;;2Y_W%Q?!:*;_AS+nm-%hi$$j[*>emRb*Jl%LDriT,#SZ<BWTS<_H.m_UmJK^<@Z/PPA>Uc5$4Rr#beJppKp7r3cD6p`KAnr#beJ#7f.F(AV6oqj@1rqc/OX9`4AppG;SmpGDer"V/rUAbg0XrEY?UR/Lmr<Jq%''q!]$q1]2[u2#)J&%ej,Dq/$k)s8SJsR/[1q5JI0sU>lmdrf=i]s8IZ^i/@X8U],K5;i?S.%KHD4a)$\6!FQr?rrHN3k5YF^9b@=*85C0(!T)(_Mi7<>"V*fm[.h$Er/CL\pl#CepLa4)q-Okd$4]].!Ue,4rr\PrO;7fqJFB*0r>g(&s8PT4L]7Ber@\-M:X7Yns/T%:rr=:u4obPma)(bU@(M*m!&**jrrEJ.bl@YI-FEdQUc2!I"4L2I"V+Z7!Gc/krr</NJ//(c''"1%1rr<''?[/U,;pPf+P.qiu''!#L''jrr=$9m#1lD#G*c1rr<<fo`+sjT03,R(-.i`s7lJ%#lal7''`S.4qi+GP!#+7;rr?p0M#[MHUK%6n!h()4s8VH''''`S.9%*\bOmP=;3!!>9Ts8VLlCl8T!s,c4Ks8SYfXT/=#??lMMJsopds8B_</-l4TVdYG^s4t9Fs8V&LGQ7]hAnE+as7^2JMuWhN];GT.!aDQ%s7G(0rr<1t=pY0.mW''oZ!!c>0s8W$qo)J`Kngse@$)k62s8>*#"oeQ-Ug!furR!"m!!l:/s8W)$g&D$ZTZ)fprr?#''C]=BpbColq1SK[*!6-eg*tJ/MpCG"RA4l2ech@nCZ&=P7$i=h"ch@nC.Z95Z$TF!Ha=5#!q[*.qMi7H?"nuG`8,Ebm*K,jQ$O%#*po<*ar-^9oI0TKf"T3]F8rNQTpjN$3Mt[>O'')*4;'')*7I%RBfhg_Ka80_g&#r-e<"''dsD!q_S!qpKSI1"T-45">fp[piQ78#7gV<rrG"1h"c=4s8T''YfSfe00UGK2(&n9[BXI[Prr?)>.#\**cY0]\''a=X:B)fT4(&n9+E9@0$)jJ#8!1m(>s8M(p70!9qXjmCMjD-j]%ej9(6i!5epNR&>jSUVFpN[)Up\jlNq61V.Esh\=r.l*^F:&NPSGrYo^]=0+(&n7^J,oWLe%bqerr<eL!<<)_^]=B70Yd\gs1uJNMuWgfJ,kN-s#E=Eqe#m.NkbYps/SBb@0ll5-bo]err<eL!1Nof&O6>err>0s!1aDqs6;iLrr=K5!!WB&.6mm%rr@b''!<3$e5QH`B!0Md3Mt\:ms+nGjrr>N=!<<)BJ,l7)rr<LY!<3$$^]9W!!!5Ccrr</:!<<):5QJ"fs58D-rr<pe!<<)J^]=B73e.51s5ZEFs8V.F!<<)m5QLiah1,M*s-nN=s8U)(!!rT)%);j^"onVL^]=E7lbEMt$q#sQs*&tnMuWg$J,oTLFhe"Ws1*X[rr=jj!<<)b^]=E7oY:J,s6;iLs8VkE!<<)h^]=E7r''18^s7nn[rr=Xd!<<)g5QHrH!!5Ccrr=ag!<<)QJ,flTs4BR:#QOh6^]=B7,<u8/ru]#Vrr?nd!/pjWd6I\ic2Rbq^];OW!#WKOV?m2%."D<t!%^A8"onU45QLiaf73l$s2''9ds8S74!/i.]A<HolZp4Wk!(T9S,m`<''!sS]))F+:5rr<LY!,%5is51Tl#lamPJ,o!@rr<U\!<<)rJ,oTL&&81!rr<No!<<)oJ,oWL[D2eBs5h#rs8Uf''!<<)TJ,kL9#ljqeJ,oTL''7^)_s6kI<rr<nO!11*Xrr=9/!$7''u!!e#Ss8W&5!0mN`qS3+2!"+5Vrr<`u!<3$-^]=B7''7^)_!!^4=rr<Wr!<3$"J,flTs2;\Q#QOhmJ,oWLo0<<Us7a;/s8VY?!/pmWnpg]Gs8V`,!<3$+J,ipU!&oE._>aKEJ,m+Z!"2$l*fL$u%R:$os7a;/rr<LY!<<)g5QLfa%);iKrr>*1!!iN(&O6?rs8INKrr<\I!<<)p5QLfa''L2Zus78JUs8VtH!<<)m5QLiarP/DbMuWhPJ,flTs5nh3rr<j#!<<)cJ,lSK!$+<)Rf<?t5QLfa)o)FpMm`Tbg402''!$Zpns8TLB!<3$;5QLfa%R:$o!!e#Srr<SF!0R9]&:ac\!!IfP#lamPJ,gu$MuNc"5QLfa%=eG^rr<s&!3un1!)Po\rr?q%!!UXI!+<SBrr<El!<3$n5QH`B!%WR"MtI&L^;''aK!,Fh"q^qgJ-bo]fq\B/2j?N\[rr==[!<<)g5QLfa;LeaLM^XM`s4kBis8V7I!<<)+5QLiaS\P7*s2]]js8V@L!7:cGoY:I=MuNbr^]9;m!%!-qrr<El!<3$c^]=B7)1V_e!)l,_#ljob5QLiarP/CJrr<CV!<<)WJ,lJHs/nTeMuWga5QH^Qs8V`,!<<)HJ,oWLl9G>Ls8Uf''!<3$1J,hY1!&9!(MscN''!+J1nh#@@05QImS#S(VEdJj1la++p!IgQ[gReXW4MuWf8qAfM8jT.pPs34%brr?`YhZ*RojZ*8?>`6]''!InaHrrDG]'')qqe<m$@#!8e_>MuNc[^3K\XZb.^d!(fJ4s8Sl^fSfe0]:].^s8TlE''*&!`mi;B-hrUU4s1NIBs8Uqh1B.>@S*9nP_>qOS!%7mWs8T[5<f@"XU+LhPs8TOUK)bkZF81[ns.G;V#kpFG(&n8Qn0!Yhs7904q^VUG6+grjb)?<"jZ;Dq-N=''q`?''s;!(LR6MuNbhR@%?>?]4saE4*R_s%_XFs8RblW;ln*b6%_DAmFd(s1fQtrr@k#h#IC=2*h0AW?I(Urr?_j7#V''F3R]ggrr=T$be]2C%SQg''9&Dc2!EqnJ(''"<ILMZtj8=)sKs''hj;rrC&4#ljq<TS3=FJuhZGs3SaFs8T(W8H8_E%#b/c]4;cYs"f[#s8NAiIfBD\8&YH-)q^DT!&Nf@s8T$;:B(;J"5*YRW`2If!+#l.rrB.8MZ3[EGo$D[Zefs,!%T)^rr=bV=pY0-h-9%A!;@h;(&n7`4RW7L]rb-2!*KD''s8RmD+TDF!dOtS"_KA-Ds1VA^s8TFXP5kQfa>3eqQP24Us4+3ps8T`U7K<D=&ZYj26jL."s1iB!rr?$^p&G&sCIJ1&?c:e#!*_(Crr?o<%fZMdjWFL&8A"*c!%09`rr>>#a9W:M$2GYB!$na7(&*4c%Vl"E47FBm!,''TE(&*7ds8W,;>5nTeqkb,.s4fuos8T^s70!;/#Hn+,^Iir`MuWh%Y8`E"s4C00rr=DQr/:RT1%ka.rr@,%k5PFBTS*7E$?5)+!)$"DrrAc5.fTK:`[:`c@%TR]!1-C''s8VZ^3/dh:N)#aus8U@Pa8c1l;=+>_f^q3(s37\\MuWh3OtM[ms3QNNrr>H2cN!ppRj.k45Z2P,rrE-nLB%8$rB_7nIgQ[gplkMe(''"<NY?["cs1^X+s8V#Od/X.".u+*(Z3RW6s4;:/rr>hrbl@^[#djU3*W<AFs1rT?MuWgO/UiWXs0g@-s8TNKpl#1PTSs/7s8On^GlId''/-u:UgAjS?!,K%Ns8HT_LAq6Ym?7JMK=o#"!:;FErr=WiUl56QhsXg.rr?39GlRfM]I<d[8O814s.i$7M[0ecrrPgM4T>Fc7,A[Ys1O2(rr>TV9)np#VIoi.`_6[<s1P(Yrr@YP9`P.>`T.!uWSpDJs4[s?s8T]A)#sUlN^3XE#jQm=!.m%is8QL/O8f2eIlm]1K=P.b!''Ym]s8Rr85lUgAn0%`2C=e^M!.LgqrrB!qF8l5X#&+#:INqhu%eg;**rc3cY<iuuJ-u>Uq!]F+!.3"Y(&*7ds8UR&B)_l''`b#tcs5#SYs8T?>!rr;g.K''5Gb[.gZs.!hRM[9@_gDV+4s384Drr=ATeGfM96l>q(6,V:R!&C,;rr=*+8H/Z,JA`Q0!&BBjMuNcCm#1oDi(?35!%uHLs8U`9rWrN(;s?4?!!5j<(&n7s918d[.ipV%rr=%H_Z''TWFi91Drr=)K8H/ZA&odmNg]cd=s1n:+s8T_HJcGbi8N?bMgR+3)s5K$b+92Asno0Nes0JF.rr=7:8H8_:[(QD=@,]66rr>,3N;imu0Hq6is8UPiHN4$!*k;7Mep3_as29Ef@/p8+J,mUhs7IGCrr=st/;sN.%naVCrr=*B&H;_Q8@8Bs2`tpV!''lp9rr>;ERf<@2Vlp("bIhNgs5''q!*Y/)$pSm!aq"J1o_$>.SCR/ao#Z=Z<=BE=T`6?B(^E3q2pU^-4''p<KtJ$!IgC$SiYFpM$S_Zu+_K^DOOs8U%a*rc3t&ENlkUY=`-!"/07MREf-@JmqHG+NK7C5W?q<GY`<_/.''7af<)t%egA*aS=j3p[7nkMu2B8FJ!<5BT!-m;JfH8`,3N>c)JK#Mti#(6h`$fr)s8GT4sR''M[3-VD,sQRF2lSPUVn5apC$d@pa?mSme7-Jd.cu*&dA1#9,73hq[nb`+pE(\C6`Ij#Z+E9<`[.U`m2i.^`SL0L&==4.?"+-"a$ANQ"Q!\:f2(1;Z?_WrUb12!'':5jrr>N=!<3$bJ,l@_*tBRk?2)&Jp.<O+#9Hd$<D\R2#`JH*7t6Hq<X!B-Gc''j%FnZsO=<@>fL_]e30)H/fJr5_R*r!8OYeIogWKqZ''!?M^rpbDYP''oVm7qeJ$HpQe<uMuBpTCZLEN@0QE""T''Q9Mt_Vn-dW#,,ktct''oVf<9lc0dH-)k?pFT*[Mt]\0I#Il"q\31kpJ")''Mu-CZIZ+(Q"h1"[qgMn#Mu,!5Ru@.sd@6''g1\VTnMu+sNRZ$ns"\&.u(&J\KMt_\p''Y";Vq6''K"piR<\UgKTsP''s3`Z\tlBSW''"qQHY8gB=`;CHAZs*H&HX%DiSfCq^q^G''o%U#MhR''pMcQ`^R@q@._p4dNG-HD!KgegrAV"_)paQ(\''lH3PH=g)eRs!M,c)dbH[%Xjt=IX$@B*e5DpRr>fZ-I744C!C\Kmf[!B_V69L5^kFLPo)hC3F<8Ngu&sMjK@"Kq4!r#koUe"ce"iIZ&]6DM<.iC5[h*L5Uclr4MbT''mg.?CPm.jH&HI"DNo2JJHdQ]>(C?kWC+<ocs07m:e5b#]n!n3aGZ4>P)GH]EC5.YMfT/^IuJr<JEr3?MVl=<Fd>XeE<rRU"daV''JX;,tg@#32R#SeOPH/rsI--=mSHa;[NnnKbpD90mOJniY8(e&aWc+GIO2JcR[u9%"P_toeSq2`MMLg\''Mb''IXMgpY7M1C?eMirs]Mj0-nP.QXGMkc#uJXKb^7"J`ZJ$)3+AZ/FG?r_2,#]?//ZV?>`pUWg/MlD?*I%H+KM2$qBMh[=APB@.fJ:q#.L2D`hMggS:N.d.D#\S/]I=[''#MgL,:K9LkSH_Z:^Mo(DGZIda>gc2Z(MaNDILj4Yu#]!'':FKfhZFHMHGMj93dMm\bKMlm?[=o7t/E/SUtDO[N#RA#P.#abglMklN2R0_<Z"fS,kRA5gtOFrREMhR(9LN/"R3)9]oF_lSGM[5+CFeWuEFH*WVe?AM&#aGV&M6M66Mi`jYMiisYJrG8=JW''C1qc,:HM[94XlP1eaDlHTlH]*6,H\I`>TSBG"dsdrqeolt.MM[7IMh-t?P^`t6E<U]?G(t-t,E)FJpB#I.UntMe`JaI/Mq:Y$@YT)1LP''XRpQ%ZVMg;=`Men;mIqN)GC5\(JG)La+Hu3SUBo@2&L8>08#E+n6To57qS62YHVMhssH_7%"SVG,#Mlho/FHLa2A`0;@:C)l"?Zq?W#`\]d''pOWJGc,)GDRX<(AT,3X)!Hm]Mj0[+NfOI%W!1%m\o"`NdNWOKVDJQ+Op1_"QU8]>pF)GdR#75gR#@2gP)BVCC#0S^J;So9K8Y#7I?9&!</$*XC40GpEI`#eTT/<I_O-+FMOBA.Xc&s=Q_+P=#E))r=CPqL?=sFD?r;)?Mg1/+NI$TjPm<66aQ\VXS\jNgX,mV2pAu(cMhR+BNJM)''O_f?7I$KPHHAdK5J;/CVN<YW*Ssth"#a::"FWZ)<SXGq/QA^i_OGT*SN0BBcR>hKONWk/uM3*XYMj''0eP*uZBV?M^6Ll@.JI#EV^AVc%pK8>/<#_?`TXeqbZZlbM:Q&Ci1O,KHlPEh&lMkFm`MiW(6J;8l;KStDDI[Gb3ML9i1#S-aPpI+bM(&*:eDYkOkpO`e_pM%P?!#>6]$MP4S''rL^1o&06QMt[a?ni!BB#7128"E=5C,W>N1Mu+$C,iEY9#7(h6BuB]G(&*@gpXJr"(&M#.<<o5_f@T;]#kn`Cl?1]CTe$KH<<i?F"SYpj<<mXt5<g]A#l>#G/>5;[Fm98,<<`rSpU''\q(&MhF!;@^rpEfQipEf]mpEPUnD"n#)D"n#.e;FM)[/5Xo62(rb.#S6=aS80u!#>6Ep]119Mu+gtM#/LmM#/ETpMBa-qeZ01psb3*qm?*R("N0mq^@@+%`nE5p])''''D"n#.e;O'';quHV1quHNAMZs!bpP9R7q[iWQMZqZ+!#7fo&GIT2"V-Xh*#A:&$MtV7Fqsb+$MY/JpP''"bkkGS]]bU9Hr4Vh=Mu0(@D#4m(qjdV$pCrMh%d<ZrpHo\m>kl#0''T;^VrG;3AMt`b;D#4p)"V/WL*;OCcr7([]psf$Hr*8tipg!P%r*8tipfn"5aO:q"eG3qYeGB[L>l.4m>l+s)>l.4m>Qt[3_>#r(q[E7IpC%<(M"f"+pOW`iq]HXJK*nRSdM;M.$?#_`(&*=f%^PjNq.pfC`%h#)qgA8LpB:DAqZQd)pO)_Rjnm!jI.n$SqZQ\ApB:4!"qKMb2u*"[qfhq7Mta(PpCdAE(&*X`^u=2JPP<5oVYB*JlALT!C]t;,pH&+n(&*Fir58a4L''m[BpT,,(L''eFIpc%pU(&N4LV?Zc-XVL_jpV;^cD#!:Rqkj,IpQP?o2;\QIpM''CnHPQ9epHJ=8pLa/3q`aa<qe#_;q`am@qe#_;pHJI<pLYLCpCe;=#GsEMMt[a?pCH3QpBRQ$pC%i3#B8THMu+$Cq[YS1qZh''G%ej]48FmR!Md2Z[UBpVkp\P,hA!pS[=c</&q[!'')q]q(*qf>sVb$N_>hM_,?Mt]F05)]/IMr&F*?HNPa\MiAO>m3p35,L;tqdtc`55RO%qdtaGVEVL`#[L`o2?g\dD&%,uICb?MMt\Lk#knW!,`B?o\p^o+#S-b#pFuDn(&*Ijr9OR\LC3c\"S[ZYpKRjqLC+O4p\acA(&''$OM"`-PqeZ$-pMBU)q]h$s7K%&s,Du^8YkL[(pVcgeqo&4;pcSFupVcq;qo&AVr&b2oaOBs$(&)PB!;gU1!;@^rpEfQipEf]mpEPUnD"n#)D"n#-,E"JW,E):@q[AC@q]e#n,6\QBpEoW^(&*FipV6q+L''m[bqnNs@L''m[j"S[WX%c5YMq!.S^r,SV<pi?/`r9B1Dp[@tf(&N4PVMk2G"V18IpF,fC(&*FipPp$`L''m[8(AEOj%UJk%pbilaQ0@tMoO@Otr*9+YM^%n^/c1kdM]he"q`(tW"oG_"pQatH%[d%p(AA77Gkgq.%/fbpGl%mS%ek7hq0WqS$jZMPpB^X%q]u%aq[!'')q]m9\$jZN=pHJ=8pLa/3q`aa<qdprGPl6OUpC%<(,l7lA#koV=,khT=#koSdpC%<(B)=dh55SshB(nLd55/Y2%eiEeA,%Vj0eqbppLa=T(&(r,>PAR''>NPT`pC-q''pKRM''qcbfL>Pej+>6k%0q[E4''1&G2P%/4!''>PAR#>NP`d"qLMLpHTLPpJLZUpIL5?"nrF`Mtq2d%#^&@;>Wo]8;m6Hq[AC@rG2WIaS/[.$l/Pbpg!P%r7([]psf$H#7gY.pLY38KaJ=a7JW\PdhVbujnH^f%/\!;>Pej+>PlA9%/7[pqo&@?pV[:5>PAR#>PH&@%f?.tAet,p$HH''[pP''"b`qW$u=qtEA!!VD/`*S?n#[M"3q]>VA;;&>uMqQ=ef"D@`g@oHBpB(9CMi7H@p\p*JFSd?f2H3C4M^&N)*qod`pIt<TpB9dU+!-@7.Jj:jqZ*Dt%f<$q<qi=''pOW`iq]HXJK*nRPoG.+P$?#_`(&*=f%ej\Tp])''''KF7G^(AEUl%ej]5-c6\?:>k&*a9B)qVUpaa#kqa(3;5i<D#7W;7/Jt@D#7W73;Z,<C`_Djfqup%#W:TV@WG_%>)N[`.f0;A&,.+=.eaJJ!r!`0.ea#A&,R@hMcbC4Eb#IQ8,#M42[''\qpmCkn(&PrHjS-Ui%/`6^Gl,GR%/7^7GkaB+%f>kl0)9Z*pP''%Q`!#gh$MUV)pP''"bGkW]`Fqsb+$N.gFpP''%L552,npP''%L552,npP''%Q`!#gh$4cfE_tX3HpOinJ$l8Sn$MTqP(&*Fi%ej]5`:s<IMr8R+?HEJoa>VsO:''F>$4f15t#lAH83;Z,@@/Fd77/Jt<@/"L33;5i8?m#:.@28N,pI>C_A=6\\=:"dEqZ?X*q^VI`q[`E&pF>nXpB(("pF75sMn4>DEX;P4qaUf"o(\UH1_obA$E*VI''feiW3$4(Ys6S9#NrT.H.`%6oq\bhQpBQWN''T;],o^qkhRY?''DH&HnQ36b%Nhp''F&pEBE!Xu6)aqaC<@qeZ.;pGi%<pMAg_5d''i)hFYsN*cLe>(&*Ol%f:bMU_`^CmIq#<pVcq;qnsr\%.3r1#7ei(q.pf?D#=;1D#=;-,E):BpPAPiqhXtkMu.>c!;C=)!;e"!q^),qq^(um"V1+uR/"l?pPB6Tqj/$X8P(l`Mfk&,OaHs.Qo<fAnHd]9pC,C#pC''73q[>t[#,LtnkLfEoKmJQ#Mg,Lebt6aKc->,>+o=O-2>^eY7/Jt@D#7W73;Z,<CuP+RY4j*r8^018Du1supPB4eaS?hOC_cltrG;8YpC-t)pIt;m.JF8<pB:4!qZQ<`$jJ0X&GJln>R(bPp\+B4(&&^G#lCBT"ntL]oG''9BqjdV$q"]gO%`nBDpC%f3o_T''qD"uNUD#4Y=oEPm''$DdH.(&+j-=o5)n<7!&g1\\BUXnPumVY=%ZmKF*p4nrq2pH&WS7Wj[e"H."#pC%7a`-qAgqlut''pFHRDZ_Wr^B8aM1q[<[eF,9]''qa>Q4pH8<]q`G,\8>1q8%#^qfq[<[e;jmMmpTnlGq^VpK[;pco@#IedpC%7aYE8baE.@r_7/m6#J,flP49lAn@J<_:Mth;AqZZ^=Mu/&"!%3\_rG2WIpH@=+`"i$DHj9JUEe!ssMc0oU$jMWgPP5IZ6(\G[4SK9Y3sYLLFc?2(Mf/mq$jMX-IJ74JZ)%_qpS@NlqkT\dpTpZ^pLB-!#l>#7Mf+7G$2[#2#kpIY%/W-lqadE<pBlhV#l>#7Mc6&@A,!<M#^cHG#7gW"pJgq/(&'']b%/[:''k4c+W%/W!h%f=uS[f6@QHK#\6M@0@`n%"kipPK:fqqCcPk7rRU%f@"7C%iqh+U\"7"<e*^qpG/Jpb*BZLAMAQL''IMa"T*rN$hoA[%f@XI>5=I!q]>VM#.+3g_i(qsjTQ.l-21U=Q509<q\BCBqaSJ][J*,o%f=0>Zk`<9$4cs/:DNU*$4d!*q''-XK!"''55'')3[HHPLN-q^M7L''laTTYkJVBE=2V*pC7pX$MXlf''jD%BZ1tO<>7(l=,5VFc(&*Un%fIIH!W,"pS=#M9*qrn5&3j+j,6gGX7!9Z1;RUt_HE)%=+nlG([u7)YPJ2*gG(t:#<JuC>LmeVD''$gAS#&K$aQ6-V8,5VZCEY\=O0)JELKOK(GCP6\k2nFpLMm1BOMlR,PHBW#5Bl?rlRQ:"#g5?6\ih?)W*tEMh<;.ONG`,e$5e75D,6c>&YAVI?`f%+!SA:;^O1L7u#k@e\pB:8epCR''&r@7[IpceR/qe5jt#%EL@Hl`dr+o@>u&/F!6a3#LuIm"tP+e&_1J<k=c:g.=LRX_=YSd(Q)S4E;fM[2?;6P]>7?3Y"eH"UArSDG:sr?2!#qqW!%Md2oO[AUL1eG!7,#b(Jn4]_hbKjfURJj=?N8pin06h_F)]Sd''T^W!(<KT^d+@#KtL6]23[r?2!Cr#HO:ag]V=MpPe3FdTS>Q(al''#W`0=?ZT%AMft"[Q>h`f@Wm3?CS#mY+-VVIMkQ7=ToTA?N09*\M[78>DcL:5KR"Y5Mc7)uM[4]_Kn*dn<;%CDr?(pu,8Eq+5ZWe*#X,^ii#^>PI#qs''MoH%4`Mp5P`bJp''MgL+g??ulE#N3,7g`MHm>gkHn#i7KF%fIUL+o<#iq`j=QdET5Be!>cmI3*KgPU&2G0oL_Z-&]!dP`)]&PmCIrJo-9XMeEA+r?D,5q`,B\`*^!"WsD`1d/-l<2(5ehSr8l(Ml_ia:7,"X#S-eSq^hUP''pkYZM4<?-.L(H3Klr60D3An"FGgDuB22oMSPIQSb_r=(S[Y\NfKQX"P)H6#MkZ-*50[93#lA`@`>/.GchmYF%fIRJ#Q$FppF%Qh*s[L/G]ISQE0N>nMl_iBbBf)I#b$(&BLliV<$%JdofUocpD/[\h2KJ^qq_.G(&.[Qqu$^/r?2!e;\b5j!!j,9N;il#n,SE3#[IXfE//:gCC''enrr>akoO.\!637S=XiSVVKqs>BG)MP66&YdCgY`''is8UCf!<3$An0*_i!/V6D#U90L(&.^Rqu-d0r?1u3q]?PB\mMXeV$L*+SRJ4*V/FgCjB/dISr8l%Ml)EU2jJ0J#l@QtYnd$3chmYF%fILH#Dj0F#(^lMIu0&"O`?D''M[2Fh7sT''C<mr/!Mm/MG`i=aG8$n2:Ml;_qT8T"\SnOr+AYfQ[PCJaGP+/2,M4D-_qjmW6(&-Y%qqq[6qbe1''i5,<K"qLSUqZe>\o.0\>#DHW3Ebg>LP;TM$X,F4*H]+p1RX102883!A*gosu1Ydo_#E,h0N91EChYVp?p^Fh5$jMLa3YhDu]DN''A%f>2a!+b14rrUqpBGHI*!"Hi1s8V7#ir8ur*]T)X!$&)a#e-t8]t(Cd?65%)s78iFs8V>YfDkm)Z"T''qs6]\s#ljr#lTkIM!fREbs83nErr<8M+e6N_bdMKIq[<9&Aj]QlaBG&4!!turrr<(oDZ9\BHmo!p!VJ]!%fAom!r5k3]WAEI[VE*O?=mhU?E[tO*tGBmpKnYnq]b-7pAeM*o`nNoBUt(2#kdp.VR6$A5Z&S\6>:^FE<m]mo!RehMt\ERm5t"<.]E^:pX/^<rG;?6pV8Eeq^?8E+c@fUpi63%(%ql+E(YROMbK%$R7X7]qZ$lFEQN[KMrorHUU$<oqa:S\#>B,0IS,MlMb9@.V?m&!#L%//I`@<(Mq=`1RgAo\*!Ca+8B>#**fl5>N/Wbr!!3Hdrr<*,3<&sYgZJM9!f#osrr<,fe;O>,&&k4As5t<[rr=!V>`8U^),1YJ\Zr-G]<Z<Z*fL''uo0<<Us6*hjs8UdA+H-:"mDIQ^s8Vo]#lal+TE,#lr#c!&SB/=fekj4:0Mkb6*Y/)?pK[HQ(&(W6]_G_HpD4/HpZVDYqb.b!":%Y@97BHj9T)N28>Z[i"p`:iaaV<hiJZ<`ZC2''s.JR]o]SkU-f8BpS_amg6BQQZbq\Y5oib7ZaDYJi"p`9WcA,lSscC"Y3jZ^3Ss6_UTs8VW*85EIe3.q)0Mh\g"\Vdj%pac(A(&&URpWN:V''mY^bNIHpWSX&pXF,L<SI!\Wc)X2=baQfPp)9.)rJKJcfU\c>6''8m.n@f)B)g5D)OpO8$YpB:ABMhR''WMZnY*7Jd8ZqbE(H</^VZqZD?F4U=7K"P7c#r($Kl55-Z'''']@O9"!3BCCr/lXb-\e!X5F6npZ_J*qq`(]#>K22IRoAjMbBF.V?m&!#Kh#-I`IB%MqXr6RgAaV"SVm$9lNaS8;g0"9:8>J#l=W-b&POPa,B)<e"j:;#lG#(:)3LD$?#Tl(&/dRH=R!TmkSk^s5_#=s8VN3OT5@O4uQ2@q`''6*",hoFM7JPR#l#nD";UYL$MW?M,Sb!NEKb^<B!@TXEJk*KJSAQi)sMFdam,Vp)S1I!I33?bU\c>6''8m.nF8M1:er,fOpQUSopB:AXMh-dWMZnY*7Jd8ZqbE(H</^VYqZ;6D4pXCM"P.f%r(?]o55-](''B%F8"!3BCCr/oYbI,"%W87dipa,ZNpTbP.-45"k(&&s\pl>,V(&Jp6F3;VhUA#S:JZF2?IuAu.M/Rr8Ananr1lH^qKY<2>KUI@K#^1r,DBJ`VqpuSX''DDY/&I,`=-b.+h)N1YSSVd(HM7AJ;R#@bu_#"D)D2efON!9*JMc9M!JNa>qqZPg]r&XR;qZcdnpCH?9pB2Os#E-]?_G%Mu^q/WrZj7/h`Q&_f;@7"0=r$c[$MOT;pF-FZpDNa2phU]>.LI^(-l)JS$4abp^(pB?$MQ^XO;7L?$:Xh>(&''6d%aE,X(&(T5>5*pipFQaI!rI-UpFZd_Yf3OUpJM?;pB)0-#kn[DpIP$ApCa\(!;?]p''V5+b*rl8?@t9L;s5DhMs8W#%!<<)[IDGm_q+h"js7oa3rr<>)_#OH*kWo.J(Gc&Lrr<r]5R<mCPF*Ed./-I1%JL#(@f$<''Gs(u;#&kf3.3FIcrr<@*!<<)U.Y+7#s8VPF5l^lZMh(j-i#oi8s5a,DMuWh$9Y^r.nmrR10+.RYbn]t,$4`QTa;+GI$MTt_U_UGn@T@8f?Mb9Uq[\U[bY!d!96sH\AYO%L+9)=A!J$+.!&ab+qZFotW/I(2Mku?#FeOVRpD]7Qg5G\+Mo0;@8[-.AY.9k4#knJr"T;$k"N:S@;m''N<DFT"fG`-^&Cq=_gMuNc)i.-ac!,%pS[Jp4iJ,kK5q_e+M(&''Ei%]\+S%i+h:$MQ(G.M_\5$:ao+(&''Kk%]@Rs(&(T5pXQ/VpG<3e_T''V2pJM@m[J.3HpGE<T^\\oapGN?g[Fb''dpJM>opQZKf2[]=EqlCP,3!p/?_TN\g;@<33iYD2J$4a2_^_QTA$L.<](&''`r%^<t@(&(T5pnK5PpH&`ZQ2%0jpH/e1qeR#A4UM\.a6"-2;@<2p_%l].$4`<HpBhZ0;@<2Lq[+)4577:Hpn\`"5RJ!ib.JJ`;@7:8/f"+H$4`fMpB_T/;@9H!TG@2f$4`!6fbO6Z$MP2-Wtk@r$A%q:(&(*''pBga6(&(-(%ZSQ/(&(T5C%o[`pI5Ma`01r17g]a;pY5F1(&(T5qn,92pIGW$pCPj*(&(T5>PB$NpIP_d5PNYBpIYc&S''^^@pJM@ml2(]#pIbjNpB)0)9F;8lb4cJ_pJM?''pKeU/9aVBIWUpr":($_cpcK;c:C?h6r08#k:^R\cbfLUo;@7UAD\`"D$4cfapL3e%(&(T5pCiZ(pD=5Ipke`WpBDB,;@<..P8.K(G/PHJMk%>Ket16ZT(`Z8#lEHP"o+pm#OIA7Mi7J5pB6D4pT+$*Mi7<4qicpfMu+]VMu-fa@=D^4A9<(3Q,4^=!\J7a:e"!2WeRC)TS''+Mi^Jb20Dbn"#-+/$2BRiqM0Xo/81&qGMe@rRVKB\5nV`"n%''@.Ud)NuL[\@,q?&MnmM`(A<?]-cI%el^l^7H)6;@;[a5o''+q#59*FkkdUdq\>#M7Y^e]#l>#,"SW<%V=t)eV3qPUMiN]!Ucu.a`+Uu4<)ds5j82[IEdZ;n#ko7IpBmjlKU$p,A;bIp-B%a''M^HebXK/SLd.]V[dYl)![YY:aHM8!F"T9;F.#WM3"crC$R(;78iJWtBP:$X2qa2+m)%$lJfZq5HpJM@m,ku?opDF>5-2\VqTS/SX*b:1L67.Wf",eMQBrnA>bg?)GMpdO&L:2pEpNj%Kies:aMu9FG",i*4V=ta`Mt[AO(5i?NpN&CBq\>"pq`nO@q\pXO!="hQOfIK#jGTBmNr''%eH]''_=r@!S^qZQGI"f+>h;oE?+>Z=[E9]Q"HpMtZ0M[9%q\G$?/*tIu=o(tunpDsZaq8sHH)@H-6";UYM$N-)''pDaO=qh5dZ*=DZcqdL<7;@3p#puhN!(&&dWqa:S]+:<Yq<#,-G$M=2u(&&XSr0%oj*"&YAKba>&$MtnA@MSW8$4b2QfD.<>pEBsGr2LM++U\,np_ah@)%-6br*pK9;@3p.M"dS<N"u(3$HrA\(&&OPq[J;qpJM>.pC57=!#>6+$MPM6Ynd!Y$MYe=*#82o$N,;KLDBP1$4cfdq-s/l(&''''_r"f5W(&&OPq\+8jpJM>.pj2\mpC7pGW-6*#c\n=(S^sCZSY#QaaU%e"pBC>gRKr)8R>["#X7laTMta:0Mn=n*pB4]Yqc/Q#M_0ka''T7nH?3Obd@sV[-GefT]+nl$iD,*ns8;F4"VM1[qVIAIQM[2!5"ORFRRpe2sMf4GtLk8/EJr5J!Md<3%_MdrBK(f\U]=uY3_p>cc?^G&V>6p-Eq[$Vf2$j!mptQVY(CCZN*rH''9$l,4uPGB8o>O=Xcq]c;2G>*9(Mc%HFWIUpiI/<p<(5oY[V4s0`F+JIgH&G[\K"d#3#kntPqc*i:L74>K7JkFHp\r20rWWl2*rI)W"r6moZMW_fL\hf$pZ8^XjT_g\c5$)4$4d"UIJbi8q_n0_<d+3rq\B>mpY6LSXGqUti<Un;JRF1SM2H/5EK5.!#X!;oFD7:@d3$SjV6ZZ%WI`bd[#:**Vicn3MkiP]>,qo=r>pgn4;I`[pE!@YpI"g""]"g9(&&Usq[j''e@X)s0KQ327\r3\KYfhBOWsG/?PA!L$Dc@dH3V5>cMt\!FU#1gM#S-eS]DP27q]kh@<d+3`q[!H''rqH"!pP]Fhr?D+?G89k1$4b5S.J[fqq^VMs#5bh''K_mB[Mu@Me.Z95[N;''m\N/L@5Ck$tP*eK<2N.HupqZI/%LouT,M[8=HYN$]7=8:\JV%ku*#,dfUV&kt]Ru3Ph#kS@ANG+8qM[1qA?SEQoq\m6TVjEgJ*g_eSMO0/*oETAqBT.1o#VKFj0HWnO0%^"lpE96%pDWs#pE96%h?ONMpl5)d''jM)2"T,+4#,dfUV&kt]Ru3Ph#kS@ANG+8qM[1qA?SEQo5;(Rc8G=8%8G=)$8G=53%TE/$q/$lD+T#F@2S]NpQ^OZkQ]%>jQ\c"?#B>`:N-L6d/m_m=+%eaMfDJ26+S\M%2Z-,?+9rDN;Ycp[D&$:_5Qpt]^]p^''RACskMjoTjM$W_YEK+XjG`)h[?=,B.9)BOB#H*oVV&kt]Ru3Ph#kS@ANG+8qM[1qA?SEQo5;(Rc8G=8%8G=&#8G=8%8G=&#8G=53%eils'')8:<q\m6SVjEgJ*g_eSMO0/*oETAqBT.1o#VKFj0HWpa)ScTUQ^OZkQ]%>jQ\c"?#B>`:N-L6d/m_m=+%eaMfDJ26+S\M%)Z3/#+S\M%)Z3/#+SfjZq]H(QC\[)fV%m_PquQ^d''q5O?ptYYS(AL8k,5[u;q[:Y=pBMbhMnGpn`s>?4+S`2<+T(:+93u$s:Mm/V*r#.''rmocX#QOhiYTWrG*2rN0s5%o%rr<ER.#\**)_g=YVOrj\*pEK"#?GngD]am_Q?AgE#e=7Frr<N7[/^0s7:?,q%Y-nGs7Punrr<Ao>lXir`om^.s%%pJ#&epVV&tV^N15fn#U0J0EJfL/GR,q2?fiF(AG^WV93u$s:Mm/V*qq)[+T"S4q[:Y=pBMbhMnGpn`s><C%f"6B\/+jg#E.&#Oc-N''rr<n''eGfN72TYmu"5-fV!''eRbrr<%IE!ZLC-kKnoq[:Y=pBMbhMnGpn`s>?4+SV9#+AiA:?=??"D6(l%pQG::kkj]?;>bA<<c`D%+,bE1Fe<ma\R#I>!#W]9s8V9#)#jRS3ZS2"o/l/oD[?6]#>8B37o+!&bT?NIq]PeF#Q"nR8,!60e;Lu:Zc<>E#7gOWpp_+7IKte[7ZiV7MuNbpejTN<Sn\-&!!;\lrr>$E"TJH%1qX+or4E,2pE97(#KaKbb06Me;'',VkpE950#PT\rYWa*tMcjt/:^Hffr,DsBF*2CCMg:V2T6LXP?3U?/(rbS9s6%<;rr<ru*<6''146VT@#lD[J93u$s:Mm/V*r#.#+T)WQq[:Y=pBMbhMnGpn`s><C%f"ZM>kgi)pLO/M#"r927o+!&bT?LKq]PcH#Q"nR8,!60e;Lu:Zc<@KSG-pb4nuAX,5\/@q[:Y=pBMbhMnGpn`s>?4+S`2<+T(:+93u$s:Mm/V*r#.#Y4kfjn-;ESs8U+<1bSh.WW3+=s8U+?b1Rm2AFgQ5=9eg*is"KCs76!?rr<IX!<3$;IPh''))1g$3!"Juqrr<a`!2gq5=9]92WVEt=pjNI+dmfIXZ3[?%/rdLbrRgieq&A#aY6Xq4bt%L5*n6+\VR+;K9D9S(YkoR?jp+Oc@7O+1X3;XZn,%"s;>au1<c`D%+,bE1Fe<ma\R#I>!#W]9s8V9#)#jRS3ZS2"o/l/oD[?6]#>8B37o+!&bT?NIq]PeF#Q"nR8,!60e;Lu:Zc<>E#7gY>lh>933SiKrXnN&8pCIZAqtBb9q2?%hMibN)OU*<=Q70[Oi/?6GZb2WuSZ%[dMi.ig#)Hu=G\`3C%f6S,B_UI#pCI],+iG,i&.8:u;\f$2$4_dbfCsA%Mis"n"oBC"Mu3_^Ma''[GG)$A#!Vgj8,)c0sr-A/MMi7H;pPOliMZrhYpD3&g''d!q[`VKE+72>PYq]G\h#E(fW?U[Nlquc]YqcA^M;u9&gq]7/7."=hpq_ImfpF$9)pAr12`OuQOqYTCK>`8J]pIb\*V;K@npGW?fpNcPrpj!VPH1rEUH/A9#rIt+R#7gL)q.KI''(&S+,+8?0JMnaV<CUnSi;7ucCRL&h`qZln[#1.h)O/2XT#lPV<!>Y><$4cf*q&/r.(&JaOEr,lNN^A."r(-\ipeqC=Mm&VcVou*Be<ehopF$9)^Nukp\TG#Q])*>5#lIWu#P^godXJE[V#(/u%el:biV5)ApJCf*pF?%^qjmO"8I(/aAT;R8>BTgD6&YU\#U&j`n->''\Mt\jua)$e18dGq$VYKBMlkTGcr9X6Sp]Ul8>PC_dD]\Weqg0(TP5L=7#5AW4Vi''bcO=:GFpJ^l&p]2--!V[]2$3uL(H`:ekFfeNRq\Yb-r*B1)pe_7BI^5$1qZ@*6p[@p^p];3.!r!f3$3tA@AG\<O8s0JX]__rYqiD"fs8V_A!(6ed["&,tCQ&2m"3sL<!!@IDs8V^G\,QF0LTUp[#R?9UL6`n(Mo;QmRch56eWS,^pQYF4#P3/&KV:%)%RBfgpU:n79(tsT$i<Qn9)B"kG6SQO8bnPDQkf@T$Mt,(@21fYh$4Ga8bnPDQkf@T$N2RO@21fYh$4Ga8bnPDQkf@T$Mt,(@21fYh$<hGr,WT5h;&;GpIY-ppP''DCh;&>1C7Q+6N=,V9pgFmth;&;G_YF6-72>P&$N''o%JJIn`$4arK!Vf(upBV-''Gl6#*pBM$8_YF6-72>P&$N&NS?PPTWh$4FBpP\e1''fk++#=\BR(&&"A%OLjBpZWDQh;&=lqd1*4$478dpGr!4''fk++#OM11(&&(C%\i^<pZWDQh;&=nUD<M3$N(tC!>Y><$4csVPP=;V3SiKrZhru%pC7N?qeW;,knQ57h$:.X,Sg%a$4`BrbP1693SiKr<qdjSrr@39_#FBC#XBh]+8ZfYDf.3V.r=:H*r#d5+8cHNs8R&P5lUhLAq9p]X[0c&!-FWZpBgRDhtJ<9pF$:H!0+eps8Qp#_#FC6561``M\SJuBo@b&IYe@-%L7o`Q_kf6qo,r;.2=l!h$<[16P]>,$4]Q"620UY3SiKrpCa59pCR`B9D=MAknQ57h$;&s(&*^q%[6Wspb<LDh;&>1%K"?aMt]L2:&=pKpPT=O;#DC/.f1=bSbO6t#E/W^:PODs:&b3''U&^,OrtO(8#U&j`#7e9<g%X_G3SiKrihmOc&df-GHI_cS''fk++#KrkWpCdlDQM8AmknQ57h$<i#qZdl54oYM`Q@Mm5!+BSlpDWc@e+YI9pF$:@2u=c@q[=PCU^$T8qgT@X(''fb6HSt[''M#[L8eA2(a"$=<us7.[*rr?9A5`;EDpQ"tX#LCUg;''-:-pZ)$$''fk++#Q%td("rom!97.rMuNbXF+F;jg-*7O!"1X!s8T7=5R@;2pE01X#E/T^Fn!3Hs.@a?rr?dj!<<(&/HGeN"5?''Hqiptb#64^8+@,Z/s8W#S^rd_BpBO_''?@e*K*tF8(nG"XO3SiKrqe1^!pQ#XkQhLj]W>.GLh$<]cpFm?V''FG>;pV6Ie''fk++#@mX"(&&FMq[W@1(&K*NchALc%T)p>p]2-(((0q5Etp^kh$4Ga8bnPDQkf@T$N%J^''fk++#7g+q-hlj?3SiKraJ9RK!r!f3$4$;I/`QXg*rEhO#L3.-#&ArN3?DsoPlC^aJ,joq!!IfP#l=l4Mj]<crr?HW!<3%\.ffSL$qW_a!8+`q*qtoW#Lpds7NW-<;q`#]%LP>m+r*,oh$4E[pQt[A(&&"AH1rKtpBCs7qZ6G-q0EeM"q#PO%2JVt$4\caNVRl8pBD!%Hi)k=pQ#Xk_YF6-72>PYq]G\h#C]X+E+N8[qd9*&Mt\^u+,c''S8ba_3c1a/Tq^hJT"gb,G`2*,I#S-T_rrE3X2#dTc1GfjH!!6bErrBFMbl7Z`AnM&C*LW;p!)8lMMuNd"R@9''6!)]/Os8TIMd#7r(P;=tPs8TaUbl@_.An_5Egs"(Ds0\8^s8U7u10aeYhI^C"s8$>@s8VgL1lMD6b;1p[s8SV5bl7YN1G]5npE]JQs8W#@cAUuo^LslWs8U?3RfEEAAnM)CdUm+ks2&A[*fL''uprps?s8W(1BEe,Yqk+](s,/[.q[EK)FNh#q_Z0WNbfggs6hj(I6hj%H7/TCU%Z;%s-P^]tpop%X8=9\ZDj^hO$3QS?rsT3l$jqn$$hk5?ookH"$k2k\$hkg0$k8.(%NGI.''*2_I!!*''2!#P\`!(m6#!.4d"!/poR!8deO!<<-F!AaaD!K-u^!Q"lk!U^"U!a5Y7!epcX!k8<k!rW3C"$$H\"(24m"1JC*":#''D"F1-D"M"Zu"VCnk"\](u"^VA:"j7)@"pG2t#&4?i#.4ZT#4MjR#=Sl8#Bg?$#G27:#KR/Y#Vu`_#\"''s#b21=#hB:Z$""!s$*sr]$1eKA$;CkB$??K<$FU;a$IK4@$M=c]$\/VB$^(n?$el''X$i:>H$l]U+$u$,s%#k\$%)!*:%;QE-%E&_0%Iaj:%XehF%g<J-%oNpM%tY=U&#p/^&)e&b&.fC*&3^Y#&7H-Z&BYRT&N15H&^1k)&lB9N''!;kX''%IXI''8@0e'';ZAK''>Y@R''E]$d''Ijei''Nl,_''RpgT''^HJ-''e:#+''tG(J(*s_I(5<U.(@N&5(M+DP(T/)$(]kO,(ciL"(eY]F(jQsM(nVZ9)(-:X),;&W)0-Uo)@dZP)JC%<)S@"3)_;q))fH[R)oWd<*''P?B*2OX[*:"UO*@i-k*E*uI*NpL"*_%2l*hFGr+#G''*+);sD+,:r''+.F@K+6js\+?puD+Dr<F+FYGm+I+(R+PS%9+Y"X3+_r6L+o!5e+rqk<,)meD,0(nj,6oGi,Cq)n,P!*K,[Vh5,mGY>-(Q@M-3beX-;5ak->Y#W-As5,-S-W;-[@)V-eTn5.%D^).+p$=.6Ath.>''(o.MO?t.ShO-.`3aj.i9d-.r$Sr/$1?#/3#1N/6ONd/>Fc&/B''0l/Di$h/`nYT/c..k/lF<;/sn8k0"`gX0%qrE0-Do/02O<`0>]Bl0D$qA0JbCO0R#4-0V1!,0mGFA0t]6^1HdP#1Y";U1`J8/1f#rB1kRYl2SM*P2\e8!2b>r*2e+dh2jZJ&2nq<H3&Wad36=/rq^VJT#.49LcAT+)aTW(L.f1Re.L$:X*r?]WZhkKTMm`9o"UdjQ`F.!Uc7R#D8EojLY''&.h!G@>b#XaN.q[!''"YB<;<$i<Qj9)B"n9)D6X$hm9j9(r_f9(tp^$i;:0L^/i.E+i''t#ZD!&*1WGWMqJC1*<uuLV#),*U]q5)Gl%mDGQnQNIJ6<kpC7%KpI^A@"8EN+(]4pC)$LEB*/t/e#M?W+b/_"p8fiof%/W5LMu-$NIJ49XMp7ENa0k-UVRMK@Mt\2;l2)id.Z=0KAr->-#Re9A-hf6OqiLVjq`9Z4Qi1dq/W7:9-NsnT;N''i7YltMndq$BW]@4<g[>W-4c<^/Vqc"X6g&5d^g]mL]^@r/t*t.g%#10Sl<E<^L7N_Ld"q1/q#1Tnm9ho8766H(p"q1/M#(H;+q[Mif5)T^D@f$l:-i8GkIeONQ-hgsipIU;;%J5nZ3sb^1#(eI(<\B:9qZo^VpG;P$dd-W7+86A*U+MR@#RgC3#584XdA=Lq`QtRPMt[C5pB5=#;:&Ld7\onaM[93b"q13IpDXA3"iEJ"2>]4/4So:($hs2c&c;+m3VX''X&cAF&D>:O5&c<^T$hr-E&c:&O3VWOI&c@mlD>,La$hkeKH1rfc%dNpZM[92lq]ktkqfhpWpE]VnpK8U*Mp8EBh$BQ%jbo&l*rEI*Mu++\3f=/jq]>VRF(U=9q[GCTpF>nlf]r2E+7kE''<1lqk$iAiU.f!rY/,Q1?[.gEo.fF5Y.ehg*$i;FPD>,La$hl+.f_6@-pojQEr3$?)DJ`HQF/R;)dJGC\#Q$sa''OU;M$eF#*KDX6o7uR8qpbVZRpWiY)Mu0dVe;O(Nq^RM^rGD9YMZjLc.fF5ZL\DDXnHKBq(];MO.Z=$9prnZobkETFMtq5eG)Q53r7Ll`pt5IcMi7ONpF;()$hl.HD>Pg\KEh=]pk8MsMi7ONpF;)Zpl#@aqf;EOq_\%^pM]dCpH81]pO)i]pFlDVqe5jJq_\1j*Xh]QfdHYPq^FQQq[E?247MtrpFY.hpC/2PpJ2"f)WBuU./,&Jg\WNDqpt^_pF6@TpM]dK#MZIr5XB!q4!+k-CAT%K2Z%IjE;(CM2YUr.er.G7`NBL*3nN.Kf*/h-Wpbl5#kr*2)YZ;iD&s''L3nQb&FFS%YCPrJq$p3tQ/b^jOnFmCd%b`<-0-?*JJ5p`!#RcP\O*.%-#kp3R#''?5aRZ"5%pM5PL0!jB7[)S$b#i&tb#l?=tr#>TOpF>pFpHSr,Vf>HRMen66McC#j2ICr.*rAP'';YN`eb-ld\*t.gIqa%C^"oCY63Vt!AMu*[r<;.eZ#k<*Bms)''TMbo=,;e@_A-&Y[0L=lk0-3f_30_RF!:5ejCMt[>6Mt\WXpBOR9q\u@;qZ`_t+J<PDMnk7f]WTnFlANGfO?j-[pM''@6r7q/]pMp-#pF6@TpCI!Z^\;1Zpk&Amr.5/0?=>E;?FAf7pk&Amr.51N@eVobpCA;QpQ#&dq^[U%1]4f\2Yai[.uX.ZrG;]GpKmZ4q_O0-!W9G($M_+-.#[s+r3lJ+ppU&UMt^]ZD>,!-pC$c@pC@,G"Uk''Ip\F\QMu+FiK_lJXK_n5spN$01qg//BpHjf4+8:ol+T%;q7Z.EXpNu[Bq`Kf6+8aXd.JMEj4,`ifr*PBZUA$-q"Uk7<q[rT0#5ef*F,To-ppc6?pC[</MtdSQEs2sLloY"/"q1/<q^U!O7JA88$ce1BV7aO#DiTC9HO0?sS-F#.KURgs#ku+>pB!Utq^*B]-At)_K)6,cpDX="_kN^KMnt=KH&H<n<_8*QKEtM-"X&(l</W5a.a:TQM[0\O@pMK-DPXT[Mm]7N`KpkBPQe:SOc>io#Ra1]>B4FX#ks\_+T60O+MnAc<k<=tM[9%lmIq.c2toH`pBg^2*t-H.740Nf77K[McgpJ8d*WpC`/CL3Rm[PV)?tce(c0nC)iG"!2(^!K9`%<C,PO#:pD8bMgmIgN#l>MEGsuXj<Jq,N@*A2nSFPqf$dO[AUoqK=<;.O2D>PIQQNq3?>bjoK#l>>cq[iW`q_I=2''DEIg$duUU,Ulqf77CG-mdId8d2rbn0.cu''qapZNkoodQ+865&mEhm+#l>YIH=19(=GnbhI*d]!#l"<&N0fHaMinA?KDQt8qZ%ZFqeHD#h6+-,Mp.*a?]dGV$TPp+VjEgJ*g_eSMO0/*oETAqBT.1o#VKFj0HWnO0%^"lpE96%h?OEJ#@Ye]VbN''Tq\1RX&c4Ze4QH;ApDG''qMm8kg`X"m98m5Oi*`e24Tn''KUq]uH+/a6++,Duj%2sJid''-I"d#7Jqo6743a84#mRcL(/4da''!Cqqh&ip\kEl.O_Mb*_)&jDe)ZMpRh=*rGD9OpXf_m\@9W)TOC\=$i;(EYkK7E$i;(D&bdCP$i;(EmfmTYJ8H?ZMhR+@NX5Lb#H*B\M4]\3iifQG*t.igq]PiSpE93!#K+XW(&NUW3/dZ:pZ2''BpL*kSMZjLc+T60O+9i5OYkK:7fE][)ZcBYUE*saar:_?.fE][)ZcBYUE*saar:_?/&dS&%anl&Z7uLSm@8h0[<N&HH9oEM)>uV*T#7LI6pE94_#KsWbcc<#"9-3uhpE950#PSTtchdqg6Ao#d@o!B`#7LDh-Mmi@7JfRDqZ-@OpGha<!V\nS9.9N24Wb''a]ga.l=%,A==OH^1^<tOS$V-+ZDJ;lPg\W,lMYA7fXp;()]5Q#R#ko,#pC?pWpG4]$''`0!p$duUU,Ulnd7R^P-nF4'':d2rbBMnQ''j`X)IEpE99hq]Is*C;sDU8;dcN(+]7lq`4O5jnfP^)]oI9\jmqn>=V+N>L2g.]?nqI$iI7''+SW2Ih6aQF*h&"PMOoV0pEBipN/!7GMbAt,@;S=:o`km%*<qT%$K=eS3/dN.Mn8W_Mq3g6BXgI''#l@'')"_<sNPDc,mWN2Z(Mp@6^F,X9.pDX<npBEG#q^%0t*K)gFMu*U7+l[gJJI)!3<s>aWQ[k!:MeZdH8rGK`IB8(*#R`fi-2Sh^,t9N6qqqZ:\7+PAWf*[5Ulu)O#CVG]MLgZkAqH>\+8<A"#7L=2q]Pdu#>8B37o+!&bT?NIq]PeF#Q"nR8,!60e;Lu:Zc<>E#7L9$posWDMu*PQ+8ZB>+8[IEpJLjm"Uk&VposWAM`L\F3qs3^+H&8X%Q4"kq^%0p/GuaH,`CXV&`!9r"Uk&mpRqCGM_t;i1\Wj*4H&r%qk3gWqkWsKMs''gsk5.:84Gs@N=Cl#H*e90$N-UKj+pXcsQ\q;kpFV;khO(MQpN$''Cq]q*s"T0;;$htb>/rTI0r5JmJr&FQWpPfCSTDQolqZZanMi7<5qkf;GSbLD5$i:#&%eg#/$i=T65l3hDB)?065l3nB@eX^55PI>8CA2B<5kdM?AfhET4SKln+8\;"62MZ!*rA5"3;X`j,547p5PH2m+87i=$hla[-B%U&-KO[WMt[PT48UH1$i@\$pV-n?2b-@t36t(Mi6T^,hFGmO*t,]e@p<)GA6E/I[(<oVZb.@fiDmK>-W=,#*fGi4KT(Nhk6?g,MNWmW#e6S)Z*C$E@igR*&,Tt7K_npYpWD:g:BoA1pBQtApC%<8is)rWWk,7(G%tT.G?Q&<9q)@(MPt]V@Z+o>EbC;=Mg(hM\-O_lN%i.Nm>L:gb/''"nMn4&6?_FNoSZ.OPMpbM61Q,"d3I-AV''aP3E&rT3U.aa.X$i:J/&GH\?$WS>RSs5M#T8NuTT7(m)Ed;FBDi8\"<h]kE<s?fjW.h^=#i<+na1#r`>T\?OIu/Q-#cPlL$i@?spcV7TI9Bir4c9S@#7LDjpEkgq#4OAp15l#9pH/*t"Uk5irH$tVpcJ:m"UeW1Q2:Rdq`4P>Ma@)-Mi04QMi6f0MZjJ3MtQg("Uk2-q^U3Uh=''/Ifo%-M.Kp39CO^\SMhI"4NeEDu7&1!!R#6fHMc>UJ?&(QKap*s.QC+G*P`(c_Q\PjpE<W"fSqibm`f$n*O5L9O=CYiD=gMVO]X5#X^1=QQ*t+g6G]\%PG]e(PSt_sNStdA8q^hNDpC[<=pJL\JpC[;cpGr!MpC[?f#Q("hD>,W?_"TA`$i<MRpBLBHcAMi6pEKlkpGi$ZlMEc''qdPK\''`089qgaV%''X8n47Cum3H0BS\?oS=]Pa.9$M[6>TI<K^QH#"L?MfY%^U''Q!F"jD+fKsusGhRT`.[r/''J++&oqM1(*aT!JUp8rr]Pnrrf.#l>qQJhBl#/rL#4#Y4.R1\WcTlh:`.pCW=X/X''cP$iB,]Ym:"-MpS93a263)nr*5BMtUrY;pS[g8#,qdM[93bqoV)a"q1<,4^0BWq]#9EpF=qp.ec[3)[?#^:]![)$]F1dkZu=:jR-*Z3%kG+`^Q[SMu.:Jq]>VmMu.IO.Af#?5mT>!^0TUX"iXWqEoi5RDN"6-pH4B.BF#!7A!:)S>`8J44!sh7McYg?SSY82$[B(1]o0acpFt=jpCN8#Mn4/;A-`S;rW\=JMis![Mt_l$,ffcbMb]12H=CW#XAGEMMu+r]5"ph1&.&"H#*QfuT?<)1Ml1lZB8]qiLfT*5;h5,L!-q[GM^aQ2bY.Mbgl'':Tajd^gd:_KtpC3&Jc`6[Eq]5rkA7''4YM[3NYT_Am;$TVa(6X4N)ZlY.4VPM"j#eQ6''WK<I-S<X?fOkd1KbDXT&Y[N\U#Rf1Qna%=8Ml(H_6jWN*#(cLc1YV^FMu,Ai/Kp&L9T/d,f-pA7GmIe9"eLsENh;48Wh4]_FE)SA+)m-XP$"FaGZP''hG--G,M[81MXN.efVHY-iMggM3L''X<UNJdu7&<#f3QM1prq\fZb7W*-FM[1tXm*m*bZY.X-dYmi[Mt-NBMt]YudsT,M]a3*:@''iEm"^&00T0eJ54,YE^!/p_DMa3b-X]buq5.4r)$^5XmEf4mp-rr`%Me\/fR<,83$\G+-W/IX5n%[<%Mlqu7I]$lc$W@7^?$(9tMd;6]TnTr];h5-;`)>1;`5L4J$hjYq.R/hO.QQiYMt6`p"UcHu#E*GHA64<f>mJf;^;PrR#kn<($hmNq+T/J<+ST%EpH/7UpI^A@OnZN_CA3P].#S6:qZP3##E)f/DI.o#>mJf;^;l/f#kA3.q\"fUq^9dL"Uk+Z#H*oVV&kt]Ru3Ph#kS@ANG+8qM[1qA?SEQo5;(Rc8-]OO>PC;XEut3;pEB;1pC[=frGD;a#5;Q?pCZa6$hm-qe?N=S:1[`u+8\P4$hkbJgTY?W5\=[k+8[/b$ht\GGl%\15p_F7MaGp;pBLs3pKRM[Y58G#6RFhj+s)Y8T3o$B9keQLM`Zjo./*g"pJ?eB:5ei(PkQj;q^)N%4]5Z6M[2"8YfOhe_=8W;pC''7jqZ1TJ^r!aefH9C:^giHl#RgPN#+bJre^sGOoo%9bSbij%$]Br?8bZhSN!T1]pD!PFqZR2u=8R1<H2FFrq[*&qMi7<Dr''?5E$hk2+3ktDu+8CEme>]jnMp%$>Mi`g[#l>eMNd-M6MgPdj@U_>=M#;i/1L=KA/RGjF*r(?a.f=l''qdT:\=8*4H$i$q2e>]jnMp%$>Mi`g[#l>eMNd-M6MgPdjBjs(DqrS,V?=??"D6(l%p[@u%r!Wi-$dD39#9MBQ]V`$U#YPC1Msdb>pFOAkpBg`Pq[W?/#=26l2iIPA#l@s&*r@qkH1u+K)#$Jn<?@(m#@-+R`X);LpC@)Jq[*PlAD98*q]cCD+?0/uq\/iJ2tmCJ*$,L^#PVkhpC[<LMi7HEpQLO4!;fcS/HreFP_u5i\pgVfMcYg2?X?Kc8W.5dLXZV,*!VB!,3UfV-&_LJMsTM_pE#7C@Gq"iW<`n+0C&97pIY*F/bSum+8ZM*.7S+s#koAES@5`!^5M66RRW<(#lFT*MLUP=MhDB5KD-ZfpAc6BpM0tb3G;krMb8n=[tWNA$hkP508oQ.r&BUmqZZ_RMu*bV*/cBP]Si#3UP6:.WFCceMbRPb:5_]%B<d6A#l>SGN;Fg_1A<)QpFD0gjGWaRMt[B>_*t"&$hk;2-ddi@pEp+P_Zl=8U7\oQ\Vm8+O^AC3Pm5i<`''?Rc;Eu92q\''0gBQe#7M[2gcSZ]Z1QH^N"nO*RRAXC''5YFWu]nVa&QOCnjn''*`mJB^#=oM[4n=q]^kHAW-EpMc$3_[;f\sEc$_/M]gbSpG7a%?AkuIRd(.dq],m%q[2=WpGe**;2`$[!/oEd^j)qjUp[7_\Vm)<pB*>#q]1Ul-&XQKM>IJ_pDX<q]W@mRM[6trGAUZ/EF9k?qZ>pbcC/``A8HQY+#Ah''XFm__$i>keQJB''dc&9i)\lb7Y#Rc,C>?4@S8W-ihJD:D<8sNi1Ms6/a[Ed!]#Ren-Zq-**M_JO197I3TpIY6)qa^th/qYeR!/p_<Mu,a%+SROA#l@*c+SSA2pFMQop5AZ*Mt]Rmo_U>,#RgA:#/R*g?!_Q!<?M)J"q.SlTnfLu#Z6D+Apuh0XJ2\]SfS8nJ;[hWN15rtSr3lGPC.s($]Df=a%i28RAdlY\Hol`kPHMGqk!_ipRqfc/$\0[*t.<;^7p0gA9<H++"[[)mfpV(KO%o)HrV79"q1@5pE93?pL!f-pE978q]PcTqd9):#7L9cMu/M6rnAqk"Uk>1@rhYEoDeia^]9;ms2qZ5s8NF"_#OGX=ht%;os6n;MuWh"ZN1%*$;A88s2Z(nrrD_u5l^kX^]9;m!+O0fqt''gf?($5$rr>"?JH#WDVEk.]1o>g''rs2cC"Uk2fn'':Zb8FQ:5#7LS3HF(Ee!$etgs8UqZJH,Y$D?0\:"[Bg&s*4serr=qn5l^lSJ\_9c8bG@K!-,Wd"UkA1HF(Ee!$etgs8UqZJH,Y$D?0\:"[Bg&s*4serr=qnJH,Z>J\_9c8bE)`!-,Wd"UjR8#QOhtAq9p]p6gI2!!pfarr<?]5lUfjk5bM^#oUPY!!sMCrr<Af5TcfdEX)RD_<HLMs32=0s8U=ZJH,Ycl%&g6_P2S\!&F3Is8U>LJH#U5$NM7Vs8L11!<3%.*rq6!s17\"rrBGE5l^l)G/4.X9''3qhs2]\?MuWgghLPV,2%Tcf!+I$8"Uk>1F6A)R!6n\ts8TR95`>[B\r$Lfs+8ifs8T^W5lUh4.)>l_\"Ne[rr@-''JH,X)V18^WpK9TT=U,<dU^-o"$(6>D!"!7fs8VgL5l^lXbeX8Yp)*l1s7YS?s8VfU!<<)m)8I>7/YiUN!''V0Krr=h=JH#U)l%&d64r/\K!''OV<s8U=O!<3$SU4E:D_=[dM$U/K6=,Tn5;8Qr+Ml2K.Ni%sF\d*M9G_pX&<f;''hMlhoOUT!+d#Rg\4T0NDVs1a''as8S]V!<3$aJ,i:Cs4)W"rr?HB!)"h8b$jVZli7""J,ma"/,oT7J,oTL@))dB!''l&7"Uk>1Eb9k%!3S+Cs8S8+^l/6ma)aNGs-=)/s8U*__#FCKo0E?UP0C_"rr@(OJH,XHbeX)^s8PkN5lUh$1B<@5!''AF*rr?ml5lUgG-:%V2P0C`A!,XMWMZjLc&_dPKD2;L^I0a*`_2d<EMt[>[pC@K:rrFtg!<<(ii4t9N!(@Gas8P^S!<3$YM#dPU[2AuE!&oFYMuNcG+i+-Wb4#E2s./)`"Uk&F4])"_`]a2>#7J/MZFdb`Z;hueMfaJqH3gQe"d>4<OdM%4rr<R[!<3$;J,k.7FEr.Q+(%[M"q+5W#E/W^jZihGs8$G[s8USI!<<)0Q@T#8o5+I5>R1!4R$P[Kbm;,j$i:]>#)c''=;YLWL#eC9@s1+GGrr<Ik!<<)qBn63`.d[4orr=!g!!q*Z$i:st`qKg:g%QKl$iJ./prWdKqZ_t$qaf+m"Ud-ds.3hQis#n70OG&>Uj1&0Vi8Y;D?blGM19E$s8V7^5`>[Bq5V6#Mlm<n1]RKHAn^3/$i=6(]DFsRpV-PdMu1Qh,`@TTa7m^N3r;1#"Ug5:BI!C*:''g_''pY>KQq[<_[`4OobpC%?%?Mbf<3;\!uC\ntG7Jg(+Mu*aj37:V/q[`Q6pX/^B"td,Bfo,SL#koJ!pAt"%pE&5h!rErY$i^6TJ,oHgr#c7A(#<ZN*ib.*QG&mr>PAd7CjZ3^kmd]Fs8Vf`!/l#YMl)F4!"aY\#RgAFr2T^4pEo[u#7L9:q_ac<+<LElrG_KVpT+$E#5=+dpDiK@$i;gU=SFTUlb%R+9l=P>"s43q@oYTFDpRM,W6sbmU,,7[$i<<?+nnJJ`J_?rZ_j+6Y''$n*W/ImF\Y''4?pBG>SMtfI4%uZ?T"_FcFRRW8B+T!E`qf!Vbrr<2qJH#TMVh"dI$&1_F!!=dfrr<:^^l&Ku!!XZ5rr<2O5l^l_joGG]q*i(@r''''irpV7$uZ+8H7Q=!6*Mu7Vi*bL?*Rg&O8=PEX''*`n7hH#I/FS9),<MfXenKP,`>$hrHR*rESTqZ2+^0J@gSn/h>@q]>Xi#Q#FC/b`oX!6%gNrr=RP5lUge&-2_1MXUTe$hn]=28f:kqZQdJ;u:SVr,hZSpNm.KFKp;1M[9%WpGKn`GTR=f,1iX)_:EAu)#G"3CK=>%X7m5J$huOT*;hSt6''?#`Mt%)I\GIEGdg(g..-j"i.YS0*<VIL-<<r7IOmLh\pEp7@e,(9b\-Irh"CH:GKa8&\Ndn6jU''ULDq\o?^#E*VPBhX=RMgO09aG]d)`m<#[#l>@B"XQKOq`B^6Mu,6b,52t5bDX$0Wj8X8]5c&QpDStFp5AYuMp-&4.ja!Wq\<QDeipiAMu+!B<dlknM[0^cnFuqV&c@mlD$LH,pTaJ''qm#m#Mu4an%ep,"oD:t7qm$%!Mta:L.Z95`D$:=A\bM,Ar/CA"Mi7CJq_!g([JY]9pk8MoMi7ON"Uk).q/-!qMu,d:mJB0CmJAi#pQ>B3qZcq@"Uk44pF>pB#PXqhZ1gqMqt^!spW`I(q`''N2M>O?3pT+0@Mi7J5qhb''Jq`''N.c27,0q>:`s9T''&^pE0[%e\JNVM[7tJBN/#M=o/4A5PklZ#4\ir:ejr$0HVU!;RV>5#l>qQPl!0.2YTt)pJ?eB"65=6.#Zi!]hPW;X.QkZb6[hd-JePdqZcp_B_u!T$i>)@.f!rY/,TqT6O.72S%0X8dJGEjf*<\l3qit&$hp%c.fF5Yed(q#hV7cOpF%oaq\gOapEKm,YbC=U&W?"6cq9r-":4n6q[rS4#(QLe8j=MX/rNQAK''3L;-3f_34801.pIU8KpL!Y.pF#]apON,TpF#iI+8\''Vq[tH/q`"ihqsaNfpE95qpLFI9qc`_:pK@gr*W''%77uR7YpUp5hpPA\pMu+@g;2b0Gq]LfTqbd5-pJLf9Mt][;M#1o`]_=pS"Uk74pG<-L=81j8qr[VqMi7A7q_X6.=8V-<pZ;VeqeHH6(\[uKjW=.''q`4BnposW<qjRBj#%r(>[ib?Z#7L,-_6.lc?>X^_+8Z''C$hj]dh"rH?qZ-@^q]Pg@pTFeq25g#h*t.s4qZZ^]#(JpK?r;h^Mf5J<d0TUf#+59&juW5QM[9&6kk"O<pIm13q_]Jm)iHL7Jbp8ipDO7*d\`n[MpI<YA=5Ue$iD1QR.hBJhY.)0pB-?(3goj^#Rc.Z(-XVQ",m$YMa-*KpD=/Drr=fK5lUg`r]pJ`/$+:$!+6d3rr=UgJH#V9P/.(t-+<mSs(19,rr=9q!<<(k]R^"^0aPSps/iPV#koMIiqFhp''DJ5ZpWNp?,mK;)CJXh455R]:pIeZ`9T/X<#l>kOMu-(AqarsI77HrB?M@!KpMU?7-3fD*ddm:0htnQ&$hnFpVE+A]M[8SQ.#VR-qeqDi",m$`:Q,)n#knc4a8Z,pGCZCe!&KF]*Xg$=#6+ZA^]9;m!%Y/Os8Vq0JH#TXP5tX_\X%aO\d!WX%8rK`M[3;e$i^2T:OrHF7f1"$!!h\;rr=<K_#FBM!''pPa:#/)7!#FS0s8T@t5lUfk=TJL%h#7<R!%j01s8TR[!!r<A#3Y_=]D#fnpHT#]+9mc$#''p)-=8O%?pDS&G2N-&jq]H*$6@8Sf<;RS3pDS8M4,`h?#l>_KMu-D_qc!"]1^FJa>j&]m+\q4ApE*Z''\t[dRmfj0o%gK+RYA.fiB5/Iq8]q?ss8U?''e,TI:3L^!Jq&85ls3Sbts8Vdo9F,&3nX,TOMo>tA#7I<ja2$\mk_mG]PV*4LOe/&`g5E_(VKJA*#Rb]+:KB<1/rNQAK''3IJ3VQe7#7JQ-qcl/$+l*>1pH/6oq_/85B6[]n>R:46pTaTQMt\b!BE^Iq@/CLn=pY!\pE0,X#E-''_\?`^PpKd[$pG\$-/GEf]Z_u[S!/ob@$i<Qn#PUCdd!i9]V#(6"qi:QkqZlnqpBNDHQNq=#@J`!O8s0GfS,49$+H''Y&%L%9uK(gAaJYi]2qZkUTollIKUFZ\Bq`FZ]Mu,s?<qen<"Uk6RpE00UhY.9QMu*_a$iC&"+8?0JC\M97247!u#lCIq#PXVjd!i9]V#(6"$hkb;nbXC4$hkb<m/%k/$iG;E+8C-<pBUT:qZd?6pRh=)qq),]r5n[TpsKDs<;/!A@NPDLqZljj#1:Ri:*0l@P5?''m#PXtf"UFc@q[;`e-Q`0#qZl6f6i;6(+H+_DH-hHQf"Y<Z*t.t+q^;7GpTjQ$#CuPKqcp3qM[91b#PS=YRR!-E#RgAgq]G\h#E*>=?=/Hnq_%Vpq_F*(c2;ka[#9k>#PagIq`=J;"nAXtk)6t[$\aOtqZmAONNJV`W6DEHcBd2jpXoD5qZlm-qcjAN2g]^,HO(#W!V[]2$4$;78+c[X*rBIE#PV:(d*#Q\*t,`_Ydh2XYZb@FB3eiIB"8uk@&S7e*m]b7\Xh<Cd%-d&%*8ePh=h*JV=tVs"T*iK?3anf@sV[-GefT]+nl$iD,*ns8;F4"VM1[qVIAIQM[2!5"ORFRRpe2sMf4GtLk8/EJr5J!Md<3%_MdrBK(f\U]=uY3_p>cc?^G&V>6p-Eq[$Vf2$aTa\bc[;+G^1QMbUNpgB\2b.0c+4#11<_''8uSpMp5.bqZ[<6i:d@<#(ZG:qZZQf:5f!KMu*bV!e1#1#XA1hecu0RpeAR(!''OFLs8MPo5lUj9Vni$?i77Q(*fJ0W_G.Yc[CjJWh?XMa*<ph"s8VQ6JH,Z0oDnpkmP''1ks76X!<+Ge3Hi#a[L:W5PMmis"]SkU-f8BpT_+.R4BQQ]cq]^r''nSd4h$hjc/9lWgT8;g0"9:8>J#l=f2b&GIOa,Ao7fVPmA#Rg>29lNaS8;g0"9:8>J#l=T,b&POPa,B)<e"j:;#Rg>29lWgT8;g0"9:/8I#l=T,b&GIOa,A`2fqZ!F#Rd;YQ$aW`MfM-2Mu*U7-I?J.X0BgppH+;]MoCFZM$Wj%pCR''%rI=\InHYjRZr=nV1gF!ZFA1`l;"o!XdYeD*)S#MKW#lD*W->FT[4pqs]-WA=MfO*$BT%2''HD5c\0SZQZmR@Ji?3R3FS:-W[NJis_MjF\WBr?9o*h3G''N3A;/MsuZ!,uM:4P)G`hMjfQfJtI@h5kc>s&FfQ7M[3*]F_>HbHG1JkMk#j#MnP&C6qb0DEgLg4Eg?tsX9D:o<g[9Q#_*%Z@<?6+$\cEQ\;IKrpa-3!I!0REC.h>jLGk%r$fq$br9FQrpF!JhpDSsjMk,_!#`6''LTpUb6Mno2qQu.fg.uXZ/Ru:5BH@\6c1]%=5#5gOV5l1c[;tgg`f(T:gN<bB`Cr/lVi4uqcR^<>.[YrCmk)0MBlXN1tF^R$Jq\4rXpD\Fh#Rf3ba#"i.MgBD#MdVH[OEd(4W.hU#Mg:,1HAcWu3S.KsMi`jZN0&r''Q&Cc\N/!E@`d+&3Q&D&oMjK?lGdNBuO1_ocR>\)''Sp?H1#_m;NEI`(qJ!G_OM[6>m[`om%>d!repIcRaMqGGch[%X,4SK,>"`E:2jBh&`eZ.Vpmg/U\"T=#N"Ser#L0An&DG1=.^]e)J=.E*F#l>;\1]%V''$c0<_bT=3NZ%/ot#ffsL;ERie;MtfT=gcEp$bpK1@97,#=WWK,T3R:XM`5N^:lBUWD4P.=W779@Mi=.9PI$1K#knrXX)B%6qZP.JVh^^sMe%`GE''%&DZom81iJY1''\Y6XE[:6FbY`#35W04BQ#l=f""o+qg''))P+KD[;+G]n1[DMqVTEiY,BMp8?AMnTH)q^,r2<ArT*ocMP=b+Ze`VJ2]>S8JW,#mP(kCVO_fVkM&PMpVgq5K`j.*rCB:ppg&$rHS2BgA=>5e-==''H>"CYDL6;:E(n,PX"]G;$`Tkh\fS#4Z?s#p?"e&0G)HW=<g9^.$YZ;SYTC"QPkt`oq_\%eM[9%pmah+9+8>$o(&%k0MYdPORJS3*XJuN*Ga`/62H<*c$Rgp7_M7dc#ktD[#"h:1<ZVXn#NL]NJ;\Z1D`ibTM$OJ\#?6[LOGg#pVT"SCN!KgcY6JlB@W#/'':l@uNBY4TYpOGX.%0fml>/,KX#Rd63R\V#!oCk`K(&%k0>l+Zu!sY3,SSk*B5^-gIMb&aZpCL6)L;<[/pC(rLMl_iEPeW^oUtl2LJ741SMb/h7Vg$#apQ,%G"9s*kW1>"<=GnH/50EU0pC?#]pI''oF\G&Je%eg,)?i(!$F[$(.LAM++4^DE9,<TB[Z6]09.JF@2b)=EAb/gHUR%K;(MkY]fEf136Mbu\uM[0^b!8gR9=(Ou#/g"2R@ZtSr@%VVBMmiuJh88h+$i;4D)Dh+KpHA6fk4^#?MnjN1-2Vko#gi>#pB:GBqZQZ57L/g3@!DJnMcC#jC8>gQ*i9.''6_7/V@+cmi=S@XYpEQKo_V%Ss.j%?@:i9B5JYcq_K[gA''#5<<8''__b/C&8&.H2@gCQDb"bGaW/=3*JWi$Z(`=P&H_p\!W>ZM[6SZIW9ghG[)<u>(6>M@9/:eMu*mV9@LQ5d@I@sYD_LOYZ1t)pI,:iJ[C$?KF%#Oq]2RdV-0Mupa5_<rIt+OpHf(cA''&?W.oHX^#@XB:QXYmM-Asq^.<8M>qaC0rH-qNUl1Zsi[ASP8D''''-aDfoDlXE2T-Z&?,Z\VgaFpB5Y"=EA14+8Z(sqZP/>MfXf(J;&+OE;)`s"nskJ(?*p?#TeoLBY[*C^UUGgSCn2;pBCM$qZZbL#''3IO3\u\(M_:i/M[0^cV=tJo"oVj+"nr0*ODKr!Mg^LMGVs(]g+_;ghM]C3`L+T?#U''E\pQ[$$Ns:Q*Mis!^MkGp(L91^hpS9YN957IR?]/*G?_:l8Q*-:GOI?F_ArB\p.#[sAMeg:dpBCou!r&&U%JL#(B_qr-IetPjOf/JaGa`/<2,?YQTm4!eW!8C]%^5a]pOeCu(5q/)MmJ;!M5tcW#RgF(pCI!$rCm(kn-=ttN-C2(MbSFZAh:k]l;-Q#`J_X$_PIP8(^CHCN;Ka^9P[^V@Z+ZQ?_:W2W90PoMn"\;MP5j$#RcRf,3<J3!+#s(#?I[7SVtu''`m3-,[.bDV+WcP.BmE]u#U''HB[I(;YpE>I^48&J#W<h\]de<nC:&>(fTJ$QI-#>XdM^eu?./O.s#.''qF@3:D74o6CX9t!1X>OdWkMo;%#V?m&:pB:8fpC-d!qgA;U#>Sl2G[-/3Md2cVXhFH2Ust=,#h)T82''*,j=&r@<<2*[Qq[<-NMn4h^S&_T93qi^NV=tMp"T:O]"O%+D1p^i==pPN1T_f2q,6gTGBq0@e#RaRh?Cbf7\@/iI[%Rd"0errVF$4#7M[0\Hc;O-QfSe1Tc,#upQ$&",Mb@)Z7Z7-[Mat!bM[4<IIsXNV>@>2<pFs)N4WfU!G.M(g_8W@mON7^spB:FWqZQ\+#)-?6I:HScZ;[AjM[2$6$>oYF*t)Om?@#b4#\A7JVQ-P``#kV0Y_g)-#Rah4Ekia]MjsH-PJIP!M>NV5"Sehf(\\(0L\mnEIg1gi[&*L;>L+iB+o;E9#+h)k4s,^[1b1eK5mRk!>5&F%%egHk#is%Nh]L2;qipgYpnd^#pB:H.qZQ3iO*$D(MfXe[JQ,VG-3t"Rq>3)IDu2*j@"EKB*aFV+VH1R:ignVXabusOUP>QM$gbmapB2T4p@f''k"T;$k"ScI''"T)a8qZTl.4o5ic9`%W[.j#.3McHu]^ODPL^5JNfUR@IH*qsII-jF40GASB/Mu+Xk-B=C2S6F,5%eh3+Sr:"Ab+K$:jonM0@YK&b</Y(HC!?qXNqN;Q#''b-cS"QL@\KCSCpI=lepB:F_qZQ[s6i2uMBDWcoqZ.cH@''+1U*k%!*X..<=YP/e+NJi_lPP53<Mtj.C''8qeC"T<M%Mu*YNMkN*6P&HA$MfXeM/Gh2\?jI/7W;ALMM?\pKJ\cWQ#Re8JYI_>XYZuHGIR@ADB=]/mq_.\>q\&W?eb--?*?OtMpD!?)rBL/^peUeU#@)=l>5JXhpBA!uS!L,sc1_?,#5]<[,&n\4I9M,$I[+''O^m2U#^KHqQ*t.hDpDEW-qt0agpAk)k#7EmlB1bchYLCtDYKY56B1!^J8n)!q87&jPbcT%:e?i"A*Xh]Qq[iW8#7LELpDs,fpM0G@pDEWepLPD(rr?D`JH,Z5(4cDb;L?4Zs4&:nrr>:Z^so@`!%Q$>_i)]rO,K*WP6h%0#**qeJW"o6s8V&d!<<)qBE8)4k=rbls7FWfs8VHJ5l^l%!^Qbc4\ENis/Wk!rr=7d5l^kS#QTbgqe5jJq_\1j*t/)K![b\ee>]jnMp%$>Mi`g[#l>eMNd-M6MgUH_s5Wf<s8VsR!<<)__1;Rcp1_>Bs6Ybqs8ULaJH#U)I_c!`]T#2V!#n''$s8T+2J;X^13@=V(qaLBOnG<4[3qkW)pAt"S+,g.!4tZj8s7DHSrr=oh_#OH"7mR(S.r%<T$hkG63mijOpGrHcq\"fQq`<,_"Uk>1I=Qi%s8S[s5R7>hJJJ6]s8V1<5g%KPrr<(6!<3$uS%p(_#)E6Ymh>bYs8VO%!,d_ps6!BIMuWhQWkeW7(\n&hrr=cX5R7bBqaf+mFn\E1$hk5p#E,RA\Cd2T\Hc,j3d$AX":4l8#7LDJq[WmhqZP\s_2&B-#QOh0l+m<!%Ru!Ks8<]urr=W2J;aF-*In+qgBJ$G84Yd&c:HgIcd(8%8^019$aZjLA7]OmA7]PVZE^I1YoaAO3;nc[Mtf=.MZjJK84Yd%c:QmJcct5%8^019$aZjLA7]OmARoSVZE^I1YoaAR!$S1hs8R[g!<3$jo`5$lN^Q/4!&bXDrr<OX5lUff5J[:!L@mh3s5$q0rr@J1!!Nc-&?7,P''))a=jS''Pd%rh.;(Aeb^-2S2o$i:3QB3eqdV"YSt&#-/7[A7g>(ENt]Ll5a>J_Z.eQ(Xe9VMb_jVefI<DJWW$A;bT%M6.%=#)tph=QGAGmEWl;i_d`S+)QpYK5c)ARcO3?MZjLc(:,mm%HY^TkM9.U4W\0mEe/.JNm<d*cASWZRXg`D#i5c6m4a`>M[2X#BDYgR$aljK>[;2]@q''AW\@ST=[3#eReNikQ#&eH\4aCXT9m]fg0aQnGPP6!,o(N.Y%L<Hf9tWDC9j1(/Mdi5s[!,SjF_cn<#Wg4/lfua4g`DBeFfST@[@s+eMm<TrZ_qn[CN"9(A8\0DX/D\u*t,TUE*d!lE*lskVR<n2VR@QSpD.8tq[G8S9.r<A;qW4sMklW9VMIcs;Fl^`MgUh?V?f-cR479NX,@85lEBqb*t)LrWOfX>XL#:3CL17aCLJ:mq[)ut55PBX#t4LoqZ5@D!VZm)$ig775QLiaO,X/>s5;,:s8Sri^l/6mS;b7As8SSNJH#Tk1I2!?VG+f*!(t$,s8S.=^^/-gs8T\KJH#V''k(*L3l/mNr!(b>LMuNcaN51AO!++f<rr<fPJH#UA)1__e7-9%"!/-bj#RgY49#(H,!,uuZrr=,s5lUgeZTsHK!+U(8MuNcf)1_bei69":!*QWns8TJl!<3%<F$L"''#6+Zkk(*L3H5V85!#?H&s8TPa5`>[BTQ<AVs8Sc1JH,Z6k(*L3[H<#>s19/!s8RFXJ-ZP[_Y[R7Ac&t6W:s''aFSF&Sc1b''/EVHO.\bf.rA,FLm$i?Ll8c)''USGT#W7/''FMR.lsA9(u*TSG/NI8c(RGWu_ZHg&6!MMtl!$Es2sOs,5:jMuWgq%pT)6e^<a`s6E1Ls8S_8bR"4K@.:H+rr<IlI/a0pZS_[^(@\+!!"R5srr=]W.?"3+-,"8Urr<U#YlFas@7Z=Vs67bOMuWh)@7^Fu`s!Oas8<9es8UieE<#t7dHh/=s4%g1s8Vmr$jH\2J@K"es6>J(s8V?-_#OG*P^JDhs5BpMMuWgs8$;jl/7sG4s4GAprr>@?%u^Gf.dMeHrr=<2OT,:m"Wm[D/7rMo!%7HVs8W&<Y5eOok%9POs85R9MuWhRdHleks7i"Lrr<(GirB&UO''_hd"1''c_s7b:s#lamE3)Y\7!!;i3rr<IlH3O?Ko]Bcc!">*>s8VtW>lOd1T"''^Y!"0[5MuNb[E2<L6!53@O!!Othrr<(Gir8u^l\5]F!%skQrrCmTrWW<%!qjG1!"Dflrr<(Gir8ud)4ZWb!!qOOMuNc%KcpEqkmq&!!&b!''s8Ro1.Z4Q?s8VYm''`\3N;=+>_gj7u[s5!@bs8U?H''T<"kgj7t<s8VJ:!<3$-P^JDh!#TL)MuNc$a0>RD)du8:!#TL)rr=_jRf<?n,M3;%!&3"4rr<<LfEM9T(@\''u!!I8:s8W*cOT5@[KcL*m%$Z/>!!d+L#RgNgq`"C:qh+chpFZ89pQYE;pFc23pNcLdq^qP+qii01qd0.>q]G]@qdK@?pEfQ;pKI;4pEB9;pK[G4q\8pA*Xgj!nVd;7k)5/m>l,P"2uE/''p[\2%Mi7L<k)5/ln_j<7"Uk5Qq^@A@p`oYaMtCAFpns%.i;BI1[[I@-q^D4aDi=K@r$1ilR^\4QVr3JkpnjKf"Uk)MpF(rtr$1qaM^#WXr25I22Ya/-@!i+cpF,qaVi19tp`gu@Hs_g,V`''Hkr2+kM"UkA1bZ2U]!!s\Bs8S)I>5nR0:+6/BeBH5<!-8QTrr=&]I/j63Rc48H+kW%Zs7@TZrr=;;"H39[;7;:=rr>AWGlIb/q,iRT!)a$"MuNdsO_Fdp2o_frs0oO@s8S\B9`G-6+UJ,JQkJrhrf!C#s8P2W)ufn,l26J>s#gf$MuWgZqOmig6:euns1\_Frr>p*5)T^H!$h+rMuNc#f*hTY$e9h.!$*+;rr<dD''*&!^mb7^@O:([\s-D7Ds8V_''UAt81:o+-koc7''=s8U,!JG>Z?$ig6fb`)Q%''QR[_s//O]rr=32FT;C,EjG]FIReqg!$N&&s8Ua-oD\eH:RqIbf5l*7!([Z3M[9=_@B\Vh!)??5rr>rD,Q@aRK\cY.@!"I0s1*[drr>lR`rH(7IeY#bs6_q@MuWhI^HDPrrDG9Js76-\s8Vu3!<3$(K\ZS-''+03g!!IpRrr<anfSfb0(K>bfrr?DlaT):DV5!ti9kcTes.3D#s8SZo?N:&/V5""iZBn8bs.F&4*fL''ukb*V/!!J''-s8VCt.fTJRMhV32m-[pSs76tVrr<0DIfKH<*]<rt!pY77s6dFdM[9@_Uk$2Zs1*VGs8T9DFT;B5N/[f:S9lL\!)?=<s8T3Sh>[I`Y_+%t!&sO1MuNc>OXL//+*9OC!%2-frr=XD6N@)N)PI-1JjO/Ns.`VNs8V!i)?9`%WOi-0lo%<=s8U,I^A+?+$i^25[`\XMl()Sh!"!?4s8VRoIfBBX!6"p;o/;+)s8Tc!O9Y^b%;.0j!"@sSrr<A/T)Sd$^V9^J$AKi+!#@#P#R`gi9KkY_9\A"?b1P??b!$mTR[KS4R[JSOI!pEjI!qEO*XhjWpHJI<pLa/3pHJ=8pLa/3q`aa<qe#_;q`am@qdplWq/#p:rG2]H=(,N==1)JO^U:Ja^L=NO*t)@cAR/THA\#@VZ+7DVZ!AFZpE]J=pB^L=pE]J=q[!''Eq]u%Eq[!''Eq]u%EpB^L=*XeF)R@0P4I=-EjI=$BjR@50)qi:^VVo.)Ds8T,hB(q>c!*D?5"Uca`Jj>$$Ll#u3EK>7##]r:S3`N4l_&pmZUp6K#X+T%d[>U3+Vicn4Ml/nZ<jJ3kPa@a2"pbU(R$+6dpKQZBB_s"Y:MF3S+,a.=KW''F"H$h(8(5oY[V4WsYEe8FgH&G^]K"?`-#kntIqc*i;Kpe/I$hrl^+8b(''1+>sg*]sZ,s2-WXMuWgs8:^^?,r*48s5&Dorr>"''5R>O;[J);OpF@?[C&9"LBa83gEFKtZpSn$3qr7n\s*!(Grr@l3_#OFb-@l*rW?FMJg''7:OpB:4CocFS=(''do;7mS3n:AY:j=U+V+a7h:8+87/gb?4KsqdpoH=o/Hu:''T@g7opc?g''@WXaPt#8!%/dPH6j[1(^DH]G=`kQN;EkSPQq-f7T;YQ!5GSMWV9R<pEU"9;YL_!@35<1qd0R),52Rp`u`J!#?D%9J<%5`$NL/,!!*''"!"Ju/!b;A&!!!!#!+Q!0!.t7P!/(?*!!3.S!/ggX!/po:!!3.[!07*\!0@2B!!3._!0mNb!1!VN!!3.e!1X#i!1a+\!!3.l!2BMp!2KUj!!3.s!36)#!3?1%!!3/&!3ZA''!3cI-!!3/*!4;e-!4Dm9!!3/0!5&:4!5/BG!!3/7!5ed;!5nlV!!3/?!7_&M!7h/%!!3/Q!:9ae!:BjU!!3/i!:p0k!;$9a!!3/o!=o/2!>#8D!!306!A+9P!A4C+!!30T!FYs/!Fc(>!!313!H8#>!HA-\!!31B!aPd,!aYq8!!<:1!dXhI!dauq!!<:M!hTGn!h]V%!!<;1!jr"/!k&0@!!<;6!kSF5!k\TM!!<;=!l=p<!lG*-!!<;k!q-*i!q6:&!!<<7"Jl)!"Ju=!!!3;$"P`tX"Pj4;!!<A]"U+l,"U5,7!!3</"U>#."UG8;!!3<1"V(M5"V1bO!!<B?"Vq(="W%=[!!3<B"W@@A"WIUa!!3<D"XO-L"XXC#!!<BQ#&4,=#&=E`!!3@G#''9hG#''C,t!!3@Q#(usW#)*8?!!3@a#*o5i#+#Oc!!3@s#Wi"e#WrAU!!<Kj#X8:i#XAYe!!<L!#YG''t#YPG&!!<L,#^QIO#^Zi4!!3F^#q#]R#q-*2!!3HY#r2J]#r;lE!!3Ha#rVba#r`/M!!3He#s&%e#s/Go!!3I.$!.*-$!7LJ!!3IA$#0G@$#9ii!!3IM$$Q@M$$Zc$!!3IP$).D#$)7g%!!3J&$)@P%!%\*Q!"8iA!#tta!!*''&!!,0C!!*''&!!1Q!!!*''&!!*''d!!*''&!!*''X!!*''&!HA-\$#p8l!!*''"!!*''"!!*''"!"&`"!R^rS6q0jL!''"D-D/K>A@sN*2!)dH@DfPhaB6%R!!,-"fE\[W8B6A6;!/P<"@WDI?CghF''!3Q;)zs8N''"!!WE+zs8N''#!!`K1!!E9%!!*''!!!*'',!!E9%!!*''!!!!!%zs8N''!!!E9%!!*''!!!WE''!!*''$!"T&@!"f26zs8N''''!!!!"!!3-2!"],B!!E9%!!*''!!!<3''!!N?1!$VCH8Q/>+!%prD9csEg:/ak0!%q2C;]l&mDJUF<!&afWs8N''$!!E9-!"8i-s8N''"!"Ju/s8N''"!"Ao@@:FD$!,c7^G@ghs@Vg70!.&-bD/]K*@q0@p!/>$#BkIF+Ao_<i!0h/5BkIF7BP_Bq!2+.BB41e;Ch[Nj!3C!NB41eGCh[Nj!4ZiZB41eSCi<g"!5rbtCNKR!E-$,5!75\+FE7H5!!!!"!"f22!!*''/!!!!"!"],1!!*''.!!!!#!!3-&!!!!"!"/c,!!*''(!!!!"!!rW*!!*''#!!!!"!!iQ)!!*'')!!!!"!"&]+!!*''"!!!!"!!E9%!!*''''!!!!"!"Ju/!!*''1!!!!"!"o8F!%7h$!&ssF!(m5h!*TA3!,;LS!."Ws!/^c>!1En^!3-%)!4i.5!!!!"!1Elj!!!!"!6tQI!!!!#!8[`!!!E9%!!*,u!!E9%!!*0S!!*''"!!*0q!!E9%!!*0u!!E9%!!*4G!!E9%!!*4W!!E9%!!*58!!E9&!!*5H!!E9-!!*5X!!3-$!!*5h!!E9%!!*8e!!E9%!!*9D!!E9%!!*?@!!E9%!!*?P!!E9%!!*@W!!E9%!!*A0!!*''X!!*''*!!N?2!#,DQ!$VCk$#]eG!(d/d$#T_F!(d/a$#KYD!)Eo;!!3-o$#9MB!(d.k!!*''k!!*''4!!*''*!!*''&$#fkG!*9.$!!**d!!*''X!!E93!#P\[!%\*N!!E=3!!356!!*''&!HA)@!kSF5!!E=4!!356!!*''&!HJ/A!kSF5!!E9W!&ssV!*B4%!6tQO!#bhg!''UBZ!+GqM!/:K@!3-%3!!3-)!"8kG!!35!!/(=R!hoYr!!WE3!7h,O!i>sV!!34r!!3-)!"8kq!!35!!0@0^!hoYr!!WE3!>#54!i>s`!!34r!!3-)!"8l\!!35!!1a)k!hoYr!!WE3!6"p>!i>sn!!34r!!3-)!"8kZ!!35!!3?/%!hoYr!!WE3!:Kmh!i>t%!!34r!!3-)!"8l?!!35!!4Dk/!hoYr!!WE3!A=ES!i>t2!!34r!!*'',!$hOm!%\+*!&ssH!([)`!)`f!!!**I!!iQ?!&ss^!.4d<!5JTo!<`B*!"&];!#>PS#&aJC!iZBD!!34s#&O>A!h]a5!!34q!!E9/!"],G!#u3"!!35$#)`H_!i#sT!!34p#)*$Y!hfSs!"&];!#>PS#+GSo!iZBp!!34s#+5Gm!h]aa!!34q!!E9/!"],G!#u2^!!35$#''''\F!i#s;!!34p#&F8@!hfSs!"&];!#>PS#)WB^!iZB_!!34s#)E6\!h]aP!!34q!!E9/!"],G!#u35!!35$#+ber!i#sg!!34p#+,Al!hfSs!"&];!#>PS#''g1M!iZBN!!34s#''U%K!h]a?!!34q!!E9/!"],G!#u2h!!35$#(-CP!i#sE!!34p#''KtJ!hfSp!!iRX!/poD!2KUr!4DmG!6"p=!$2+A!"&]?!!*''&!;$6m!%e0O!!E;p!!3-p!!*''$!%\+D!!*''(#[RK3!!**/!!**A!!WE9!-A44!6>/s!=/Z4!#>PU!%%[u!&ag@!(Hr`!*0))#_N*Z#OVR2#_N*Z!"o8N#_;sX#OVR0#_;sX!"o8L#^l[T#OVR/#^l[T!"o8K#^ZOR#OVR-#^ZOR!"o8I#_rB]#OVkQ!!3-5!!E9/!"o8M!$V\t!!<Jo!#Puj!!<36!#Puh!!<Jo!#>if!!<36!#>P;!"&]=!#bh]#_W0[#OVR2#_W0[!"o8N#_)gV#OVR/#_)gV!"o8K!!3-)!"K9b!!<Jo!#Pul!!<36!#P\=!"&]=!#bh]#_`6\#OVR2#_`6\!"o8N#_E$Y#OVR0#_E$Y!"o8L!!3-)!"K9h!!<Jo!#l2u!!<36!#kn=!!WE;!#5JL!#GVP!#bh<!"o84!!iQ*!!ETV!!38:!!*''#"24a9!&afY!"&]W!!E9/!"],G!#u;f!!3:^$$-(J"H!M+!!3:V$#oqH"I/rf!!EUM!!3:g!!*''$"HrtZ!!*''4!!*''*!!*''&"Ju/#"JGer!!*4U!!*''4!!*''*!!*''&$$ZFO"L%k,!!*5V!!*''4!!*''*!!*''&$)7J%"N^WE!!*59!!*)f!$)&)!(Hr^!)`f!!+#Y9!,;LQ!-S?i!.k3,!0.&D!1En\!2]at!3uU7!58HO!6P;g!7h/*!9+"B!!3;S"M"L6"P*^e!!3It"M"L6$(V41!!3;:"LJ.1"MP#G!!3;<"LJ.1"Mb/I!!3;>"LJ.1"Mt;K!!3;@"LJ.1"N:MN!!3;C"LJ.1"NLYP!!3;E"LJ.1"N^eR!!3;H"LJ.1"O.(V!!3;K"LJ.1"OR@Z!!3;P"LJ.1"OmR]!!3;R"LJ.1"P*^_!!3;T"LJ.1"Mt;I!!3;;"Le@4"NU_T!!3;N"Le@4!!<O[$&/E[$&JtT!!EUr$).D5!!*''T!!<30!$2+g!!3-)!"90J!!3<=#q5iU"Vh"<!!ETX!!3<=!!*''&#qGuW"Vh"<!!<B-"U>2<!!*,_!%7hJ!+5eA!-A3i!/LW<!1X%d!3cI7!5nl_!8%;2!:0^Z!<<--!>GPU!@Rt(!B^BP!Dif#!Fu4K!I+Ws!K7&F!MBIn!OMmA!QY;i!SdYU!!EU2!!3<3!!*''&$!I<1"Ub;2!!EU4!!3<3!!*''&$![H3"Ub;2!!EU6!!3<3!!*''&$!mT5"Ub;2!!EU8!!3<3!!*''&$"*`7"Ub;2!!EU:!!3<3!!*''&$"<l9"Ub;2!!ETn!!3<3!!*''&"W%.?"Ub;2!!EHB!!3<3!!*''&#seOm"Ub;2!!ETp!!3<3!!*''&#t"[o"Ub;2!!ETr!!3<3!!*''&"W7:A"Ub;2!!ETs!!3<3!!*''&#t=mr"Ub;2!!ETu!!3<3!!*''&#tP$t"Ub;2!!EU"!!3<3!!*''&#tb1!"Ub;2!!EU$!!3<3!!*''&#tt=#"Ub;2!!EU&!!3<3!!*''&#u1I%"Ub;2!!EU(!!3<3!!*''&#uCU''"Ub;2!!EHE!!3<3!!*''&#uL[("Ub;2!!EU+!!3<3!!*''&#u^g*"Ub;2!!EU-!!3<3!!*''&#ups,"Ub;2!!EH0!!3<3!!*''&$!%$-"Ub;2!!EH2!!3<3!!*''&$!70/"Ub;3!!EG_"SD`p"SW''''!#>_C"U>#R"UP>>!%%[H!"o84!!iQ*!!ETZ!!3<=!!*''#"Tn`*!*T@)!"8iS!''gMd!!iQ7!#,`O!!3<=#r_hc"V:tr!!3<7!!<3,!"JuC$"s;?"Vh>T!!3<8$"O#;"V1S8!!iQ7!#,`P!!3<=#rhnd"V:ts!!3<7!!*''%#q601#qGuV!%\*P!"8iC!$VCD!!EU<!!3;[!!*''&#s/+h"V:ha!!*''&#s81h"Ps+Z!!<A_"T8K4!!*''L!!<30!#>PW!!*''&#sA7i"Xa9N!!ETl!!3<O!!*''&#sSCk"Xa9N!!<Ab"Q]dM!!*''"!"&_3!;Z[%6q0jL!''"D-D/K>C@sN*2!)dH@DfPhcB6%R!!,Q:jE\[W>B6A6;!/,#s@WDI/CghF''!1Eljzs8N''#!!!!#!!E9%!!*''!!!*''$!!E9%!!*''!!!3-$!!3-''zs8N''"!!3-''zs8N''"!!<3(zs8N''"!!3-''zs8N''!!!E9%!!*''!!!*''$!!E9%!!*''!!!3-#!!E9*CLqO(!$H&gEc(k(D..I#!%_tqEbbY1D..I#!''C5]!!*''"!!!!"!!*''"!!*'')!!!!$!!3-&!!`K(!!E9)!!N?,!!`K0!"o8S!%It(!''1*H!(m5h!!3-#!!E9m#uV<Y''ik;9!!!!#)$h*Z!!E9%!!+!S!!E9%!!+"$!!E9%!!+$J!!E9%!!+CO!!E9%!!+We!!E9%!!+mG!!3Eq!!E9%"$d#&!"f2Jzzzzzzzzzzzzzs2=ris6TdPs5O(2z!!*&Ys6TdFs7ZKPs5O(Fs6''FPs5O(2s3CYd!!*&Ys3CZ(!!*&ms5O((!!*&cs5O(<s7ZKds3CZ2s6TdZs6K^cs5O(2s3CYd!!*&Os3CZ2!!*&cs7ZKF!!*&Ys5O(<s6TdPs4IAFs6TdPs5F"Ys5O(2s3q"n!!*&Ys3CYss5O(<s4IA<s6TdFs5O(2s6TdFs5O((s5O(Fs3q#7s5O(2s3q"n!!*&Os6TdFs5O(<s7QEms5O(Fs4I@ss4IA<s5O(2s4IA2s3CZ2s5O(2s3CYd!!*&cs6Td7s5O(2s5O(Ps6TdPs2k;ds3CZ<s2=rns5!_<s3q#7s7ZKFs3q"n!!*&Ys3CZ(s6TdFs5F"Y!!*&cs3CYss6K^cs3CZ(s5O(Fs4IAAs6Td<s3q"izs2=ris5O(Fs4IA(!!*&m!!*&Os6TdF!!*&Os5F"Ys4IA7s5O(2s3CYd!!*&Os4IA<s6TdZs5O(Fs7ZKZs4IA2s5O(Ps3CZ(s5O(<s5O(Fs6TdFs4IA#!!*&;s4IA<s4I@s!!*&Ys4@;Os4IA(s5F"Ys2=rss5O(Fs4IA2s6Td<s3q"n!!*&Ys4@;O!!*&c!!*&Oz!!*&czs3CZ2s6TdZs7$''hs7ZKPs5O(2!!*&ms3CZ<s7ZKds7ZKZ!!*&m!!*&ms7QEms6TdPs6TdZs4@;Os7ZKPs4I@n!!*&Ys3CZ2zs6Td<!!*&ms4IA<!!*&ms3CZ<s6TdZs5s@^s6TdFs5!_-!!*&Es7ZKFs4IA(s6K^cs4@;Os5O(2s4IA<s4IA(s4IA2s4IA7s6TdFs5!_-!!*&;!!*&Es3CYizs5F"Ys5O''ss4IA<s5O((s2=ris3CZ(s4I@ss2k;Zz!!*&Es4IA2s5F"Y!!*&ms6Td<s6TdF!!*&Es4IA2s4IA2s4I@ss3CYd!!3-p!$hOi!!*''G!$qUH!%%[n!!<3L!%7gM!%@ms!!N?P!%IsN!%S%#!!WET!%e0U!%n7(!"],`!&"<X!&+C-!!rW\!&=N^!&FU2!"&]_!&OZ`!&Xa6!"8ic!&afd!&jm:!"Juh!''1)j!'':0B!"],m!''C5l!''L<F!"]-^!/COT!/LW2!!E:Y!/U[X!/^c9!!E:^!0I6c!0R>F!!<4c!13`o!1EnV!"/e!!1s6%!2''=b!!<5<!5\^:!5nlU!!*)>!6,!>!6>/]!!<5D!6P9D!6bGe!!<5H!6tQH!71_m!!<5L!7CiL!7V"u!!E;U!87DU!8IS0!!E;Y!8[\X!8mk8!!<5\!9*t\!9=.@!!<5r!;HO*!;ccn!!iT''!;um''!<3''!!!iT-!<W<-!=f,?!"/f=!>#5=!>5DG!"/fA!>GM:!?(tW!"8lJ!?;(K!?_Cc!"ArQ!?qLQ!@.[k!"K#V!@@dV!B:*>!"T)k!BL2k!C$TL!"]0V!I4YI!O`$;!"&nS"jI#K"k<e,!!<Dh"mH!j"sF0o!"&o\"tKZ_"t^$2!"B,i"uQAj"uc`F!"K3c#(lmY#.XrK!"T&2!/LV#!$hOF!%%[m!!<3L!%7g_!%@ms!#GVb!%IsN!%S%"!#5Jb!%\*a!%e1&!!iQW!%n6f!&"=*!#>Pg!&4Hg!&=O0!!<3X!&OZX!&ag8!"T&g!&jl_!''($?!!3-^!'':/j!''C6D!!3-`!''L;l!(6fT!!N?l!(R"l!([)\!##?(!(d/"!(m5`!!N?s!)3G"!)NYm!"/d)!)`e"!)ikr!"f31!)rq$!*''#!!"]-2!*0(.!*9/%!"Ap1!*B46!*K;*!!WF-!*]F1!*fM/!!WF/!*oR4!.k3,!!*(V!/U[X!/^c9!#>Qp!0I6q!0dJN!!<4i!1Eli!1s7`!!3.p!2ol$!3#st!!E;%!3H57!3uU1!!E;.!4)Y5!42a9!!E;5!4i.5!4r6F!"o:H!5AL<!5SZO!!WG?!5\^:!5efS!!NA@!5nj<!6"rW!!NAB!6,!>!65)[!!NAD!6>-B!6P;a!!<5E!6Y?F!6bGe!!<5H!6tQH!7(Yk!!E;L!7:cL!7V"u!#>Rb!7_&_!7q5&!##@d!87Dg!8@M.!##@f!8IPi!8[_4!!<5Z!8mhZ!9!q:!!NA^!9*t\!94(>!!NA`!9=+^!9F4B!!NAt!;HO1!;ccn!#>S5!;um5!<3''!!#>S;!<W<;!<rQ/!"/f5!=/Z5!=Ai7!"/f;!=f)3!=o2A!!E<6!>#55!>,>E!!E<8!>5A7!>>JI!!E<:!>GM9!>PVM!!E<A!?2"M!?;+[!"T)N!?D.K!?_Cc!"T)R!?hFO!?qOg!"T)T!@%RQ!@.[k!!`NN!@7^T!@@go!!`NT!@n-_!A+=(!"o;c!A=Ec!AOU0!"o;g!Aa]g!B:*>!!30]!BC,a!BL6B!!30_!BU8k!B^BF!"/fj!BgDm!BpNJ!"/fl!C$Po!C-ZN!"/tp"mH"''"q1\E!"/uT"sO$Z"tKm.!"T8b"tT`_"t^$2!"T8d"tfla"uQTB!!`]d"uZGj"uc`F!!`]f"ulSl#(m,4!#>dL#.X^8#.b#M!!WaF$#BSN$#U&f!"Ao/!+5dP!$qUl!%.ap!%@mt!%S%#!%e1''!&"=+!&4I/!&FU3!&Xa7!&jm<!''1*A!''C6E!.k3''!/(?+!/:K/!/LW3!/^c7!/po;!0.&?!0@2C!0R>H!0mPM!1*\Q!1En[!2''>/!5nlW!6>/_!6bGg!71_o!7V#&!8IS2!8mk:!9=.T!;ccp!<3''%!=f,A!>5DI!?(tY!?_Ce!@.[m!B:*@!C$U1!O`0V"k<e@"sF1$"t^$:"uca=#.X^8"onW+!!!''s"AAe.!"],1zzzzzzzzs7ZKds6K^cs7--_s7ZKZs7QEms7ZK_zzs82iis7QEms6''FKs7--Zs7ZKis7ZK_s7QEmzs82ins7$''hs6''FPs7ZKis8)crs82iis8)crzs6''FUs6Td_s6Td_s6TdZs7ZKds7ZKZs7ZKZs6K^cs6TdUzs6TdZs6K^cs8)crs82id!!*&rs7QEm!!*&hzzs7ZK_s7ZKi!!*&c!!*&ms7$''hs6TdUs5O(Fs6TdKs6''FZs6TdZs6TdK!!*&ms7$''hs82iis5!_Fs7--Us7--_s7--ds7--U!!*&rs7QEms6TdKs5s@^zs7ZKUz!!*&h!!*&ms7$''hs6''FPs6K^c!!*&cs7ZKds6TdZs6TdA!!*&^s5F"Ys7ZK_s7--_s5O(<s6TdPs7--_s7--Ks7$''hs8)crs7--Uzs7ZKis7QErzs8)crzs8)crs7ZKds6TdPs4IA<s7ZKZs6TdZs7--Uzs8)crs6''FUzs6TdZs7ZK_s7QEm!!*&h!!*&rs7$''hs6TdK!!*&cs6Td<s6TdZs6''FAs5O(As7ZK_s5s@^s7ZKZs7--Zs7--Ks6Td_s6''FPs6''FKs82iis6K^cs6TdPs6TdZs6TdFs6TdZs5O(Fs6''FKz!!!!#!)rqd!(6ef!(?lW!!3-j!(R"l!([)\!!<3m!(d.o!(m5`!!WEr!)!:s!)*Ad!!rX"!)3Fr!)<Mh!"&^%!)ES$!)NYm!!iR&!)`e)!)ikr!!3."!)rq&!*''#!!"8j.!*0(/!*9/%!"K!2!*B4*!*K;)!"T''5!*T@6!*]G-!"&^2!*fL8!*oS1!"f4*!2fet!2omr!!<5#!3#r"!3-%$!!<5-!4)Y2!42a9!"/e<!4i.<!4r6F!!WG<!5ALF!5SZO!"].J!5ed;!6"rW!!*)?!65''?!6G5_!!3/D!6Y?D!6kMg!!3/H!7(WH!7:eo!!E;P!7_&O!7q5&!!<5S!8.>S!8@M.!!<5W!8RVW!9!q:!!WG`!94%`!9F4B!!WH!!;QU%!<rQ/!!iT2!=/Z2!=Ai7!!iT9!=o/<!>,>E!"/f@!>>G@!>PVM!!<6@!?2"I!?D1]!"ArP!?hFP!@%Ui!"ArT!@7^U!@n1$!!WHU!A+9U!A=I,!!WHY!AOQY!Aaa4!!WHa!BC,k!B^BF!"f5q!BpJq!C-ZN!"fCc"kEYV"muQ^!!`]:"q1J;"sO6q!!3?U"tT``"tg*4!"B,j"uZGk"ulfH!"K4E#.adG$#9i_!!N[F$#BSJ$#U&f!!rW,!([)X!(6eg!(HrX!!*''i!(R#"!([)\!"K!#!(d.r!(m5`!!3-n!)*A$!)3Gf!!E9t!)ES''!)NYm!!WF$!)`dt!)ikr!"&^*!)rq/!*''#!!!rX+!*0()!*9/%!!iR,!*B4/!*K;*!!<4*!*]F,!*fM/!!<4,!*oR6!29Il!!3/"!3#r!!3-%$!"K"4!3ZA2!4)[3!!WG1!4W"0!4r6F!"/eA!5AL9!5SZO!!<5=!5ed<!6"rW!!3/@!65''@!6YAc!!*)G!7(WG!7:eo!"T([!7_&Z!7q5&!"K"f!9!nZ!94(>!!3/^!9F1^!:^''Z!"8l4!<rN.!=/]3!!WH2!=Af2!=o2A!!**4!>,;4!>>JI!!**8!>PS8!?2%Y!!rZH!?D.F!?hIe!!`NL!@%RL!@7am!!iTU!@n-X!A+=(!"/f\!A=E\!AOU0!"/f`!Aa]`!BC0@!!<6a!B^>k!BpNJ!"Aro!C-Vo!\sg4!"B,""mu@!"sO6q!"&o]"tT`Z"tg*4!!`]d"uZGe"ulfH!!ie?#.ad:$#9ic!!iQ*!+l4!!(?lW!(R#[!(d/_!)!;c!)3Gg!)ESk!)W_o!)iks!*''#"!*9/&!*K;*!*]G.!*oT!!2BOi!2T[m!2fgq!3#su!36+$!3H7-!42a6!4Dm:!4W$?!4r6D!5/BH!5ANM!5efU!65)]!6YAe!7(Ym!7_)$!8.A,!8RY6!94(@!;QX"!=/]5!=o2C!>>JK!?2%[!?hIg!@7as!A+=*!AOU2!BC0C!BpNL"kEkF"q1\["tTs2"uZZF#.b+V$#Boc$#]eF"98E)!!!#c"3(<V!!N?&zz!!*&cs4I@is4@;Os2=s(s2=s(!!*&Y!!*&Os6K^cs2=rs!!*&E!!*&cs3CY_s4@;Os02OKs6Td(!!*&Es6Td(s5F"Ys3CYs!!*&O!!*&;s3:TEs0)J''s5O(2s5O(2!!*&cs4I@is4@;Os6K^cs4IA<!!*&;s4@;Os6K^cs3CZ2s6Td<!!*&Ys4I@is5F"Ys4IA(s4IA2!!*&Os4I@is24m;s2=ri!!*&Y!!*&Os4I@_s5F"Y!!*&O!!*&O!!*&Os3CYss24m=!-nPi!$hOF!$qUk!!3-I!%.aK!%@ms!!E9O!%IsN!%n7(!"&]Z!&"<U!&=O0!!<3W!&FTZ!&O[4!!<3Z!&af^!&jm:!!iQb!''1)d!'':0B!"&]g!''C5f!''L<F!"&]o!(6ep!(?lW!"8iu!([(u!(d/^!"Ap#!(m5&!)!;b!"T'')!)<M+!)NYm!"T''-!)ik+!*''#!!"o94!*0(5!*9/%!#,E8!*B44!*K;*!"K!5!*]F8!*fM/!"K!7!*oR>!.k3+!!*(V!/U[X!0dJN!!<4i!1Eli!1s7`!!rY"!2ff)!3#t#!"8k6!4)Y9!42a9!"8k>!58FE!5ANK!"K"F!5SXF!5\`Q!!*);!5edE!5nlU!!*)=!6"pG!6>/]!!<5D!6P9D!6YAc!"8kO!6bEF!6tSi!!<5I!7(WR!7_)"!"8kZ!7q2Z!8[_4!!<5Z!8mhZ!9!q:!"].i!9*t\!94(>!"].k!9=+^!9F4B!"]/*!;HO$!;QWj!"f5.!;ca"!;uor!!NB&!<3$&!<W?)!!NB-!<rN7!=/]3!"T);!=Af;!=f,?!!<64!=o/=!>#8C!!<66!>,;?!>5DG!!<68!>>GA!?2%Y!"o;P!?;(E!?D1]!##AU!?_@I!?hIe!##AW!?qLK!@%Ui!##AY!@.XN!@7am!#,Gc!A+9_!A=I,!"]/e!Aa]e!B:*>!!rZd!BC,i!BL6B!!rZf!BU8g!B^BF!#5Mt!BgDi!BpNJ!#5N!!C$Pk!C-ZN!#5OC!O_t4!\sg4!#5[^"jI#K"jR:s!"9%q"mH!i"mQ9V!"B,""mu@$"q1\E!"T8W"sEsN"sO6q!"9&^"tKZY"tTs0!##Pg"t]f["tg*4!##Po"uQAd"uZZD!#,Vr"ucMf"ulfH!#,XJ#.X^?#.b#M!"K<N$#9MM!!3-,!"T&?!!*''2!"],3!"f2C!!*(:!,V];!.=iq!!EPE#K$ND#K@"h!!<Jd#NGdc#NQ-N!!E9&!13a3!$qUl!%.aq!%It$!&"=-!&FU3!&ag9!''($?!'':0C!''L<M!(?lW!([)]!(m5a!)<Mj!)W_o!)ikt!*0)$!*B5(!*TA,!*fM0!.k3''!/(?+!/:K/!/U]?!0mPM!1*\Q!1En[!29Ig!2KUk!2]ao!3#su!36+$!3H7-!42a6!4Dm:!4W$@!5&<F!58HJ!5SZP!5efT!6"rZ!6P;b!6bGg!7(Yq!7q5-!8mk9!9+"=!9=.A!;HQi!;ccp!<3''%!<rQ1!=Ai;!=o2B!>,>F!>>JQ!?;+\!?_Cd!?qOh!@.[l!A+=*!Aaa9!BC0A!BU<E!BgHI!C$TM!O`%b"jI4r"mH3U"muR''"sF0p"tKm/"t^$3"uQTC"uc`G#.XrL$#9MB"/l2&!!!#G!>#58!"],1zzzzzzzzs/,his2=r_s2=s(z!!*&Os2=rUzs24m;s2=rUs6K^cs6Td<s4IA<s6Td7s6TdFs4IA(s4@;Os4I@is5O(Fs5O(2s3:TEs7ZKFs5F"Ys6Td2s5F"Ys24m;s5O(2s5F"Y!!*&Yzs6TdP!!*&Ys5F"Y!!*&Es5O(Ps7ZKPs5F"Y!!*&cs5O(Fs4IA2s4@;Q!"&];!"],3!,V^Q!!<4L!.=hK#Jp__!!EPE#K$NB#K-kc!!NVI#K?`H#KR.k!!NVf#NGdd#NQ-N!!3-%!,_c^!$hOF!%%[m!!<3N!%IsN!%e1&!!iQ[!&=NV!&O[4!!<3Z!&aff!&jm:!!`Ka!''1)]!'':0B!"Juk!''C5_!''L<F!"Jus!(6ej!(HrZ!!E9n!(d/"!(m5`!!N?s!)3G"!)NYm!"/d)!)`e"!)ikr!"/d+!)rq$!*''#!!"/d-!*0(.!*9/%!"Ap1!*B4/!*K;*!!WF-!*]F1!*fM/!!WF/!*oR4!.k3*!!*(U!/LUU!/U]4!!<4c!13`g!1EnV!!<4n!1s5m!29Il!!NA%!3H5(!4)[3!"/e6!4W"3!4r6F!"/eA!5AL<!5SZO!!WG?!5\^:!5efS!!NAA!6"pA!6>/]!!<5D!6P9D!6YAc!!E;G!6bEF!6tSi!!<5I!7(WJ!7:eo!!E;P!7_&P!7q5&!!E;Y!8[\X!8mk8!!<5[!9!n]!9+"<!!<5]!94%_!9=.@!!<5_!9F1a!<rQ/!"/f5!=/Z5!=Ai7!"/f;!=f)3!=o2A!!E<6!>#55!>,>E!!E<8!>5A7!>>JI!!E<:!>GM9!>PVM!!E<A!?2"H!?;+[!"T)N!?D.K!?_Cc!"T)R!?hFO!?qOg!"T)T!@%RQ!@.[k!!`NN!@7^T!@@go!!`NT!@n-X!A+=(!"/f\!A=E\!Aaa4!"/fe!B:&\!BC0@!!WHb!BL2^!BU<D!"K#l!B^>i!BgHH!"K#n!BpJk!C$TL!"K#p!C-Vm!\sg4!"/tq"mQ''s"q1\E!"/uT"sO$T"tKm.!"T8b"tT`_"t^$2!"T8d"tfla"uQTB!!`]d"uZGj"uc`F!!`]f"ulSl#.XrK!!3A9#.ad=$#9ic!"Ao/!"&];!,V^a#Jp_`#K-ke#KR/1#NPjd!''gMe!!!!=!&sr\!!3-#zs4@;Os6K^e!!ECm".B2j"/uC%!!*2%"0)>&"2tA]!!3-$".K8k!!*''#!!ECm"/uC&"2t6A!;lg"!!!"$!4Dk3!!WE''zzzs5O(Fs5F"Ys6K^cs5O(<s4@;Os5F"Ys6TdZs5F"Ys7QEmz!!*&cs6K^cs6Td<!!*&cs6K^e!"T0H")7f:")A!S!!ECF"*4GG"*F]g!!37K"*sqJ"+C?$!!ECT"+^FU",-i2!!ECZ",?jY",I&8!!EC\",R!Y",[2<!!37\",d-^"-E\J!!ECf"-iih!!3-.")A!S!!37H"*X_I"+C?$!!37V",-^V",I&8!!37Z",R!\",d8>!!37e"-`ce"-s%T!!NIk".&ug".982!!*''#!"f<J")A!["*F]l"+C?''",-i4",I&9",[2="-E\L"-`nQ!!*''>!#>P8!$VCO!!*''&!!*(Js6''F`!!*0i!!*''#!p''C_!!!!''!!3+-!!!!"!/^bo!!*(g!"8i9!#bh[!%%[s!&=O6!''UBN!(m5f!*0))!!*''&!X&K(s''c$8!!3+9!XJc,s+CFZ!!3,B!XJc,!;cga!!*)j!^$G`!@7e,!!*''c!]U/\!=8fa!!*)m!\=<P!GMTl!!*''."!7Ui"!n%)"#^6F"%!)X"%EAd"&]5%!!*''(!h]Ug!iQ1-!oa:B!!WE''!#bh;!$D7A!%%[G!%\*M!&=NS!&srZs$QoV!!3+;!^m"hs&]=o!!3+B!XJc,s&9%]!!3*n![n$L#I4Qb!!*?.!"8k\!OMm=!Pe`U!R(Sm!S@G0!TX:H!Up-`!W3!#!XJi;!Yb\S![%Ok!\=C.!]U6F!^m)^!`/r!!aGe9!b_XQ!d"Ki!e:?,!fR2D!gj%\!i,mt!jDa7!k\TO!ltGg!n7;*!oO.B!pg!Z!r)ir!sA]5!tYPM!uqCe""47("#L*@"$crX"&&ep"''>Y3"(VLK")n?c"+13&",I&>"-`nV"/#an"0;U1"1SHI"2k;a"4./$"5F"<"6]jT"7u]l"98Q/":PDG";h7_"=++"">Bs:"?ZfR"@rYj"B5M-"CM@E"De3]"F(&u"G?o8"HWbP"IoUh"K2I+"LJ<C"Mb/["O%"s"P<k6"QT^N"RlQf"T/E)"UG8A"V_+Y"X!sq"Y9g4"ZQZL"[iMd"],A''"^D4?"_\''W"`soo"b6c2"cNVJ"dfIb"f)=%"gA0="hY#U"ipkm"k3_0"lKRH"mcE`"o&9#"p>,;"qUtS"rmgk"t0[."uHNF#!`A^###5!#$;(9#%RpQ#&jci#(-W,#)EJD#*]=\#+u0t#-8$7#.OlO#/gKB!GDH6!!*+D!!*''#!I=_H!!*+%!!*''#!GDH6!!**j!!*''#!J:@Q!!*+6!!*''#!0.$Z!!**#!!*''#!Cd%i!!**b!!*''#!N5u!!!*+5!!*''#!K$jX!!**e!!*''#!K-pY!!*+2!!*''#!E&mu!!**X!!*''#!HJ/@!!**o!!*''#!S@AQ!!**t!!*''#!F#O)!!**P!!*''#!<)s!!!**g!!*''#!?hFD!!**2!!*''#!>5A5!!*(n!!*''#!AFKS!!*(S!!*''#!>,;4!!*(S!!*''#!PJI6!!**Q!!*''#!Aa]V!!*+1!!*''#!/COT!!**D!!*''#!7:cI!!**D!!*''#!>PS8!!*+Q!!*''#!>YY9!!*,@!!*''#!:p0k!!*+6!!*''#!GDH6!!*+6!!*''#!GDH6!!*+6!!*''#!GDH6!!*,m!!*''#!GDH6!!*+6!!*''#!GDH6!!*+6!!*''#!0.$Z!!*([!!!!"!0.$Z!!*([!!!!"!K$jX!!*+X!!*''#!K$jX!!*+X!!*''#!K$jX!!*+@!!*''#!HJ/@!!*+@!!*''#!HJ/@!!*+)!!*''#!<)s!!!**!!!*''#!<)s!!!**!!!*''#!<)s!!!**!!!*''#!>5A5!!**5!!*''#!>5A5!!**5!!*''#!/:IS!!*(S!!*''#!/:IS!!*(S!!*''#!Aa]V!!**V!!*''#!Aa]V!!**V!!*''#!Aa]V!!**D!!*''#!?hFD!!**D!!*''#!?hFD!!*,@!!*''#!QP0@!!*+6!!*''#!<`B''!!*+6!!*''#!<`B''!!*+A!!*''#!?qLE!!*+6!!*''#!>ke;!!*+6!!*''#!?_@C!!*+H!!*''#!?qLE!!*+6!!*''#!>5A5!!*+6!!*''#!>5A5!!*+6!!*''#!>5A5!!*+6!!*''#!>5A5!!*(R!!*''#!/1CR!!*(R!!*''#!/1CR!!*(R!!*''#!/1CR!!*(R!!*''#!/1CR!!*+U!!*''#!A=ER!!*+U!!*''#!A=ER!!*+U!!*''#!A=ER!!*+:!!*''#!@%RF!!*+:!!*''#!@%RF!!*+:!!*''#!@%RF!!*+:!!*''#!@%RF!!*+:!!*''#!@%RF!!*+''!!*''#!QP0@!!*+''!!*''#!K$jX!!**V!!*''#!>,;3!!*+@!!*''#!?hFD!!**ls7ZKo!71[)!!*+Es#9uZ!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**!!!*''#!GDH6!!**5!!*''#!GDH6!!**5!!*''#!GDH6!!**5!!*''#!GDH6!!**5!!*''#!GDH6!!**5!!*''#!GDH6!!**5!!*''#!0.$Z!!*(S!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!K$jX!!**V!!*''#!HJ/@!!**D!!*''#!HJ/@!!**D!!*''#!HJ/@!!**D!!*''#!HJ/@!!**D!!*''#!HJ/@!!**D!!*''#!QP0@!!*+)!!*''#!QP0@!!3-G!$hP-!!!!e!(d//!)!;c!$D8:!)ikA!*''#)!%7i!!/LV0!/^c=!&stC!13aO!1Nt\!(?m^!2ffh!3-%(!)N[&!4W#2!4r6G!*oT@!6"qI!6>/d!+u;]!8.?j!8IS1!-J;,!:Ko3!:g-]!.=kX!>>H_!@e++!/1G5!BL4A!Fc(>!0R@o!G)7q!HA-\!0mTX!VHGZ![[sq!13gN!^-OO#&+9^!1F+7#(-EH#(Zu;!3?Bc#*8hp#*fCa!4iB.#,hO?#-A*<!6bY]#/C5i!!3-0!k&0@!!!)5!l+d=!lG)g!!r_[!o*bo!p9XL!$24/!q$%3!qQKe!$_R@!r;mE!rN,t!%A!L!ri6M!s/Q+!%S=K#YY4L#Z(e*!%e1*!!!#=!!!#C!!!#I!!!#O!!!#U!!!#[!!!#a!!!#g!!!#m!!!$*!!!$<!!!$N!!!$T!!!$Z!!!$`!!!$f!!!%#!!!%)!!!%/!!!%5!!!%;!!!%A!!!%S!!!%Y!!!%_!!!%e!!!%k!!!&0!!!&6!!!&<!!!&B!!!&H!!!&Z!!!&`!!!&f!!!&l!!!&r!!!''#!!!'')!!!''/!!!''5!!!'';!!!''A!!!''G!!!''M!!!''S!!!''Y!!!''_!!!''e!!3+''s8;ous&oC&!!3+''!!!!"s%<=l!!3*V!!!!"s&oC&!!3+''!!!!"s&oC&!!E7)z!"&^l!1!Tdci=%Js&oC&!!!!+!1!VN!!6O.!!E7)z!"&^l!1!Td?iU0-s%WOo!!3+''!!!!"s(262!!3+I!!!!$s&oC&!!!!+!1!VN!!4hS!!3+''!!!!"s&oC&!!3+''!!!!"s&oC&!!3+''!!!!$s&oC&!!!!+!1!VN!!9q9!!3+''!!!!"s&oC&!!3+''!!!!"s&oC&!!E7)!!!!+!"o9t!1!Te#ljsk!1!Td+92BBs&oC&!!3*b!!!!"s#L,[!!3+''!!3-&s"+3N!!!!+!1!VN!!5Cc!!3*h!!!!"rn[VQ!!3)ms8N''"s#U2[!!3)ms8N''"rpp*h!!3)is8N''"ro!hV!!3)Fs8N''"rq$0j!!3)X!!!!"rp0Ub!!3*0!!*''#rrrH(!!3*(!!*''#rrrH(!!E6*!!*'',!!!"b!1!Teo)Jak")n=m!!*2U!"8j1!42a;!5JTS!6bGk!8%;.!9=.F!:U!^!;lj!!=/]9!>GPQ!?_Ci!A"7,!B:*D!CQr\!Diet!F,Y7!GDLO!H\?g!It3*!K7&B!LNnZ!Mfar!O)U5!PAHM!QY;e!Rq/(!T4"@!UKjX!Vc]p!X&Q3!Y>DK!ZV7c![n+&!]0s>!^HfV!_`Yn!a#M1!b;@I!cS3a!dk''$!f-o<!gEbT!h]Ul!iuI/!k8<G!lP''>!GMVh!!*+A!nmVT!I"V+!!**h!nmVT!G2De!!*+#!nmVT!K@07!!*+7!nmVT!0[K<!!*+i!nmVT!C-_?!!**c!nmVT!N6(R!!*+;!nmVT!J^a1!!*+%!nmVT!JU[0!!*+A!nmVT!C-_?!!**[!nmVT!GV\i!!*+#!nmVT!Rq2)!!*+&!nmVT!EK9U!!**c!nmVT!>5G\!!**c!nmVT!?hLk!!**C!nmVT!>5G\!!*)]!nmVT!>bea!!**c!nmVT!/^j3!!*([!nmVT!@e0)!!*(\!nmVT!P&7Y!!**p![[mJ!AOX&!!**]![[mJ!=AlT!!*)U![[mJ!>#;Z!!*(h!hoYq!AX^''!!**7!ZM+?!J(:k!!**>!ZM+?!>Y_`!!*)r!ZM+?!I"V+!!*+7!nmVT!>tqc!!*+7!nmVT!>tqc!!*(Z!nmVT!/gp4!!*(Z![[mJ!GMVh!!**P![[mJ!J^a1!!**T![[mJ!>#;N!!*+8!nmVT!AX^''!!*)r![[mJ!J^a1!!**P![[mJ!A+?k!!**D!Z_7A!>GSS!!**Q!ZM+?!FPu_!!*+7!nmVT!G2De!!**5![[mJ!0[K<!!*+U!nmVT!AOX&!!*+U!nmVT!AOX&!!*+8!nmVT!AX^''!!*+8!nmVT!AX^''!!*+$!nmVT!>Y_`!!3-<!$hP-!!!!e!*oRC!/U]4!&O\q!65''s!87G-!&joI!:^%L!:p3^!'':3<!Asj>!Fc(>!''UEp!G)6r!HA-\!''pX1!I+T3!NH1$!(6k\!VHF^!WiE)!(R)F!\j[G!]''m6!(d5T!^-NU"j7(m!)!NG#(Q\I#*B+P!)<`^#*]*`#,qg.!)Ws0#.OY5#.k)P!*9.%!"f9=!abp-!h]V$!!35X!os=s!p0RH!$24,!pfn/!q69^!$VL=!r)aA!rE&r!%.jH!r`0J!rrE(!%J''Q!tPA_#WrAU!''(<M#X\SR#Y54l!''^`^#YP._#YbS!!''pli#ZLdj!(-_d!=f)0!>GM6!?(q<!?_@B!AXWT!B:&Z!BpJ`!CQnf!D3=l!Diar!EK1#!F,U)!Fc$/!GDH5!H%l;!H\;A!I=_G!It.M!JURS!LNie!M08k!Mf\q!NH,"!O)P(!O_t.!PAC4!Q"g:!QY6@!R:ZF!Rq)L!SRMR!UKdd!V-3j!VcWp!WE''!!X&K''!Ytb9!ZV1?![7UE![n$K!\OHQ!]0lW!]g;]!^H_c!_*.i!_`Ro!`B!u!a#F&!aYj,!b;92!bq]8!cS,>!d4PD!djtJ!eLCP!f-gV!fd6\!gEZb!i>qt!k841!knX7!lP''=!m1KC!mgoI!nI>O!o*bU!oa1\!29N5!!*(o!ZD%>s$QoV!!E7=!^m"q!!!"b!1!TcJ,fQMs&K1W!!3+#!^m"hs&K1h!!3)U!^m"hs&fC\!!3+''!^m"hs&]=o!!3*2!Z1n<s&fCa!!3*-!^m"hs&fCk!!3+"!ZD%>s&B+=!!3+N!^m"js&]=V!!!!+!1!VN!!5ss!!3+&!]L)[s&B+=!!3+B!XJc,s&B+=!!3+"!ZD%>rlP9f!!3*r!\XNSs''#OY!!3+%!\FBQs&]=@!!3*o!\XNUs&B+=!!!!+!1!VN!!5ss!!3*R!Z(h;s$m,,!!3*U!Ytb:s#pK#!!E7B!ZD%G!!!"b!1!TdO8o7]s#gE"!!3+(!ZD%>rpBh(!!3*&!Y583rm_''&!!3)L!\OHRrm(X"!!3)Q!_!(irr)s8!!3)h!Z(h;rpp1-!!3)d!Z(h;rqZ[4!!3*.!Z(h;rr)s8!!3**!Z(h;rpg+,!!3*!!Z(h;rr)s8!!3)b!Z(h;rq?I1!!E5o!Y>>3!"&^l!1!TcJ,fQOrq6C)!!!!+!1!VN!!.TM!!3)m!Y>>4rlkKU!!3*(!Qb<Bri#q?!!3)/!Y>>4rtGMN!!3*6!R(NEs"XWl!!*<O#%@Q5#:oi`!.b.R!>Y\U!?qOm!A4C0!Cd)`!E&r#!GVX_!KI2R!O;aE!S.;8!U^!\!Vuit!X8]7!YPPO!ZhCg!\+7*!]C*B!^ZrZ!_rer!bMLY!f@&L!j2U?!lb;c!n%/&!o=">!pTjV!ql]n!s/Q1!tGDU"#9sH"'',M;"*t''."-NbR".fV!"2Y/i"6K^\":>8O">0gB"B#A5"Ejp("I]Ip"MP#c"QBRV"Sr9%"U5,="VLtU"Wdgm"Y''[0"Z?NH"[WA`"\o5#"^2(;"_IpS"`ack"b$W."c<JF"dT=^"el1!"g/$9"hFl]"k!S8"mQ9h"p+uC"r[[s#!N5Z!!<:M!!!!+!!!"b!1!Te#ljr+!_34j!!*),!!!!"!RC`G!!*,<!!!!"!J:@P!!<8>!!!!+!!!"b!1!Tc!!!!"!Drgs!!*(q!!!!"!IFeH!!<8\!!!!+!!!"b!1!TeJ,fQO!OVn-!"&]+!1!VN!!A;_!!<:M!!!!+!!!"b!1!Td5QCcd!djtJ!"&]+!1!VN!!*''"!!<:M!!!!+!!!"b!1!Td5QCcd!djtJ!"&]+!1!VN!!5Cc!!<:M!!!!+!!!"b!1!Td5QCcd!djtJ!"&]+!1!VN!!5Cc!!*-k!!!!"!_34j!!*-k!!!!"!_34j!!*),!!!!"!42_+!!*),!!!!"!42_+!!*,H!!!!"!RC`G!!*,H!!!!"!RC`G!!*,H!!!!"!Q+m;!!*,<!!!!"!Q+m;!!*,<!!!!"!J:@P!!<8>!!!!+!!!"b!1!Td+92BD!Q+m;!"&]+!1!VN!!48C!!<8>!!!!+!!!"b!1!Td+92BD!Q+m;!"&]+!1!VN!!48C!!<8>!!!!+!!!"b!1!Td+92BD!Q+m;!"&]+!1!VN!!48C!!**t!!!!"!Drgs!!**t!!!!"!Drgs!!*(q!!!!"!2KSp!!*(q!!!!"!2KSp!!*+I!!!!"!IFeH!!*+I!!!!"!IFeH!!*+I!!!!$!T="Y!"&]+!1!VN!!48C!!<8\!!!!+!!!"b!1!Td+92BD!T="Y!"&]+!1!VN!!48C!!<8\!!!!+!!!"b!1!Td+92BD!OVn-!"&]+!1!VN!!<N-!!<80!!!!+!!!"b!1!Te#ljr-!OVn-!"&]+!1!VN!!*''"!!*,H!!!!"!IFeH!!*,<!!!!$!T="Y!"&]+!1!VN!!*''"!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!<:M!!!!+!!!"b!1!Tc!!!!$!Q+m;!"&]+!1!VN!!<N-!!*-k!!!!"!Drgs!!*-k!!!!"!Drgs!!*-k!!!!"!Drgs!!*-k!!!!"!Drgs!!*-k!!!!"!Drgs!!*-k!!!!"!Drgs!!*),!!!!"!2KSp!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,H!!!!"!IFeH!!*,<!!!!$!T="Y!"&]+!1!VN!!<N-!!*,<!!!!$!T="Y!"&]+!1!VN!!<N-!!*,<!!!!$!T="Y!"&]+!1!VN!!<N-!!*,<!!!!$!T="Y!"&]+!1!VN!!<N-!!*,<!!!!$!T="Y!"&]+!1!VN!!<N-!!<80!!!!+!!!"b!1!Tc!!!!"!J:@P!!<80!!!!+!!!"b!1!Tc!!!!#!$D7e!$hOE!%7gq!!*''N!%\*O!&=O0!!<3\!&sr]!''C6D!!N?j!(6ek!([)\!!`Kt!)*@u!)`ep!!rX-!*B4.!*fM/!"/dY!/CO_!/^c=!"o9r!13a)!1Nt\!$;38!2ffB!3-%(!%IuU!4W"a!4r6G!&jno!5SXt!BC0@!''L?l!Fl*n!HA-\!''ga&#'''']1#''C,t!)*TJ#)iO]#*/tM!+6"r#+bg(#,)7"!,MkA#.=MR#/1;W!.FnK!!*.J!!*''"!!WE(!6bEC!!*-8!WE''"!\aT_!''UC3!/(?0!0@2H!1X%`!2on#!42a;!5JTS!6bGk!8%;.!9=.F!:U!^!;lj!!=/]9!>GPQ!?_Ci!A"7,!B:*D!CQr\!Diet!F,Y7!GDLO!H\?g!It3*!K7&B!LNnZ!Mfar!O)U5!PAHM!QY;e!Rq/(!T4"@!UKde!>5E7!!**F!ET7%!>5E7!!**5!ET7%!?D2B!!**5!ET7%!?M8C!!**5!ET7%!>5E7!!**5!ET7%!H%o>!!*+<!I4YG!IFim!!*+<!I4YG!H%p`!!*+!!I4YG!J:Du!!*+3!I4YG!0@5,!!**/!I4YG!Ajh&!!**\!I4YG!N,sD!!*+<!I4YG!JCK!!!*+"!I4YG!JLQ"!!*+<!I4YG!D!6:!!**X!I4YG!H%p`!!**r!I4YG!S.9s!!*+!!I4YG!EB/G!!**`!I4YG!>,>Y!!**e!@7^H!?M7f!!**>!@7^H!>,>Y!!*(r!@7^H!?M7f!!**T!@7^H!/U_&!!*(W!@7^H!<<-H!!*(W!@7^H!PJL[!!**V!@7^H!A"6t!!**^!@7^H!>,>Y!!*(Q!@7^H!>bb_!!*(f!@7^H!@7am!!**5!@7^H!J1=u!!**4!@7^H!>,>Y!!*)s!@7^I!!<37!#tt=!$hP-!"&]o!*oRM!!*''.!n7;%!nIG)!n[cH#Xo"g#Y,.l#YkY$!"8i-!&=NS!&srY!''UA_!(6ee!(m4k!)NXq!*0("!*fL(!+Gp.!,)?4!,_c:!-A2Arnmem!!3)k!>YY9rp^")!!3(J!>YY9rbMTN!!3*4!@\!Lrt5>]!!3*9!A=ERrt5>]!!3)9!@\!Lr_rn:!!3*=!@\!K!!!!"za8W=#z_qnPbzaLe@!!k\M8z!a#F&!>YY8!DNQ5!SRN/!\=<R!\=<e"*jk^!n%''-!:BhB!DNPB!DNP0!JLLi!_<;H!>YZ#!DNP4!>YZ#!>YY:!\=<l!\==>!\=<m!\=<l!\=<g!\=<j!\=<o!\=<l!\=<e!\=<k!DNQ6!DNQ6!_<;>!_<;H!_<;>!b23q"4$rd!n%&e!n%''H!n%''"!n%''C!h00c!b24&!t##X!n%'':!>YZ"!\=<g!n%''@!b24,"$loR!n%'':!t##V!h00`!t##Y!n%''F!h004!b23?!n%''B!h00,"0_b7!h00*!h00/!b23O!DNP\!>b_-!DNP,!_<;S!\FB:!DNP+!\=<k!b23l!\=<q!b23N!\=<e!DNP(!b23S!b23t!>YZ&!>YY<!\==5!>YZ&"*jl/!b23p!b23T!b23k!b23M!JLM<!\=<l!DNP(!b23k!\=<]!t##3!\=<_!\=<X!V?@,!JLM"!>kfI!JLME!_<;R!>YY8!DNP\!\=<s!\=<n!\=<i!\=<T!>kfI!\=<p!DNP''!oa1M!HJ/^!\==R!_<;=!DNP4!oa1M!DNP*!aYkn!_<;N!FGg<!FGg;!DNQ>!b23k!\=<b!>YZ#!DNP5!A"4!!GqfQ!\==R"(_H\"(_H\"(_HC!b23e!n%&e!n%&e!n%&e!n%&e!n%&e!n%&e"6]^c!n%''"!h00c!h00c!h00c!h00c!>b_/!>YZ"!>b_&!>b_+!n%&K!n%'':!t##V!t##V!t##V!t##V!t##V!_<;e!t##M!n%''B!n%''B!n%''B!n%''B!h00/!h00`!b23t!\=<k!\=<k!\=<k!\=<k!\=<k!\=<k"*jkd!\=<q!\=<e!\=<e!\=<e!\=<e!>b_/!>YZ&!>b_&!>b_+!b23T!b23p!b23T!b23T!b23T!b23T!b23T!_<;H!b23<!b23k!b23k!b23k!b23k!\=<X!b23k!\=<X!n%&e!\=<k!n%&e!\=<k!n%&e!\=<k!n%''"!\=<q!n%''"!\=<q!n%''"!\=<q!n%''"!\=<q!n%''C!n.,i!n%&K!b23N!h00c!\=<e!h00c!\=<e!h00c!\=<e!h00c!\=<d!h00c!\=<e!t##X!b23S!t##X!b23S!t##X!b23S!t##X!b23S!n%'':!b23t!n%&S!b239!>b^g!>b^f!>YY9!>YY>!>YY>!>YY=!>YYZ!>YYZ!>YZ"!>YZ&!`8q^!TjAL!\=<g!>b_&!n%''@!\==5!\XO9!b24,!>YZ&!b24,!>YZ&!b24,!N#ia!b24,!\===!b231!>YY8!n%'':!b23p!n%'':!b23p!n%'':!b23p!keRJ!mgp''!b23p!t##V!b23T!t##V!b23T!t##V!b23T"6]_)"1\CV!n%''F!JLM<!n%''F!JLM<!n%''F!JLM4!h004!\=<l!h004!\=<l!h004!\=<l!h004!\=<l!b23?!DNP(!b23?!M09$!b23?!DNP(!n%''B!b23k!n%''B!b23k!n%''B!b23k!n%''B!b23k!n%''B!b23k!n%''B!b23k"0_b7!t##3!h00/!\=<X!h00/!b23O!V?@,!b23O!V?@,!b23O!V?@,!DNP(!b;91"2b*i!l+e6!b23l!jDXi!b;8a!n%''"!q61@!\sa"!n%&K"3:Hn!n%''H!b23l!au''F!h00c!t##V!h]N9!b23D!DNP(!t##X!h00/"0;Ji!>YYa!K7!X!t#$#!\==5!DWUW!c.iK"0_bd!n%&X!b23p!t##V""O@"!hfT="BPRO!n%&V"-NX8!b23k!f$b<!h004!\=<l!hfSo!P&1U!DNP(!p0J6!DNP(!b23?!u1f0!i,fW!r`0=!n%''2"%N>1!c.iK!b23O!V?@,!\=<l!\=<l!egV!!]^6%!^cr%!b23q!al!e!<`C5!HJ0N!_<;C!>YZS"Z69S"NCF9"BPRD"HNOZ"*jlC!\==="TABh"6]_Q"*jl2!n%&e!\=<k!>b_$!>b_#!t##V!b23T!n%''B!b23k!n%''B!b23k!n%''B!b23k!n%''B!b23k!n%''B!b23k!\=<e!n%&e!\=<k!n%&e!\=<k"6]^c"*jkd!t##X!b23S!t##X!b23S!n%''@!\==5!t##V!b23T!t##V!b23T!\=<l!\=<l!>b_&"Z69S"NCF9"BPRD!t##X!b23S!d4Q1!n%'':!b23p!n%&e!\=<k"6]^c"*jkd!t##M!b23<!n%&e!\=<_!n%&e!\=<k!h00c!\=<`!h00c!\=<e!>b]n!>b]m!>YY>!>YY=!t##V!b23T!t##V!b23T!n%''F!JUR,!n%''F!JLM<!n%''B!b23^!n%''B!b23k!h004!\=<l!b23?!DNP(!]^5u!TjA''!n%'':!b23t!egUt!V?@,!n%&e!\=<k!h00c!\=<e!t##V!b23T!t##V!b23T!t##V!b23T!t##V!b23T!h00/!\=<X!>YY<!\=<k!i5l;!i>qu!b23l!\=<q!a#F1!c\2\!c\2\!\=<e!\=<e"$uu''!]pB1!\FBp"#Kuu!]g<*!B^?''!c%c[!b23S!]C$&!\=<Y!g!Bj!c%cs!b23t!b23t!A"3\!E]=h!A"3\!SIGX!Y58F!@e(:!t##q"+:/3"*jl/"*jl/!d"DP!ce9*!bVKq!aYjP")\)a"%N>9!oa2:!Lj'':!L<^5!NH,H!K7"J!K7"J!QP1)!S[T"!c.j!!c.j&!b)->!DNP2!D<D*!DNP2!\"*O!D!20!DNP(!eUI`!nI>q!e12:!\=<]!t##3!\=<X!\=<]![ds_!`&e2!\=<l!eLD=!b23q!b23q!b23q!\=<q!b23T!\+14!_r_H!b_QX!a>Xe![n$N!_`SA!QG+%!ce8\!b23q!b23q"7-"."8W!<"A&S6"!djV!`8q-"%WD%"(D6?!q61W!h96X!Y#,<!Tj@r!g<U,!iH#@!I4Yf!I4Yf!6P9\!>#5X!>#5T!@n-g!K-q,!YtbN!Gh`C!>YYl!QG*r!>YZ&!>YZL!>YZL!DNQ9!DNQ(!DNP#!DNP#!DNP%!DNP%!DNP3!DNP3!DNP"!DNP#!DNQD!DNP*!DNQ>!DNP+!>#6A!DNP+!DNPh!DNPZ!DNPg!DNPg!DNQ#!DNPq!DNOo!DNOo!DNOo!DNOo!DNP=!DNQ5!DNPg!DNPG!DWUg!DWUD!DNOo!WE(&!H\;L!7Cj.!G_ZP!HeAS!DWV!!Y,2J!Y,2J!Y,2J!Y,2J!Y,2J!XA]c!XA]c!DNP''!DNP+!DNPb!DNP3!DNP.!DNP&!DNP&!DNPf!DNPZ!OVn>!OVn\!K[9t!DNQ6!6>-H!6>-J!6>-H!6>-H!DNP8!DNP8!DWU\!!*#7!!*$J!!*#.!!*##!!*#<!!)u3!!*#L!!*$G!!*#9!!*#Z!!*$!!!*"R!!*#2!!*$O!!*#_!!*"R!!*#L!!*#L!!*#g!!*$_!!*$\z!!*#p!!*#g!!*#U!!*#U!!*$T!!*%4!!*#:!!*#K!!*#K!!*#K!!*#Z!!*$X!!*%[!!*$D!!*#6!!*#i!!*$?!!*#D!!*#V!!*$V!!*#E!!*#6!!*#2!!*#''!!*#L!!*#I!!*"u!!*#9!!*!h!!*!\!!*!P!!*"$!!)uO!!)sb!!)sb!!*$V!!*#E!!*#3!!*"k!!*#)!!*$@!!)u-!!*#:!!*$J!!*##!!*$_!!*#,!!*$V!!*#E!!*#4!!*#3!!*#Y!!*"Q!!*"d!!*"N!!)uu!!*"Jz!!*"u!!*$(!!*#(!!*"f!!*"(!!*"8!!)ue!!*$O!!*#0!!*"&!!)uc!!*"e!!*"o!!*"s!!*##!!*##!!*"c!!*"o!!*#;!!*"n!!*"Z!!*#Z!!*"^!!*#!!!*#,!!*"p!!*#.!!*"5!!*#U!!*#C!!*"a!!*"h!IFf+!IFf-!DNQG!DNQ6!G_[@!DNOo!r2fr!DNQ6"(;/N",Hp-!QP/g"!%?o"5j.1"(VA_!B^>G!k841!e:7N!_E@l!nI>O!_iXq!_!(h!fd6\!tPA3!7q2N!f-gV!lb3?"$HVa!il;$!egUS!oa1[!nI>O!egUS!hfSo!hoYp!s8N''!sJZ)!t5/0!t##.!r`0"!=/Yf!s8N''!gEZb!Z_7@!\aTS!Fu01!]U/[!dF\F!\aTS!`&du!au''0!Z_7@!U''La!al!.!\s`U!BU8]!Yk\8!a>X)!_34i!_NFm!W`9$!b231!g3N`!`K("!_r^q!g*H_!\FBP!]U/[!rr<$!dOb1!lP''=!t##.!B^>K!]U/[!`o@%!]U/[!t##.!^m#2!p0J%"''PZq!c.iU!lG!(!os=h!\FB#!\FB#!]C$$!t##V!D!2,!hKBi!hKBi"!@RR!b24.!m1Kg!h004!BL3Y!A+9L!^H`."AAeJ"Bke''"""!X!os>Z!qcOk!lk9O!qH=h!lG!K!l+e6!l+e6!b24.",$Y!!hKBi">g)c!h004!qcOk!qcOk!os>Z!ndQ!")7g6!q?7g!sS`N!q?7g!i#`n!lk9d!b23?!lk9O",Hq&!h''*''"#''^Q!kJ@o"<dbC"GHhR"%<2""4R<K!i#`n!lk9b"@W;g!lP''L![n$o!`8qI!\+14!N,o[!j)G=!^-N/!tG;7!\FBp!bVKq!bVKq!\XO9!]U/o!h''*O!a>Xe!aYjP!a>Xe!b;9n!\=<s!Or+?![RgR"2k0b!ZM+H!fR+A!\+0q"*OZ,"3:I)!kSFH!t##j!]U0B!\=<o"&Jt[!_NG,!^-N/!^-N/!aYjB!N,o[!\=<s!\46n!<`Bb!>b_+!=f)4"+gLn"+gM8!ce8V!\XO9!bVKq![RgR!aG^f"53_h!oO%c"$ciU!pfnL!sS`N!aYjP"0MV<!oO%c"53_h!oO%c!PnaO!!*"E!!*#L!!*$?!!*$B!!)u)!!)s#!!)rs"$cia!i#`X!i>r.!b23@!i#`n!b;9n!djuG!Or+l!c@uK!PnaH!f$bR!^6TH"@rM""![dL!il;N!\46n!qu[m!^-NG!nmWP!\+14!oX+d!\46X"+1(Y!iQ)0"$$?Z!f[1B"6TY^!rDs["Ao.r".]ES"2b*i!r`0F!n%''"!\OHu!bMEC!O_t;!eUI[!^-Me!eUI[!a>X=!hKAq![IaL"1S=A!oa1p!t>5u!bVKe!kJ@o!_`SV!j;Sn!_`S`"5s50!r2g="5s50!r2g=!BL3Y">g)c""=3R!k\M2!ZqD)!uV(a!dXhe!q?7g!a>Xe"#BpT!g`mL!l=q*!_`SV"/c,s!mgp0!BL3Y!lG!K!]0m&!lG!K!]C$*"7-!k"+gLu!hKBi!^-N/!n%''"!^-N-!n%''"!^-N-">g)c!tG;7!h004!\FBp!\=<l![n$h!qcOk!bVKq!qcOk!bVKq!t##V!b23T!sS`N!aYjP!sS`N!aYjP!lk9b!\=<o!k\L>![%IM!keR@!ZM+C!k\L>!Z:t@!kJ@o!\+0q!b24.!O)Pd"4R<K!t##j!h]N9![7Ub!ndQ!!^Qf,!t##Y!b;9V"0_b7!sel1!nmWP!\+14!nmWD!m(F3!rW*N!q61U!lP(."!IY,!Up(Y!m(F3"''5Il!j2MT!nREA!Mf]b"+^GA"%`JB!lP()!gE[!!h''*6!p]hK!kJ@V!qcO_!d4Pg!p]gd!fI%1!p9PL!g*I7!n[K."!7M/!q61U!p9PL!rr<Q!j_kP!m(F3!e:8!!N?&g"#9j$!h]N-"!mpl!qH=9!DNQ(!8[\e!;ZZs!DWUm!DNP+!FPm6!GVT?").`t!bD?t!dXhf!dju6!`8q[!e11p!MKK_!bD?t!g3OL!lk9c!au''u!BpKQ"%3,Y!hKB:!bD?t!abps!b23T!ce9,!c%cW!bq^$!CQnk!bD?t!ZV1Y!`&e^!Jg^i").`o!^Qf2!a>Xj!a#Fg!ce9,"1J7r!bD?t!b;9Z!F,Uo"1J7r!b_R"!aYjO!rDsB!ce9,!DNQ6!KI-p!!!$M!!!"T!!!"1!!!"J!!!$M!!!#a!!!#Q!!!#=!!!#Gz!!!"i!!!$$!!!#Q!X&Kf!!!#8!@\"E!!!(X!!!"1!DNQ6!!!$''!m1L+!fI%Q!\FC*!e(,6!ic5r!@\"E!P8=r!ic5r!hKBc!?;)2!_r_Z!`K(m!h00R!il;t!l+e''!@\"E!Nc>n!hKBc!f[1B!gNaV!gE[\!b_QQ!hTHU!h]Ni!a#Fe"%WDc!qZIV!\+1G![[n=!Zh>5!:BhB!SRN/!!*#;!.+[`!BC-."+gLH"GQmM"/>h<"31B9!rDrk!rDrk!nmVK",R!O!sS`!",HpN!nRDF!hfSf!p0IU!uCq-!l"^(!n72?!k&(%!jM^s!hoYg!iu@r!j;Rq!lt?3!iZ.r!k&($!nmVJ!jhq%!k/.(!k\L+!h0/\!hKAb!iu@q!j_k$!gN`]!gEZ\!jr"%!sJYq!hoYh!o*bN""sW!!gir]!l4j,!l"^/!fI$M!!*$Y!AjcB!AOQG!AaZm!!iJ[!!iJ[!!iJ4!!rO^!!`D]!!W=i!!*"R!!*"R!j)Fm""jPi!mCW>!k84)!lb3&!kA:S!d4P_!k84G!jVe=!ep[j!djtS!]pAs!ic5,!mUcS!nmV`!"&YM!2BL:!n.,D!r2fi"BGL*!!*#V!b_Qr!egV:!gisM"%N>R!cn?(!d4Q+"$6KF"/#Wj!e124!d4Q+"1J7m!aYjh!al")"%*&b!d4Q+!b)-N"!dk/!bVL0"#g3B!p]h-"(hNq!cn?("%WDS!cn?(!gs$D!b).+"!7M>!`f:`!gs$b!gisM!al")"*OYK!d+K*!RC`e!X&KE!]0lu!l=pY!QtHa!SdYr!cJ&[!lk9^!U]q/!SdYr"+C4k!V?@5!V?@5!lt?_!UTk.!VZQo!lt?_!VZR8!lb3]!hKAl!lG!Z!QtHa!j_kJ!RUlg!UKdd!T3r!!g!C''!V?@5!UKe-!Xo&M!V?@5!jDY)!WE''?!oj7\!Q"gX!T*ku!VQL7!VHF6!]0lu!WrEe!Pnb2!m1L*!o!];!cS,?",m3g":tP\!=o/m!fd75"()$Y!aG^f!uCq_!m:Q4!X\o-!gNaJ".fK2!bVKX""XE=!ZD&$!dOc."4I5Q"2k0D!danc!abpf!q?7="$ZcJ!]C$1"47)U"24a`!lb4&!b_QP"$uu,!u:ka!b;9W!r`0I"''PZn!cn?(!f6n/!abpW"D7]^!iQ)I".0''''"/#W1"Z68_".0''''!l4jg!k/.i">Tra!h]N/!h]NU!h00''"#Bp.!iH#\!^?ZG",HpU!fR+.!sel5!e^OF!hKB&!gN`a!f-h*"/Z&J"-!9`!bD?m!bVKq!oEu,",$Xo"98E8!f$b<!r)aC"$HVk"#p9C!qZIT!c\2S"4[B#"82^B":tP8!u:ka".fKB!j;Rt!g!C4".0''''!p''D%"+("8!ce9$"3plo!kSFp!n%&e!\=<k!n%''H!b23l!n%''H!b23l!n%''H!b23l!n%''"!\=<q!n%''C!b23N!n%''C!b23N!n%''C!b23N!n%''C!b23N!n%''C!b23N!h00c!\=<e!h00c!\=<e!h00c!\=<e!h00c!\=<e!h00c!\=<e!b24&!DNP(!t##X!b23S!n%'':!b23t!n%'':!b23t!n%'':!b23t!n%&o!b23t!n%'':!b23t!>b^h!>b^h!>b_+!>b_+!n%''@!\==5!n%''@!\==5!n%''@!\==5!b24,!>YZ&!b24,!>b_-!b24,!>b_/!b24,!>b^u"$loR"*jl/"$loR"*jl/"$loR"*jl/!n%'':!b23p!n%'':!b23p!n%'':!b23p!n%'':!b23p!t##V!b23T!t##V!b23T!t##V!b23T!t##V!b23T!h00`!b23k!h00`!b23k!n%''F!JLM<!n%''F!JLM<!n%''F!JLM<!n%''F!JLLY!h004!\=<l!h004!\=<l!h004!\=<l!h004!\=<l!h004!\=<l!b23?!DNP(!b23?!DNP(!b23?!DNP(!b23?!DNP!!n%''B!b23k!n%''B!b23k!n%''B!b23k!n%''B!b23k!n%''B!b23k!h00,!\=<]!h00,!\=<]"0_b7!t##3"0_b7!t##3"0_b7!t##3"0_b7!t##3"0_b7!t##3!h00*!\=<_!h00*!\=<_!h00/!\=<X!b23O!V?@,!b23O!V?@,!b23O!V?@,!b23t!DNOo!t##3!\=<X!\46j!DNP(!n%&e!\=<k!n%&e!\=<k!n%&e!\=<k!n%&M!\FAa!h00.!\=<k!n%&e!\=<k!n%&e!\=<k!n%&e!\=<k!n%&e!\=<k!n%&e!\=<k!n%&e!\=<k!n%&e!\=<k!h00c!\=<e!h00c!\=<e!h00c!\=<e!h00c!\=<e!h95W!\FAm!h00c!\=<e!h00c!\=<e!h00c!\=<e!>YZ"!>YZ&!>YZ"!>YZ&!t##V!b23T!t##V!b23T!t##V!b23T!t##:!b;8g!t##V!b23T!t##V!b23T!t##V!b23T""O@"!hfT=""O@"!hfT=""O@"!hfT=""O@"!hfT=""O@"!hfT=!n%''B!b23k!n%''B!b23k!u1f0!i,fW!u1f0!i,fW!u1f0!i,fW!u1f0!i,fW!u1f0!i,fW!h00/!\=<X!h00/!\=<X!h00/!\=<X!h00/!\=<X!dF\F!dF\F!dF\F!dF\F!dF\F!dF\F!dF\F!dF\F!k841!k841"(D6#"&]*g"!%@1""4-=!o!\3!q-*J!Z_7@!Z_7@!Z_7@!Z_7@!Z_7@!Z_7@!quZ_!r2f^"24a""0_ak"0;Ie"0qmn!al!.!al!.!al!.!al!.!al!.!al!.!al!.!al!."#p8K"$chU"9SVl"8Vuf"7#pM"9AJp"-!9)"-*?.!B^>]!BU8]!HnG1!I+S-!IFe2!I"M/!HS5!!J(4+!IFe+!It.5!`]3Y!^m"S!^-MJ!^QeS!S[S&!R(Mb!b)-0!b)-0!b)-0!b)-0!b)-0!b)-0"!IX0")%Ys"?c_G"?6AH"4.#2"3pl8!]U/[!]U/[!]U/[!]U/[!]U/[!]U/[!]U/[!]U/[",d-J"??GP"C(on"4@.c!t##.!t##.!t##.!t##.!t##.!t##.!t##.!t##."%E7O"''klq"=F06">KlC"2b*+"53_>".K8;"2Fl[!dF\F!dF\F!Z_7@!Z_7@!al!.!al!.!BU8]!BU8]!b)-0!b)-0!]U/[!]U/[!t##.!t##.!dF\F!dF\F!dF\F!dF\F!dF\F!dF\F!dF\F!dF\F"-!9\",[''Y"==*A":P8""5*YC"60@N"-3E4"-ii2!al!.!al!.!al!.!al!.!al!.!al!.!al!.!al!."7H3X"8Dic"LS3t"LnF%"Jl(]"M+R*"A&R;"B#3H!t##.!t##.!t##.!t##.!t##.!t##.!t##.!t##."9SVb";q1."QTOI"RQ0U"FgC="I];T"B,9I"Esgh!dF\F!dF\F!dF\F!dF\F!gEZb!dF\F!dF\F!k841!k841!kA9q!k841",d-Z!>YZ7!EoIa!>YZ7!>b]2!DWUe!al!.!al!.!\aTS!al!.!al!.!snqV!u_-u"&JsK"''5HX"&Jst!UKec!U0S`!K$jr!DiaM!Fl)j!H8##!HA)*!Fc#]!H.qa!:^$P!<`Ap!M]VO!MKJE!T=#U!_iYl!DWUP!]U/[!]U/[!]U/[!]U/[!`K("!`K("!]U/[!]U/[!s8N''!s8N''"1S<i"4mM0""+''7!DNOo!DNOo!DNPl!t##.!t##.!t##.!t##.!t##."-*?>""F9:"+gL%"$-DC"4@/L!DNQ:!>YZ4!V??l"6]^b!V??l"6]^b!DNOo!;ZZq!2fes!\=<O!>YY8!6>-?!+Z''0zzzzz!DNP4!DNP4!\FBG!\FBG"6fd\"6fd\!OVo<!\FB:!>YZ&!>YZ%!>YZ%!>YZ%!V?@^!V?@_!V?@_!V?@`!\=<n!\=<k!F>a]!F>aX!>YZ#!h''*o"6]_i!>YZ#zzzzzzz!V??l"6]^m"]k[3!:BhD!NH,V!bMEh!:Bgu!IFeX!]pAn!Q"g<!DNPm!DNPj!cA!$!h''+.!bMES!\=<P!g3O-!g3O-!Oi%&"%`If!K[:=!2oiq!DWW&!DWV!"NCF,"0_bj"0_cE!\=<l!Z:tO!Z:tC!Z:tC!JLLi!DNQ6!g3O-!JLLi!dXi4!]U/[!g3O-!uV(H!WrEK"''5IZ!n%&p!n@8s!8mi''!n%&p!aG^c!8mi''!8mi''zzzzzz!FGg?!6>-s!FGg:!FGg:!FGg?!FGg<!FGg9!FGg?!FGg@!FGg@!FGg@!8%8i!87Dd!J^Y''!FGg?!A+:"!FGg<!FGg;!FGg:!FGg:!FGg?!FGg<!FGg9!FGg?!F>a?!F>a@!F>a@!8%8i!8%8a!G_ZK!H%lK!K$jm!GDH?!Fl*>!b23D!`&e)"*jl/!nRE)"RuIg";q29!^m#/!e:7r!aPd0!`&e3!b;9@!!)u@!!)u@!!*$M!!*$4!!)t\!!)tc!!*!2!!)t$!!)sK!!)sJ!!)sI!!)sG!!)t)!!)s\z!!*!o!!*!2!!*!M!!)pW!!)ts!!)u`!!)u]!!)tk!!)tc!!*#F"0hhS"3:Hf":>,M"4[Ao"6ok3!h004!n%''"".''!/!b23t!aYj,!al!<"*";E"6TYG"''bg?!kSF8"6]_;"^1mJ"6]_T!r`0"!t##I!BU94!p''DS!ndPl!\=<e!_`S<!m1L+!fI%Q!\FC*!e(,6"(qT^"d]3R!t##q!b23Q!b23Q!h00*!hB;s"PNhh!TF)''"(_H\"(_HD"(_H\"(_HD"(_HC"(_HB"(_H\"(_HB"(_H\"(_HC"(_HB"(_HD"(_H\!>YZ"!\==9"$uuP"0hhj!h00,"0hhC"NLKZ"l0.q"0hhj!h00*"0hhA"NLKX!b24,!n%''"!n%''C"$loR!>YZ&!\==="$uuT"$uuT!\=<]"$utt"BYX6"`=;M"$uuT!\=<_"$uu!"BYX8!>YZ&!\=<q!b23N"*jl/"2k0e"2k4*"2k0h"2k4*"2k0e"2k4*"2k22"2k1t"2k1s"2k22"2k0e"2k0e"2k0e"2k4,"2k0e"2k4,"2k0e"2k0e"2k0e"2k3M"2k0e"2k3L"2k3M"2k0e"2k1u"2k0e"2k0e"2k1u"2k0e"2k1u!n%&e!\=<o!h00O!ndPZ!ndPZ"''>OP!_<;>"(_JT!`B"''!al"=![Ib$!_<;C!_<;C!V?@!!Z_7P"''bg?"8i-+".K9!!ce8N!k&(>!`K()!sel;!ce8N!k&(>!`K()!sel;!DNP@!\==1!t##e!t##e!\==Z!\=>''!\==P"g%bH!FPmQ")%Zo")%Zo!mgp<!mgp<!mgp<!gisA!q61D!q61D!mgp<!mgp<!`T.X!kJA&!p0JR!^6TT!p0JR")%Zo")%Zo!B:''M!mgp<!k84m!mgp<!_<;J!p0JR!uq;!!bD?m!h]NI"*af."%3,I!Xo&c!mgp<!A"4S"%3,I!A"41!mUd1!JCG2")%Zo")%Zo!k84m!Ajd=!e:81")%Zo")%Zo!r;mV!N5uV!mgp<!r;mV!mgp<!lY-n!mgp<!Z_7Y"$?QA!QG+1"$?QA!TF)M!DNPB!DNP%!>GMu!EK1U!<N6`!<N6`!!*#G!!*#f!!)uk!Yk\8!!W@=!"&Wp!!W?R!e:7G!!`EL!!iKH!!iKI!!rQN!!W@C!!W@`!"&X<!!`ES!!iL)!!iLZ!!rR;!!W?R!Cm,"!8[\q!jr!t!Aa]A"6TXh"6fdZ"=4$A!nmVI!uV(/!lb3/!nI>A!kA:(!i,ei!j_k$!jDXr!m:Q6!knX,!nI>F!k&(''!kA:*!l+d/!hB;^!i#_g!il:p!gEZ\!gWf^!lG!3!tYG''!i,ej!h'')_!m:Q6!f[0O",-^K"Gm*P"/5bB"5!SJ!r`/n!qcNe!n%&C",HpN!t>5(",HpN"F:%A!"&Wp!"&Wp!"&X<!"&WV!"&Wp!!W@=!n%'':!abp;!^H_q!a>X7"&T%."&T%.!cn>O"PWoB"Ng^1"OR38"P*Q="fMDe!?;)2!AOQS!Zh>5!f[1\"2k1&"*af1"/Gom"&/bh"-ijM"/Puo"&]+`"7?.Q!_<;H"%WDc"%WDc"%WDc"%WDc!m1L+!m1L+!m1L+!fI%Q!\FC*!e(,6!ic5r!F,U1!P8=R!hKBc!Fc$X!_r_Z!`K(m!h00R!l+e''!Nc>n!hKBc!gNaV!gE[\!hTHU!h]Ni!a#Fe"%WDc!qZIV!7UuK!`&ej![[n@!]U0U!m1LA",$Xf!!!!$!!)gG!!+O&^]4?D3?A/3!$qT_!"],Ws6K^s!%S$8!"],^s6K^s!&FT@!"],es6K^s!&jl0!"],hs4@;_!''1(t!"],ks24mK!''C55!"],ms24mK!''UA7!"],us6K^s!(m4C!"]-&s6K^s!)<L[!"]-,s6K^s!)`d_!"]-/s6K^s!*0''c!"]-2s5F"i!*B3Q!"]-4s6K^s!*T?S!"]-6s4@;_!*fKP!"]-8s4@;_!+#Wk!"]-^s24mK!/(<i!"]-`s24mK!/:Hk!"]-bs24mK!/UZn!"]-es6K^s!0mNM!"]-qs6K^s!1*ZO!"]-ss6K^s!1<fQ!"].!s6K^s!2'';0!"].)s6K^s!2KS\!"].+s6K^s!2]_^!"].-s6K^s!2ok`!"]./s6K^s!42^l!"].Bs6K^s!5/?u!"].Ds6K^s!5AL"!"].Fs4@;_!5\]f!"].Is24mK!5nj''!"].Ls6K^s!6G3,!"].Qs6K^s!6kK0!"].Us6K^s!8dbB!"].gs6K^s!9*tE!"].is6K^s!9=+G!"].ks6K^s!9O7I!"]/8s6K^s!=8_l!"]/<s6K^s!=o.r!"]/Bs6K^s!>>G!!"]/Fs6K^s!?;(*!"]/Ns4@;_!?M4"!"]/Rs4@;_!?qL&!"]/Ts4@;_!@.X(!"]/Vs4@;_!@@cu!"]/Xs4@;_!A"3:!"]/_s6K^s!AFK>!"]/es6K^s!BC+t!"]/ks4@;_!BU8!!"]/ms4@;_!BgDK!"]/os4@;_!C$PM!"]/qs4@;_!C6\O!"]2es6K^s"mZ-?!"]>Cs6K^s"sX*6!"]>bs4@;_"t]f6!"]>ds4@;_"tor8!"]>ls4@;_"ucM6!"]>ns4@;_"uuY8!"]@Fs24mK#.jie!"]HPs4@;_$#KXo!"]HRs4@;_$#]dq!"]HTs4@;s!"]+r!$hOUs4@;s!"o7t!$hOks4@;s!%@lm!$hOns2b6d!%S$$!$hOps4@;s!%e00!$hOss2b6d!&+At!$hOus4@;s!&=N+!$hP"s4@;s!&X`.!$hP&s5F#(!&sr1!$hP)s24m_!'':.u!$hP+s7QF<!''L;"!$hP-s7QF<!(?kR!$hP6s6K_2!([(U!$hP8s7$(7!(m4M!$hP:s6K_2!)W^T!$hPAs5F#(!)ij`!$hPCs6K_2!*''!b!$hPEs5F#(!*9-d!$hPGs5F#(!*K9a!$hPIs5F#(!*]E^!$hPLs5F#(!+#Wa!$hP]s4@;s!.Fn"!$hQ$s4@;s!/gg%!$hQ&s3:Ti!0$s''!$hQ(s3:Ti!07*=!$hQ*s5F#(!0I6?!$hQ,s5F#(!0mN9!$hQ0s4@;s!1*Z;!$hQ2s4@;s!1<f=!$hQ5s4@;s!2'';0!$hQ=s6K_2!2KS\!$hQ?s6K_2!2]_^!$hQAs6K_2!2ok`!$hQCs6K_2!3-"b!$hQEs7$(7!3?.i!$hQGs7$(7!3Q:k!$hQMs6K_2!42^b!$hQOs6K_2!4Djn!$hQQs6K_2!4W!p!$hQSs6K_2!4r3s!$hQVs5sA-!5/?p!$hQXs5sA-!5AKr!$hQZs5F#(!5\]p!$hQ^s6K_2!6,!)!$hQbs6K_2!6G2m!$hQes4@;s!6bE/!$hQgs4@;s!7(Vs!$hQjs6K_2!7Ci5!$hQos3:Ti!7h,>!$hQrs7$(7!8@Iu!$hR!s7$(7!8RV"!$hR$s4@;s!9!n0!$hR''s6K_2!94%2!$hR)s6K_2!9F14!$hR+s6K_2!;QT9!$hRAs3:Ti!<)rC!$hREs3:Ti!<`AI!$hRLs5F#(!=8_b!$hRPs5F#(!=o.^!$hRUs6K_2!>,:`!$hRWs6K_2!>>Fb!$hRYs6K_2!>PRd!$hR[s6K_2!?;''u!$hRbs5F#(!?M4,!$hRfs5F#(!?qL0!$hRhs5F#(!@.X2!$hRjs4@;s!@@d*!$hRls4@;s!A"35!$hRss5sA-!AFK9!$hS"s5sA-!Ajc=!$hS)s24m_!BL2>!$hS+s24m_!B^>T!$hS-s5F#(!BpJV!$hS/s5F#(!C-VX!$hS1s5F#("mQ''/!$haWs5F#("sX*6!$hb!s5F#("t]f@!$hb#s5F#("torB!$hb+s4@;s"ucM@!$hb-s4@;s"uuYB!$hc$s3:Ti#.acP!$hc[s5F#(#K-S[!$hfhs24m_#KQk_!$hg0s4@;s#NYp;!$hkds5F#($#KY$!$hkgs5F#($#fk''!$qUUs24m`!"f1s!$qUWs24m`!$qU(!$qUls5F#)!%@lm!$qUos2b6e!%S$.!$qUqs4@;t!%e00!$qUts2b6e!&+At!$qV!s4@;t!&=N+!$qV#s5F#)!&X`8!$qV''s6K_3!&sr''!$qV*s3:Tj!'':/*!$qV,s3:Tj!''L;,!$qV.s3:Tj!(?k\!$qV:s7QF=!)!:b!$qV>s6K_3!)W^T!$qVBs5F#)!)rpk!$qVFs6K_3!*9-n!$qVHs7QF=!*K9f!$qVJs5F#)!*]E^!$qVLs5F#)!*oQ`!$qVNs5F#)!,_c&!$qVns6K_3!.t71!$qVts5F#)!/1C3!$qW!s5F#)!/CO5!$qW#s5F#)!/U[7!$qW%s5F#)!/gg%!$qW''s3:Tj!0$s''!$qW)s3:Tj!07*=!$qW+s5F#)!0I6?!$qW-s5F#)!0mNC!$qW1s5F#)!1*ZE!$qW3s5F#)!1<fG!$qW6s5F#)!2'';:!$qW>s7QF=!2KSf!$qW@s7QF=!2]_h!$qWBs7QF=!2okj!$qWDs7QF=!42^b!$qWWs6K_3!5/?u!$qWYs6K_3!5AL"!$qW[s5F#)!5\]p!$qW^s5F#)!5nj1!$qW`s5F#)!6,!3!$qWbs5F#)!6>-5!$qWds5F#)!6Y?$!$qWhs5F#)!7(W(!$qWps3:Tj!8@Iu!$qX#s3:Tj!8db8!$qX''s5F#)!9*tO!$qX)s5F#)!9=+Q!$qX+s5F#)!9O7S!$qX?s2b6e!;lfA!$qXDs3:Tj!<<)E!$qXJs3:Tj!=&S`!$qXOs5F#)!=Jkd!$qXUs5F#)!>,:j!$qXYs5F#)!>PRn!$qXbs6K_3!?D.+!$qXds7QF=!?hF/!$qXhs7QF=!@%R1!$qXjs7QF=!@7]j!$qXls7QF=!@Iil!$qXrs6K_3!A4?<!$qY!s6K_3!AXW@!$qY%s6K_3!BC,)!$qY+s5F#)!BU8+!$qY-s3:Tj!BgDA!$qY/s3:Tj!C$PC!$qY1s3:Tj!C6\E!$qg5s2b6e"q:Ok!$qgns7QF="tT`?!$qh#s7QF="tflA!$qh%s7QF="uZG+!$qh-s7QF="ulS-!$qh/s7QF=#(us$!$qi[s3:Tj#.jio!$qlfs24m`#KHe^!$qljs24m`#NPjN!$qm2s6K_3$#BS7!$qqfs7QF=$#]e:!$qqis7QF>!"]+h!%%[Xs5F#*!$qTs!%%[ms6K_4!%@lr!%%[ps3:Tk!%S$8!%%[rs4@;u!%e00!%%[us3:Tk!&+B$!%%\"s4@;u!&=N+!%%\$s6K_4!&X`B!%%\(s7QF>!&sr1!%%\+s3:Tk!'':/*!%%\-s4@;u!''L;,!%%\/s4@;u!(?kR!%%\;s6K_4!)!:X!%%\?s5F#*!)W^T!%%\Cs5F#*!)rpa!%%\Gs6K_4!*9-d!%%\Is6K_4!*K9\!%%\Ks7QF>!*]Er!%%\Ms5F#*!*oQt!%%\Os5F#*!.Fn6!%%\ts4@;u!/(=(!%%]!s4@;u!/:I*!%%]#s4@;u!/LU,!%%]%s4@;u!/^aB!%%]''s3grp!/pm+!%%])s3grp!0.$-!%%]+s5F#*!0@0>!%%]-s5F#*!0R<@!%%]1s6K_4!1!TN!%%]3s6K_4!13`P!%%]5s6K_4!1NrS!%%]<s3:Tk!2BM[!%%]@s6K_4!2TY]!%%]Bs6K_4!2fe_!%%]Ds6K_4!3#qa!%%]Ps5F#*!5&9j!%%]Ys5F#*!58El!%%][s5F#*!5JR-!%%]^s7QF>!5ecg!%%]`s6K_4!6"oi!%%]bs6K_4!65&k!%%]ds6K_4!6G3,!%%]gs6K_4!6kK0!%%]ks6K_4!7_%t!%%^"s3grp!8RV''!%%^&s6K_4!9!nD!%%^)s6K_4!94%F!%%^+s6K_4!9F1H!%%^-s6K_4!;QT>!%%^Cs3grp!<)rH!%%^Gs3grp!<`AN!%%^Ns5F#*!=8_b!%%^Rs5F#*!=o.r!%%^Xs6K_4!>>G!!%%^\s6K_4!?;(*!%%^ds7QF>!?M4,!%%^hs7QF>!?qL0!%%^js7QF>!@.X2!%%^ls4@;u!@@d4!%%^ns4@;u!A"30!%%^us5F#*!AFK4!%%_$s5F#*!Ajc8!%%_+s3:Tk!BL2R!%%_-s3:Tk!B^>6!%%_/s5F#*!BpJ8!%%_1s5F#*!C-V:!%%_3s5F#*"mQ''4!%%mYs5F#*"sX*6!%%n#s7QF>"t]f@!%%n%s7QF>"torB!%%n-s4@;u"ucMJ!%%n/s4@;u"uuYL!%%o&s3grp#.acZ!%%o]s7QF>#K-So!%%rjs4@;u#KQks!%%s3s6K_4$#BS-!%&"gs6K_4$#]e0!%&"js6K_5!"]+h!%.aYs5F#+!$qTs!%.ans6K_5!%@lr!%.aqs3:Tl!%S$8!%.ass4@<!!%e00!%.b!s3:Tl!&+B$!%.b#s4@<!!&=N+!%.b%s6K_5!&X`B!%.b)s7QF?!&sr1!%.b,s3:Tl!'':/*!%.b.s4@<!!''L;,!%.b0s4@<!!(?kR!%.b<s6K_5!)!:X!%.b@s5F#+!)W^T!%.bDs5F#+!)rpa!%.bHs6K_5!*9-d!%.bJs6K_5!*K9\!%.bLs7QF?!*]Er!%.bNs5F#+!*oQt!%.bPs5F#+!.Fn6!%.bus4@<!!/(=(!%.c"s4@<!!/:I*!%.c$s4@<!!/LU,!%.c&s4@<!!/^aB!%.c(s3grq!/pm+!%.c*s3grq!0.$-!%.c,s5F#+!0@0>!%.c.s5F#+!0R<@!%.c2s6K_5!1!TN!%.c4s6K_5!13`P!%.c6s6K_5!1NrS!%.c=s3:Tl!2BM[!%.cAs6K_5!2TY]!%.cCs6K_5!2fe_!%.cEs6K_5!3#qa!%.cQs5F#+!5&9j!%.cZs5F#+!58El!%.c\s5F#+!5JR-!%.c_s7QF?!5ecg!%.cas6K_5!6"oi!%.ccs6K_5!65&k!%.ces6K_5!6G3,!%.chs6K_5!6kK0!%.cls6K_5!7_%t!%.d#s3grq!8RV''!%.d''s6K_5!9!nD!%.d*s6K_5!94%F!%.d,s6K_5!9F1H!%.d.s6K_5!;QT>!%.dDs3grq!<)rH!%.dHs3grq!<`AN!%.dOs5F#+!=8_b!%.dSs5F#+!=o.r!%.dYs6K_5!>>G!!%.d]s6K_5!?;(*!%.des7QF?!?M4,!%.dis7QF?!?qL0!%.dks7QF?!@.X2!%.dms4@<!!@@d4!%.dos4@<!!A"30!%.e!s5F#+!AFK4!%.e%s5F#+!Ajc8!%.e,s3:Tl!BL2R!%.e.s3:Tl!B^>6!%.e0s5F#+!BpJ8!%.e2s5F#+!C-V:!%.e4s5F#+"mQ''4!%.sZs5F#+"sX*6!%.t$s7QF?"t]f@!%.t&s7QF?"torB!%.t.s4@<!"ucMJ!%.t0s4@<!"uuYL!%.u''s3grq#.acZ!%.u^s7QF?#K-So!%/#ks4@<!#KQks!%/$4s6K_5$#BS-!%/(hs6K_5$#]e0!%/(ks6K_6!$qU(!%7gos4@<"!%@lr!%7grs3:Tm!%S$$!%7gts4@<"!%e00!%7h!s6K_6!&";s!%7h#s3grr!&4H*!%7h%s4@<"!&FT,!%7h(s4@<"!&jl&!%7h+s6K_6!''1))!%7h.s3:Tm!''C5?!%7h0s3:Tm!''UAA!%7h8s5F#,!(R"J!%7h;s5F#,!(d.V!%7h=s5F#,!)!:N!%7hAs5F#,!)W^J!%7hEs4@<"!)ijV!%7hGs6K_6!*''!X!%7hIs5F#,!*9-d!%7hKs5F#,!*K9M!%7hMs4@<"!*]ET!%7hOs5F#,!*oQV!%7hQs4@<"!.t71!%7i"s5F#,!/1C3!%7i$s5F#,!/CO5!%7i&s5F#,!/U[7!%7i(s4@<"!/gg*!%7i*s3grr!0$s,!%7i,s3grr!07*=!%7i.s5F#,!0I6?!%7i0s5F#,!0mN9!%7i4s4@<"!1*Z;!%7i6s4@<"!1<f=!%7i9s4@<"!2'';:!%7iAs5F#,!2KSR!%7iCs5F#,!2]_T!%7iEs5F#,!2okV!%7iGs5F#,!3-"X!%7iIs6K_6!3?.d!%7iKs6K_6!3Q:f!%7iQs5F#,!42^X!%7iSs5F#,!4Djd!%7iUs5F#,!4W!f!%7iWs5F#,!4r3i!%7iZs3grr!5/?\!%7i\s3grr!5AK^!%7i^s4@<"!5\]f!%7ias5F#,!5nir!%7ics5F#,!6+ut!%7ies5F#,!6>-!!%7igs4@<"!6Y>o!%7ijs5F#,!6kJq!%7ims4@<"!71])!%7ips5F#,!7_%t!%7its6K_6!8%8;!%7j$s3grr!8IP?!%7j&s3grr!8db.!%7j*s4@<"!9*t;!%7j,s4@<"!9=+=!%7j.s4@<"!9O7?!%7jBs3:Tm!;lfF!%7jGs3grr!<<)J!%7jMs3grr!=&SV!%7jRs4@<"!=JkZ!%7jXs4@<"!>#4i!%7jZs4@<"!>5@k!%7j\s4@<"!>GLm!%7j^s4@<"!>YXo!%7jes5F#,!?D-b!%7jgs6K_6!?hEf!%7jks6K_6!@%Qh!%7jms6K_6!@7^3!%7jos5F#,!@Ij5!%7jus3grr!A4?#!%7k$s3grr!AXW''!%7k(s3grr!BC,)!%7k.s4@<"!BU8+!%7k0s5F#,!BgD7!%7k2s5F#,!C$P9!%7k4s5F#,!C6\;!%8$8s3:Tm"q:Oa!%8$qs6K_6"tT`!!%8%&s6K_6"tfl#!%8%(s6K_6"uZGI!%8%0s5F#,"ulSK!%8%2s5F#,#(us)!%8&^s3:Tm#.jie!%8.hs5F#,$#KY$!%8.ks5F#,$#fk''!%@mYs24md!"f1i!%@m[s24md!$qTs!%@mps5F#-!%@lm!%@mss2b6i!%S$.!%@mus4@<#!%e00!%@n"s5F#-!&";n!%@n$s3:Tn!&4H*!%@n&s4@<#!&FT6!%@n)s5F#-!&jl0!%@n.s6K_7!'':/H!%@n0s5F#-!''L;J!%@n2s5F#-!(?kH!%@n;s5F#-!([(K!%@n=s6K_7!(m4W!%@n?s5F#-!)<L[!%@nEs3:Tn!)`dA!%@nGs5F#-!)rpW!%@nIs5F#-!*0''O!%@nKs4@<#!*B3e!%@nMs3:Tn!*T?q!%@nOs7QFA!*fKU!%@nQs7QFA!+#WM!%@nbs5F#-!.Fmm!%@o"s4@<#!/(=(!%@o$s4@<#!/:I*!%@o&s4@<#!/LU,!%@o(s4@<#!/^a8!%@o*s3:Tn!/pm&!%@o,s3:Tn!0.$(!%@o.s5F#-!0@0>!%@o0s5F#-!0R<@!%@o4s5F#-!1!TD!%@o6s5F#-!13`F!%@o8s5F#-!1NrI!%@o?s6K_7!2BMQ!%@oCs5F#-!2TYS!%@oEs5F#-!2feU!%@oGs5F#-!3#qW!%@oIs5F#-!36(c!%@oKs6K_7!3H4e!%@oMs6K_7!4)Xa!%@oSs3:Tn!4;dc!%@oUs5F#-!4Mpe!%@oWs5F#-!4`''g!%@oZs5F#-!5&9V!%@o\s3:Tn!58EX!%@o^s3:Tn!5JR-!%@oas7QFA!5ecg!%@ocs5F#-!6"oi!%@oes5F#-!65&k!%@ogs5F#-!6G3"!%@ojs5F#-!6bE%!%@ols5F#-!7(W(!%@oos5F#-!7Ci+!%@ots3:Tn!7h,9!%@p"s6K_7!8@Iu!%@p&s6K_7!8RV"!%@p)s5F#-!9!n:!%@p,s5F#-!94%<!%@p.s5F#-!9F1>!%@p0s5F#-!;QT9!%@pFs3:Tn!<)rC!%@pJs3:Tn!<`AI!%@pQs3:Tn!=8_N!%@pUs3:Tn!=o.h!%@pZs5F#-!>,:j!%@p\s5F#-!>>Fl!%@p^s5F#-!>PRn!%@p`s5F#-!?;''k!%@pgs4@<#!?M3m!%@pks4@<#!?qKq!%@pms4@<#!@.Ws!%@pps6K_7!A"2q!%@q#s3:Tn!AFJu!%@q''s3:Tn!Ajc$!%@q.s6K_7!BL2R!%@q0s6K_7!B^>@!%@q2s3:Tn!BpJB!%@q4s3:Tn!C-VD!%@q6s3:Tn"mQ''/!%A*\s3:Tn"sX*,!%A+&s4@<#"t]f,!%A+(s4@<#"tor.!%A+1s6K_7"uuYL!%A,)s3:Tn#.ad#!%A,`s7QFA#NPjD!%A06s3:Tn$#BS-!%A4js6K_7$#]e0!%A4ms6K_8!"]+h!%Is\s5F#.!$qTs!%Isqs6K_8!%@lr!%Ists3:To!%S$8!%It!s4@<$!%e00!%It$s3:To!&+B$!%It&s4@<$!&=N+!%It(s6K_8!&X`B!%It,s7QFB!&sr1!%It/s3:To!'':/*!%It1s4@<$!''L;,!%It3s4@<$!(?kR!%It?s6K_8!)!:X!%ItCs5F#.!)W^T!%ItGs5F#.!)rpa!%ItKs6K_8!*9-d!%ItMs6K_8!*K9\!%ItOs7QFB!*]Er!%ItQs5F#.!*oQt!%ItSs5F#.!.Fn6!%Iu#s4@<$!/(=(!%Iu%s4@<$!/:I*!%Iu''s4@<$!/LU,!%Iu)s4@<$!/^aB!%Iu+s3grt!/pm+!%Iu-s3grt!0.$-!%Iu/s5F#.!0@0>!%Iu1s5F#.!0R<@!%Iu5s6K_8!1!TN!%Iu7s6K_8!13`P!%Iu9s6K_8!1NrS!%Iu@s3:To!2BM[!%IuDs6K_8!2TY]!%IuFs6K_8!2fe_!%IuHs6K_8!3#qa!%IuTs5F#.!5&9j!%Iu]s5F#.!58El!%Iu_s5F#.!5JR-!%Iubs7QFB!5ecg!%Iuds6K_8!6"oi!%Iufs6K_8!65&k!%Iuhs6K_8!6G3,!%Iuks6K_8!6kK0!%Iuos6K_8!7_%t!%J!&s3grt!8RV''!%J!*s6K_8!9!nD!%J!-s6K_8!94%F!%J!/s6K_8!9F1H!%J!1s6K_8!;QT>!%J!Gs3grt!<)rH!%J!Ks3grt!<`AN!%J!Rs5F#.!=8_b!%J!Vs5F#.!=o.r!%J!\s6K_8!>>G!!%J!`s6K_8!?;(*!%J!hs7QFB!?M4,!%J!ls7QFB!?qL0!%J!ns7QFB!@.X2!%J!ps4@<$!@@d4!%J!rs4@<$!A"30!%J"$s5F#.!AFK4!%J"(s5F#.!Ajc8!%J"/s3:To!BL2R!%J"1s3:To!B^>6!%J"3s5F#.!BpJ8!%J"5s5F#.!C-V:!%J"7s5F#."mQ''4!%J0]s5F#."sX*6!%J1''s7QFB"t]f@!%J1)s7QFB"torB!%J11s4@<$"ucMJ!%J13s4@<$"uuYL!%J2*s3grt#.acZ!%J2as7QFB#K-So!%J5ns4@<$#KQks!%J67s6K_8$#BS-!%J:ks6K_8$#]e0!%J:ns6K_9!$qU2!%S$rs3gru!%@lr!%S$us3:Tp!%S#t!%S%"s4@<%!%e0D!%S%$s6K_9!&";s!%S%&s3gru!&4H*!%S%(s4@<%!&FT''!%S%+s3gru!&jl5!%S%.s7QFC!''1)G!%S%1s6K_9!''C5!!%S%3s6K_9!''UA#!%S%;s4@<%!(R"J!%S%>s5F#/!(d.V!%S%@s7QFC!)!:D!%S%Ds6K_9!)W^@!%S%Hs3:Tp!)ijV!%S%Js5sA4!*''!X!%S%Ls4mZ*!*9-F!%S%Ns7QFC!*K9M!%S%Ps5F#/!*]E^!%S%Rs2b6k!*oQ`!%S%Ts3:Tp!.t7;!%S&%s6K_9!/1C=!%S&''s6K_9!/CO?!%S&)s6K_9!/U[A!%S&+s3gru!/gg*!%S&-s3gru!0$s,!%S&/s3gru!07*Q!%S&1s7QFC!0I6S!%S&3s7QFC!0mN4!%S&7s3gru!1*Z6!%S&9s3gru!1<f8!%S&<s3gru!2'';X!%S&Ds4@<%!2KSH!%S&Fs4@<%!2]_J!%S&Hs4@<%!2okL!%S&Js4@<%!3-"X!%S&Ls6K_9!3?.d!%S&Ns6K_9!3Q:f!%S&Ts5F#/!42^N!%S&Vs5F#/!4Djd!%S&Xs5F#/!4W!f!%S&Zs5F#/!4r3i!%S&]s3gru!5/?\!%S&_s3gru!5AK^!%S&as5F#/!5\]p!%S&ds6K_9!5nih!%S&fs6K_9!6+uj!%S&hs6K_9!6>,l!%S&js3gru!6Y>j!%S&ms5F#/!6kJl!%S&ps3gru!71])!%S&ss5F#/!7_%t!%S''"s6K_9!8%8;!%S''''s3gru!8IP?!%S'')s3gru!8db)!%S''-s3gru!9*t1!%S''/s3gru!9=+3!%S''1s3gru!9O75!%S''Es3:Tp!;lfF!%S''Js3gru!<<)J!%S''Ps3gru!=&SL!%S''Us3:Tp!=JkP!%S''[s3gru!>#4i!%S'']s3gru!>5@k!%S''_s3gru!>GLm!%S''as3gru!>YXo!%S''hs4mZ*!?D-q!%S''js3:Tp!?hEu!%S''ns3:Tp!@%R"!%S''ps3:Tp!@7^=!%S''rs7QFC!@Ij?!%S(#s3gru!A4?#!%S(''s3gru!AXW''!%S(+s3gru!BC,G!%S(1s5F#/!BU8I!%S(3s24mf!BgD-!%S(5s24mf!C$P/!%S(7s24mf!C6\1!%S6;s3:Tp"q:OW!%S6ts5sA4"tT`0!%S7)s3:Tp"tfl2!%S7+s3:Tp"uZGS!%S73s7QFC"ulSU!%S75s7QFC#(us)!%S8as6K_9#.jio!%S@ks7QFC$#KY8!%S@ns7QFC$#fk;!%\*qs6K_:!%.`p!%\*us3gs!!%Irn!%\+"s3gs!!%\*%!%\+$s7QFD!%n6;!%\+&s3:Tq!&+B$!%\+(s4@<&!&=N+!%\+*s3gs!!&X`)!%\+.s4mZ+!&srO!%\+1s6K_:!'':/H!%\+3s24mg!''L;J!%\+5s24mg!(?k>!%\+>s5F#0!([(K!%\+@s6K_:!(m4a!%\+Bs4@<&!)<L[!%\+Hs3:Tq!)`dA!%\+Js5F#0!)rp\!%\+Ls5F#0!*0''T!%\+Ns3:Tq!*B3o!%\+Ps3gs!!*T?]!%\+Rs5F#0!*fKF!%\+Ts5F#0!+#WM!%\,%s6K_:!/(=<!%\,''s6K_:!/:I>!%\,)s6K_:!/LU@!%\,+s6K_:!/^a)!%\,-s3gs!!/pm+!%\,/s3gs!!0.$-!%\,1s7QFD!0@0R!%\,3s7QFD!0R<T!%\,7s3gs!!1!T5!%\,9s3gs!!13`7!%\,;s3gs!!1Nr:!%\,Bs6K_:!2BMG!%\,Fs4@<&!2TYI!%\,Hs4@<&!2feK!%\,Js4@<&!3#qM!%\,Ls5F#0!36(c!%\,Ns6K_:!3H4e!%\,Ps6K_:!4)Xa!%\,Vs3:Tq!4;dc!%\,Xs5F#0!4Mpe!%\,Zs5F#0!4`''g!%\,]s5F#0!5&9[!%\,_s3gs!!58E]!%\,as3gs!!5JQn!%\,ds5F#0!5ed&!%\,fs4@<&!6"p(!%\,hs4@<&!65''*!%\,js4@<&!6G2h!%\,ms3gs!!6bE%!%\,os3gs!!7(Vn!%\,rs5F#0!7Ci+!%\-"s3gs!!7h,9!%\-%s6K_:!8@J%!%\-)s6K_:!8RV''!%\-,s3gs!!9!n+!%\-/s4@<&!94%-!%\-1s4@<&!9F1/!%\-3s4@<&!;QT>!%\-Is3gs!!<)rH!%\-Ms3gs!!<`AN!%\-Ts3:Tq!=8_N!%\-Xs3:Tq!=o.Y!%\-]s5F#0!>,:[!%\-_s5F#0!>>F]!%\-as5F#0!>PR_!%\-cs5F#0!?;''p!%\-js4mZ+!?M3c!%\-ns4mZ+!?qKg!%\-ps4mZ+!@.Wi!%\-rs7QFD!@@d>!%\-ts7QFD!A"3!!%\.&s3gs!!AFK%!%\.*s3gs!!Ajc)!%\.1s6K_:!BL2>!%\.3s6K_:!B^>"!%\.5s3:Tq!BpJ$!%\.7s3:Tq!C-V&!%\.9s3:Tq"mQ''4!%\<_s3:Tq"sX*1!%\=)s4mZ+"t]f"!%\=+s4mZ+"tor$!%\=3s7QFD"ucMT!%\=5s7QFD"uuYV!%\>,s3gs!#.ad#!%\>cs5F#0$#BS7!%\Fms7QFD$#]e:!%\Fps7QFE!$qU(!%e0ts5F#1!%@lr!%e1"s2b6m!%S$.!%e1$s4@<''!%e0:!%e1''s2b6m!&+B$!%e1)s4@<''!&=N+!%e1+s5F#1!&X`8!%e1/s5F#1!''1))!%e13s3:Tr!''C5+!%e15s3:Tr!''UA-!%e1=s5F#1!(R"T!%e1@s6K_;!(d.[!%e1Cs5F#1!)<L[!%e1Is4@<''!)`dK!%e1Ks6K_;!)rpa!%e1Ms6K_;!*0''Y!%e1Os6K_;!*K9R!%e1Rs5F#1!*]E^!%e1Ts3:Tr!*oQ`!%e1Vs4@<''!.t71!%e2''s5F#1!/1C3!%e2)s5F#1!/CO5!%e2+s5F#1!/U[7!%e2-s5F#1!/gg*!%e2/s3gs"!0$s,!%e21s3gs"!07*G!%e23s6K_;!0I6I!%e25s6K_;!0mNC!%e29s5F#1!1*ZE!%e2;s5F#1!1<fG!%e2>s5F#1!2'';:!%e2Fs5F#1!2KSR!%e2Hs5F#1!2]_T!%e2Js5F#1!2okV!%e2Ls5F#1!3-"b!%e2Ns7$(@!3?.i!%e2Ps7$(@!3Q:k!%e2Vs6K_;!42^X!%e2Xs6K_;!4Djn!%e2Zs6K_;!4W!p!%e2\s6K_;!4r3s!%e2_s4@<''!5/?a!%e2as4@<''!5AKc!%e2cs5F#1!5\]p!%e2fs5F#1!5nir!%e2hs5F#1!6+ut!%e2js5F#1!6>-!!%e2ls5F#1!6Y?$!%e2os6K_;!6kK&!%e2rs5F#1!71]3!%e2us6K_;!7_%t!%e3$s7$(@!8%8@!%e3)s3gs"!8IPD!%e3+s3gs"!8db8!%e3/s5F#1!9*t;!%e31s5F#1!9=+=!%e33s5F#1!9O7?!%e3Gs2b6m!;lfF!%e3Ls3gs"!<<)J!%e3Rs3gs"!=&SV!%e3Ws4@<''!=JkZ!%e3]s5F#1!>#4s!%e3_s5F#1!>5@u!%e3as5F#1!>GM"!%e3cs5F#1!>YY$!%e3js5F#1!?D.!!%e3ls6K_;!?hF%!%e3ps6K_;!@%R''!%e3rs6K_;!A"3&!%e4''s4@<''!AFK*!%e4+s4@<''!Ajc.!%e42s3:Tr!BL2>!%e44s3:Tr!B^>,!%e46s4@<''!BpJ.!%e48s4@<''!C-V0!%e4:s4@<''"mQ''/!%eB`s4@<''"sX*6!%eC*s5F#1"t]f@!%eC,s5F#1"torB!%eD-s3gs"#.acZ!%eDds5F#2!"]+h!%n6_s4@<(!"o7j!%n6us3:Ts!%@lm!%n7#s2b6n!%S#o!%n7%s3:Ts!%e0&!%n7(s2b6n!&+At!%n7*s3:Ts!&=N!!%n7,s3:Ts!&X`$!%n70s3:Ts!(?kH!%n7@s4@<(!([(A!%n7Bs5F#2!(m4M!%n7Ds5F#2!)<Le!%n7Js4@<(!)`dK!%n7Ls4@<(!)rpW!%n7Ns4@<(!*0''O!%n7Ps6K_<!*B3[!%n7Rs4@<(!*T?]!%n7Ts5F#2!*fKi!%n7Vs5F#2!+#WW!%n7gs4@<(!.Fn"!%n8.s3:Ts!/gg%!%n80s3:Ts!0$s''!%n82s3:Ts!07*3!%n84s4@<(!0I65!%n86s4@<(!0mN/!%n8:s3:Ts!1*Z1!%n8<s3:Ts!1<f3!%n8?s3:Ts!2BMQ!%n8Hs5F#2!2TYS!%n8Js5F#2!2feU!%n8Ls5F#2!3#qW!%n8Ns4@<(!36(Y!%n8Ps5F#2!3H4[!%n8Rs5F#2!4)XW!%n8Xs4@<(!4;dY!%n8Zs4@<(!4Mp[!%n8\s4@<(!4`'']!%n8_s4@<(!5&9`!%n8as4@<(!58Eb!%n8cs4@<(!5JQn!%n8fs5F#2!5nir!%n8js5F#2!6>-!!%n8ms3:Ts!6Y>e!%n8ps4@<(!6kJg!%n8ss3:Ts!71\t!%n9!s4@<(!7_%o!%n9%s5F#2!8%81!%n9*s3:Ts!8IP5!%n9,s3:Ts!8db$!%n90s3:Ts!9*t;!%n92s3:Ts!9=+=!%n94s3:Ts!9O7?!%n9Hs2b6n!;lfA!%n9Ms3:Ts!<<)E!%n9Ss3:Ts!=&SV!%n9Xs4@<(!=JkZ!%n9^s3:Ts!>#4_!%n9`s3:Ts!>5@a!%n9bs3:Ts!>GLc!%n9ds3:Ts!>YXe!%n9ks4@<(!?D-b!%n9ms6K_<!?hEf!%n9qs6K_<!@%Qh!%n9ss6K_<!@@d*!%n:&s4@<(!A4?(!%n:*s4@<(!AXW,!%n:.s4@<(!BL2>!%n:7s4@<(!C$P9!%n:;s4@<("mQ''/!%nHas4@<("sX*,!%nI+s3:Ts"t]f@!%nI-s3:Ts"torB!%nI6s5F#2"uuYB!%nJ.s3:Ts#.jio!%nMos5F#2#KHf''!%nMss5F#2#NPj:!%nN;s4@<($#BS#!%nRos5F#2$#]e&!%nRrs5F#3!"]+r!&"<`s3:Tt!"o7t!&"=!s4@<)!%@lm!&"=$s2b6o!%S$$!&"=&s4@<)!%e00!&"=)s2b6o!&+At!&"=+s4@<)!&=N+!&"=-s4@<)!&X`.!&"=1s4@<)!&sr1!&"=4s24mj!'':.u!&"=7s24mj!(?kR!&"=As5F#3!([(K!&"=Cs5sA8!(m4M!&"=Es6K_=!)<Le!&"=Ks4@<)!)`dK!&"=Ms5F#3!*''!X!&"=Ps5F#3!*9-d!&"=Rs5F#3!*K9R!&"=Ts4@<)!*]ET!&"=Ws4@<)!+#WW!&"=hs3:Tt!.Fn"!&">/s4@<)!/gg%!&">1s3:Tt!0$s''!&">3s3:Tt!07*=!&">5s5F#3!0I6?!&">7s5F#3!0mN9!&">;s4@<)!1*Z;!&">=s4@<)!1<f=!&">@s4@<)!2'';0!&">Hs6K_=!2KS\!&">Js6K_=!2]_^!&">Ls6K_=!2ok`!&">Ns6K_=!3-"X!&">Ps5sA8!3?._!&">Rs5sA8!3Q:a!&">Xs5F#3!42^X!&">Zs5F#3!4Djd!&">\s5F#3!4W!f!&">^s5F#3!4r3i!&">as4@<)!5/?a!&">cs4@<)!5AKc!&">es4@<)!5\]f!&">is6K_=!6,!)!&">ms6K_=!6G2m!&">ps4@<)!6bE%!&">rs4@<)!7(Vs!&">us5F#3!7Ci+!&"?%s3:Tt!7h,4!&"?(s5sA8!8@Iu!&"?,s5sA8!8RV"!&"?/s4@<)!9!n0!&"?2s6K_=!94%2!&"?4s6K_=!9F14!&"?6s6K_=!;QT9!&"?Ls3:Tt!<)rC!&"?Ps3:Tt!<`AI!&"?Ws4@<)!=8_X!&"?[s4@<)!=o.^!&"?`s5F#3!>,:`!&"?bs5F#3!>>Fb!&"?ds5F#3!>PRd!&"?fs5F#3!?;''u!&"?ms4@<)!?M4,!&"?qs4@<)!?qL0!&"?ss4@<)!@.X2!&"?us4@<)!@@d*!&"@"s4@<)!A"3&!&"@)s4@<)!AFK*!&"@-s4@<)!Ajc.!&"@4s24mj!BL24!&"@6s24mj!BgD7!&"@:s4@<)!C6\;!&"N?s2b6o"q:Oa!&"O,s4@<)"t]f@!&"O.s4@<)"torB!&"O6s4@<)"ucM@!&"O8s4@<)"uuYB!&"P/s3:Tt#.acP!&"Pfs4@<)#K-S[!&"Sss24mj#KQk_!&"T;s3:Tt#NYp;!&"Xos5F#3$#KY$!&"Xrs5F#3$#fk''!&+Bus4@<*!%.a4!&+C$s4@<*!%Irs!&+C&s6K_>!%\*/!&+C(s6K_>!%n6E!&+C*s3gs%!&+B)!&+C,s5F#4!&=N5!&+C.s6K_>!&X`B!&+C2s5F#4!&srE!&+C5s4@<*!'':/4!&+C7s3:Tu!''L;6!&+C9s3:Tu!(?k\!&+CBs6K_>!([(U!&+CDs6K_>!(m4a!&+CFs7QFH!)<L[!&+CLs5F#4!)`dU!&+CNs6K_>!)rpW!&+CPs6K_>!*0''Y!&+CRs5F#4!*B3o!&+CTs5F#4!*T?]!&+CVs5F#4!*fKU!&+CXs5F#4!+#Wa!&+D)s4@<*!/(=(!&+D+s4@<*!/:I*!&+D-s4@<*!/LU,!&+D/s4@<*!/^aB!&+D1s4@<*!/pm0!&+D3s4@<*!0.$2!&+D5s6K_>!0@0H!&+D7s6K_>!0R<J!&+D;s6K_>!1!TN!&+D=s6K_>!13`P!&+D?s6K_>!1NrS!&+DFs4@<*!2BMe!&+DJs7QFH!2TYg!&+DLs7QFH!2fei!&+DNs7QFH!3#qk!&+DPs6K_>!36(c!&+DRs6K_>!3H4e!&+DTs6K_>!4)Xk!&+DZs5F#4!4;dm!&+D\s6K_>!4Mpo!&+D^s6K_>!4`''q!&+Das6K_>!5&9j!&+Dcs5F#4!58El!&+Des5F#4!5JQn!&+Dhs5F#4!5ecg!&+Djs7QFH!6"oi!&+Dls7QFH!65&k!&+Dns7QFH!6G3,!&+Dqs6K_>!6bE/!&+Dss6K_>!7(W2!&+E!s6K_>!7Ci5!&+E&s4@<*!7h,9!&+E)s6K_>!8@J*!&+E-s6K_>!8RV,!&+E0s6K_>!9!nD!&+E3s7QFH!94%F!&+E5s7QFH!9F1H!&+E7s7QFH!;QTC!&+EMs4@<*!<)rM!&+EQs4@<*!<`AS!&+EXs5F#4!=8_b!&+E\s5F#4!=o.r!&+Eas6K_>!>,:t!&+Ecs6K_>!>>G!!&+Ees6K_>!>PS#!&+Egs6K_>!?;''u!&+Ens5F#4!?M4"!&+Ers5F#4!?qL&!&+Ets5F#4!@.X(!&+F!s6K_>!@@d>!&+F#s6K_>!A"30!&+F*s5F#4!AFK4!&+F.s5F#4!Ajc8!&+F5s4@<*!BL2>!&+F7s4@<*!B^>,!&+F9s5F#4!BpJ.!&+F;s5F#4!C-V0!&+F=s5F#4"mQ''9!&+Tcs5F#4"sX*,!&+U-s5F#4"t]f6!&+U/s5F#4"tor8!&+U7s6K_>"ucMT!&+U9s6K_>"uuYV!&+V0s4@<*#.acd!&+Vgs5F#4$#BS7!&+^qs7QFH$#]e:!&+^ts7QFI!$qTs!&4I#s6K_?!%@m"!&4I&s3gs&!%S$8!&4I(s5F#5!%e0:!&4I*s7QFI!&"<#!&4I,s4@<+!&4H4!&4I.s5F#5!&FT@!&4I1s6K_?!&jl:!&4I4s6K_?!''1)3!&4I7s4@<+!''C5+!&4I9s4@<+!''UA-!&4IAs7QFI!(R"T!&4IDs6K_?!(d.V!&4IFs7QFI!)!:b!&4IJs6K_?!)W^T!&4INs5F#5!)ij`!&4IPs5F#5!*''!b!&4IRs5F#5!*9-Z!&4ITs7QFI!*K9\!&4IVs5F#5!*]E^!&4IXs4@<+!*oQ`!&4IZs5F#5!.t7''!&4J+s4@<+!/1C)!&4J-s4@<+!/CO+!&4J/s4@<+!/U[-!&4J1s6K_?!/gg/!&4J3s4@<+!0$s1!&4J5s4@<+!07*G!&4J7s6K_?!0I6I!&4J9s6K_?!0mNM!&4J=s6K_?!1*ZO!&4J?s6K_?!1<fQ!&4JBs6K_?!2'';D!&4JJs7QFI!2KSf!&4JLs7QFI!2]_h!&4JNs7QFI!2okj!&4JPs7QFI!3-"b!&4JRs6K_?!3?.d!&4JTs6K_?!3Q:f!&4JZs6K_?!42^b!&4J\s6K_?!4Djn!&4J^s6K_?!4W!p!&4J`s6K_?!4r3s!&4Jcs5F#5!5/?k!&4Jes5F#5!5AKm!&4Jgs5F#5!5\]p!&4Jjs4@<+!5nj1!&4Jls4@<+!6,!3!&4Jns4@<+!6>-5!&4Jps6K_?!6Y?.!&4Jss6K_?!6kK0!&4K!s6K_?!71]3!&4K$s6K_?!7_&$!&4K(s6K_?!8%8;!&4K-s4@<+!8IP?!&4K/s4@<+!8dbB!&4K3s6K_?!9*tO!&4K5s6K_?!9=+Q!&4K7s6K_?!9O7S!&4KKs3gs&!;lfK!&4KPs4@<+!<<)O!&4KVs4@<+!=&S`!&4K[s5F#5!=Jkd!&4Kas6K_?!>#4s!&4Kcs6K_?!>5@u!&4Kes6K_?!>GM"!&4Kgs6K_?!>YY$!&4Kns5F#5!?D.!!&4Kps5F#5!?hF%!&4Kts5F#5!@%R''!&4L!s5F#5!@7^3!&4L#s7QFI!@Ij5!&4L)s5F#5!A4?2!&4L-s5F#5!AXW6!&4L1s5F#5!BC,3!&4L7s5F#5!BU85!&4L9s3:U!!BgDA!&4L;s3:U!!C$PC!&4L=s3:U!!C6\E!&4ZAs3gs&"q:Ok!&4[%s5F#5"tT`5!&4[/s5F#5"tfl7!&4[1s5F#5"uZGI!&4[9s7QFI"ulSK!&4[;s7QFI#(us.!&4\gs4@<+#.jio!&4dqs7QFI$#KY8!&4dts7QFI$#fk;!&=Nbs5F#6!"o7j!&=O"s5F#6!%@m,!&=O''s4@<,!%\*/!&=O*s7QFJ!&"<(!&=O-s5F#6!&4H4!&=O/s5F#6!&jlD!&=O5s4@<,!''1)3!&=O8s4@<,!''C5+!&=O:s4@<,!''UA-!&=OBs6K_@!)!:X!&=ONs6K_@!)`d_!&=OQs7QFJ!*0''c!&=OVs7$(E!+#Wk!&=P&s6K_@!.t71!&=P,s5F#6!/1C3!&=P.s5F#6!/CO5!&=P0s5F#6!/U[7!&=P3s5F#6!/pm:!&=P5s5F#6!0.$<!&=P7s7QFJ!0@0R!&=P9s7QFJ!0R<T!&=PHs4@<,!2BM[!&=PLs6K_@!2TY]!&=PNs6K_@!2fe_!&=PPs6K_@!3#qa!&=P\s6K_@!5&:$!&=Pes7$(E!58F&!&=Pgs7$(E!5ecq!&=Pls6K_@!6"os!&=Pns6K_@!65&u!&=Pps6K_@!7_&.!&=Q.s5F#6!8RV6!&=Q5s6K_@!9=+G!&=Q9s6K_@!;QTH!&=QOs5F#6!<)rW!&=QSs5F#6!<`A]!&=QZs6K_@!=8_l!&=Q^s6K_@!?;(*!&=Qps6K_@!?hF/!&=R!s6K_@!@7]t!&=R%s4@<,!A"3?!&=R,s7$(E!AFKC!&=R0s7$(E!AjcG!&=R7s4@<,!BU85!&=R:s3:U"!BgDK!&=R<s3:U"!C$PM!&=R>s3:U"!C6\O!&=`Bs4@<,"q:Ou!&=a&s7QFJ"tT`?!&=a1s6K_@"uZG5!&=a;s4@<,#(us8!&=bhs4@<,#K-So!&=f!s4@<,#KQks!&=f?s6K_A!"]+6!&FTds3:U#!"o78!&FU#s24mn!%.a4!&FU''s3gs(!%Irn!&FU)s6K_A!%\*%!&FU+s6K_A!%n6''!&FU-s3:U#!&+B$!&FU/s4@<-!&=N+!&FU1s6K_A!&X`B!&FU5s5F#7!&sr;!&FU8s4@<-!'':/4!&FU:s24mn!''L;6!&FU<s24mn!(?k4!&FUEs4@<-!([(A!&FUGs5F#7!)!::!&FUOs4@<-!)`dK!&FUQs4@<-!)rpa!&FUSs4@<-!*0''Y!&FUUs5F#7!*K9R!&FUZs4@<-!+#WW!&FUls3:U#!.Fmc!&FV,s24mn!/(<i!&FV.s24mn!/:Hk!&FV0s24mn!/LTm!&FV2s24mn!/^aB!&FV4s3gs(!/pm+!&FV6s3gs(!0.$-!&FV8s6K_A!0@0H!&FV:s6K_A!0R<J!&FV>s6K_A!1!TN!&FV@s6K_A!13`P!&FVBs6K_A!1NrS!&FVIs4@<-!2BM=!&FVMs3:U#!2TY?!&FVOs3:U#!2feA!&FVQs3:U#!3#qC!&FVSs4@<-!36(Y!&FVUs5F#7!3H4[!&FVWs5F#7!4)XW!&FV]s4@<-!4;dY!&FV_s4@<-!4Mp[!&FVas4@<-!4`'']!&FVds4@<-!5&9`!&FVfs4@<-!58Eb!&FVhs4@<-!5ecS!&FVms3:U#!6"oU!&FVos3:U#!65&W!&FVqs3:U#!6G3,!&FVts6K_A!6bDp!&FW!s6K_A!7(W2!&FW$s4@<-!7Ci!!&FW)s3gs(!7h,/!&FW,s5F#7!8@J%!&FW0s5F#7!8RV''!&FW3s6K_A!9!nD!&FW6s3:U#!94%F!&FW8s3:U#!9F1H!&FW:s3:U#!;QT>!&FWPs3gs(!<)rH!&FWTs3gs(!<`AN!&FW[s4@<-!=8_X!&FW_s4@<-!=o.r!&FWds4@<-!>,:t!&FWfs4@<-!>>G!!&FWhs4@<-!>PS#!&FWjs4@<-!?;''u!&FWqs5F#7!?M4"!&FWus5F#7!?qL&!&FX"s5F#7!@.X(!&FX$s5F#7!@Ij+!&FX+s4@<-!A4?(!&FX/s4@<-!AXW,!&FX3s4@<-!BC,3!&FX:s4@<-!B^>"!&FX<s4@<-!BpJ$!&FX>s4@<-!C-V&!&FX@s4@<-"mQ''4!&Fffs4@<-"sX*6!&Fg0s5F#7"t]f6!&Fg2s5F#7"tor8!&Fg:s5F#7"ulSA!&Fh3s3gs(#.acd!&Fkts6K_A#KHf1!&Fl#s6K_A#NPj0!&Fl@s24mo!"]+h!&OZfs5F#8!$qU(!&O[(s5F#8!%Is#!&O[+s5F#8!%e0D!&O[.s4@<.!&+B3!&O[0s5F#8!&=N5!&O[6s6K_B!&sr1!&O[9s4@<.!'':/4!&O[;s3:U$!''L;6!&O[=s3:U$!(?kR!&O[Js6K_B!)W^^!&O[Qs6K_B!)rpk!&O[Us6K_B!*K9k!&O[]s6K_B!.Fn6!&O\-s5F#8!/(=2!&O\/s5F#8!/:I4!&O\1s5F#8!/LU6!&O\3s5F#8!/gg9!&O\6s5F#8!0$s;!&O\8s5F#8!07*Q!&O\:s7QFL!0I6S!&O\<s7QFL!2'';D!&O\Ms6K_B!2KS\!&O\Os6K_B!2]_^!&O\Qs6K_B!2ok`!&O\Ss6K_B!42^l!&O\fs7$(G!5/@%!&O\hs7$(G!5AL''!&O\ms5F#8!5nj''!&O\os5F#8!6,!)!&O\qs5F#8!6>-+!&O]*s5F#8!8@J4!&O]2s5F#8!9*tE!&O]9s6K_B!9O7I!&O]Ns4@<.!;lfU!&O]Ss5F#8!<<)Y!&O]Ys5F#8!=&Sj!&O]^s6K_B!=Jkn!&O]qs6K_B!?D.+!&O^!s6K_B!@%R1!&O^%s4@<.!@Ij!!&O^,s7$(G!A4?A!&O^0s7$(G!AXWE!&O^4s7$(G!BC,3!&O^;s4@<.!B^>,!&O^=s6K_B!BpJ.!&O^?s6K_B!C-V0!&O^As6K_B"mQ''>!&Olgs6K_B"sX*@!&Om1s6K_B"tflA!&Om;s4@<."ulS7!&On4s5F#8#.acd!&Oqus4@<.#KHer!&Or$s4@<.#NYpO!&Xa%s7QFM!%.a>!&Xa)s4@</!%Iri!&Xa+s7QFM!%\*/!&Xa-s7QFM!&";n!&Xa0s4@</!&4H4!&Xa2s5F#9!&FTJ!&Xa5s7QFM!&jlD!&Xa8s6K_C!''1))!&Xa;s3:U%!''C5I!&Xa=s3:U%!''UAK!&XaEs7QFM!(R"^!&XaHs7QFM!)!:b!&XaNs7QFM!)W^h!&XaRs7QFM!)ijj!&XaTs7QFM!*''!l!&XaVs6K_C!*9-n!&XaYs4@</!*T?q!&Xa[s7QFM!*oQt!&Xa^s7QFM!.t7E!&Xb/s7QFM!/1CG!&Xb1s7QFM!/COI!&Xb3s7QFM!/U[K!&Xb5s7QFM!/gg/!&Xb7s4@</!0$s1!&Xb9s4@</!07*Q!&Xb;s7QFM!0I6S!&Xb=s7QFM!0mNW!&XbAs7QFM!1*ZY!&XbCs7QFM!1<f[!&XbFs7QFM!2'';:!&XbNs7QFM!2KSf!&XbPs7QFM!2]_h!&XbRs7QFM!2okj!&XbTs7QFM!3-"l!&Xb^s7QFM!42_!!&Xb`s7QFM!4Dk#!&Xbbs7QFM!4W"%!&Xbds7QFM!4r4(!&Xbgs4@</!5/?a!&Xbis4@</!5AKc!&Xbks7QFM!5\^/!&Xbns7QFM!5nj1!&Xbps7QFM!6,!3!&Xbrs7QFM!6>-5!&Xbts7QFM!6Y?8!&Xc"s7QFM!6kK:!&Xc%s7QFM!71]=!&Xc(s7QFM!7_&$!&Xc1s4@</!8RV,!&Xc5s7QFM!9!nN!&Xc8s7QFM!94%P!&Xc:s7QFM!9F1R!&Xc<s7QFM!;QT9!&XcRs4@</!<)rM!&XcVs4@</!<`AS!&Xc]s7QFM!=8`!!&Xcas7QFM!=o/''!&Xcfs7QFM!>,;)!&Xchs7QFM!>>G+!&Xcjs7QFM!>PS-!&Xcls7QFM!?;(*!&Xcss6K_C!?M46!&Xd"s6K_C!?qL:!&Xd$s6K_C!@.X<!&Xd&s6K_C!@Ij5!&Xd-s4@</!A4?(!&Xd1s4@</!AXW,!&Xd5s4@</!BC,)!&Xd;s7QFM!BU8+!&Xd=s6K_C!BgDU!&Xd?s6K_C!C$PW!&XdAs6K_C!C6\Y!&XrEs2b6u"q:P*!&Xs)s7QFM"tT`?!&Xs3s7QFM"tflA!&Xs5s7QFM"uZGI!&Xs>s6K_C#(us.!&Xtks3:U%#.jj.!&affs3:U&!"f1s!&afhs3:U&!$qU(!&ag(s6K_D!%@m''!&ag+s4@<0!%S$8!&ag-s5F#:!%e0:!&ag0s4@<0!&+B.!&ag2s5F#:!&=N5!&ag4s6K_D!&X`B!&ag8s7QFN!&sr1!&ag;s3:U&!'':/*!&ag=s3:U&!''L;,!&ag?s3:U&!(m4a!&agOs7QFN!)W^^!&agSs6K_D!)rpk!&agWs6K_D!*B3o!&agZs5sA?!*T?g!&ag\s6K_D!*fKU!&ag^s6K_D!+#Wk!&agos6K_D!.Fn,!&ah/s5F#:!/(=2!&ah1s5F#:!/:I4!&ah3s5F#:!/LU6!&ah5s5F#:!/^aB!&ah7s4mZ5!/pm5!&ah9s4mZ5!0.$7!&ah;s6K_D!0@0H!&ah=s6K_D!0R<J!&ahAs6K_D!1!TN!&ahCs6K_D!13`P!&ahEs6K_D!1NrS!&ahLs3:U&!42^l!&ahhs5sA?!5/?p!&ahjs5sA?!5AKr!&ahls6K_D!5\^%!&ahos5F#:!6"os!&ahss5F#:!6G3,!&ai"s6K_D!6kK0!&ai&s6K_D!7_&)!&ai2s4mZ5!8RV1!&ai6s6K_D!9!nD!&ai:s6K_D!9F1H!&aiPs4@<0!;lfP!&aiUs4mZ5!<<)T!&ai[s4mZ5!=&Sj!&ai`s6K_D!=Jkn!&aifs6K_D!>,:t!&aijs6K_D!>PS#!&aiss6K_D!?D.5!&aj#s7QFN!@%R;!&aj''s4@<0!@@d>!&aj)s4@<0!A"35!&aj0s5sA?!AFK9!&aj4s5sA?!Ajc=!&aj;s3:U&!BL2H!&aj=s3:U&!B^>,!&aj?s6K_D!BpJ.!&ajAs6K_D!C-V0!&ajCs6K_D"mQ''>!&b#is6K_D"sX*@!&b$3s7QFN"tflK!&b$=s4@<0"ucMT!&b$?s4@<0"uuYV!&b%6s4mZ5#.acZ!&b%ms6K_D#K-S[!&b)%s24mq#KQk_!&b)Bs6K_D#NYpE!&b.!s7QFN$#KY8!&b.$s7QFN$#fk;!&jlgs3:U''!"f1_!&jlis3:U''!$qTi!&jm)s4@<1!%@m''!&jm,s4@<1!%S$$!&jm.s5F#;!%e0:!&jm0s4@<1!&"<(!&jm2s4mZ6!&4H4!&jm4s5F#;!&FT,!&jm7s4@<1!&jl0!&jm<s7QFO!'':/R!&jm>s4@<1!''L;T!&jm@s4@<1!(?k>!&jmIs4@<1!([(A!&jmKs5sA@!(m4W!&jmMs4@<1!)W^J!&jmTs4@<1!)ijL!&jmVs5F#;!*''!N!&jmXs4@<1!*9-P!&jmZs6K_E!*K9R!&jm\s6K_E!*]Eh!&jm^s5F#;!*oQj!&jm`s4@<1!,_bg!&jn+s4@<1!.t6r!&jn1s3:U''!/1Bt!&jn3s3:U''!/CO!!&jn5s3:U''!/U[#!&jn7s4@<1!/gg4!&jn9s4mZ6!0$s6!&jn;s4mZ6!07*G!&jn=s6K_E!0I6I!&jn?s6K_E!0mN9!&jnCs4@<1!1*Z;!&jnEs4@<1!1<f=!&jnHs4@<1!2'';b!&jnPs4@<1!2KSH!&jnRs4@<1!2]_J!&jnTs4@<1!2okL!&jnVs4@<1!3-"N!&jnXs5sA@!3?._!&jnZs5sA@!3Q:a!&jn`s4@<1!42^X!&jnbs4@<1!4DjZ!&jnds4@<1!4W!\!&jnfs4@<1!4r3_!&jnis4@<1!5/?a!&jnks4@<1!5AKc!&jnms6K_E!5\^%!&jnps3:U''!5nih!&jnrs3:U''!6+uj!&jnts3:U''!6>,l!&jo!s4@<1!6Y>o!&jo$s4@<1!6kJq!&jo''s4@<1!71\t!&jo*s4@<1!7_&)!&jo.s5sA@!8%86!&jo3s4mZ6!8IP:!&jo5s4mZ6!8db.!&jo9s4@<1!9*t1!&jo;s4@<1!9=+3!&jo=s4@<1!9O75!&joQs4@<1!;lfP!&joVs4mZ6!<<)T!&jo\s4mZ6!=&SV!&joas4@<1!=JkZ!&jogs4@<1!>#4_!&jois4@<1!>5@a!&joks4@<1!>GLc!&joms4@<1!>YXe!&jots4@<1!?D-l!&jp!s4@<1!?hEp!&jp%s4@<1!@%Qr!&jp''s4@<1!@@d4!&jp/s4@<1!A4?(!&jp3s4@<1!AXW,!&jp7s4@<1!BC,Q!&jp=s6K_E!BU8S!&jp?s4@<1!BgD7!&jpAs4@<1!C$P9!&jpCs4@<1!C6\;!&k)Gs4@<1"q:Oa!&k*+s5F#;"tT`+!&k*5s4@<1"tfl-!&k*7s4@<1"ucMJ!&k*As6K_E#(us3!&k+ms7QFO#.jj$!&k/Cs4@<1#NYp;!&k4"s6K_E$#KY.!&k4%s6K_E$#fk1!''(#is24mt!"f1U!''(#ks24mt!$qT_!''($+s3:U)!%@lh!''($.s24mt!%S#o!''($0s3:U)!%e0&!''($2s5F#=!&";i!''($4s2b7$!&4Gu!''($6s3:U)!&FT"!''($9s3:U)!&jl&!''($@s5F#=!''UAA!''($Is3:U)!(R"6!''($Ls3:U)!(d.L!''($Ns6K_G!)!::!''($Us24mt!)`d7!''($Ws3:U)!)rpM!''($Ys3:U)!*0'';!''($[s4@<3!*B3e!''($]s3:U)!*fK_!''($bs24mt!,_b]!''(%-s0)J`!.t6h!''(%3s24mt!/1Bj!''(%5s24mt!/CNl!''(%7s24mt!/UZn!''(%9s3:U)!/gfu!''(%;s2b7$!0$s"!''(%=s2b7$!07*3!''(%?s4@<3!0I65!''(%As4@<3!0mN/!''(%Es3:U)!1*Z1!''(%Gs3:U)!1<f3!''(%Js3:U)!2BM=!''(%Ss3:U)!2TY?!''(%Us3:U)!2feA!''(%Ws3:U)!3#qC!''(%Ys3:U)!36(Y!''(%[s5F#=!3H4[!''(%]s5F#=!4)XM!''(%cs24mt!4;dO!''(%es3:U)!4MpQ!''(%gs3:U)!4`''S!''(%js3:U)!5&9V!''(%ls3:U)!58EX!''(%ns3:U)!5ecS!''(%ss3:U)!6"oU!''(%us3:U)!65&W!''(&"s3:U)!6G2c!''(&%s3:U)!6bDf!''(&''s3:U)!7(Vi!''(&*s3:U)!7Chl!''(&/s2b7$!7h,/!''(&2s5F#=!8@Ip!''(&6s5F#=!8RUr!''(&9s3:U)!9!n&!''(&<s3:U)!94%(!''(&>s3:U)!9F1*!''(&@s3:U)!;QT4!''(&Vs2b7$!<)r>!''(&Zs2b7$!<`AD!''(&as24mt!=8_D!''(&es24mt!=o.T!''(&js3:U)!>,:V!''(&ls3:U)!>>FX!''(&ns3:U)!>PRZ!''(&ps3:U)!?;''W!''(''"s3:U)!?M3m!''(''&s3:U)!?qKq!''(''(s3:U)!@.Ws!''(''+s6K_G!A"2q!''(''3s3:U)!AFJu!''(''7s3:U)!Ajc$!''(''As5F#=!BgD#!''(''Cs5F#=!C$P%!''(''Es5F#=!C6\''!''(5Is24mt"q:OM!''(6-s4@<3"tT`!!''(67s4@<3"tfl#!''(69s4@<3"ucMJ!''(6Cs6K_G#(urt!''(;Es3:U)#NYoh!''(@$s6K_G$#KY.!''(@''s6K_G$#fk1!''1)js24mu!"f1U!''1)ls24mu!$qT_!''1*,s3:U*!%@lh!''1*/s24mu!%S#o!''1*1s3:U*!%e0&!''1*3s5F#>!&";i!''1*5s2b7%!&4Gu!''1*7s3:U*!&FT"!''1*:s3:U*!&jl&!''1*As5F#>!''UAA!''1*Js3:U*!(R"6!''1*Ms3:U*!(d.L!''1*Os6K_H!)!::!''1*Vs24mu!)`d7!''1*Xs3:U*!)rpM!''1*Zs3:U*!*0'';!''1*\s4@<4!*B3e!''1*^s3:U*!*fK_!''1*cs24mu!,_b]!''1+.s0)Ja!.t6h!''1+4s24mu!/1Bj!''1+6s24mu!/CNl!''1+8s24mu!/UZn!''1+:s3:U*!/gfu!''1+<s2b7%!0$s"!''1+>s2b7%!07*3!''1+@s4@<4!0I65!''1+Bs4@<4!0mN/!''1+Fs3:U*!1*Z1!''1+Hs3:U*!1<f3!''1+Ks3:U*!2BM=!''1+Ts3:U*!2TY?!''1+Vs3:U*!2feA!''1+Xs3:U*!3#qC!''1+Zs3:U*!36(Y!''1+\s5F#>!3H4[!''1+^s5F#>!4)XM!''1+ds24mu!4;dO!''1+fs3:U*!4MpQ!''1+hs3:U*!4`''S!''1+ks3:U*!5&9V!''1+ms3:U*!58EX!''1+os3:U*!5ecS!''1+ts3:U*!6"oU!''1,!s3:U*!65&W!''1,#s3:U*!6G2c!''1,&s3:U*!6bDf!''1,(s3:U*!7(Vi!''1,+s3:U*!7Chl!''1,0s2b7%!7h,/!''1,3s5F#>!8@Ip!''1,7s5F#>!8RUr!''1,:s3:U*!9!n&!''1,=s3:U*!94%(!''1,?s3:U*!9F1*!''1,As3:U*!;QT4!''1,Ws2b7%!<)r>!''1,[s2b7%!<`AD!''1,bs24mu!=8_D!''1,fs24mu!=o.T!''1,ks3:U*!>,:V!''1,ms3:U*!>>FX!''1,os3:U*!>PRZ!''1,qs3:U*!?;''W!''1-#s3:U*!?M3m!''1-''s3:U*!?qKq!''1-)s3:U*!@.Ws!''1-,s6K_H!A"2q!''1-4s3:U*!AFJu!''1-8s3:U*!Ajc$!''1-Bs5F#>!BgD#!''1-Ds5F#>!C$P%!''1-Fs5F#>!C6\''!''1;Js24mu"q:OM!''1<.s4@<4"tT`!!''1<8s4@<4"tfl#!''1<:s4@<4"ucMJ!''1<Ds6K_H#(urt!''1AFs3:U*#NYoh!''1F%s6K_H$#KY.!''1F(s6K_H$#fk1!'':/ks5F#?!"f1_!'':/ms5F#?!%.`k!'':0/s3:U+!%Iri!'':01s3:U+!%\)p!'':03s4@<5!&";n!'':06s3:U+!&4Gu!'':08s3:U+!&FT"!'':0;s3:U+!&jl&!'':0Ks5F#?!(R"@!'':0Ns4@<5!(d.L!'':0Ps5F#?!)!:N!'':0Ts7QFS!)W^J!'':0Xs4@<5!)ijL!'':0Zs5F#?!*''!N!'':0\s4@<5!*9-d!'':0^s5F#?!*K9R!'':0`s5F#?!*]E^!'':0bs6K_I!*oQ`!'':0ds4@<5!,_bg!'':1/s4@<5!/^a$!'':1<s3:U+!/pm&!'':1>s3:U+!0.$(!'':1@s4@<5!0@04!'':1Bs4@<5!0R<6!'':1Fs3:U+!1!T0!'':1Hs3:U+!13`2!'':1Js3:U+!1Nr5!'':1Ts5F#?!2KSR!'':1Vs5F#?!2]_T!'':1Xs5F#?!2okV!'':1Zs5F#?!3-"N!'':1\s5F#?!3?.Z!'':1^s5F#?!3Q:\!'':1ds4@<5!42^X!'':1fs4@<5!4DjZ!'':1hs4@<5!4W!\!'':1js4@<5!4r3_!'':1ms4@<5!5/?a!'':1os4@<5!5AKc!'':1qs5F#?!5\]p!'':1us5F#?!6+ut!'':2$s5F#?!6G2c!'':2''s3:U+!6bDp!'':2)s3:U+!7(Vi!'':2,s4@<5!7Ci!!'':21s3:U+!7h,/!'':24s5F#?!8@Iu!'':28s5F#?!8RV"!'':2;s3:U+!9!n&!'':2>s5F#?!94%(!'':2@s5F#?!9F1*!'':2Bs5F#?!;QT9!'':2Xs3:U+!<)rC!'':2\s3:U+!<`AI!'':2cs4@<5!=8_X!'':2gs4@<5!=o.T!'':2ls4@<5!>,:V!'':2ns4@<5!>>FX!'':2ps4@<5!>PRZ!'':2rs4@<5!?;''k!'':3$s3:U+!?M4,!'':3(s3:U+!?qL0!'':3*s3:U+!@.X2!'':3-s5F#?!A"3&!'':35s4@<5!AFK*!'':39s4@<5!Ajc.!'':3As5F#?!BgD7!'':3Fs4@<5!C6\;!'':AKs2b7&"q:Oa!'':B/s5F#?"tT`!!'':B9s6K_I"tfl#!'':B;s6K_I"ucM@!'':BEs5F#?#(us$!'':Crs5F#?#K-T$!'':G*s5F#?#KQl(!'':GGs4@<5#NYp;!'':L&s5F#?$#KY$!'':L)s5F#?$#fk''!''C5ls24n"!"f1U!''C5ns24n"!$qT_!''C6.s3:U,!%@lh!''C61s24n"!%S#o!''C63s3:U,!%e0&!''C65s5F#@!&";i!''C67s2b7''!&4Gu!''C69s3:U,!&FT"!''C6<s3:U,!&jl&!''C6Cs5F#@!''UAA!''C6Ls3:U,!(R"6!''C6Os3:U,!(d.L!''C6Qs6K_J!)!::!''C6Xs24n"!)`d7!''C6Zs3:U,!)rpM!''C6\s3:U,!*0'';!''C6^s4@<6!*B3e!''C6`s3:U,!*fK_!''C6es24n"!,_b]!''C70s0)Jc!.t6h!''C76s24n"!/1Bj!''C78s24n"!/CNl!''C7:s24n"!/UZn!''C7<s3:U,!/gfu!''C7>s2b7''!0$s"!''C7@s2b7''!07*3!''C7Bs4@<6!0I65!''C7Ds4@<6!0mN/!''C7Hs3:U,!1*Z1!''C7Js3:U,!1<f3!''C7Ms3:U,!2BM=!''C7Vs3:U,!2TY?!''C7Xs3:U,!2feA!''C7Zs3:U,!3#qC!''C7\s3:U,!36(Y!''C7^s5F#@!3H4[!''C7`s5F#@!4)XM!''C7fs24n"!4;dO!''C7hs3:U,!4MpQ!''C7js3:U,!4`''S!''C7ms3:U,!5&9V!''C7os3:U,!58EX!''C7qs3:U,!5ecS!''C8!s3:U,!6"oU!''C8#s3:U,!65&W!''C8%s3:U,!6G2c!''C8(s3:U,!6bDf!''C8*s3:U,!7(Vi!''C8-s3:U,!7Chl!''C82s2b7''!7h,/!''C85s5F#@!8@Ip!''C89s5F#@!8RUr!''C8<s3:U,!9!n&!''C8?s3:U,!94%(!''C8As3:U,!9F1*!''C8Cs3:U,!;QT4!''C8Ys2b7''!<)r>!''C8]s2b7''!<`AD!''C8ds24n"!=8_D!''C8hs24n"!=o.T!''C8ms3:U,!>,:V!''C8os3:U,!>>FX!''C8qs3:U,!>PRZ!''C8ss3:U,!?;''W!''C9%s3:U,!?M3m!''C9)s3:U,!?qKq!''C9+s3:U,!@.Ws!''C9.s6K_J!A"2q!''C96s3:U,!AFJu!''C9:s3:U,!Ajc$!''C9Ds5F#@!BgD#!''C9Fs5F#@!C$P%!''C9Hs5F#@!C6\''!''CGLs24n""q:OM!''CH0s4@<6"tT`!!''CH:s4@<6"tfl#!''CH<s4@<6"ucMJ!''CHFs6K_J#(urt!''CMHs3:U,#NYoh!''CR''s6K_J$#KY.!''CR*s6K_J$#fk1!''L;ms5F#A!"f1_!''L;os5F#A!%.`k!''L<1s3:U-!%Iri!''L<3s3:U-!%\)p!''L<5s4@<7!&";n!''L<8s3:U-!&4Gu!''L<:s3:U-!&FT"!''L<=s3:U-!&jl&!''L<Ms5F#A!(R"@!''L<Ps4@<7!(d.L!''L<Rs5F#A!)!:N!''L<Vs7QFU!)W^J!''L<Zs4@<7!)ijL!''L<\s5F#A!*''!N!''L<^s4@<7!*9-d!''L<`s5F#A!*K9R!''L<bs5F#A!*]E^!''L<ds6K_K!*oQ`!''L<fs4@<7!,_bg!''L=1s4@<7!/^a$!''L=>s3:U-!/pm&!''L=@s3:U-!0.$(!''L=Bs4@<7!0@04!''L=Ds4@<7!0R<6!''L=Hs3:U-!1!T0!''L=Js3:U-!13`2!''L=Ls3:U-!1Nr5!''L=Vs5F#A!2KSR!''L=Xs5F#A!2]_T!''L=Zs5F#A!2okV!''L=\s5F#A!3-"N!''L=^s5F#A!3?.Z!''L=`s5F#A!3Q:\!''L=fs4@<7!42^X!''L=hs4@<7!4DjZ!''L=js4@<7!4W!\!''L=ls4@<7!4r3_!''L=os4@<7!5/?a!''L=qs4@<7!5AKc!''L=ss5F#A!5\]p!''L>"s5F#A!6+ut!''L>&s5F#A!6G2c!''L>)s3:U-!6bDp!''L>+s3:U-!7(Vi!''L>.s4@<7!7Ci!!''L>3s3:U-!7h,/!''L>6s5F#A!8@Iu!''L>:s5F#A!8RV"!''L>=s3:U-!9!n&!''L>@s5F#A!94%(!''L>Bs5F#A!9F1*!''L>Ds5F#A!;QT9!''L>Zs3:U-!<)rC!''L>^s3:U-!<`AI!''L>es4@<7!=8_X!''L>is4@<7!=o.T!''L>ns4@<7!>,:V!''L>ps4@<7!>>FX!''L>rs4@<7!>PRZ!''L>ts4@<7!?;''k!''L?&s3:U-!?M4,!''L?*s3:U-!?qL0!''L?,s3:U-!@.X2!''L?/s5F#A!A"3&!''L?7s4@<7!AFK*!''L?;s4@<7!Ajc.!''L?Cs5F#A!BgD7!''L?Hs4@<7!C6\;!''LMMs2b7("q:Oa!''LN1s5F#A"tT`!!''LN;s6K_K"tfl#!''LN=s6K_K"ucM@!''LNGs5F#A#(us$!''LOts5F#A#K-T$!''LS,s5F#A#KQl(!''LSIs4@<7#NYp;!''LX(s5F#A$#KY$!''LX+s5F#A$#fk''!(6ets6K_R!"f1_!(6f!s6K_R!(?k\!(6fVs7QF\!(m4W!(6fZs7QF\!)*@^!(6f\s7$(W!)NXb!(6f`s7QF\!)`di!(6fbs7QF\!*0''m!(6ffs7QF\!*B3e!(6fhs7QF\!*T?g!(6fjs6K_R!*fKn!(6fls6K_R!,_bg!(6g8s4@<>!2BMe!(6g^s7QF\!2TYg!(6g`s7QF\!2fei!(6gbs7QF\!3#qk!(6gds7QF\!3cFm!(6gns7QF\!4;e"!(6gps7QF\!4Mq$!(6grs7QF\!4`(&!(6h!s7QF\!5/@*!(6h#s7QF\!5AL,!(6h%s6K_R!5\^%!(6h)s7QF\!6,!3!(6h-s7QF\!6bE9!(6h5s7QF\!9*tO!(6hIs7QF\!9O7S!(6hWs7$(W!=&St!(6hns7QF\!=Jl#!(6hus7QF\!>5A*!(6i$s7QF\!>YY.!(6i,s7QF\!?M46!(6i2s7QF\!@.X<!(6i6s6K_R!A"3D!(6i>s7QF\!AFKH!(6iBs7QF\!AjcL!(6iJs6K_R"n)E\!(7#Bs7QF\"torL!(7#Ls6K_R"uuYL!(7%&s6K_R#K-S[!(7(3s24n*#KQk_!(7(Ps4@<>#NYp;!(7-/s6K_R$#KY.!(7-1s6K_R$#]e0!(7-3s6K_S!"]+r!(?l"s6K_S!(?k\!(?lWs8)db!(m4\!(?l[s7QF]!)*@^!(?l]s7$(X!)NXb!(?las6K_S!)`d_!(?lcs8)db!)rpp!(?lfs7QF]!*9-i!(?lhs7$(X!*K9p!(?ljs7QF]!*]Er!(?lls5sAN!*oQt!(?lns7QF]!.Fn6!(?m^s7QF]!2KSf!(?m`s7QF]!2]_h!(?mbs7QF]!2okj!(?mds7QF]!3-"q!(?mks7$(X!42^l!(?mps8)db!4Dk(!(?mrs8)db!4W"*!(?mts8)db!5&:)!(?n#s7QF]!58F+!(?n%s7QF]!5JR-!(?n(s7QF]!5nj1!(?n,s7QF]!6>-5!(?n2s8)db!71]B!(?nHs7QF]!9=+Q!(?nLs7QF]!:g*Z!(?nms6K_S!=8_l!(?nqs6K_S!>#5-!(?o#s8)db!>GM1!(?o''s8)db!?;(4!(?o/s7$(X!?qL5!(?o5s7$(X!@@d9!(?o=s7QF]!A4?F!(?oAs7QF]!AXWJ!(?oEs7QF]!BL2R!(?oNs7QF]!C$PW!(?oRs7QF]!]''fL!(@(Zs7$(X"sX*E!(@)Cs7$(X"torG!(@)Ms7$(X"uuYQ!(@+''s7QF]#K-So!(@.4s4@<?#KQks!(@.Rs6K_S$#BS2!(@31s7$(X$#T_4!(@33s7$(X$#fk6!(Hr!s6K_T!"o7t!(HrVs7QF^!(R"c!(Hr[s7$(Y!)!:b!(Hr]s7$(Y!)3F_!(Hras7$(Y!)W^^!(Hrcs6K_T!)ijo!(Hres8)dc!*0''m!(Hrhs7$(Y!*B3j!(Hrjs7QF^!*T?q!(Hrls7QF^!*fKd!(Hrns7QF^!+#Wu!(Hs:s6K_T!2BMe!(Hs`s7QF^!2TYg!(Hsbs7QF^!2fei!(Hsds7QF^!3#qk!(Hsfs8)dc!3cFm!(Hsps6K_T!4;e''!(Hsrs8)dc!4Mq)!(Hsts8)dc!4`(+!(Ht#s7QF^!5/@*!(Ht%s7QF^!5AL,!(Ht''s7QF^!5\^/!(Ht+s7QF^!6,!3!(Ht/s7QF^!6bE>!(Ht7s8)dc!9*tO!(HtKs7QF^!9O7S!(HtYs7$(Y!=&Sj!(Htps6K_T!=Jkn!(Hu"s8)dc!>5A/!(Hu&s8)dc!>YY3!(Hu.s7QF^!?M41!(Hu4s7$(Y!@.X7!(Hu8s7$(Y!A"3D!(Hu@s7QF^!AFKH!(HuDs7QF^!AjcL!(HuLs7QF^!BgDU!(HuQs7QF^!C6\Y!(I#Fs7QF^"n)E\!(I/:s8)dc"t]fE!(I/Fs7$(Y"ucMO!(I/Ps7$(Y#.jj.!(I42s4@<@#KHer!(I46s4@<@#NYpO!(I91s7$(Y$#KY3!(I93s7$(Y$#]e5!(I95s7$(Z!(?k\!(R#Ys5sAP!([(U!(R#[s6K_U!(m4a!(R#]s7QF_!)*@Y!(R#_s6K_U!)<Lj!(R#bs6K_U!)W^m!(R#ds8)dd!)ij[!(R#fs7QF_!*''!b!(R#hs7QF_!*9-d!(R#js7QF_!*K9p!(R#ls6K_U!*]Eh!(R#ns6K_U!*oQj!(R#ps7QF_!2BMe!(R$as7QF_!2TYg!(R$cs7QF_!2fei!(R$es7QF_!3#qk!(R$gs5sAP!36(c!(R$is6K_U!3H4e!(R$ks6K_U!3cFh!(R$qs8)dd!4;dh!(R$ss5sAP!4Mpj!(R$us5sAP!4`''l!(R%$s7QF_!5/@*!(R%&s7QF_!5AL,!(R%(s6K_U!5\^%!(R%,s7QF_!6,!3!(R%0s7QF_!6bE*!(R%8s5sAP!7Ci5!(R%>s6K_U!8%8;!(R%Js7QF_!9=+Q!(R%Ns7QF_!:g*U!(R%os8)dd!=8`&!(R%ss8)dd!>#4n!(R&%s5sAP!>GLr!(R&)s5sAP!?;(4!(R&1s6K_U!?qL0!(R&7s6K_U!@@d>!(R&?s7QF_!A4?F!(R&Cs7QF_!AXWJ!(R&Gs7QF_!BL2H!(R&Ps7QF_!C$PW!(R&Ts7QF_!]''fL!(R4\s6K_U"sX*@!(R5Es6K_U"torB!(R5Os7QF_"uuYV!(R7)s6K_U$#BS7!(R?3s7QF_$#T_9!(R?5s7QF_$#fk;!([)#s6K_V!"o7t!([)Xs8)de!(R"c!([)]s8)de!)!:g!([)_s7QF`!)3Fd!([)cs7QF`!)W^c!([)es7$([!)ijo!([)is8)de!*9-n!([)ks8)de!*K9u!([)ms7$([!*]Em!([)os5sAQ!*oQo!([)qs8)de!.Fn6!([*as8)de!2KSk!([*cs8)de!2]_m!([*es8)de!2oko!([*gs8)de!3-"q!([*ns7QF`!42^q!([*ss8)de!4Dk(!([*us8)de!4W"*!([+"s8)de!5&:.!([+&s8)de!58F0!([+(s8)de!5JR(!([++s7$([!5nj6!([+/s8)de!6>-:!([+5s8)de!71]B!([+Ks8)de!9=+V!([+Os8)de!:g*_!([+ps7$([!=8_q!([+ts7$([!>#5-!([,&s8)de!>GM1!([,*s8)de!?;(9!([,2s7QF`!?qL:!([,8s7QF`!@@dC!([,@s8)de!A4?K!([,Ds8)de!AXWO!([,Hs8)de!BL2M!([,Qs8)de!C$P\!([,Us8)de!]''fQ!([:]s7QF`"t]fJ!([;Hs7QF`"ucMY!([;Rs8)de#.jj)!([@4s4@<B#KHer!([@8s4@<B#NYpO!([E3s8)de$#KY=!([E5s8)de$#]e?!([E7s8)df!"]+J!(d/%s4@<C!"o7L!(d/Ys7$(\!(R"T!(d/\s7QFa!(d.e!(d/_s7$(\!)*@^!(d/as7$(\!)NXb!(d/es7QFa!)`di!(d/gs6K_W!*''!l!(d/js8)df!*9-d!(d/ms8)df!*fKi!(d0-s4@<C!.Fn6!(d0bs7$(\!2KSa!(d0ds7$(\!2]_c!(d0fs7$(\!2oke!(d0hs7$(\!3-"b!(d0js8)df!3?.s!(d0ls8)df!3Q:u!(d0os7$(\!42_!!(d0ts6K_W!4Djn!(d1!s6K_W!4W!p!(d1#s6K_W!5&:.!(d1''s8)df!58F0!(d1)s8)df!5nj,!(d10s7$(\!6>-0!(d16s6K_W!71]3!(d1<s7QFa!7h,H!(d1Bs8)df!9*tJ!(d1Ns7$(\!9O7N!(d1\s7$(\!=&St!(d1ss7QFa!=Jl#!(d2%s6K_W!>5@u!(d2)s6K_W!>YY$!(d21s8)df!?M4,!(d27s6K_W!@.X2!(d2As8)df!A4?K!(d2Es8)df!AXWO!(d2Is8)df"n)E\!(dAGs6K_W"torB!(dFUs4@<C#NYpO!(m5%s4@<D!"f1_!(m5''s4@<D!(?kW!(m5]s7$(]!(d.`!(m5_s7$(]!)!:]!(m5as6K_X!)3FZ!(m5es6K_X!)rpp!(m5js7$(]!*0''m!(m5ls7QFb!*B3j!(m6.s4@<D!.Fn,!(m6cs7$(]!2KSa!(m6es7$(]!2]_c!(m6gs7$(]!2oke!(m6is7$(]!36(m!(m6ls7QFb!3H4o!(m6ns7QFb!3cFh!(m7/s7$(]!6,!.!(m73s7$(]!7Ci:!(m7As7QFb!8%8E!(m7Ms7$(]!9=+L!(m7Qs7$(]!:g*U!(m82s7QFb!?M46!(m88s7QFb!@.X<!(m8<s7$(]"n)EW!(mG>s8)dg"t]fJ!(mGJs7QFb"ucMO!(mGTs7$(]#K-So!(mL9s4@<D#KQks!(mLVs4@<D#NYpE!(mQ5s7$(]$#KY3!(mQ7s7$(]$#]e5!(mQ9s7$(^!"]+h!)!;''s4@<E!"o7j!)!;[s7$(^!(R"T!)!;^s7$(^!(d.`!)!;`s8)dh!)!:]!)!;bs5sAT!)3FU!)!;ds6K_Y!)NXX!)!;gs5sAT!)`dZ!)!;is6K_Y!)rpk!)!;ks7$(^!*0''c!)!;ms5sAT!*B3t!)!;os6K_Y!*T?]!)!;qs5F#O!*fKi!)!;ss5F#O!,_bg!)!<?s5F#O!2BM`!)!<es7$(^!2TYb!)!<gs7$(^!2fed!)!<is7$(^!3#qf!)!<ks6K_Y!36(m!)!<ms7QFc!3H4o!)!<os7QFc!3cFc!)!<us5sAT!4;dm!)!="s6K_Y!4Mpo!)!=$s6K_Y!4`''q!)!=(s6K_Y!5/?u!)!=*s6K_Y!5AL"!)!=,s5F#O!5\]p!)!=0s7$(^!6,!.!)!=4s7$(^!6bE/!)!=<s6K_Y!7Ci:!)!=Bs7QFc!8%8E!)!=Ns7$(^!9=+L!)!=Rs7$(^!:g*P!)!=ss5sAT!=8_g!)!>"s5sAT!>#4s!)!>)s6K_Y!>GM"!)!>-s6K_Y!?;(*!)!>5s5sAT!?qL+!)!>;s5sAT!@@dC!)!>Cs6K_Y!A4?<!)!>Gs6K_Y!AXW@!)!>Ks6K_Y!BL2>!)!L`s5sAT"sX*@!)!MIs5sAT"tor=!)!MSs8)dh"uuY[!)!O-s5F#O#K-S[!)!R:s24n1#KQk_!)!RWs4@<E#NYpE!)!W6s8)dh$#KY=!)!W8s8)dh$#]e?!)!W:s8)di!(?kM!)*A^s6K_Z!([(Z!)*A`s7QFd!(m4R!)*Abs5sAU!)*@^!)*Ads7$(_!)NXb!)*Ajs6K_Z!*''!g!)*Ans7QFd!*B3`!)*Aqs5sAU!*]Ec!)*Ats5sAU!2BMV!)*Bfs5sAU!2TYX!)*Bhs5sAU!2feZ!)*Bjs5sAU!3#q\!)*Bls6K_Z!36(m!)*Bns7QFd!3H4o!)*Bps7QFd!3cFm!)*C"s6K_Z!4Djn!)*C$s6K_Z!4W!p!)*C&s6K_Z!5JQs!)*C/s5sAU!5nj"!)*C3s5sAU!6>-&!)*C9s6K_Z!71]3!)*C?s7$(_!7h,C!)*CEs7QFd!9*t@!)*CQs5sAU!9O7D!)*C_s7$(_!>#4s!)*D*s6K_Z!>GM"!)*D.s6K_Z!?M46!)*D:s7QFd!@.X<!)*D>s5sAU!BL2C!)*Ras7$(_"t]fJ!)*SLs7QFd"ucME!)*SVs5sAU#.jit!)*]7s5sAU$#KY)!)*]9s5sAU$#]e+!)*];s5sAV!(?k\!)3G_s5sAV!([(U!)3Gas6K_[!(m4a!)3Gcs7QFe!)*@Y!)3Ges6K_[!)<Lj!)3Ghs6K_[!)W^m!)3Gjs8)dj!)ij[!)3Gls7QFe!*''!b!)3Gns7QFe!*9-d!)3Gps7QFe!*K9p!)3Grs6K_[!*]Eh!)3Gts6K_[!*oQj!)3H!s7QFe!2BMe!)3Hgs7QFe!2TYg!)3His7QFe!2fei!)3Hks7QFe!3#qk!)3Hms5sAV!36(c!)3Hos6K_[!3H4e!)3Hqs6K_[!3cFh!)3I"s8)dj!4;dh!)3I$s5sAV!4Mpj!)3I&s5sAV!4`''l!)3I*s7QFe!5/@*!)3I,s7QFe!5AL,!)3I.s6K_[!5\^%!)3I2s7QFe!6,!3!)3I6s7QFe!6bE*!)3I>s5sAV!7Ci5!)3IDs6K_[!8%8;!)3IPs7QFe!9=+Q!)3ITs7QFe!:g*U!)3Ius8)dj!=8`&!)3J$s8)dj!>#4n!)3J+s5sAV!>GLr!)3J/s5sAV!?;(4!)3J7s6K_[!?qL0!)3J=s6K_[!@@d>!)3JEs7QFe!A4?F!)3JIs7QFe!AXWJ!)3JMs7QFe!BL2H!)3JVs7QFe!C$PW!)3JZs7QFe!]''fL!)3Xbs6K_["sX*@!)3YKs6K_["torB!)3YUs7QFe"uuYV!)3[/s6K_[$#BS7!)3c9s7QFe$#T_9!)3c;s7QFe$#fk;!)<M)s4@<H!"f1_!)<M+s4@<H!(?kW!)<M`s5sAW!([(K!)<Mbs5sAW!(m4a!)<Mds7$(a!)*@J!)<Mfs4mZM!)NXN!)<Mjs6K_\!)`d_!)<Mls5sAW!)rpk!)<Mns5F#R!*0''c!)<Mps7QFf!*B3o!)<Mrs6K_\!*T?g!)<Mts6K_\!*oQj!)<N2s4@<H!.Fmc!)<Ngs7$(a!2KSa!)<Nis7$(a!2]_c!)<Nks7$(a!2oke!)<Nms7$(a!3-"]!)<Nos5sAW!3?._!)<Nqs5sAW!3Q:a!)<Nts4mZM!42^l!)<O$s5sAW!4Dji!)<O&s5sAW!4W!k!)<O(s5sAW!5&9t!)<O,s6K_\!58F!!)<O.s6K_\!5JR#!)<O1s6K_\!5nj,!)<O5s7$(a!6>-0!)<O;s5sAW!71].!)<OAs5F#R!7h,4!)<OGs5sAW!9*tJ!)<OSs7$(a!9O7N!)<Oas4mZM!=&Sj!)<P#s6K_\!=Jkn!)<P*s5sAW!>5@p!)<P.s5sAW!>YXt!)<P6s6K_\!?M46!)<P<s7QFf!@.X<!)<P@s7QFf!A"3:!)<PHs6K_\!AFK>!)<PLs6K_\!AjcB!)<PTs6K_\"n)EH!)<_Bs7QFf"t]fJ!)<_Ns7QFf"ucMT!)<_Xs7QFf#.jj$!)<d:s24n4#KHe^!)<d>s24n4#NPj:!)<d[s24n4$#BS7!)<i:s7QFf$#T_9!)<i<s7QFf$#fk;!)ES_s5sAX!(R"T!)ESbs7$(b!(d.`!)ESds5sAX!)!:S!)ESfs7$(b!)3F_!)ESjs7$(b!)ij`!)ESos7$(b!*9-n!)ESrs5sAX!*T?b!)ESus5sAX!*oQe!)EThs5sAX!2KSW!)ETjs5sAX!2]_Y!)ETls5sAX!2ok[!)ETns5sAX!3-"b!)ETps7QFg!3?.n!)ETrs7QFg!3Q:p!)ETus7$(b!4;dm!)EU&s6K_]!4Mpo!)EU(s6K_]!4`''q!)EU0s5sAX!5\]u!)EU4s5sAX!6,!$!)EU8s5sAX!6bE/!)EU@s6K_]!7Ci:!)EUFs7QFg!8%8E!)EURs5sAX!9=+B!)EUVs5sAX!:g*Z!)EV+s6K_]!>5@u!)EV/s6K_]!>YY$!)EV9s7QFg!?qL:!)EV?s7QFg!@@d/!)EVUs5sAX"n)E\!)EeMs7QFg"torL!)EeWs5sAX"uuYG!)Eg1s5sAX$#BS(!)Eo;s5sAX$#T_*!)Eo=s5sAX$#fk,!)NY+s5F#T!"f1_!)NY-s5F#T!(?k\!)NYbs8)dm!([(_!)NYds8)dm!(m4a!)NYfs7QFh!)*@Y!)NYhs6K_^!)<L`!)NYks6K_^!)W^^!)NYms6K_^!)ijo!)NYos8)dm!*''!l!)NYqs7$(c!*9-i!)NYss7QFh!*K9k!)NYus4mZO!*]EY!)NZ"s7$(c!*oQ[!)NZ4s4@<J!.Fn,!)NZis7QFh!2KSf!)NZks7QFh!2]_h!)NZms7QFh!2okj!)NZos7QFh!3-"q!)NZqs8)dm!3?.s!)NZss8)dm!3Q:u!)N[!s6K_^!42^l!)N[&s8)dm!4Dk(!)N[(s8)dm!4W"*!)N[*s8)dm!5&:$!)N[.s7$(c!58F&!)N[0s7$(c!5JQi!)N[3s4mZO!5nj1!)N[7s7QFh!6>-5!)N[=s8)dm!71]B!)N[Cs7QFh!7h,H!)N[Is8)dm!9*tO!)N[Us7QFh!9O7S!)N[cs6K_^!=&Sj!)N\%s6K_^!=Jkn!)N\,s8)dm!>5A/!)N\0s8)dm!>YY3!)N\8s7$(c!?M41!)N\>s7$(c!@.X7!)N\Bs7QFh!A"3?!)N\Js7$(c!AFKC!)N\Ns7$(c!AjcG!)N\Vs4mZO"n)EW!)NkDs8)dm"t]fE!)NkPs7$(c"ucMT!)NkZs7QFh#.jij!)Np<s24n6#KHe^!)Np@s24n6#NPj:!)Np]s5F#T$#BS7!)Nu<s7QFh$#T_9!)Nu>s7QFh$#fk;!)W_,s5F#U!"f1_!)W_.s5F#U!(?k\!)W_cs8)dn!([(_!)W_es8)dn!(m4a!)W_gs7QFi!)*@Y!)W_is6K__!)<L`!)W_ls6K__!)W^^!)W_ns6K__!)ijo!)W_ps8)dn!*''!l!)W_rs7$(d!*9-i!)W_ts7QFi!*K9k!)W`!s4mZP!*]EY!)W`#s7$(d!*oQ[!)W`5s4@<K!.Fn,!)W`js7QFi!2KSf!)W`ls7QFi!2]_h!)W`ns7QFi!2okj!)W`ps7QFi!3-"q!)W`rs8)dn!3?.s!)W`ts8)dn!3Q:u!)Wa"s6K__!42^l!)Wa''s8)dn!4Dk(!)Wa)s8)dn!4W"*!)Wa+s8)dn!5&:$!)Wa/s7$(d!58F&!)Wa1s7$(d!5JQi!)Wa4s4mZP!5nj1!)Wa8s7QFi!6>-5!)Wa>s8)dn!71]B!)WaDs7QFi!7h,H!)WaJs8)dn!9*tO!)WaVs7QFi!9O7S!)Wads6K__!=&Sj!)Wb&s6K__!=Jkn!)Wb-s8)dn!>5A/!)Wb1s8)dn!>YY3!)Wb9s7$(d!?M41!)Wb?s7$(d!@.X7!)WbCs7QFi!A"3?!)WbKs7$(d!AFKC!)WbOs7$(d!AjcG!)WbWs4mZP"n)EW!)WqEs8)dn"t]fE!)WqQs7$(d"ucMT!)Wq[s7QFi#.jij!)X!=s24n7#KHe^!)X!As24n7#NPj:!)X!^s5F#U$#BS7!)X&=s7QFi$#T_9!)X&?s7QFi$#fk;!)`e-s6K_`!"o7t!)`ebs7$(e!(R"^!)`ees8)do!(m4W!)`ehs7$(e!)*@O!)`ejs5F#V!)<Le!)`ems5F#V!)W^T!)`eos5F#V!)ijj!)`eqs7QFj!*''!q!)`ess7$(e!*9-d!)`eus6K_`!*K9k!)`f"s7$(e!*]Em!)`f$s5F#V!*oQo!)`f&s7$(e!.Fn6!)`fks7$(e!2KSa!)`fms7$(e!2]_c!)`fos7$(e!2oke!)`fqs7$(e!3-"l!)`g#s5F#V!42^b!)`g(s7QFj!4Dk#!)`g*s7QFj!4W"%!)`g,s7QFj!5&:$!)`g0s7$(e!58F&!)`g2s7$(e!5JR(!)`g5s7$(e!5nj,!)`g9s7$(e!6>-0!)`g?s7QFj!71]=!)`gEs8)do!9*tJ!)`gWs7$(e!9O7N!)`ges5F#V!=&S`!)`h''s5F#V!=Jkd!)`h.s7QFj!>5A*!)`h2s7QFj!>YY.!)`h:s7$(e!?M4,!)`h@s6K_`!@.X2!)`hDs6K_`!A"3?!)`hLs7$(e!AFKC!)`hPs7$(e!AjcG!)`hXs7$(e!BgDP!)`h]s7$(e!C6\T!)`kRs7$(e"n)EM!)a"Fs7QFj"t]f@!)a"Rs6K_`"ucMJ!)a"\s6K_`#.jj)!)a''>s4@<L#KHer!)a''Bs4@<L#NYpO!)a,=s6K_`$#KY.!)a,?s6K_`$#]e0!)a,As6K_a!"]+r!)ik0s6K_a!(?k\!)ikes8)dp!(m4\!)ikis7QFk!)*@^!)ikks7$(f!)NXb!)ikos6K_a!)`d_!)ikqs8)dp!)rpp!)ikts7QFk!*9-i!)il!s7$(f!*K9p!)il#s7QFk!*]Er!)il%s5sA\!*oQt!)il''s7QFk!.Fn6!)ills7QFk!2KSf!)ilns7QFk!2]_h!)ilps7QFk!2okj!)ilrs7QFk!3-"q!)im$s7$(f!42^l!)im)s8)dp!4Dk(!)im+s8)dp!4W"*!)im-s8)dp!5&:)!)im1s7QFk!58F+!)im3s7QFk!5JR-!)im6s7QFk!5nj1!)im:s7QFk!6>-5!)im@s8)dp!71]B!)imVs7QFk!9=+Q!)imZs7QFk!:g*Z!)in&s6K_a!=8_l!)in*s6K_a!>#5-!)in1s8)dp!>GM1!)in5s8)dp!?;(4!)in=s7$(f!?qL5!)inCs7$(f!@@d9!)inKs7QFk!A4?F!)inOs7QFk!AXWJ!)inSs7QFk!BL2R!)in\s7QFk!C$PW!)in`s7QFk!]''fL!)j''hs7$(f"sX*E!)j(Qs7$(f"torG!)j([s7$(f"uuYQ!)j*5s7QFk#K-So!)j-Bs4@<M#KQks!)j-`s6K_a$#BS2!)j2?s7$(f$#T_4!)j2As7$(f$#fk6!)rqds7$(g!([(Z!)rqhs7QFl!(m4\!)rqjs7$(g!)*@Y!)rqls6K_b!)NX]!)rqss8)dq!*''!g!)rqus7QFl!*9-n!)rr"s7$(g!2BM`!)rrns7$(g!2TYb!)rrps7$(g!2fed!)rrrs7$(g!3#qf!)rrus7QFl!3?.n!)rs"s7QFl!3Q:p!)rs%s6K_b!5nj,!)rs;s7$(g!6>-0!)rsGs7$(g!7h,C!)rsMs7QFl!9*tJ!)rsYs7$(g!9O7N!)rsgs6K_b!?;(4!)rt>s7QFl!?qL:!)rtDs7QFl!@@d9!)s-is6K_b"sX*E!)s.Rs7QFl"torL!)s.\s7$(g"uuYQ!)s8?s7$(g$#KY3!)s8As7$(g$#]e5!)s8Cs7$(h!"]+J!*''"1s4@<O!"o7L!*''"es6K_c!(R"Y!*''"hs8)dr!(d.o!*''"ks6K_c!)W^m!*''"rs8)dr!)ije!*''"us8)dr!*9-n!*''##!!N@&!*K9u!*''#''s7QFm!,_bg!*''#Is5F#Y!2BM[!*''#os6K_c!2TY]!*''#qs6K_c!2fe_!*''#ss6K_c!3#qa!*''#us7$(h!42_&!*''$+s7$(h!4Djs!*''$-s7$(h!4W!u!*''$/s7$(h!5&:.!*''$3s8)dr!58F0!*''$5s8)dr!5nj''!*''$<s6K_c!6>-+!*''$Bs7$(h!71]8!*''$Hs8)dr!9*tE!*''$Zs6K_c!9O7I!*''%(s8)dr!=8`&!*''%,s8)dr!>#5#!*''%3s7$(h!>GM''!*''%7s7$(h!?M46!*''%Cs7QFm!@.X<!*''%G!!N@&!A"3I!*''%Os8)dr!AFKM!*''%Ss8)dr!AjcQ!*''4Ss7QFm"torL!*''4]!!N@&"ulSd!*''9as4@<O#NYpE!*''>@!!N@&$#BSF!*''>B!!N@&$#T_H!*''>D!!N@''!"]+^!*0(2s4@<P!"o7`!*0(fs7QFn!(R"^!*0(is8)ds!(m4W!*0(ls7QFn!)*@Y!*0(ns6K_d!)<L[!*0(qs6K_d!)W^^!*0(ss6K_d!)ijj!*0(us7QFn!*''!q!*0)"s6K_d!*9-n!*0)$s6K_d!*K9k!*0)&s6K_d!*]Eh!*0)(s4@<P!*oQj!*0):s4@<P!.Fn,!*0)os7QFn!2KSf!*0)qs7QFn!2]_h!*0)ss7QFn!2okj!*0)us7QFn!3-"l!*0*''s6K_d!42^l!*0*,s7QFn!4Dk#!*0*.s7QFn!4W"%!*0*0s7QFn!5&:$!*0*4s7$(i!58F&!*0*6s7$(i!5JR#!*0*9s6K_d!5nj1!*0*=s7QFn!6>-5!*0*Cs7QFn!71]=!*0*Is8)ds!9*tO!*0*[s7QFn!9O7S!*0*is6K_d!=&Sj!*0++s6K_d!=Jkn!*0+2s7QFn!>5A*!*0+6s7QFn!>YY.!*0+>s6K_d!?M46!*0+Ds7QFn!@.X<!*0+Hs6K_d!A"3?!*0+Ps7$(i!AFKC!*0+Ts7$(i!AjcG!*0+\s6K_d"n)EW!*0:Js7QFn"t]fJ!*0:Vs7QFn"ucMJ!*0:`s6K_d#.jj$!*0?Bs1/22#KHeT!*0?Fs1/22#NPj:!*0?cs5F#Z$#BS-!*0DBs6K_d$#T_/!*0DDs6K_d$#fk1!*9.3s4@<Q!(?k\!*9.is5sA`!([(Z!*9.ks8)dt!(m4\!*9.ms7QFo!)*@^!*9.os7$(j!)NXb!*9.ss7QFo!)`di!*9.us5sA`!*''!g!*9/#s7QFo!*9-n!*9/%s7$(j!*fKi!*9/;s4@<Q!.Fn"!*9/ps7QFo!2KSf!*9/rs7QFo!2]_h!*9/ts7QFo!2okj!*90!s7QFo!3-"]!*90#s8)dt!3?.s!*90%s8)dt!3Q:u!*90(s7$(j!42_!!*90-s5sA`!4Dji!*90/s5sA`!4W!k!*901s5sA`!5nj1!*90>s7QFo!6>-5!*90Ds5sA`!71].!*90Js7$(j!7h,H!*90Ps8)dt!9*tO!*90\s7QFo!9O7S!*90js7$(j!=&St!*91,s7QFo!=Jl#!*913s5sA`!>5@p!*917s5sA`!>YXt!*91?s7QFo!?M46!*91Es7QFo!@.X<!*91Is7$(j"n)E\!*9@Us7QFo"torL!*9@_s7$(j"uuYQ!*9Ecs4@<Q#NYp;!*9JBs7$(j$#KY3!*9JDs7$(j$#]e5!*9JFs7$(k!"]+^!*B44s4@<R!"o7`!*B4hs7$(k!([(Z!*B4ls7QFp!(m4\!*B4ns7$(k!)*@Y!*B4ps6K_f!)NX]!*B5"s8)du!*''!g!*B5$s7QFp!*9-n!*B5&s7$(k!,_bg!*B5Ls5F#\!2BM`!*B5rs7$(k!2TYb!*B5ts7$(k!2fed!*B6!s7$(k!3#qf!*B6$s7QFp!3?.n!*B6&s7QFp!3Q:p!*B6)s6K_f!5nj,!*B6?s7$(k!6>-0!*B6Ks7$(k!7h,C!*B6Qs7QFp!9*tJ!*B6]s7$(k!9O7N!*B6ks6K_f!?;(4!*B7Bs7QFp!?qL:!*B7Hs7QFp!@@d9!*BEms6K_f"sX*E!*BFVs7QFp"torL!*BF`s7$(k"uuYQ!*BKDs4@<R#KHer!*BKHs4@<R#NPj:!*BKes5F#\$#BS2!*BPDs7$(k$#T_4!*BPFs7$(k$#fk6!*K:4s3:UI!"f1s!*K:6s3:UI!(?kM!*K:ks6K_g!([(P!*K:ms7$(l!(m4a!*K:os5sAb!)*@T!*K:qs5sAb!)<L[!*K:ts5sAb!)W^J!*K;!s4@<S!)ij`!*K;#s5F#]!*''!]!*K;%s5sAb!*9-d!*K;''s7QFq!*K9\!*K;+s6K_g!+#Wu!*K;=s6K_g!.Fn"!*K;rs5sAb!2KSW!*K;ts5sAb!2]_Y!*K<!s5sAb!2ok[!*K<#s5sAb!3-"b!*K<%s7$(l!3?.i!*K<''s7$(l!3Q:k!*K<*s5sAb!42^X!*K</s6K_g!4Djn!*K<1s6K_g!4W!p!*K<3s6K_g!5&9j!*K<7s5F#]!58El!*K<9s5F#]!5nj"!*K<@s5sAb!6>-&!*K<Fs6K_g!71]3!*K<Ls5sAb!7h,>!*K<Rs7$(l!9*t@!*K<^s5sAb!9O7D!*K<ls5sAb!=&SV!*K=.s4@<S!=JkZ!*K=5s6K_g!>5@u!*K=9s6K_g!>YY$!*K=As5sAb!?M4,!*K=Gs6K_g!@.X2!*K=Ks7QFq!A"30!*K=Ss5F#]!AFK4!*K=Ws5F#]!Ajc8!*K=bs7QFq!C$PW!*K=fs7QFq!]''fL!*KKns5sAb"sX*,!*KLWs6K_g"torB!*KLas7QFq"uuYV!*KQEs6K_g#KHf1!*KQIs6K_g#NPjN!*KQfs4@<S$#BS7!*KVEs7QFq$#T_9!*KVGs7QFq$#fk;!*T@5s3:UJ!"f1s!*T@7s3:UJ!(?kR!*T@ls7QFr!([(U!*T@ns7QFr!(m4f!*T@ps6K_h!)*@Y!*T@rs6K_h!)<L`!*T@us6K_h!)W^T!*TA"s5F#^!)ijj!*TA$s7$(m!*''!b!*TA&s5sAc!*9-d!*TA(s8)e"!*K9a!*TA*s7$(m!*]Em!*TA,s7$(m!*oQo!*TA.s8)e"!,_c&!*TANs4@<T!2BM[!*TAts6K_h!2TY]!*TB!s6K_h!2fe_!*TB#s6K_h!3#qa!*TB%s7QFr!36(m!*TB''s7QFr!3H4o!*TB)s7QFr!3cFh!*TB/s5F#^!4;e"!*TB1s7QFr!4Mq$!*TB3s7QFr!4`(&!*TB7s5sAc!5/?p!*TB9s5sAc!5AKr!*TB;s7$(m!5\^*!*TB?s6K_h!6,!)!*TBCs6K_h!6bE9!*TBKs7QFr!7Ci5!*TBQs7QFr!8%8E!*TB]s6K_h!9=+G!*TBas6K_h!:g*U!*TC-s5F#^!=8_b!*TC1s5F#^!>#5(!*TC8s7QFr!>GM,!*TC<s7QFr!?;(%!*TCDs6K_h!?qL0!*TCJs6K_h!@@dC!*TCRs5sAc!A4?7!*TCVs5sAc!AXW;!*TCZs5sAc!BL2M!*TCcs8)e"!C$P\!*TCgs8)e"!]''fQ!*TQos6K_h"sX*;!*TRXs6K_h"torB!*TRbs8)e""uuY[!*TT<s7$(m#K-T.!*TWIs6K_h#KQl2!*TWfs6K_h#NYp;!*T\Es8)e"$#KY=!*T\Gs8)e"$#]e?!*T\Is8)e#!"]+^!*]F7s4@<U!"o7`!*]Fks7$(n!(R"O!*]Fns5F#_!(d.Q!*]Fps7QFs!)!:]!*]Frs4mZZ!)3FK!*]G!s4mZZ!)W^^!*]G#s6K_i!)ij[!*]G%s7QFs!*''!X!*]G''s6K_i!*9-n!*]G)s7QFs!*K9f!*]G+s6K_i!*]Eh!*]G.s6K_i!,_bg!*]GOs24nA!2BM`!*]Gus7$(n!2TYb!*]H"s7$(n!2fed!*]H$s7$(n!3#qf!*]H&s5sAd!36(^!*]H(s5sAd!3H4`!*]H*s5sAd!3cFY!*]H0s6K_i!4;dh!*]H2s5sAd!4Mpj!*]H4s5sAd!4`''l!*]H8s6K_i!5/?u!*]H:s6K_i!5AL"!*]H<s6K_i!5\^%!*]H@s7$(n!6,!.!*]HDs7$(n!6bE*!*]HLs5sAd!7Ci+!*]HRs5sAd!8%86!*]H^s7$(n!9=+L!*]Hbs7$(n!:g*F!*]I.s6K_i!=8_l!*]I2s6K_i!>#4n!*]I9s5sAd!>GLr!*]I=s5sAd!?;(*!*]IEs7QFs!?qL:!*]IKs7QFs!@@d>!*]ISs6K_i!A4?<!*]IWs6K_i!AXW@!*]I[s6K_i!BL2H!*]Wps4mZZ"sX*@!*]XYs7QFs"torL!*]Xcs7QFs"uuYV!*]Z=s6K_i#K-S[!*]]Js24nA#KQk_!*]]gs4@<U#NYp''!*]bFs7QFs$#KY8!*]bHs7QFs$#]e:!*]bJs7QFt!"]+T!*fL8s6K_j!"o7V!*fLls6K_j!(R"^!*fLos6K_j!(d.`!*fLqs8)e$!)!:X!*fLss6K_j!)3FZ!*fLus7$(o!)NX]!*fM#s5F#`!)`dU!*fM%s7QFt!)rpf!*fM''s6K_j!*0''^!*fM)s6K_j!*B3t!*fM+s5sAe!*T?l!*fM-s7$(o!*fKn!*fM/s7$(o!+#X%!*fM@s6K_j!.Fn"!*fMus6K_j!2KS\!*fN"s6K_j!2]_^!*fN$s6K_j!2ok`!*fN&s6K_j!3-"l!*fN(s7QFt!3?.n!*fN*s7QFt!3Q:p!*fN-s6K_j!42^b!*fN2s7QFt!4Dk#!*fN4s7QFt!4W"%!*fN6s7QFt!5&9o!*fN:s5sAe!58Eq!*fN<s5sAe!5JR(!*fN?s7$(o!5nj''!*fNCs6K_j!6>-+!*fNIs7QFt!71]=!*fNOs6K_j!7h,C!*fNUs7QFt!9*tE!*fNas6K_j!9O7I!*fNos6K_j!=&S`!*fO1s5F#`!=Jkd!*fO8s7QFt!>5A*!*fO<s7QFt!>YY.!*fODs5sAe!?M4,!*fOJs6K_j!@.X2!*fONs8)e$!A"35!*fOVs5sAe!AFK9!*fOZs5sAe!Ajc=!*fObs7$(o!BgDZ!*fOgs8)e$!C6\^!*fR\s8)e$"n)EW!*f^Ps7$(o"t]f@!*f^\s6K_j"ucMY!*f^fs8)e$#.jj)!*fcHs6K_j#KHf1!*fcLs6K_j#NPjN!*fcis4@<V$#BS<!*fhHs8)e$$#T_>!*fhJs8)e$$#fk@!*oR8s4@<W!"f1U!*oR:s4@<W!(?kR!*oRos6K_k!(m4a!*oRss6K_k!)*@Y!*oRus6K_k!)<Le!*oS#s6K_k!)W^T!*oS%s5F#a!)ij`!*oS''s6K_k!*0''Y!*oS*s6K_k!*B3o!*oS,s5sAf!*T?g!*oS.s6K_k!*fKi!*oS0s6K_k!,_b]!*oSQs24nC!2BM[!*oT"s6K_k!2TY]!*oT$s6K_k!2fe_!*oT&s6K_k!3#qa!*oT(s6K_k!3cFh!*oT2s5F#a!4;dm!*oT4s6K_k!4Mpo!*oT6s6K_k!4`''q!*oT:s5sAf!5/?p!*oT<s5sAf!5AKr!*oT>s6K_k!5\^%!*oTBs6K_k!6,!)!*oTFs6K_k!6bE/!*oTNs6K_k!9*tE!*oTbs6K_k!9O7I!*oTps6K_k!=&S`!*oU2s5F#a!=Jkd!*oU9s6K_k!>5@u!*oU=s6K_k!>YY$!*oUEs5F#a!?M4,!*oUKs6K_k!@.X2!*oUOs7QFu!A"35!*oUWs5sAf!AFK9!*oU[s5sAf!Ajc=!*oUcs6K_k"n)EW!*odQs6K_k"t]f@!*od]s6K_k"ucMT!*odgs7QFu#.jj$!*oiIs4@<W#KHer!*oiMs4@<W#NPj0!*oijs24nC$#BS7!*onIs7QFu$#T_9!*onKs7QFu$#fk;!,V]]s4@<g!%.a*!,V]cs5F#q!&FT6!,V]ms5F#q!&jl:!,V]ps3:U]!''1(t!,V]ss24nS!''C5+!,V]us24nS!''UA-!,V^(s5F#q!(R"T!,V^+s6K`&!(d.V!,V^-s6K`&!)!:N!,V^1s7QG0!)W^T!,V^5s5F#q!)ij`!,V^7s5F#q!*''!b!,V^9s5F#q!*B3e!,V^<s5F#q!*T?S!,V^>s4@<g!*fKU!,V^@s4@<g!+#Wa!,V^fs4@<g!/(=(!,V^hs4@<g!/:I*!,V^js4@<g!/U[-!,V^ms5F#q!0mNC!,V_$s5F#q!1*ZE!,V_&s5F#q!1<fG!,V_)s5F#q!2'';0!,V_1s5F#q!2KSR!,V_3s5F#q!2]_T!,V_5s5F#q!2okV!,V_7s5F#q!3-"b!,V_9s6K`&!3?.d!,V_;s6K`&!3Q:f!,V_Bs5F#q!4;dm!,V_Ds6K`&!4Mpo!,V_Fs6K`&!4`''q!,V_Js5F#q!5/?k!,V_Ls5F#q!5AKm!,V_Ns4@<g!5\]f!,V_Qs4@<g!5nir!,V_Ts5F#q!6G3"!,V_Ys5F#q!6bE/!,V_[s5F#q!7(W(!,V_^s6K`&!7Ci5!,V_ds6K`&!8%8;!,V_ms5F#q!9!n:!,V_ps5F#q!94%<!,V_rs5F#q!9F1>!,V_ts5F#q!=&S`!,V`Bs5F#q!=Jkd!,V`Hs5F#q!>#4s!,V`Js5F#q!>5@u!,V`Ls5F#q!>GM"!,V`Ns5F#q!>YY$!,V`Us5F#q!?D.!!,V`Zs5F#q!@%R''!,V`^s3:U]!@@d4!,V``s3:U]!A"30!,V`gs5F#q!AFK4!,V`ms5F#q!BC+t!,V`ss4@<g!BU8!!,V`us3:U]!BgDA!,Va"s3:U]!C$PC!,Va$s3:U]!C6\E!,Vcms5F#q"mZ-S!,VoKs5F#q"sX*,!,Vojs5F#q"tfl7!,Vots3:U]"ucMJ!,Vp!s3:U]"uuYL!,VqNs24nS#.jie!,W$Xs6K`&$#KY.!,W$Zs6K`&$#]e0!,W$\s6K`6!$qT_!.=hos6K`6!%S$8!.=i!s6K`6!&FT@!.=i(s6K`6!&jl0!.=i+s4@="!''1(t!.=i.s24nc!''C55!.=i0s24nc!''UA7!.=i8s6K`6!(m4C!.=i>s6K`6!)<L[!.=iDs6K`6!)`d_!.=iGs6K`6!*0''c!.=iJs5F$,!*B3Q!.=iLs6K`6!*T?S!.=iNs4@="!*fKP!.=iPs4@="!+#Wk!.=j!s24nc!/(<i!.=j#s24nc!/:Hk!.=j%s24nc!/UZn!.=j(s6K`6!0mNM!.=j4s6K`6!1*ZO!.=j6s6K`6!1<fQ!.=j9s6K`6!2'';0!.=jAs6K`6!2KS\!.=jCs6K`6!2]_^!.=jEs6K`6!2ok`!.=jGs6K`6!42^l!.=jZs6K`6!5/?u!.=j\s6K`6!5AL"!.=j^s4@="!5\]f!.=jas24nc!5nj''!.=jds6K`6!6G3,!.=jis6K`6!6kK0!.=jms6K`6!8dbB!.=k*s6K`6!9*tE!.=k,s6K`6!9=+G!.=k.s6K`6!9O7I!.=kPs6K`6!=8_l!.=kTs6K`6!=o.r!.=kZs6K`6!>>G!!.=k^s6K`6!?;(*!.=kfs4@="!?M4"!.=kjs4@="!?qL&!.=kls4@="!@.X(!.=kns4@="!@@cu!.=kps4@="!A"3:!.=l"s6K`6!AFK>!.=l(s6K`6!BC+t!.=l.s4@="!BU8!!.=l0s4@="!BgDK!.=l2s4@="!C$PM!.=l4s4@="!C6\O!.=o(s6K`6"mZ-?!.>%[s6K`6"sX*6!.>&%s4@=""t]f6!.>&''s4@=""tor8!.>&/s4@=""ucM6!.>&1s4@=""uuY8!.>''^s24nc#.jie!.>/hs4@="$#KXo!.>/js4@="$#]dq!.>/ls4@=''!"]+r!.k1^s4@=''!"o7t!.k1ts4@=''!%@lm!.k2"s2b7m!%S$$!.k2$s4@=''!%e00!.k2''s2b7m!&+At!.k2)s4@=''!&=N+!.k2+s4@=''!&X`.!.k2/s5F$1!&sr1!.k22s24nh!'':.u!.k24s7QGE!''L;"!.k26s7QGE!(?kR!.k2?s6K`;!([(U!.k2As7$)@!(m4M!.k2Cs6K`;!)W^T!.k2Js5F$1!)ij`!.k2Ls6K`;!*''!b!.k2Ns5F$1!*9-d!.k2Ps5F$1!*K9a!.k2Rs5F$1!*]E^!.k2Us5F$1!+#Wa!.k2fs4@=''!.Fn"!.k3-s4@=''!/gg%!.k3/s3:Ur!0$s''!.k31s3:Ur!07*=!.k33s5F$1!0I6?!.k35s5F$1!0mN9!.k39s4@=''!1*Z;!.k3;s4@=''!1<f=!.k3>s4@=''!2'';0!.k3Fs6K`;!2KS\!.k3Hs6K`;!2]_^!.k3Js6K`;!2ok`!.k3Ls6K`;!3-"b!.k3Ns7$)@!3?.i!.k3Ps7$)@!3Q:k!.k3Vs6K`;!42^b!.k3Xs6K`;!4Djn!.k3Zs6K`;!4W!p!.k3\s6K`;!4r3s!.k3_s5sB6!5/?p!.k3as5sB6!5AKr!.k3cs5F$1!5\]p!.k3gs6K`;!6,!)!.k3ks6K`;!6G2m!.k3ns4@=''!6bE/!.k3ps4@=''!7(Vs!.k3ss6K`;!7Ci5!.k4#s3:Ur!7h,>!.k4&s7$)@!8@Iu!.k4*s7$)@!8RV"!.k4-s4@=''!9!n0!.k40s6K`;!94%2!.k42s6K`;!9F14!.k44s6K`;!;QT9!.k4Js3:Ur!<)rC!.k4Ns3:Ur!<`AI!.k4Us5F$1!=8_b!.k4Ys5F$1!=o.^!.k4^s6K`;!>,:`!.k4`s6K`;!>>Fb!.k4bs6K`;!>PRd!.k4ds6K`;!?;''u!.k4ks5F$1!?M4,!.k4os5F$1!?qL0!.k4qs5F$1!@.X2!.k4ss4@=''!@@d*!.k4us4@=''!A"35!.k5''s5sB6!AFK9!.k5+s5sB6!Ajc=!.k52s24nh!BL2>!.k54s24nh!B^>T!.k56s5F$1!BpJV!.k58s5F$1!C-VX!.k5:s5F$1"mQ''/!.kC`s5F$1"sX*6!.kD*s5F$1"t]f@!.kD,s5F$1"torB!.kD4s4@=''"ucM@!.kD6s4@=''"uuYB!.kE-s3:Ur#.acP!.kEds5F$1#K-S[!.kHqs24nh#KQk_!.kI9s4@=''#NYp;!.kMms5F$1$#KY$!.kMps5F$1$#fk''!.t7^s6K`<!"f1_!.t7`s6K`<!%.`u!.t8"s3:Us!%Iri!.t8$s4@=(!%\*%!.t8&s5F$2!&";n!.t8)s3:Us!&4H*!.t8+s4@=(!&FT,!.t8.s4@=(!&jl:!.t81s4@=(!''1(t!.t84s24ni!''C5S!.t86s24ni!''UAU!.t8>s6K`<!(R"T!.t8As6K`<!(d.[!.t8Cs5F$2!)!:X!.t8Js5F$2!)`dU!.t8Ls6K`<!)rpa!.t8Ns6K`<!*0''Y!.t8Ps6K`<!*B3[!.t8Rs5sB7!*T?]!.t8Ts5F$2!*oQ`!.t8Ws5F$2!,_bg!.t9"s4@=(!/^a.!.t9/s3:Us!/pm&!.t91s3:Us!0.$(!.t93s5F$2!0@0>!.t95s5F$2!0R<@!.t99s4@=(!1!T:!.t9;s4@=(!13`<!.t9=s4@=(!1Nr?!.t9Ds24ni!2BM[!.t9Hs6K`<!2TY]!.t9Js6K`<!2fe_!.t9Ls6K`<!3#qa!.t9Ns6K`<!36(h!.t9Ps7$)A!3H4j!.t9Rs7$)A!4)Xk!.t9Xs5F$2!4;dm!.t9Zs6K`<!4Mpo!.t9\s6K`<!4`''q!.t9_s6K`<!5&9o!.t9as5sB7!58Eq!.t9cs5sB7!5JQn!.t9fs5F$2!5nj''!.t9js6K`<!6>-+!.t9ms4@=(!6Y>o!.t9ps6K`<!6kJq!.t9ss4@=(!71]3!.t:!s6K`<!7_%o!.t:%s7$)A!8%8@!.t:*s3:Us!8IPD!.t:,s3:Us!8db.!.t:0s4@=(!9*tE!.t:2s4@=(!9=+G!.t:4s4@=(!9O7I!.t:Hs2b7n!;lfA!.t:Ms3:Us!<<)E!.t:Ss3:Us!=&S`!.t:Xs5F$2!=Jkd!.t:^s4@=(!>#4s!.t:`s4@=(!>5@u!.t:bs4@=(!>GM"!.t:ds4@=(!>YY$!.t:ks5F$2!?D.!!.t:ms6K`<!?hF%!.t:qs6K`<!@%R''!.t:ss6K`<!@7]t!.t:us5F$2!@Ij!!.t;&s5sB7!A4?7!.t;*s5sB7!AXW;!.t;.s5sB7!BC+t!.t;4s5F$2!BU8!!.t;6s7QGF!BgDA!.t;8s7QGF!C$PC!.t;:s7QGF!C6\E!.tI>s2b7n"q:Ok!.tJ"s6K`<"tT`5!.tJ,s6K`<"tfl7!.tJ.s6K`<"uZG5!.tJ6s5F$2"ulS7!.tJ8s5F$2#(us$!.tKds24ni#.jio!.tNos24ni#KHe^!.tNss24ni#NPj:!.tO;s4@=($#BS#!.tSos5F$2$#]e&!.tSrs5F$3!"]+r!/(=`s4@=)!"o7t!/(>!s4@=)!%@lm!/(>$s2b7o!%S$$!/(>&s4@=)!%e00!/(>)s2b7o!&+At!/(>+s4@=)!&=N+!/(>-s4@=)!&X`.!/(>1s5F$3!&sr1!/(>4s24nj!'':.u!/(>6s7QGG!''L;"!/(>8s7QGG!(?kR!/(>As6K`=!([(U!/(>Cs7$)B!(m4M!/(>Es6K`=!)W^T!/(>Ls5F$3!)ij`!/(>Ns6K`=!*''!b!/(>Ps5F$3!*9-d!/(>Rs5F$3!*K9a!/(>Ts5F$3!*]E^!/(>Ws5F$3!+#Wa!/(>hs4@=)!.Fn"!/(?/s4@=)!/gg%!/(?1s3:Ut!0$s''!/(?3s3:Ut!07*=!/(?5s5F$3!0I6?!/(?7s5F$3!0mN9!/(?;s4@=)!1*Z;!/(?=s4@=)!1<f=!/(?@s4@=)!2'';0!/(?Hs6K`=!2KS\!/(?Js6K`=!2]_^!/(?Ls6K`=!2ok`!/(?Ns6K`=!3-"b!/(?Ps7$)B!3?.i!/(?Rs7$)B!3Q:k!/(?Xs6K`=!42^b!/(?Zs6K`=!4Djn!/(?\s6K`=!4W!p!/(?^s6K`=!4r3s!/(?as5sB8!5/?p!/(?cs5sB8!5AKr!/(?es5F$3!5\]p!/(?is6K`=!6,!)!/(?ms6K`=!6G2m!/(?ps4@=)!6bE/!/(?rs4@=)!7(Vs!/(?us6K`=!7Ci5!/(@%s3:Ut!7h,>!/(@(s7$)B!8@Iu!/(@,s7$)B!8RV"!/(@/s4@=)!9!n0!/(@2s6K`=!94%2!/(@4s6K`=!9F14!/(@6s6K`=!;QT9!/(@Ls3:Ut!<)rC!/(@Ps3:Ut!<`AI!/(@Ws5F$3!=8_b!/(@[s5F$3!=o.^!/(@`s6K`=!>,:`!/(@bs6K`=!>>Fb!/(@ds6K`=!>PRd!/(@fs6K`=!?;''u!/(@ms5F$3!?M4,!/(@qs5F$3!?qL0!/(@ss5F$3!@.X2!/(@us4@=)!@@d*!/(A"s4@=)!A"35!/(A)s5sB8!AFK9!/(A-s5sB8!Ajc=!/(A4s24nj!BL2>!/(A6s24nj!B^>T!/(A8s5F$3!BpJV!/(A:s5F$3!C-VX!/(A<s5F$3"mQ''/!/(Obs5F$3"sX*6!/(P,s5F$3"t]f@!/(P.s5F$3"torB!/(P6s4@=)"ucM@!/(P8s4@=)"uuYB!/(Q/s3:Ut#.acP!/(Qfs5F$3#K-S[!/(Tss24nj#KQk_!/(U;s4@=)#NYp;!/(Yos5F$3$#KY$!/(Yrs5F$3$#fk''!/1C`s6K`>!"f1_!/1Cbs6K`>!%.`u!/1D$s3:Uu!%Iri!/1D&s4@=*!%\*%!/1D(s5F$4!&";n!/1D+s3:Uu!&4H*!/1D-s4@=*!&FT,!/1D0s4@=*!&jl:!/1D3s4@=*!''1(t!/1D6s24nk!''C5S!/1D8s24nk!''UAU!/1D@s6K`>!(R"T!/1DCs6K`>!(d.[!/1DEs5F$4!)!:X!/1DLs5F$4!)`dU!/1DNs6K`>!)rpa!/1DPs6K`>!*0''Y!/1DRs6K`>!*B3[!/1DTs5sB9!*T?]!/1DVs5F$4!*oQ`!/1DYs5F$4!,_bg!/1E$s4@=*!/^a.!/1E1s3:Uu!/pm&!/1E3s3:Uu!0.$(!/1E5s5F$4!0@0>!/1E7s5F$4!0R<@!/1E;s4@=*!1!T:!/1E=s4@=*!13`<!/1E?s4@=*!1Nr?!/1EFs24nk!2BM[!/1EJs6K`>!2TY]!/1ELs6K`>!2fe_!/1ENs6K`>!3#qa!/1EPs6K`>!36(h!/1ERs7$)C!3H4j!/1ETs7$)C!4)Xk!/1EZs5F$4!4;dm!/1E\s6K`>!4Mpo!/1E^s6K`>!4`''q!/1Eas6K`>!5&9o!/1Ecs5sB9!58Eq!/1Ees5sB9!5JQn!/1Ehs5F$4!5nj''!/1Els6K`>!6>-+!/1Eos4@=*!6Y>o!/1Ers6K`>!6kJq!/1Eus4@=*!71]3!/1F#s6K`>!7_%o!/1F''s7$)C!8%8@!/1F,s3:Uu!8IPD!/1F.s3:Uu!8db.!/1F2s4@=*!9*tE!/1F4s4@=*!9=+G!/1F6s4@=*!9O7I!/1FJs2b7p!;lfA!/1FOs3:Uu!<<)E!/1FUs3:Uu!=&S`!/1FZs5F$4!=Jkd!/1F`s4@=*!>#4s!/1Fbs4@=*!>5@u!/1Fds4@=*!>GM"!/1Ffs4@=*!>YY$!/1Fms5F$4!?D.!!/1Fos6K`>!?hF%!/1Fss6K`>!@%R''!/1Fus6K`>!@7]t!/1G"s5F$4!@Ij!!/1G(s5sB9!A4?7!/1G,s5sB9!AXW;!/1G0s5sB9!BC+t!/1G6s5F$4!BU8!!/1G8s7QGH!BgDA!/1G:s7QGH!C$PC!/1G<s7QGH!C6\E!/1U@s2b7p"q:Ok!/1V$s6K`>"tT`5!/1V.s6K`>"tfl7!/1V0s6K`>"uZG5!/1V8s5F$4"ulS7!/1V:s5F$4#(us$!/1Wfs24nk#.jio!/1Zqs24nk#KHe^!/1Zus24nk#NPj:!/1[=s4@=*$#BS#!/1_qs5F$4$#]e&!/1_ts5F$5!"]+r!/:Ibs4@=+!"o7t!/:J#s4@=+!%@lm!/:J&s2b7q!%S$$!/:J(s4@=+!%e00!/:J+s2b7q!&+At!/:J-s4@=+!&=N+!/:J/s4@=+!&X`.!/:J3s5F$5!&sr1!/:J6s24nl!'':.u!/:J8s7QGI!''L;"!/:J:s7QGI!(?kR!/:JCs6K`?!([(U!/:JEs7$)D!(m4M!/:JGs6K`?!)W^T!/:JNs5F$5!)ij`!/:JPs6K`?!*''!b!/:JRs5F$5!*9-d!/:JTs5F$5!*K9a!/:JVs5F$5!*]E^!/:JYs5F$5!+#Wa!/:Jjs4@=+!.Fn"!/:K1s4@=+!/gg%!/:K3s3:V!!0$s''!/:K5s3:V!!07*=!/:K7s5F$5!0I6?!/:K9s5F$5!0mN9!/:K=s4@=+!1*Z;!/:K?s4@=+!1<f=!/:KBs4@=+!2'';0!/:KJs6K`?!2KS\!/:KLs6K`?!2]_^!/:KNs6K`?!2ok`!/:KPs6K`?!3-"b!/:KRs7$)D!3?.i!/:KTs7$)D!3Q:k!/:KZs6K`?!42^b!/:K\s6K`?!4Djn!/:K^s6K`?!4W!p!/:K`s6K`?!4r3s!/:Kcs5sB:!5/?p!/:Kes5sB:!5AKr!/:Kgs5F$5!5\]p!/:Kks6K`?!6,!)!/:Kos6K`?!6G2m!/:Krs4@=+!6bE/!/:Kts4@=+!7(Vs!/:L"s6K`?!7Ci5!/:L''s3:V!!7h,>!/:L*s7$)D!8@Iu!/:L.s7$)D!8RV"!/:L1s4@=+!9!n0!/:L4s6K`?!94%2!/:L6s6K`?!9F14!/:L8s6K`?!;QT9!/:LNs3:V!!<)rC!/:LRs3:V!!<`AI!/:LYs5F$5!=8_b!/:L]s5F$5!=o.^!/:Lbs6K`?!>,:`!/:Lds6K`?!>>Fb!/:Lfs6K`?!>PRd!/:Lhs6K`?!?;''u!/:Los5F$5!?M4,!/:Lss5F$5!?qL0!/:Lus5F$5!@.X2!/:M"s4@=+!@@d*!/:M$s4@=+!A"35!/:M+s5sB:!AFK9!/:M/s5sB:!Ajc=!/:M6s24nl!BL2>!/:M8s24nl!B^>T!/:M:s5F$5!BpJV!/:M<s5F$5!C-VX!/:M>s5F$5"mQ''/!/:[ds5F$5"sX*6!/:\.s5F$5"t]f@!/:\0s5F$5"torB!/:\8s4@=+"ucM@!/:\:s4@=+"uuYB!/:]1s3:V!#.acP!/:]hs5F$5#K-S[!/:`us24nl#KQk_!/:a=s4@=+#NYp;!/:eqs5F$5$#KY$!/:ets5F$5$#fk''!/CObs6K`@!"f1_!/COds6K`@!%.`u!/CP&s3:V"!%Iri!/CP(s4@=,!%\*%!/CP*s5F$6!&";n!/CP-s3:V"!&4H*!/CP/s4@=,!&FT,!/CP2s4@=,!&jl:!/CP5s4@=,!''1(t!/CP8s24nm!''C5S!/CP:s24nm!''UAU!/CPBs6K`@!(R"T!/CPEs6K`@!(d.[!/CPGs5F$6!)!:X!/CPNs5F$6!)`dU!/CPPs6K`@!)rpa!/CPRs6K`@!*0''Y!/CPTs6K`@!*B3[!/CPVs5sB;!*T?]!/CPXs5F$6!*oQ`!/CP[s5F$6!,_bg!/CQ&s4@=,!/^a.!/CQ3s3:V"!/pm&!/CQ5s3:V"!0.$(!/CQ7s5F$6!0@0>!/CQ9s5F$6!0R<@!/CQ=s4@=,!1!T:!/CQ?s4@=,!13`<!/CQAs4@=,!1Nr?!/CQHs24nm!2BM[!/CQLs6K`@!2TY]!/CQNs6K`@!2fe_!/CQPs6K`@!3#qa!/CQRs6K`@!36(h!/CQTs7$)E!3H4j!/CQVs7$)E!4)Xk!/CQ\s5F$6!4;dm!/CQ^s6K`@!4Mpo!/CQ`s6K`@!4`''q!/CQcs6K`@!5&9o!/CQes5sB;!58Eq!/CQgs5sB;!5JQn!/CQjs5F$6!5nj''!/CQns6K`@!6>-+!/CQqs4@=,!6Y>o!/CQts6K`@!6kJq!/CR"s4@=,!71]3!/CR%s6K`@!7_%o!/CR)s7$)E!8%8@!/CR.s3:V"!8IPD!/CR0s3:V"!8db.!/CR4s4@=,!9*tE!/CR6s4@=,!9=+G!/CR8s4@=,!9O7I!/CRLs2b7r!;lfA!/CRQs3:V"!<<)E!/CRWs3:V"!=&S`!/CR\s5F$6!=Jkd!/CRbs4@=,!>#4s!/CRds4@=,!>5@u!/CRfs4@=,!>GM"!/CRhs4@=,!>YY$!/CRos5F$6!?D.!!/CRqs6K`@!?hF%!/CRus6K`@!@%R''!/CS"s6K`@!@7]t!/CS$s5F$6!@Ij!!/CS*s5sB;!A4?7!/CS.s5sB;!AXW;!/CS2s5sB;!BC+t!/CS8s5F$6!BU8!!/CS:s7QGJ!BgDA!/CS<s7QGJ!C$PC!/CS>s7QGJ!C6\E!/CaBs2b7r"q:Ok!/Cb&s6K`@"tT`5!/Cb0s6K`@"tfl7!/Cb2s6K`@"uZG5!/Cb:s5F$6"ulS7!/Cb<s5F$6#(us$!/Cchs24nm#.jio!/Cfss24nm#KHe^!/Cg"s24nm#NPj:!/Cg?s4@=,$#BS#!/Ckss5F$6$#]e&!/Cl!s5F$7!$qU(!/LV%s4@=-!%@lr!/LV(s3:V#!%S$$!/LV*s4@=-!%e00!/LV,s6K`A!&";s!/LV.s3gt(!&4H*!/LV0s4@=-!&FT,!/LV3s4@=-!&jl&!/LV6s6K`A!''1))!/LV9s3:V#!''C5?!/LV;s3:V#!''UAA!/LVCs5F$7!(R"J!/LVFs5F$7!(d.V!/LVHs5F$7!)!:N!/LVLs5F$7!)W^J!/LVPs4@=-!)ijV!/LVRs6K`A!*''!X!/LVTs5F$7!*9-d!/LVVs5F$7!*K9M!/LVXs4@=-!*]ET!/LVZs5F$7!*oQV!/LV\s4@=-!.t71!/LW-s5F$7!/1C3!/LW/s5F$7!/CO5!/LW1s5F$7!/U[7!/LW3s4@=-!/gg*!/LW5s3gt(!0$s,!/LW7s3gt(!07*=!/LW9s5F$7!0I6?!/LW;s5F$7!0mN9!/LW?s4@=-!1*Z;!/LWAs4@=-!1<f=!/LWDs4@=-!2'';:!/LWLs5F$7!2KSR!/LWNs5F$7!2]_T!/LWPs5F$7!2okV!/LWRs5F$7!3-"X!/LWTs6K`A!3?.d!/LWVs6K`A!3Q:f!/LW\s5F$7!42^X!/LW^s5F$7!4Djd!/LW`s5F$7!4W!f!/LWbs5F$7!4r3i!/LWes3gt(!5/?\!/LWgs3gt(!5AK^!/LWis4@=-!5\]f!/LWls5F$7!5nir!/LWns5F$7!6+ut!/LWps5F$7!6>-!!/LWrs4@=-!6Y>o!/LWus5F$7!6kJq!/LX#s4@=-!71])!/LX&s5F$7!7_%t!/LX*s6K`A!8%8;!/LX/s3gt(!8IP?!/LX1s3gt(!8db.!/LX5s4@=-!9*t;!/LX7s4@=-!9=+=!/LX9s4@=-!9O7?!/LXMs3:V#!;lfF!/LXRs3gt(!<<)J!/LXXs3gt(!=&SV!/LX]s4@=-!=JkZ!/LXcs4@=-!>#4i!/LXes4@=-!>5@k!/LXgs4@=-!>GLm!/LXis4@=-!>YXo!/LXps5F$7!?D-b!/LXrs6K`A!?hEf!/LY!s6K`A!@%Qh!/LY#s6K`A!@7^3!/LY%s5F$7!@Ij5!/LY+s3gt(!A4?#!/LY/s3gt(!AXW''!/LY3s3gt(!BC,)!/LY9s4@=-!BU8+!/LY;s5F$7!BgD7!/LY=s5F$7!C$P9!/LY?s5F$7!C6\;!/LgCs3:V#"q:Oa!/Lh''s6K`A"tT`!!/Lh1s6K`A"tfl#!/Lh3s6K`A"uZGI!/Lh;s5F$7"ulSK!/Lh=s5F$7#(us)!/Liis3:V##.jie!/Lqss5F$7$#KY$!/Lr!s5F$7$#fk''!/U[ds5F$8!"o7j!/U\$s4@=.!%.a4!/U\(s3gt)!%Irn!/U\*s6K`B!%\*%!/U\,s5F$8!&";s!/U\/s3gt)!&4H*!/U\1s4@=.!&FT@!/U\4s6K`B!&jlN!/U\7s4@=.!''1))!/U\:s3:V$!''C55!/U\<s3:V$!''UA7!/U\Ds6K`B!(m4W!/U\Js6K`B!)<LQ!/U\Ps5F$8!)`dU!/U\Ss6K`B!*0''c!/U\Vs6K`B!*B3e!/U\Xs5F$8!*T?q!/U\Zs7QGL!*fK_!/U\\s7QGL!+#Wa!/U](s6K`B!.t7''!/U].s4@=.!/1C)!/U]0s4@=.!/CO+!/U]2s4@=.!/U[-!/U]4s6K`B!/gg*!/U]6s3gt)!0$s,!/U]8s3gt)!07*=!/U]:s5F$8!0I6?!/U]<s5F$8!0mNM!/U]@s6K`B!1*ZO!/U]Bs6K`B!1<fQ!/U]Es6K`B!2'';:!/U]Ms6K`B!2KS\!/U]Os6K`B!2]_^!/U]Qs6K`B!2ok`!/U]Ss6K`B!42^b!/U]fs5F$8!5/?k!/U]hs5F$8!5AKm!/U]js7QGL!5\^/!/U]ms4@=.!5nj''!/U]os4@=.!6,!)!/U]qs4@=.!6>-+!/U]ss6K`B!6Y?.!/U^"s6K`B!7(W2!/U^*s3gt)!8@J%!/U^2s3gt)!8dbB!/U^6s6K`B!9*tE!/U^8s6K`B!9=+G!/U^:s6K`B!9O7I!/U^Ns3:V$!;lfF!/U^Ss3gt)!<<)J!/U^Ys3gt)!=&S`!/U^^s5F$8!=Jkd!/U^ds6K`B!>,:t!/U^hs6K`B!>PS#!/U^qs6K`B!?D.5!/U^ss6K`B!?hF9!/U_"s6K`B!@%R;!/U_$s6K`B!@7]t!/U_&s6K`B!@Ij!!/U_,s5F$8!A4?2!/U_0s5F$8!AXW6!/U_4s5F$8!BC,)!/U_:s7QGL!BU8+!/U_<s4@=.!BgDA!/U_>s4@=.!C$PC!/U_@s4@=.!C6\E!/UmDs3:V$"q:Ok!/Un(s6K`B"tT`I!/Un2s6K`B"tflK!/Un4s6K`B"uZG5!/Un<s6K`B"ulS7!/Un>s6K`B#(us)!/Uojs3:V$#.jj.!/Urus4@=.#KHer!/Us$s4@=.#NYpO!/V"ts6K`B$#KY.!/V#"s6K`B$#fk1!/^b%s5F$9!%.`u!/^b)s3gt*!%Irn!/^b+s4@=/!%\*%!/^b-s5F$9!%n6;!/^b/s3:V%!&+B$!/^b1s4@=/!&=N+!/^b3s4@=/!&X`.!/^b7s3:V%!&srE!/^b:s3:V%!'':/*!/^b<s5F$9!''L;,!/^b>s5F$9!(?kH!/^bGs5F$9!([(K!/^bIs6K`C!(m4M!/^bKs5F$9!)<LQ!/^bQs4@=/!)`dK!/^bSs5F$9!)rpa!/^bUs5F$9!*0''Y!/^bWs6K`C!*B3[!/^bYs3gt*!*T?S!/^b[s4@=/!*fK_!/^b]s4@=/!+#WW!/^c.s5F$9!/(=2!/^c0s5F$9!/:I4!/^c2s5F$9!/LU6!/^c4s5F$9!/^a.!/^c6s3gt*!/pm+!/^c8s3gt*!0.$-!/^c:s5F$9!0@0>!/^c<s5F$9!0R<@!/^c@s4@=/!1!T:!/^cBs4@=/!13`<!/^cDs4@=/!1Nr?!/^cKs3:V%!2BMQ!/^cOs5F$9!2TYS!/^cQs5F$9!2feU!/^cSs5F$9!3#qW!/^cUs5F$9!36(c!/^cWs6K`C!3H4e!/^cYs6K`C!4)Xa!/^c_s4@=/!4;dc!/^cas5F$9!4Mpe!/^ccs5F$9!4`''g!/^cfs5F$9!5&9[!/^chs3gt*!58E]!/^cjs3gt*!5JQd!/^cms4@=/!5ecq!/^cos5F$9!6"os!/^cqs5F$9!65&u!/^css5F$9!6G2m!/^d!s4@=/!6bE%!/^d#s4@=/!7(Vs!/^d&s5F$9!7Ci+!/^d+s3gt*!7h,9!/^d.s6K`C!8@J%!/^d2s6K`C!8RV''!/^d5s4@=/!9!n0!/^d8s5F$9!94%2!/^d:s5F$9!9F14!/^d<s5F$9!;QT>!/^dRs3gt*!<)rH!/^dVs3gt*!<`AN!/^d]s4@=/!=8_X!/^das4@=/!=o.^!/^dfs5F$9!>,:`!/^dhs5F$9!>>Fb!/^djs5F$9!>PRd!/^dls5F$9!?;''u!/^dss3:V%!?M4,!/^e"s3:V%!?qL0!/^e$s3:V%!@.X2!/^e&s6K`C!@@d*!/^e(s6K`C!A"3!!/^e/s3gt*!AFK%!/^e3s3gt*!Ajc)!/^e:s3:V%!BL24!/^e<s3:V%!B^>@!/^e>s4@=/!BpJB!/^e@s4@=/!C-VD!/^eBs4@=/"mQ''4!/^shs4@=/"sX*6!/^t2s3:V%"t]f@!/^t4s3:V%"torB!/^t<s6K`C"ucM@!/^t>s6K`C"uuYB!/^u5s3gt*#.acZ!/^uls4@=/$#BS#!/_)!s5F$9$#]e&!/_)$s5F$:!$qU(!/gh(s4@=0!%@lr!/gh+s3:V&!%S$$!/gh-s4@=0!%e00!/gh/s6K`D!&";s!/gh1s3gt+!&4H*!/gh3s4@=0!&FT,!/gh6s4@=0!&jl&!/gh9s6K`D!''1))!/gh<s3:V&!''C5?!/gh>s3:V&!''UAA!/ghFs5F$:!(R"J!/ghIs5F$:!(d.V!/ghKs5F$:!)!:N!/ghOs5F$:!)W^J!/ghSs4@=0!)ijV!/ghUs6K`D!*''!X!/ghWs5F$:!*9-d!/ghYs5F$:!*K9M!/gh[s4@=0!*]ET!/gh]s5F$:!*oQV!/gh_s4@=0!.t71!/gi0s5F$:!/1C3!/gi2s5F$:!/CO5!/gi4s5F$:!/U[7!/gi6s4@=0!/gg*!/gi8s3gt+!0$s,!/gi:s3gt+!07*=!/gi<s5F$:!0I6?!/gi>s5F$:!0mN9!/giBs4@=0!1*Z;!/giDs4@=0!1<f=!/giGs4@=0!2'';:!/giOs5F$:!2KSR!/giQs5F$:!2]_T!/giSs5F$:!2okV!/giUs5F$:!3-"X!/giWs6K`D!3?.d!/giYs6K`D!3Q:f!/gi_s5F$:!42^X!/gias5F$:!4Djd!/gics5F$:!4W!f!/gies5F$:!4r3i!/gihs3gt+!5/?\!/gijs3gt+!5AK^!/gils4@=0!5\]f!/gios5F$:!5nir!/giqs5F$:!6+ut!/giss5F$:!6>-!!/gius4@=0!6Y>o!/gj#s5F$:!6kJq!/gj&s4@=0!71])!/gj)s5F$:!7_%t!/gj-s6K`D!8%8;!/gj2s3gt+!8IP?!/gj4s3gt+!8db.!/gj8s4@=0!9*t;!/gj:s4@=0!9=+=!/gj<s4@=0!9O7?!/gjPs3:V&!;lfF!/gjUs3gt+!<<)J!/gj[s3gt+!=&SV!/gj`s4@=0!=JkZ!/gjfs4@=0!>#4i!/gjhs4@=0!>5@k!/gjjs4@=0!>GLm!/gjls4@=0!>YXo!/gjss5F$:!?D-b!/gjus6K`D!?hEf!/gk$s6K`D!@%Qh!/gk&s6K`D!@7^3!/gk(s5F$:!@Ij5!/gk.s3gt+!A4?#!/gk2s3gt+!AXW''!/gk6s3gt+!BC,)!/gk<s4@=0!BU8+!/gk>s5F$:!BgD7!/gk@s5F$:!C$P9!/gkBs5F$:!C6\;!/h$Fs3:V&"q:Oa!/h%*s6K`D"tT`!!/h%4s6K`D"tfl#!/h%6s6K`D"uZGI!/h%>s5F$:"ulSK!/h%@s5F$:#(us)!/h&ls3:V&#.jie!/h/!s5F$:$#KY$!/h/$s5F$:$#fk''!/pn''s5F$;!%.`u!/pn+s3gt,!%Irn!/pn-s4@=1!%\*%!/pn/s5F$;!%n6;!/pn1s3:V''!&+B$!/pn3s4@=1!&=N+!/pn5s4@=1!&X`.!/pn9s3:V''!&srE!/pn<s3:V''!'':/*!/pn>s5F$;!''L;,!/pn@s5F$;!(?kH!/pnIs5F$;!([(K!/pnKs6K`E!(m4M!/pnMs5F$;!)<LQ!/pnSs4@=1!)`dK!/pnUs5F$;!)rpa!/pnWs5F$;!*0''Y!/pnYs6K`E!*B3[!/pn[s3gt,!*T?S!/pn]s4@=1!*fK_!/pn_s4@=1!+#WW!/po0s5F$;!/(=2!/po2s5F$;!/:I4!/po4s5F$;!/LU6!/po6s5F$;!/^a.!/po8s3gt,!/pm+!/po:s3gt,!0.$-!/po<s5F$;!0@0>!/po>s5F$;!0R<@!/poBs4@=1!1!T:!/poDs4@=1!13`<!/poFs4@=1!1Nr?!/poMs3:V''!2BMQ!/poQs5F$;!2TYS!/poSs5F$;!2feU!/poUs5F$;!3#qW!/poWs5F$;!36(c!/poYs6K`E!3H4e!/po[s6K`E!4)Xa!/poas4@=1!4;dc!/pocs5F$;!4Mpe!/poes5F$;!4`''g!/pohs5F$;!5&9[!/pojs3gt,!58E]!/pols3gt,!5JQd!/poos4@=1!5ecq!/poqs5F$;!6"os!/poss5F$;!65&u!/pous5F$;!6G2m!/pp#s4@=1!6bE%!/pp%s4@=1!7(Vs!/pp(s5F$;!7Ci+!/pp-s3gt,!7h,9!/pp0s6K`E!8@J%!/pp4s6K`E!8RV''!/pp7s4@=1!9!n0!/pp:s5F$;!94%2!/pp<s5F$;!9F14!/pp>s5F$;!;QT>!/ppTs3gt,!<)rH!/ppXs3gt,!<`AN!/pp_s4@=1!=8_X!/ppcs4@=1!=o.^!/pphs5F$;!>,:`!/ppjs5F$;!>>Fb!/ppls5F$;!>PRd!/ppns5F$;!?;''u!/ppus3:V''!?M4,!/pq$s3:V''!?qL0!/pq&s3:V''!@.X2!/pq(s6K`E!@@d*!/pq*s6K`E!A"3!!/pq1s3gt,!AFK%!/pq5s3gt,!Ajc)!/pq<s3:V''!BL24!/pq>s3:V''!B^>@!/pq@s4@=1!BpJB!/pqBs4@=1!C-VD!/pqDs4@=1"mQ''4!/q*js4@=1"sX*6!/q+4s3:V''"t]f@!/q+6s3:V''"torB!/q+>s6K`E"ucM@!/q+@s6K`E"uuYB!/q,7s3gt,#.acZ!/q,ns4@=1$#BS#!/q5#s5F$;$#]e&!/q5&s5F$<!$qU(!0$t*s4@=2!%@lr!0$t-s3:V(!%S$$!0$t/s4@=2!%e00!0$t1s6K`F!&";s!0$t3s3gt-!&4H*!0$t5s4@=2!&FT,!0$t8s4@=2!&jl&!0$t;s6K`F!''1))!0$t>s3:V(!''C5?!0$t@s3:V(!''UAA!0$tHs5F$<!(R"J!0$tKs5F$<!(d.V!0$tMs5F$<!)!:N!0$tQs5F$<!)W^J!0$tUs4@=2!)ijV!0$tWs6K`F!*''!X!0$tYs5F$<!*9-d!0$t[s5F$<!*K9M!0$t]s4@=2!*]ET!0$t_s5F$<!*oQV!0$tas4@=2!.t71!0$u2s5F$<!/1C3!0$u4s5F$<!/CO5!0$u6s5F$<!/U[7!0$u8s4@=2!/gg*!0$u:s3gt-!0$s,!0$u<s3gt-!07*=!0$u>s5F$<!0I6?!0$u@s5F$<!0mN9!0$uDs4@=2!1*Z;!0$uFs4@=2!1<f=!0$uIs4@=2!2'';:!0$uQs5F$<!2KSR!0$uSs5F$<!2]_T!0$uUs5F$<!2okV!0$uWs5F$<!3-"X!0$uYs6K`F!3?.d!0$u[s6K`F!3Q:f!0$uas5F$<!42^X!0$ucs5F$<!4Djd!0$ues5F$<!4W!f!0$ugs5F$<!4r3i!0$ujs3gt-!5/?\!0$uls3gt-!5AK^!0$uns4@=2!5\]f!0$uqs5F$<!5nir!0$uss5F$<!6+ut!0$uus5F$<!6>-!!0%!"s4@=2!6Y>o!0%!%s5F$<!6kJq!0%!(s4@=2!71])!0%!+s5F$<!7_%t!0%!/s6K`F!8%8;!0%!4s3gt-!8IP?!0%!6s3gt-!8db.!0%!:s4@=2!9*t;!0%!<s4@=2!9=+=!0%!>s4@=2!9O7?!0%!Rs3:V(!;lfF!0%!Ws3gt-!<<)J!0%!]s3gt-!=&SV!0%!bs4@=2!=JkZ!0%!hs4@=2!>#4i!0%!js4@=2!>5@k!0%!ls4@=2!>GLm!0%!ns4@=2!>YXo!0%!us5F$<!?D-b!0%""s6K`F!?hEf!0%"&s6K`F!@%Qh!0%"(s6K`F!@7^3!0%"*s5F$<!@Ij5!0%"0s3gt-!A4?#!0%"4s3gt-!AXW''!0%"8s3gt-!BC,)!0%">s4@=2!BU8+!0%"@s5F$<!BgD7!0%"Bs5F$<!C$P9!0%"Ds5F$<!C6\;!0%0Hs3:V("q:Oa!0%1,s6K`F"tT`!!0%16s6K`F"tfl#!0%18s6K`F"uZGI!0%1@s5F$<"ulSK!0%1Bs5F$<#(us)!0%2ns3:V(#.jie!0%;#s5F$<$#KY$!0%;&s5F$<$#fk''!0.%)s6K`G!%.`p!0.%-s3gt.!%Irn!0.%/s3gt.!%\*%!0.%1s7QGQ!%n6;!0.%3s3:V)!&+B$!0.%5s4@=3!&=N+!0.%7s3gt.!&X`)!0.%;s4m[8!&srO!0.%>s6K`G!'':/H!0.%@s24nt!''L;J!0.%Bs24nt!(?k>!0.%Ks5F$=!([(K!0.%Ms6K`G!(m4a!0.%Os4@=3!)<L[!0.%Us3:V)!)`dA!0.%Ws5F$=!)rp\!0.%Ys5F$=!*0''T!0.%[s3:V)!*B3o!0.%]s3gt.!*T?]!0.%_s5F$=!*fKF!0.%as5F$=!+#WM!0.&2s6K`G!/(=<!0.&4s6K`G!/:I>!0.&6s6K`G!/LU@!0.&8s6K`G!/^a)!0.&:s3gt.!/pm+!0.&<s3gt.!0.$-!0.&>s7QGQ!0@0R!0.&@s7QGQ!0R<T!0.&Ds3gt.!1!T5!0.&Fs3gt.!13`7!0.&Hs3gt.!1Nr:!0.&Os6K`G!2BMG!0.&Ss4@=3!2TYI!0.&Us4@=3!2feK!0.&Ws4@=3!3#qM!0.&Ys5F$=!36(c!0.&[s6K`G!3H4e!0.&]s6K`G!4)Xa!0.&cs3:V)!4;dc!0.&es5F$=!4Mpe!0.&gs5F$=!4`''g!0.&js5F$=!5&9[!0.&ls3gt.!58E]!0.&ns3gt.!5JQn!0.&qs5F$=!5ed&!0.&ss4@=3!6"p(!0.&us4@=3!65''*!0.''"s4@=3!6G2h!0.''%s3gt.!6bE%!0.''''s3gt.!7(Vn!0.''*s5F$=!7Ci+!0.''/s3gt.!7h,9!0.''2s6K`G!8@J%!0.''6s6K`G!8RV''!0.''9s3gt.!9!n+!0.''<s4@=3!94%-!0.''>s4@=3!9F1/!0.''@s4@=3!;QT>!0.''Vs3gt.!<)rH!0.''Zs3gt.!<`AN!0.''as3:V)!=8_N!0.''es3:V)!=o.Y!0.''js5F$=!>,:[!0.''ls5F$=!>>F]!0.''ns5F$=!>PR_!0.''ps5F$=!?;''p!0.("s4m[8!?M3c!0.(&s4m[8!?qKg!0.((s4m[8!@.Wi!0.(*s7QGQ!@@d>!0.(,s7QGQ!A"3!!0.(3s3gt.!AFK%!0.(7s3gt.!Ajc)!0.(>s6K`G!BL2>!0.(@s6K`G!B^>"!0.(Bs3:V)!BpJ$!0.(Ds3:V)!C-V&!0.(Fs3:V)"mQ''4!0.6ls3:V)"sX*1!0.76s4m[8"t]f"!0.78s4m[8"tor$!0.7@s7QGQ"ucMT!0.7Bs7QGQ"uuYV!0.89s3gt.#.ad#!0.8ps5F$=$#BS7!0.A%s7QGQ$#]e:!0.A(s7QGR!$qU2!07+,s3gt/!%@lr!07+/s3:V*!%S#t!07+1s4@=4!%e0D!07+3s6K`H!&";s!07+5s3gt/!&4H*!07+7s4@=4!&FT''!07+:s3gt/!&jl5!07+=s7QGR!''1)G!07+@s6K`H!''C5!!07+Bs6K`H!''UA#!07+Js4@=4!(R"J!07+Ms5F$>!(d.V!07+Os7QGR!)!:D!07+Ss6K`H!)W^@!07+Ws3:V*!)ijV!07+Ys5sBC!*''!X!07+[s4m[9!*9-F!07+]s7QGR!*K9M!07+_s5F$>!*]E^!07+as2b8%!*oQ`!07+cs3:V*!.t7;!07,4s6K`H!/1C=!07,6s6K`H!/CO?!07,8s6K`H!/U[A!07,:s3gt/!/gg*!07,<s3gt/!0$s,!07,>s3gt/!07*Q!07,@s7QGR!0I6S!07,Bs7QGR!0mN4!07,Fs3gt/!1*Z6!07,Hs3gt/!1<f8!07,Ks3gt/!2'';X!07,Ss4@=4!2KSH!07,Us4@=4!2]_J!07,Ws4@=4!2okL!07,Ys4@=4!3-"X!07,[s6K`H!3?.d!07,]s6K`H!3Q:f!07,cs5F$>!42^N!07,es5F$>!4Djd!07,gs5F$>!4W!f!07,is5F$>!4r3i!07,ls3gt/!5/?\!07,ns3gt/!5AK^!07,ps5F$>!5\]p!07,ss6K`H!5nih!07,us6K`H!6+uj!07-"s6K`H!6>,l!07-$s3gt/!6Y>j!07-''s5F$>!6kJl!07-*s3gt/!71])!07--s5F$>!7_%t!07-1s6K`H!8%8;!07-6s3gt/!8IP?!07-8s3gt/!8db)!07-<s3gt/!9*t1!07->s3gt/!9=+3!07-@s3gt/!9O75!07-Ts3:V*!;lfF!07-Ys3gt/!<<)J!07-_s3gt/!=&SL!07-ds3:V*!=JkP!07-js3gt/!>#4i!07-ls3gt/!>5@k!07-ns3gt/!>GLm!07-ps3gt/!>YXo!07."s4m[9!?D-q!07.$s3:V*!?hEu!07.(s3:V*!@%R"!07.*s3:V*!@7^=!07.,s7QGR!@Ij?!07.2s3gt/!A4?#!07.6s3gt/!AXW''!07.:s3gt/!BC,G!07.@s5F$>!BU8I!07.Bs24nu!BgD-!07.Ds24nu!C$P/!07.Fs24nu!C6\1!07<Js3:V*"q:OW!07=.s5sBC"tT`0!07=8s3:V*"tfl2!07=:s3:V*"uZGS!07=Bs7QGR"ulSU!07=Ds7QGR#(us)!07>ps6K`H#.jio!07G%s7QGR$#KY8!07G(s7QGR$#fk;!0@1+s6K`I!%.`p!0@1/s3gt0!%Irn!0@11s3gt0!%\*%!0@13s7QGS!%n6;!0@15s3:V+!&+B$!0@17s4@=5!&=N+!0@19s3gt0!&X`)!0@1=s4m[:!&srO!0@1@s6K`I!'':/H!0@1Bs24o!!''L;J!0@1Ds24o!!(?k>!0@1Ms5F$?!([(K!0@1Os6K`I!(m4a!0@1Qs4@=5!)<L[!0@1Ws3:V+!)`dA!0@1Ys5F$?!)rp\!0@1[s5F$?!*0''T!0@1]s3:V+!*B3o!0@1_s3gt0!*T?]!0@1as5F$?!*fKF!0@1cs5F$?!+#WM!0@24s6K`I!/(=<!0@26s6K`I!/:I>!0@28s6K`I!/LU@!0@2:s6K`I!/^a)!0@2<s3gt0!/pm+!0@2>s3gt0!0.$-!0@2@s7QGS!0@0R!0@2Bs7QGS!0R<T!0@2Fs3gt0!1!T5!0@2Hs3gt0!13`7!0@2Js3gt0!1Nr:!0@2Qs6K`I!2BMG!0@2Us4@=5!2TYI!0@2Ws4@=5!2feK!0@2Ys4@=5!3#qM!0@2[s5F$?!36(c!0@2]s6K`I!3H4e!0@2_s6K`I!4)Xa!0@2es3:V+!4;dc!0@2gs5F$?!4Mpe!0@2is5F$?!4`''g!0@2ls5F$?!5&9[!0@2ns3gt0!58E]!0@2ps3gt0!5JQn!0@2ss5F$?!5ed&!0@2us4@=5!6"p(!0@3"s4@=5!65''*!0@3$s4@=5!6G2h!0@3''s3gt0!6bE%!0@3)s3gt0!7(Vn!0@3,s5F$?!7Ci+!0@31s3gt0!7h,9!0@34s6K`I!8@J%!0@38s6K`I!8RV''!0@3;s3gt0!9!n+!0@3>s4@=5!94%-!0@3@s4@=5!9F1/!0@3Bs4@=5!;QT>!0@3Xs3gt0!<)rH!0@3\s3gt0!<`AN!0@3cs3:V+!=8_N!0@3gs3:V+!=o.Y!0@3ls5F$?!>,:[!0@3ns5F$?!>>F]!0@3ps5F$?!>PR_!0@3rs5F$?!?;''p!0@4$s4m[:!?M3c!0@4(s4m[:!?qKg!0@4*s4m[:!@.Wi!0@4,s7QGS!@@d>!0@4.s7QGS!A"3!!0@45s3gt0!AFK%!0@49s3gt0!Ajc)!0@4@s6K`I!BL2>!0@4Bs6K`I!B^>"!0@4Ds3:V+!BpJ$!0@4Fs3:V+!C-V&!0@4Hs3:V+"mQ''4!0@Bns3:V+"sX*1!0@C8s4m[:"t]f"!0@C:s4m[:"tor$!0@CBs7QGS"ucMT!0@CDs7QGS"uuYV!0@D;s3gt0#.ad#!0@Drs5F$?$#BS7!0@M''s7QGS$#]e:!0@M*s7QGT!$qU2!0I7.s3gt1!%@lr!0I71s3:V,!%S#t!0I73s4@=6!%e0D!0I75s6K`J!&";s!0I77s3gt1!&4H*!0I79s4@=6!&FT''!0I7<s3gt1!&jl5!0I7?s7QGT!''1)G!0I7Bs6K`J!''C5!!0I7Ds6K`J!''UA#!0I7Ls4@=6!(R"J!0I7Os5F$@!(d.V!0I7Qs7QGT!)!:D!0I7Us6K`J!)W^@!0I7Ys3:V,!)ijV!0I7[s5sBE!*''!X!0I7]s4m[;!*9-F!0I7_s7QGT!*K9M!0I7as5F$@!*]E^!0I7cs2b8''!*oQ`!0I7es3:V,!.t7;!0I86s6K`J!/1C=!0I88s6K`J!/CO?!0I8:s6K`J!/U[A!0I8<s3gt1!/gg*!0I8>s3gt1!0$s,!0I8@s3gt1!07*Q!0I8Bs7QGT!0I6S!0I8Ds7QGT!0mN4!0I8Hs3gt1!1*Z6!0I8Js3gt1!1<f8!0I8Ms3gt1!2'';X!0I8Us4@=6!2KSH!0I8Ws4@=6!2]_J!0I8Ys4@=6!2okL!0I8[s4@=6!3-"X!0I8]s6K`J!3?.d!0I8_s6K`J!3Q:f!0I8es5F$@!42^N!0I8gs5F$@!4Djd!0I8is5F$@!4W!f!0I8ks5F$@!4r3i!0I8ns3gt1!5/?\!0I8ps3gt1!5AK^!0I8rs5F$@!5\]p!0I8us6K`J!5nih!0I9"s6K`J!6+uj!0I9$s6K`J!6>,l!0I9&s3gt1!6Y>j!0I9)s5F$@!6kJl!0I9,s3gt1!71])!0I9/s5F$@!7_%t!0I93s6K`J!8%8;!0I98s3gt1!8IP?!0I9:s3gt1!8db)!0I9>s3gt1!9*t1!0I9@s3gt1!9=+3!0I9Bs3gt1!9O75!0I9Vs3:V,!;lfF!0I9[s3gt1!<<)J!0I9as3gt1!=&SL!0I9fs3:V,!=JkP!0I9ls3gt1!>#4i!0I9ns3gt1!>5@k!0I9ps3gt1!>GLm!0I9rs3gt1!>YXo!0I:$s4m[;!?D-q!0I:&s3:V,!?hEu!0I:*s3:V,!@%R"!0I:,s3:V,!@7^=!0I:.s7QGT!@Ij?!0I:4s3gt1!A4?#!0I:8s3gt1!AXW''!0I:<s3gt1!BC,G!0I:Bs5F$@!BU8I!0I:Ds24o"!BgD-!0I:Fs24o"!C$P/!0I:Hs24o"!C6\1!0IHLs3:V,"q:OW!0II0s5sBE"tT`0!0II:s3:V,"tfl2!0II<s3:V,"uZGS!0IIDs7QGT"ulSU!0IIFs7QGT#(us)!0IJrs6K`J#.jio!0IS''s7QGT$#KY8!0IS*s7QGT$#fk;!0R=-s4@=7!%.a4!0R=1s3gt2!%Irn!0R=3s6K`K!%\*%!0R=5s5F$A!&";s!0R=8s3gt2!&4H*!0R=:s4@=7!&FT@!0R==s6K`K!&jlN!0R=@s4@=7!''1))!0R=Cs3:V-!''C55!0R=Es3:V-!''UA7!0R=Ms6K`K!(m4W!0R=Ss6K`K!)<LQ!0R=Ys5F$A!)`dU!0R=\s6K`K!*0''c!0R=_s6K`K!*B3e!0R=as5F$A!*T?q!0R=cs7QGU!*fK_!0R=es7QGU!+#Wa!0R>6s4@=7!/(=(!0R>8s4@=7!/:I*!0R>:s4@=7!/LU,!0R><s4@=7!/^aB!0R>>s3gt2!/pm+!0R>@s3gt2!0.$-!0R>Bs5F$A!0@0>!0R>Ds5F$A!0R<@!0R>Hs6K`K!1!TN!0R>Js6K`K!13`P!0R>Ls6K`K!1NrS!0R>Ss3:V-!2BM[!0R>Ws6K`K!2TY]!0R>Ys6K`K!2fe_!0R>[s6K`K!3#qa!0R>gs5F$A!5&9j!0R>ps5F$A!58El!0R>rs5F$A!5JR-!0R>us7QGU!5ecg!0R?"s6K`K!6"oi!0R?$s6K`K!65&k!0R?&s6K`K!6G3,!0R?)s6K`K!6kK0!0R?-s6K`K!7_%t!0R?9s3gt2!8RV''!0R?=s6K`K!9!nD!0R?@s6K`K!94%F!0R?Bs6K`K!9F1H!0R?Ds6K`K!;QT>!0R?Zs3gt2!<)rH!0R?^s3gt2!<`AN!0R?es5F$A!=8_b!0R?is5F$A!=o.r!0R?os6K`K!>>G!!0R?ss6K`K!?;(*!0R@&s7QGU!?M4,!0R@*s7QGU!?qL0!0R@,s7QGU!@.X2!0R@.s4@=7!@@d4!0R@0s4@=7!A"30!0R@7s5F$A!AFK4!0R@;s5F$A!Ajc8!0R@Bs3:V-!BL2R!0R@Ds3:V-!B^>6!0R@Fs5F$A!BpJ8!0R@Hs5F$A!C-V:!0R@Js5F$A"mQ''4!0RNps5F$A"sX*6!0RO:s7QGU"t]f@!0RO<s7QGU"torB!0RODs4@=7"ucMJ!0ROFs4@=7"uuYL!0RP=s3gt2#.acZ!0RPts7QGU$#BS-!0RY)s6K`K$#]e0!0RY,s6K`M!"]+h!0dHqs5F$C!$qU(!0dI3s5F$C!%Is#!0dI6s5F$C!%e0D!0dI9s4@=9!&+B3!0dI;s5F$C!&=N5!0dIAs6K`M!&sr1!0dIDs4@=9!'':/4!0dIFs3:V/!''L;6!0dIHs3:V/!(?kR!0dIUs6K`M!)W^^!0dI\s6K`M!)rpk!0dI`s6K`M!*K9k!0dIhs6K`M!.Fn6!0dJ8s5F$C!/(=2!0dJ:s5F$C!/:I4!0dJ<s5F$C!/LU6!0dJ>s5F$C!/gg9!0dJAs5F$C!0$s;!0dJCs5F$C!07*Q!0dJEs7QGW!0I6S!0dJGs7QGW!2'';D!0dJXs6K`M!2KS\!0dJZs6K`M!2]_^!0dJ\s6K`M!2ok`!0dJ^s6K`M!42^l!0dJqs7$)R!5/@%!0dJss7$)R!5AL''!0dK#s5F$C!5nj''!0dK%s5F$C!6,!)!0dK''s5F$C!6>-+!0dK5s5F$C!8@J4!0dK=s5F$C!9*tE!0dKDs6K`M!9O7I!0dKYs4@=9!;lfU!0dK^s5F$C!<<)Y!0dKds5F$C!=&Sj!0dKis6K`M!=Jkn!0dL''s6K`M!?D.+!0dL,s6K`M!@%R1!0dL0s4@=9!@Ij!!0dL7s7$)R!A4?A!0dL;s7$)R!AXWE!0dL?s7$)R!BC,3!0dLFs4@=9!B^>,!0dLHs6K`M!BpJ.!0dLJs6K`M!C-V0!0dLLs6K`M"mQ''>!0dZrs6K`M"sX*@!0d[<s6K`M"tflA!0d[Fs4@=9"ulS7!0d\?s5F$C#.acd!0d`+s4@=9#KHer!0d`/s4@=9#NYpO!0mNps5F$D!"o7j!0mO0s5F$D!%@m,!0mO5s4@=:!%\*/!0mO8s7QGX!&"<(!0mO;s5F$D!&4H4!0mO=s5F$D!&jlD!0mOCs4@=:!''1)3!0mOFs4@=:!''C5+!0mOHs4@=:!''UA-!0mOPs6K`N!)!:X!0mO\s6K`N!)`d_!0mO_s7QGX!*0''c!0mOds7$)S!+#Wk!0mP4s6K`N!.t71!0mP:s5F$D!/1C3!0mP<s5F$D!/CO5!0mP>s5F$D!/U[7!0mPAs5F$D!/pm:!0mPCs5F$D!0.$<!0mPEs7QGX!0@0R!0mPGs7QGX!0R<T!0mPVs4@=:!2BM[!0mPZs6K`N!2TY]!0mP\s6K`N!2fe_!0mP^s6K`N!3#qa!0mPjs6K`N!5&:$!0mPss7$)S!58F&!0mPus7$)S!5ecq!0mQ%s6K`N!6"os!0mQ''s6K`N!65&u!0mQ)s6K`N!7_&.!0mQ<s5F$D!8RV6!0mQCs6K`N!9=+G!0mQGs6K`N!;QTH!0mQ]s5F$D!<)rW!0mQas5F$D!<`A]!0mQhs6K`N!=8_l!0mQls6K`N!?;(*!0mR)s6K`N!?hF/!0mR/s6K`N!@7]t!0mR3s4@=:!A"3?!0mR:s7$)S!AFKC!0mR>s7$)S!AjcG!0mREs4@=:!BU85!0mRHs3:V0!BgDK!0mRJs3:V0!C$PM!0mRLs3:V0!C6\O!0m`Ps4@=:"q:Ou!0ma4s7QGX"tT`?!0ma?s6K`N"uZG5!0maIs4@=:#(us8!0mc!s4@=:#K-So!0mf/s4@=:#KQks!0mfMs6K`O!"]+h!1!Tss5F$E!$qU(!1!U5s5F$E!%Is#!1!U8s5F$E!%e0D!1!U;s4@=;!&+B3!1!U=s5F$E!&=N5!1!UCs6K`O!&sr1!1!UFs4@=;!'':/4!1!UHs3:V1!''L;6!1!UJs3:V1!(?kR!1!UWs6K`O!)W^^!1!U^s6K`O!)rpk!1!Ubs6K`O!*K9k!1!Ujs6K`O!.Fn6!1!V:s5F$E!/(=2!1!V<s5F$E!/:I4!1!V>s5F$E!/LU6!1!V@s5F$E!/gg9!1!VCs5F$E!0$s;!1!VEs5F$E!07*Q!1!VGs7QGY!0I6S!1!VIs7QGY!2'';D!1!VZs6K`O!2KS\!1!V\s6K`O!2]_^!1!V^s6K`O!2ok`!1!V`s6K`O!42^l!1!Vss7$)T!5/@%!1!Vus7$)T!5AL''!1!W%s5F$E!5nj''!1!W''s5F$E!6,!)!1!W)s5F$E!6>-+!1!W7s5F$E!8@J4!1!W?s5F$E!9*tE!1!WFs6K`O!9O7I!1!W[s4@=;!;lfU!1!W`s5F$E!<<)Y!1!Wfs5F$E!=&Sj!1!Wks6K`O!=Jkn!1!X)s6K`O!?D.+!1!X.s6K`O!@%R1!1!X2s4@=;!@Ij!!1!X9s7$)T!A4?A!1!X=s7$)T!AXWE!1!XAs7$)T!BC,3!1!XHs4@=;!B^>,!1!XJs6K`O!BpJ.!1!XLs6K`O!C-V0!1!XNs6K`O"mQ''>!1!fts6K`O"sX*@!1!g>s6K`O"tflA!1!gHs4@=;"ulS7!1!hAs5F$E#.acd!1!l-s4@=;#KHer!1!l1s4@=;#NYpO!1*Zrs5F$F!"o7j!1*[2s5F$F!%@m,!1*[7s4@=<!%\*/!1*[:s7QGZ!&"<(!1*[=s5F$F!&4H4!1*[?s5F$F!&jlD!1*[Es4@=<!''1)3!1*[Hs4@=<!''C5+!1*[Js4@=<!''UA-!1*[Rs6K`P!)!:X!1*[^s6K`P!)`d_!1*[as7QGZ!*0''c!1*[fs7$)U!+#Wk!1*\6s6K`P!.t71!1*\<s5F$F!/1C3!1*\>s5F$F!/CO5!1*\@s5F$F!/U[7!1*\Cs5F$F!/pm:!1*\Es5F$F!0.$<!1*\Gs7QGZ!0@0R!1*\Is7QGZ!0R<T!1*\Xs4@=<!2BM[!1*\\s6K`P!2TY]!1*\^s6K`P!2fe_!1*\`s6K`P!3#qa!1*\ls6K`P!5&:$!1*\us7$)U!58F&!1*]"s7$)U!5ecq!1*]''s6K`P!6"os!1*])s6K`P!65&u!1*]+s6K`P!7_&.!1*]>s5F$F!8RV6!1*]Es6K`P!9=+G!1*]Is6K`P!;QTH!1*]_s5F$F!<)rW!1*]cs5F$F!<`A]!1*]js6K`P!=8_l!1*]ns6K`P!?;(*!1*^+s6K`P!?hF/!1*^1s6K`P!@7]t!1*^5s4@=<!A"3?!1*^<s7$)U!AFKC!1*^@s7$)U!AjcG!1*^Gs4@=<!BU85!1*^Js3:V2!BgDK!1*^Ls3:V2!C$PM!1*^Ns3:V2!C6\O!1*lRs4@=<"q:Ou!1*m6s7QGZ"tT`?!1*mAs6K`P"uZG5!1*mKs4@=<#(us8!1*o#s4@=<#K-So!1*r1s4@=<#KQks!1*rOs6K`Q!"]+h!13`us5F$G!$qU(!13a7s5F$G!%Is#!13a:s5F$G!%e0D!13a=s4@==!&+B3!13a?s5F$G!&=N5!13aEs6K`Q!&sr1!13aHs4@==!'':/4!13aJs3:V3!''L;6!13aLs3:V3!(?kR!13aYs6K`Q!)W^^!13a`s6K`Q!)rpk!13ads6K`Q!*K9k!13als6K`Q!.Fn6!13b<s5F$G!/(=2!13b>s5F$G!/:I4!13b@s5F$G!/LU6!13bBs5F$G!/gg9!13bEs5F$G!0$s;!13bGs5F$G!07*Q!13bIs7QG[!0I6S!13bKs7QG[!2'';D!13b\s6K`Q!2KS\!13b^s6K`Q!2]_^!13b`s6K`Q!2ok`!13bbs6K`Q!42^l!13bus7$)V!5/@%!13c"s7$)V!5AL''!13c''s5F$G!5nj''!13c)s5F$G!6,!)!13c+s5F$G!6>-+!13c9s5F$G!8@J4!13cAs5F$G!9*tE!13cHs6K`Q!9O7I!13c]s4@==!;lfU!13cbs5F$G!<<)Y!13chs5F$G!=&Sj!13cms6K`Q!=Jkn!13d+s6K`Q!?D.+!13d0s6K`Q!@%R1!13d4s4@==!@Ij!!13d;s7$)V!A4?A!13d?s7$)V!AXWE!13dCs7$)V!BC,3!13dJs4@==!B^>,!13dLs6K`Q!BpJ.!13dNs6K`Q!C-V0!13dPs6K`Q"mQ''>!13s!s6K`Q"sX*@!13s@s6K`Q"tflA!13sJs4@=="ulS7!13tCs5F$G#.acd!14#/s4@==#KHer!14#3s4@==#NYpO!1Elus5F$I!"o7j!1Em5s5F$I!%@m,!1Em:s4@=?!%\*/!1Em=s7QG]!&"<(!1Em@s5F$I!&4H4!1EmBs5F$I!&jlD!1EmHs4@=?!''1)3!1EmKs4@=?!''C5+!1EmMs4@=?!''UA-!1EmUs6K`S!)!:X!1Emas6K`S!)`d_!1Emds7QG]!*0''c!1Emis7$)X!+#Wk!1En9s6K`S!.t71!1En?s5F$I!/1C3!1EnAs5F$I!/CO5!1EnCs5F$I!/U[7!1EnFs5F$I!/pm:!1EnHs5F$I!0.$<!1EnJs7QG]!0@0R!1EnLs7QG]!0R<T!1En[s4@=?!2BM[!1En_s6K`S!2TY]!1Enas6K`S!2fe_!1Encs6K`S!3#qa!1Enos6K`S!5&:$!1Eo#s7$)X!58F&!1Eo%s7$)X!5ecq!1Eo*s6K`S!6"os!1Eo,s6K`S!65&u!1Eo.s6K`S!7_&.!1EoAs5F$I!8RV6!1EoHs6K`S!9=+G!1EoLs6K`S!;QTH!1Eobs5F$I!<)rW!1Eofs5F$I!<`A]!1Eoms6K`S!=8_l!1Eoqs6K`S!?;(*!1Ep.s6K`S!?hF/!1Ep4s6K`S!@7]t!1Ep8s4@=?!A"3?!1Ep?s7$)X!AFKC!1EpCs7$)X!AjcG!1EpJs4@=?!BU85!1EpMs3:V5!BgDK!1EpOs3:V5!C$PM!1EpQs3:V5!C6\O!1F)Us4@=?"q:Ou!1F*9s7QG]"tT`?!1F*Ds6K`S"uZG5!1F*Ns4@=?#(us8!1F,&s4@=?#K-So!1F/4s4@=?#KQks!1F/Rs6K`X!"]+J!1s6&s3:V:!"o7L!1s6:s24o0!%.`k!1s6>s2b85!%Ird!1s6@s3:V:!%\)p!1s6Bs4@=D!%n61!1s6Ds24o0!&+Ao!1s6Fs3:V:!&=N!!1s6Hs3:V:!&X`$!1s6Ls3:V:!''C5?!1s6Ss5F$N!(?k4!1s6\s3:V:!([(7!1s6^s5F$N!(m4W!1s6`s3:V:!)W^6!1s6gs24o0!)ijB!1s6is4@=D!*''!D!1s6ks24o0!*9-P!1s6ms6K`X!*K9H!1s6qs5F$N!+#WC!1s7.s3:V:!.FmO!1s7Cs24o0!/(<i!1s7Es24o0!/:Hk!1s7Gs24o0!/LTm!1s7Is24o0!/^a$!1s7Ks2b85!/pm!!1s7Ms2b85!0.$#!1s7Os4@=D!0@04!1s7Qs4@=D!0R<6!1s7Us3:V:!1!T0!1s7Ws3:V:!13`2!1s7Ys3:V:!1Nr5!1s7cs3:V:!2KS>!1s7es3:V:!2]_@!1s7gs3:V:!2okB!1s7is3:V:!3-"D!1s7ks5F$N!3?.Z!1s7ms5F$N!3Q:\!1s7ss3:V:!42^D!1s7us3:V:!4DjP!1s8"s3:V:!4W!R!1s8$s3:V:!4r3U!1s8''s3:V:!5/?W!1s8)s3:V:!5AKY!1s8.s24o0!5ni^!1s80s24o0!6+u`!1s82s24o0!6>,b!1s84s3:V:!6Y>e!1s87s3:V:!6kJg!1s8:s3:V:!71\j!1s8=s3:V:!7_%j!1s8As5F$N!8%81!1s8Fs2b85!8IP5!1s8Hs2b85!8db$!1s8Ls3:V:!9*t''!1s8Ns3:V:!9=+)!1s8Ps3:V:!9O7+!1s8ds24o0!;lf<!1s8is2b85!<<)@!1s8os2b85!=&SB!1s8ts24o0!=JkF!1s9%s3:V:!>#4U!1s9''s3:V:!>5@W!1s9)s3:V:!>GLY!1s9+s3:V:!>YX[!1s92s24o0!?D-b!1s94s4@=D!?hEf!1s98s4@=D!@%Qh!1s9:s4@=D!@@d4!1s9Bs3:V:!A4>s!1s9Fs3:V:!AXW"!1s9Js3:V:!B^>@!1s9Ss24o0!BpJB!1s9Us24o0!C-VD!1s9Ws24o0"mQ''*!1sH(s24o0"sX*"!1sHGs3:V:"t]f,!1sHIs3:V:"tor.!1sHRs6K`X"uuYL!1sIJs2b85#NPj0!1sMWs0)Kq$#BS-!1sR6s6K`X$#]e0!1sR9s6K`Y!$qTs!2''<=s6K`Y!%@lr!2''<@s3:V;!%S$8!2''<Bs4@=E!%e00!2''<Es3:V;!&+B$!2''<Gs4@=E!&=N+!2''<Is6K`Y!&X`B!2''<Ms7QGc!&sr1!2''<Ps3:V;!'':/*!2''<Rs4@=E!''L;,!2''<Ts4@=E!(?kR!2''<`s6K`Y!)!:X!2''<ds5F$O!)W^T!2''<hs5F$O!)rpa!2''<ls6K`Y!*9-d!2''<ns6K`Y!*K9\!2''<ps7QGc!*]Er!2''<rs5F$O!*oQt!2''<ts5F$O!.t7''!2''=Es4@=E!/1C)!2''=Gs4@=E!/CO+!2''=Is4@=E!/U[-!2''=Ks6K`Y!/gg*!2''=Ms3gt@!0$s,!2''=Os3gt@!07*=!2''=Qs5F$O!0I6?!2''=Ss5F$O!0mNM!2''=Ws6K`Y!1*ZO!2''=Ys6K`Y!1<fQ!2''=\s6K`Y!2'';:!2''=ds6K`Y!2KS\!2''=fs6K`Y!2]_^!2''=hs6K`Y!2ok`!2''=js6K`Y!42^b!2''>(s5F$O!5/?k!2''>*s5F$O!5AKm!2''>,s7QGc!5\^/!2''>/s4@=E!5nj''!2''>1s4@=E!6,!)!2''>3s4@=E!6>-+!2''>5s6K`Y!6Y?.!2''>9s6K`Y!7(W2!2''>As3gt@!8@J%!2''>Is3gt@!8dbB!2''>Ms6K`Y!9*tE!2''>Os6K`Y!9=+G!2''>Qs6K`Y!9O7I!2''>es3:V;!;lfF!2''>js3gt@!<<)J!2''>ps3gt@!=&S`!2''>us5F$O!=Jkd!2''?&s6K`Y!>,:t!2''?*s6K`Y!>PS#!2''?3s6K`Y!?D.5!2''?5s6K`Y!?hF9!2''?9s6K`Y!@%R;!2''?;s6K`Y!@7]t!2''?=s6K`Y!@Ij!!2''?Cs5F$O!A4?2!2''?Gs5F$O!AXW6!2''?Ks5F$O!BC,)!2''?Qs7QGc!BU8+!2''?Ss4@=E!BgDA!2''?Us4@=E!C$PC!2''?Ws4@=E!C6\E!2''M[s3:V;"q:Ok!2''N?s6K`Y"tT`I!2''NIs6K`Y"tflK!2''NKs6K`Y"uZG5!2''NSs6K`Y"ulS7!2''NUs6K`Y#(us)!2''P,s3:V;#.jj.!2''X6s6K`Y$#KY.!2''X9s6K`Y$#fk1!29H(s6K`[!"f1_!29H*s6K`[!(?k\!29H_s7QGe!(m4W!29Hcs7QGe!)*@^!29Hes7$)`!)NXb!29His7QGe!)`di!29Hks7QGe!*0''m!29Hos7QGe!*B3e!29Hqs7QGe!*T?g!29Hss6K`[!*fKn!29Hus6K`[!,_bg!29IAs4@=G!2BMe!29Igs7QGe!2TYg!29Iis7QGe!2fei!29Iks7QGe!3#qk!29Ims7QGe!3cFm!29J"s7QGe!4;e"!29J$s7QGe!4Mq$!29J&s7QGe!4`(&!29J*s7QGe!5/@*!29J,s7QGe!5AL,!29J.s6K`[!5\^%!29J2s7QGe!6,!3!29J6s7QGe!6bE9!29J>s7QGe!9*tO!29JRs7QGe!9O7S!29J`s7$)`!=&St!29K"s7QGe!=Jl#!29K)s7QGe!>5A*!29K-s7QGe!>YY.!29K5s7QGe!?M46!29K;s7QGe!@.X<!29K?s6K`[!A"3D!29KGs7QGe!AFKH!29KKs7QGe!AjcL!29KSs6K`["n)E\!29ZKs7QGe"torL!29ZUs6K`["uuYL!29\/s6K`[#K-S[!29_<s24o3#KQk_!29_Ys4@=G#NYp;!29d8s6K`[$#KY.!29d:s6K`[$#]e0!29d<s6K`\!"]+r!2BN*s4@=H!"o7t!2BN^s7QGf!(R"^!2BNcs6K`\!)!:b!2BNes7$)a!)3F_!2BNis7$)a!)W^h!2BNks7QGf!)ijj!2BNos7QGf!*9-n!2BNqs6K`\!*K9p!2BNss6K`\!*]Eh!2BNus7$)a!*oQj!2BO2s4@=H!.Fn"!2BOgs7QGf!2KSf!2BOis7QGf!2]_h!2BOks7QGf!2okj!2BOms7QGf!3-"l!2BOts7$)a!42_!!2BP$s7QGf!4Dk#!2BP&s7QGf!4W"%!2BP(s7QGf!5&:)!2BP,s7QGf!58F+!2BP.s7QGf!5JR#!2BP1s6K`\!5nj1!2BP5s7QGf!6>-5!2BP;s7QGf!71]=!2BPQs7QGf!9=+Q!2BPUs7QGf!:g*Z!2BQ!s7QGf!=8`!!2BQ%s7QGf!>#5(!2BQ,s7QGf!>GM,!2BQ0s7QGf!?;(4!2BQ8s7QGf!?qL:!2BQ>s7QGf!@@d4!2BQFs7QGf!A4?F!2BQJs7QGf!AXWJ!2BQNs7QGf!BL2H!2B_cs7$)a"t]fJ!2B`Ns7QGf"ucMJ!2B`Xs6K`\#.jj$!2Be:s24o4#KHe^!2Be>s24o4#NPj:!2Be[s4@=H$#BS-!2Bj:s6K`\$#T_/!2Bj<s6K`\$#fk1!!)c9!!+N@^]4?D2nT-d!"]+r!2KT+s4@=I!"o7t!2KT_s7QGg!(R"^!2KTds6K`]!)!:b!2KTfs7$)b!)3F_!2KTjs7$)b!)W^h!2KTls7QGg!)ijj!2KTps7QGg!*9-n!2KTrs6K`]!*K9p!2KTts6K`]!*]Eh!2KU!s7$)b!*oQj!2KU3s4@=I!.Fn"!2KUhs7QGg!2KSf!2KUjs7QGg!2]_h!2KUls7QGg!2okj!2KUns7QGg!3-"l!2KUus7$)b!42_!!2KV%s7QGg!4Dk#!2KV''s7QGg!4W"%!2KV)s7QGg!5&:)!2KV-s7QGg!58F+!2KV/s7QGg!5JR#!2KV2s6K`]!5nj1!2KV6s7QGg!6>-5!2KV<s7QGg!71]=!2KVRs7QGg!9=+Q!2KVVs7QGg!:g*Z!2KW"s7QGg!=8`!!2KW&s7QGg!>#5(!2KW-s7QGg!>GM,!2KW1s7QGg!?;(4!2KW9s7QGg!?qL:!2KW?s7QGg!@@d4!2KWGs7QGg!A4?F!2KWKs7QGg!AXWJ!2KWOs7QGg!BL2H!2Keds7$)b"t]fJ!2KfOs7QGg"ucMJ!2KfYs6K`]#.jj$!2Kk;s24o5#KHe^!2Kk?s24o5#NPj:!2Kk\s4@=I$#BS-!2Kp;s6K`]$#T_/!2Kp=s6K`]$#fk1!2TZ+s6K`^!"f1_!2TZ-s6K`^!(?k\!2TZbs7QGh!(m4W!2TZfs7QGh!)*@^!2TZhs7$)c!)NXb!2TZls7QGh!)`di!2TZns7QGh!*0''m!2TZrs7QGh!*B3e!2TZts7QGh!*T?g!2T[!s6K`^!*fKn!2T[#s6K`^!,_bg!2T[Ds4@=J!2BMe!2T[js7QGh!2TYg!2T[ls7QGh!2fei!2T[ns7QGh!3#qk!2T[ps7QGh!3cFm!2T\%s7QGh!4;e"!2T\''s7QGh!4Mq$!2T\)s7QGh!4`(&!2T\-s7QGh!5/@*!2T\/s7QGh!5AL,!2T\1s6K`^!5\^%!2T\5s7QGh!6,!3!2T\9s7QGh!6bE9!2T\As7QGh!9*tO!2T\Us7QGh!9O7S!2T\cs7$)c!=&St!2T]%s7QGh!=Jl#!2T],s7QGh!>5A*!2T]0s7QGh!>YY.!2T]8s7QGh!?M46!2T]>s7QGh!@.X<!2T]Bs6K`^!A"3D!2T]Js7QGh!AFKH!2T]Ns7QGh!AjcL!2T]Vs6K`^"n)E\!2TlNs7QGh"torL!2TlXs6K`^"uuYL!2Tn2s6K`^#K-S[!2Tq?s24o6#KQk_!2Tq\s4@=J#NYp;!2U!;s6K`^$#KY.!2U!=s6K`^$#]e0!2U!?s6K`_!"]+r!2]`-s4@=K!"o7t!2]`as7QGi!(R"^!2]`fs6K`_!)!:b!2]`hs7$)d!)3F_!2]`ls7$)d!)W^h!2]`ns7QGi!)ijj!2]`rs7QGi!*9-n!2]`ts6K`_!*K9p!2]a!s6K`_!*]Eh!2]a#s7$)d!*oQj!2]a5s4@=K!.Fn"!2]ajs7QGi!2KSf!2]als7QGi!2]_h!2]ans7QGi!2okj!2]aps7QGi!3-"l!2]b"s7$)d!42_!!2]b''s7QGi!4Dk#!2]b)s7QGi!4W"%!2]b+s7QGi!5&:)!2]b/s7QGi!58F+!2]b1s7QGi!5JR#!2]b4s6K`_!5nj1!2]b8s7QGi!6>-5!2]b>s7QGi!71]=!2]bTs7QGi!9=+Q!2]bXs7QGi!:g*Z!2]c$s7QGi!=8`!!2]c(s7QGi!>#5(!2]c/s7QGi!>GM,!2]c3s7QGi!?;(4!2]c;s7QGi!?qL:!2]cAs7QGi!@@d4!2]cIs7QGi!A4?F!2]cMs7QGi!AXWJ!2]cQs7QGi!BL2H!2]qfs7$)d"t]fJ!2]rQs7QGi"ucMJ!2]r[s6K`_#.jj$!2^"=s24o7#KHe^!2^"As24o7#NPj:!2^"^s4@=K$#BS-!2^''=s6K`_$#T_/!2^''?s6K`_$#fk1!2ff-s6K``!"f1_!2ff/s6K``!(?k\!2ffds7QGj!(m4W!2ffhs7QGj!)*@^!2ffjs7$)e!)NXb!2ffns7QGj!)`di!2ffps7QGj!*0''m!2ffts7QGj!*B3e!2fg!s7QGj!*T?g!2fg#s6K``!*fKn!2fg%s6K``!,_bg!2fgFs4@=L!2BMe!2fgls7QGj!2TYg!2fgns7QGj!2fei!2fgps7QGj!3#qk!2fgrs7QGj!3cFm!2fh''s7QGj!4;e"!2fh)s7QGj!4Mq$!2fh+s7QGj!4`(&!2fh/s7QGj!5/@*!2fh1s7QGj!5AL,!2fh3s6K``!5\^%!2fh7s7QGj!6,!3!2fh;s7QGj!6bE9!2fhCs7QGj!9*tO!2fhWs7QGj!9O7S!2fhes7$)e!=&St!2fi''s7QGj!=Jl#!2fi.s7QGj!>5A*!2fi2s7QGj!>YY.!2fi:s7QGj!?M46!2fi@s7QGj!@.X<!2fiDs6K``!A"3D!2fiLs7QGj!AFKH!2fiPs7QGj!AjcL!2fiXs6K``"n)E\!2g#Ps7QGj"torL!2g#Zs6K``"uuYL!2g%4s6K``#K-S[!2g(As24o8#KQk_!2g(^s4@=L#NYp;!2g-=s6K``$#KY.!2g-?s6K``$#]e0!2g-As6K`a!(?ka!2oles8)ep!(m4f!2olis8)ep!)*@c!2olks7QGk!)NXg!2olos7$)f!)`dd!2olqs8)ep!*0''r!2olus7QGk!*B3t!2om"s8)ep!*T?l!2om$s7$)f!*fKd!2om&s7$)f!+#X%!2omls8)ep!2KSk!2omns8)ep!2]_m!2omps8)ep!2oko!2omrs8)ep!3-"q!2on$s7QGk!42^q!2on)s8)ep!4Dk(!2on+s8)ep!4W"*!2on-s8)ep!5&:.!2on1s8)ep!58F0!2on3s8)ep!5JR(!2on6s7$)f!5nj6!2on:s8)ep!6>-:!2on@s8)ep!71]B!2onVs8)ep!9=+V!2onZs8)ep!:g*_!2oo&s7$)f!=8_q!2oo*s7$)f!>#5-!2oo1s8)ep!>GM1!2oo5s8)ep!?;(9!2oo=s7QGk!?qL:!2ooCs7QGk!@@dC!2ooKs8)ep!A4?K!2ooOs8)ep!AXWO!2ooSs8)ep!BL2M!2oo\s8)ep!C$P\!2oo`s8)ep!]''fQ!2p(hs7QGk"t]fJ!2p)Ss7QGk"ucMY!2p)]s8)ep#.jj)!2p3>s8)ep$#KY=!2p3@s8)ep$#]e?!2p3Bs8)eq!"]+r!3#r1s6K`b!(?k\!3#rfs8)eq!(m4\!3#rjs7QGl!)*@^!3#rls7$)g!)NXb!3#rps6K`b!)`d_!3#rrs8)eq!)rpp!3#rus7QGl!*9-i!3#s"s7$)g!*K9p!3#s$s7QGl!*]Er!3#s&s5sB]!*oQt!3#s(s7QGl!.Fn6!3#sms7QGl!2KSf!3#sos7QGl!2]_h!3#sqs7QGl!2okj!3#sss7QGl!3-"q!3#t%s7$)g!42^l!3#t*s8)eq!4Dk(!3#t,s8)eq!4W"*!3#t.s8)eq!5&:)!3#t2s7QGl!58F+!3#t4s7QGl!5JR-!3#t7s7QGl!5nj1!3#t;s7QGl!6>-5!3#tAs8)eq!71]B!3#tWs7QGl!9=+Q!3#t[s7QGl!:g*Z!3#u''s6K`b!=8_l!3#u+s6K`b!>#5-!3#u2s8)eq!>GM1!3#u6s8)eq!?;(4!3#u>s7$)g!?qL5!3#uDs7$)g!@@d9!3#uLs7QGl!A4?F!3#uPs7QGl!AXWJ!3#uTs7QGl!BL2R!3#u]s7QGl!C$PW!3#uas7QGl!]''fL!3$.is7$)g"sX*E!3$/Rs7$)g"torG!3$/\s7$)g"uuYQ!3$16s7QGl#K-So!3$4Cs4@=N#KQks!3$4as6K`b$#BS2!3$9@s7$)g$#T_4!3$9Bs7$)g$#fk6!3-#0s6K`c!"o7t!3-#es8)er!(R"c!3-#js8)er!)!:g!3-#ls7QGm!)3Fd!3-#ps7QGm!)W^c!3-#rs7$)h!)ijo!3-$!s8)er!*9-n!3-$#s8)er!*K9u!3-$%s7$)h!*]Em!3-$''s5sB^!*oQo!3-$)s8)er!.Fn6!3-$ns8)er!2KSk!3-$ps8)er!2]_m!3-$rs8)er!2oko!3-$ts8)er!3-"q!3-%&s7QGm!42^q!3-%+s8)er!4Dk(!3-%-s8)er!4W"*!3-%/s8)er!5&:.!3-%3s8)er!58F0!3-%5s8)er!5JR(!3-%8s7$)h!5nj6!3-%<s8)er!6>-:!3-%Bs8)er!71]B!3-%Xs8)er!9=+V!3-%\s8)er!:g*_!3-&(s7$)h!=8_q!3-&,s7$)h!>#5-!3-&3s8)er!>GM1!3-&7s8)er!?;(9!3-&?s7QGm!?qL:!3-&Es7QGm!@@dC!3-&Ms8)er!A4?K!3-&Qs8)er!AXWO!3-&Us8)er!BL2M!3-&^s8)er!C$P\!3-&bs8)er!]''fQ!3-4js7QGm"t]fJ!3-5Us7QGm"ucMY!3-5_s8)er#.jj)!3-:As4@=O#KHer!3-:Es4@=O#NYpO!3-?@s8)er$#KY=!3-?Bs8)er$#]e?!3-?Ds8)es!"]+r!36)3s6K`d!(?ka!36)hs8)es!(m4f!36)ls8)es!)*@c!36)ns7QGn!)NXg!36)rs7$)i!)`dd!36)ts8)es!*0''r!36*#s7QGn!*B3t!36*%s8)es!*T?l!36*''s7$)i!*fKd!36*)s7$)i!+#X%!36*Js6K`d!2BMj!36*ps8)es!2TYl!36*rs8)es!2fen!36*ts8)es!3#qp!36+!s8)es!3cFr!36++s7$)i!4;e''!36+-s8)es!4Mq)!36+/s8)es!4`(+!36+3s8)es!5/@/!36+5s8)es!5AL1!36+7s7$)i!5\^*!36+;s8)es!6,!8!36+?s8)es!6bE>!36+Gs8)es!9*tT!36+[s8)es!9O7X!36+is7QGn!=&So!36,+s7$)i!=Jks!36,2s8)es!>5A/!36,6s8)es!>YY3!36,>s8)es!?M46!36,Ds7QGn!@.X<!36,Hs8)es!A"3I!36,Ps8)es!AFKM!36,Ts8)es!AjcQ!36,\s7$)i!BgDZ!36,as8)es!C6\^!36/Vs8)es"n)Ea!36;Ts7QGn"torL!36;^s8)es"uuY[!36=8s7$)i#K-So!36@Es4@=P#KQks!36@cs6K`d$#BS<!36EBs8)es$#T_>!36EDs8)es$#fk@!3?/2s6K`e!"o7t!3?/gs8)et!(R"c!3?/ls8)et!)!:g!3?/ns7QGo!)3Fd!3?/rs7QGo!)W^c!3?/ts7$)j!)ijo!3?0#s8)et!*9-n!3?0%s8)et!*K9u!3?0''s7$)j!*]Em!3?0)s5sB`!*oQo!3?0+s8)et!.Fn6!3?0ps8)et!2KSk!3?0rs8)et!2]_m!3?0ts8)et!2oko!3?1!s8)et!3-"q!3?1(s7QGo!42^q!3?1-s8)et!4Dk(!3?1/s8)et!4W"*!3?11s8)et!5&:.!3?15s8)et!58F0!3?17s8)et!5JR(!3?1:s7$)j!5nj6!3?1>s8)et!6>-:!3?1Ds8)et!71]B!3?1Zs8)et!9=+V!3?1^s8)et!:g*_!3?2*s7$)j!=8_q!3?2.s7$)j!>#5-!3?25s8)et!>GM1!3?29s8)et!?;(9!3?2As7QGo!?qL:!3?2Gs7QGo!@@dC!3?2Os8)et!A4?K!3?2Ss8)et!AXWO!3?2Ws8)et!BL2M!3?2`s8)et!C$P\!3?2ds8)et!]''fQ!3?@ls7QGo"t]fJ!3?AWs7QGo"ucMY!3?Aas8)et#.jj)!3?FCs4@=Q#KHer!3?FGs4@=Q#NYpO!3?KBs8)et$#KY=!3?KDs8)et$#]e?!3?KFs8)eu!"]+r!3H55s6K`f!(?ka!3H5js8)eu!(m4f!3H5ns8)eu!)*@c!3H5ps7QGp!)NXg!3H5ts7$)k!)`dd!3H6!s8)eu!*0''r!3H6%s7QGp!*B3t!3H6''s8)eu!*T?l!3H6)s7$)k!*fKd!3H6+s7$)k!+#X%!3H6Ls6K`f!2BMj!3H6rs8)eu!2TYl!3H6ts8)eu!2fen!3H7!s8)eu!3#qp!3H7#s8)eu!3cFr!3H7-s7$)k!4;e''!3H7/s8)eu!4Mq)!3H71s8)eu!4`(+!3H75s8)eu!5/@/!3H77s8)eu!5AL1!3H79s7$)k!5\^*!3H7=s8)eu!6,!8!3H7As8)eu!6bE>!3H7Is8)eu!9*tT!3H7]s8)eu!9O7X!3H7ks7QGp!=&So!3H8-s7$)k!=Jks!3H84s8)eu!>5A/!3H88s8)eu!>YY3!3H8@s8)eu!?M46!3H8Fs7QGp!@.X<!3H8Js8)eu!A"3I!3H8Rs8)eu!AFKM!3H8Vs8)eu!AjcQ!3H8^s7$)k!BgDZ!3H8cs8)eu!C6\^!3H;Xs8)eu"n)Ea!3HGVs7QGp"torL!3HG`s8)eu"uuY[!3HI:s7$)k#K-So!3HLGs4@=R#KQks!3HLes6K`f$#BS<!3HQDs8)eu$#T_>!3HQFs8)eu$#fk@!4)Y9s5F$b!"f1_!4)Y;s5F$b!(?k\!4)Yps8)f&!([(_!4)Yrs8)f&!(m4a!4)Yts7QH!!)*@Y!4)Z!s6K`l!)<L`!4)Z$s6K`l!)W^^!4)Z&s6K`l!)ijo!4)Z(s8)f&!*''!l!4)Z*s7$)q!*9-i!4)Z,s7QH!!*K9k!4)Z.s4m[]!*]EY!4)Z0s7$)q!*oQ[!4)ZBs4@=X!.Fn,!4)["s7QH!!2KSf!4)[$s7QH!!2]_h!4)[&s7QH!!2okj!4)[(s7QH!!3-"q!4)[*s8)f&!3?.s!4)[,s8)f&!3Q:u!4)[/s6K`l!42^l!4)[4s8)f&!4Dk(!4)[6s8)f&!4W"*!4)[8s8)f&!5&:$!4)[<s7$)q!58F&!4)[>s7$)q!5JQi!4)[As4m[]!5nj1!4)[Es7QH!!6>-5!4)[Ks8)f&!71]B!4)[Qs7QH!!7h,H!4)[Ws8)f&!9*tO!4)[cs7QH!!9O7S!4)[qs6K`l!=&Sj!4)\3s6K`l!=Jkn!4)\:s8)f&!>5A/!4)\>s8)f&!>YY3!4)\Fs7$)q!?M41!4)\Ls7$)q!@.X7!4)\Ps7QH!!A"3?!4)\Xs7$)q!AFKC!4)\\s7$)q!AjcG!4)\ds4m[]"n)EW!4)kRs8)f&"t]fE!4)k^s7$)q"ucMT!4)khs7QH!#.jij!4)pJs24oD#KHe^!4)pNs24oD#NPj:!4)pks5F$b$#BS7!4)uJs7QH!$#T_9!4)uLs7QH!$#fk;!42_:s6K`m!"o7t!42_os7$)r!(R"^!42_rs8)f''!(m4W!42_us7$)r!)*@O!42`"s5F$c!)<Le!42`%s5F$c!)W^T!42`''s5F$c!)ijj!42`)s7QH"!*''!q!42`+s7$)r!*9-d!42`-s6K`m!*K9k!42`/s7$)r!*]Em!42`1s5F$c!*oQo!42`3s7$)r!.Fn6!42a#s7$)r!2KSa!42a%s7$)r!2]_c!42a''s7$)r!2oke!42a)s7$)r!3-"l!42a0s5F$c!42^b!42a5s7QH"!4Dk#!42a7s7QH"!4W"%!42a9s7QH"!5&:$!42a=s7$)r!58F&!42a?s7$)r!5JR(!42aBs7$)r!5nj,!42aFs7$)r!6>-0!42aLs7QH"!71]=!42aRs8)f''!9*tJ!42ads7$)r!9O7N!42ars5F$c!=&S`!42b4s5F$c!=Jkd!42b;s7QH"!>5A*!42b?s7QH"!>YY.!42bGs7$)r!?M4,!42bMs6K`m!@.X2!42bQs6K`m!A"3?!42bYs7$)r!AFKC!42b]s7$)r!AjcG!42bes7$)r!BgDP!42bjs7$)r!C6\T!42e_s7$)r"n)EM!42qSs7QH""t]f@!42q_s6K`m"ucMJ!42qis6K`m#.jj)!43!Ks4@=Y#KHer!43!Os4@=Y#NYpO!43&Js6K`m$#KY.!43&Ls6K`m$#]e0!43&Ns6K`n!"]+r!4;e=s6K`n!(?kW!4;ers7QH#!([(d!4;eus6K`n!)!:]!4;f"s5F$d!)3FP!4;f$s7QH#!)NXS!4;f''s5F$d!)`dU!4;f)s7QH#!)rpk!4;f+s8)f(!*0''h!4;f-s6K`n!*B3e!4;f/s7$)s!*T?l!4;f1s7$)s!*fK_!4;f3s7$)s!+#Wp!4;fTs6K`n!2BM`!4;g%s7$)s!2TYb!4;g''s7$)s!2fed!4;g)s7$)s!3#qf!4;g+s7QH#!3cF^!4;g5s5F$d!4;e"!4;g7s7QH#!4Mq$!4;g9s7QH#!4`(&!4;g=s7$)s!5/@%!4;g?s7$)s!5AL''!4;gAs7$)s!5\^*!4;gEs7$)s!6,!.!4;gIs7$)s!6bE9!4;gQs7QH#!7CiD!4;gcs7$)s!9=+L!4;ggs7$)s!:g*K!4;h3s5F$d!=8_b!4;h7s5F$d!>#5(!4;h>s7QH#!>GM,!4;hBs7QH#!?;(/!4;hJs6K`n!?qL0!4;hPs6K`n!@@d4!4;hXs7$)s!A4?A!4;h\s7$)s!AXWE!4;h`s7$)s!BL2M!4;his7$)s!C$PR!4;hms7$)s!]''fG!4<!us5F$d"sX*@!4<"^s6K`n"torB!4<"hs6K`n"uuYL!4<$Bs7$)s#K-So!4<''Os4@=Z#KQks!4<''ms6K`n$#BS-!4<,Ls6K`n$#T_/!4<,Ns6K`n$#fk1!4Dk<s6K`o!"o7t!4Dkqs7$)t!(R"^!4Dkts8)f)!(m4W!4Dl"s7$)t!)*@O!4Dl$s5F$e!)<Le!4Dl''s5F$e!)W^T!4Dl)s5F$e!)ijj!4Dl+s7QH$!*''!q!4Dl-s7$)t!*9-d!4Dl/s6K`o!*K9k!4Dl1s7$)t!*]Em!4Dl3s5F$e!*oQo!4Dl5s7$)t!.Fn6!4Dm%s7$)t!2KSa!4Dm''s7$)t!2]_c!4Dm)s7$)t!2oke!4Dm+s7$)t!3-"l!4Dm2s5F$e!42^b!4Dm7s7QH$!4Dk#!4Dm9s7QH$!4W"%!4Dm;s7QH$!5&:$!4Dm?s7$)t!58F&!4DmAs7$)t!5JR(!4DmDs7$)t!5nj,!4DmHs7$)t!6>-0!4DmNs7QH$!71]=!4DmTs8)f)!9*tJ!4Dmfs7$)t!9O7N!4Dmts5F$e!=&S`!4Dn6s5F$e!=Jkd!4Dn=s7QH$!>5A*!4DnAs7QH$!>YY.!4DnIs7$)t!?M4,!4DnOs6K`o!@.X2!4DnSs6K`o!A"3?!4Dn[s7$)t!AFKC!4Dn_s7$)t!AjcG!4Dngs7$)t!BgDP!4Dnls7$)t!C6\T!4Dqas7$)t"n)EM!4E(Us7QH$"t]f@!4E(as6K`o"ucMJ!4E(ks6K`o#.jj)!4E-Ms4@=[#KHer!4E-Qs4@=[#NYpO!4E2Ls6K`o$#KY.!4E2Ns6K`o$#]e0!4E2Ps6K`p!"]+r!4Mq?s6K`p!(?kW!4Mqts7QH%!([(d!4Mr"s6K`p!)!:]!4Mr$s5F$f!)3FP!4Mr&s7QH%!)NXS!4Mr)s5F$f!)`dU!4Mr+s7QH%!)rpk!4Mr-s8)f*!*0''h!4Mr/s6K`p!*B3e!4Mr1s7$)u!*T?l!4Mr3s7$)u!*fK_!4Mr5s7$)u!+#Wp!4MrVs6K`p!2BM`!4Ms''s7$)u!2TYb!4Ms)s7$)u!2fed!4Ms+s7$)u!3#qf!4Ms-s7QH%!3cF^!4Ms7s5F$f!4;e"!4Ms9s7QH%!4Mq$!4Ms;s7QH%!4`(&!4Ms?s7$)u!5/@%!4MsAs7$)u!5AL''!4MsCs7$)u!5\^*!4MsGs7$)u!6,!.!4MsKs7$)u!6bE9!4MsSs7QH%!7CiD!4Mses7$)u!9=+L!4Msis7$)u!:g*K!4Mt5s5F$f!=8_b!4Mt9s5F$f!>#5(!4Mt@s7QH%!>GM,!4MtDs7QH%!?;(/!4MtLs6K`p!?qL0!4MtRs6K`p!@@d4!4MtZs7$)u!A4?A!4Mt^s7$)u!AXWE!4Mtbs7$)u!BL2M!4Mtks7$)u!C$PR!4Mtos7$)u!]''fG!4N."s5F$f"sX*@!4N.`s6K`p"torB!4N.js6K`p"uuYL!4N0Ds7$)u#K-So!4N3Qs4@=\#KQks!4N3os6K`p$#BS-!4N8Ns6K`p$#T_/!4N8Ps6K`p$#fk1!4W">s6K`q!"o7t!4W"ss7$*!!(R"^!4W#!s8)f+!(m4W!4W#$s7$*!!)*@O!4W#&s5F$g!)<Le!4W#)s5F$g!)W^T!4W#+s5F$g!)ijj!4W#-s7QH&!*''!q!4W#/s7$*!!*9-d!4W#1s6K`q!*K9k!4W#3s7$*!!*]Em!4W#5s5F$g!*oQo!4W#7s7$*!!.Fn6!4W$''s7$*!!2KSa!4W$)s7$*!!2]_c!4W$+s7$*!!2oke!4W$-s7$*!!3-"l!4W$4s5F$g!42^b!4W$9s7QH&!4Dk#!4W$;s7QH&!4W"%!4W$=s7QH&!5&:$!4W$As7$*!!58F&!4W$Cs7$*!!5JR(!4W$Fs7$*!!5nj,!4W$Js7$*!!6>-0!4W$Ps7QH&!71]=!4W$Vs8)f+!9*tJ!4W$hs7$*!!9O7N!4W%!s5F$g!=&S`!4W%8s5F$g!=Jkd!4W%?s7QH&!>5A*!4W%Cs7QH&!>YY.!4W%Ks7$*!!?M4,!4W%Qs6K`q!@.X2!4W%Us6K`q!A"3?!4W%]s7$*!!AFKC!4W%as7$*!!AjcG!4W%is7$*!!BgDP!4W%ns7$*!!C6\T!4W(cs7$*!"n)EM!4W4Ws7QH&"t]f@!4W4cs6K`q"ucMJ!4W4ms6K`q#.jj)!4W9Os4@=]#KHer!4W9Ss4@=]#NYpO!4W>Ns6K`q$#KY.!4W>Ps6K`q$#]e0!4W>Rs6K`s!(?kW!4i/"s7QH(!([(d!4i/%s6K`s!)!:]!4i/''s5F$i!)3FP!4i/)s7QH(!)NXS!4i/,s5F$i!)`dU!4i/.s7QH(!)rpk!4i/0s8)f-!*0''h!4i/2s6K`s!*B3e!4i/4s7$*#!*T?l!4i/6s7$*#!*fK_!4i/8s7$*#!+#Wp!4i0)s7$*#!2KSa!4i0+s7$*#!2]_c!4i0-s7$*#!2oke!4i0/s7$*#!3-"l!4i06s5F$i!42^b!4i0;s7QH(!4Dk#!4i0=s7QH(!4W"%!4i0?s7QH(!5&:$!4i0Cs7$*#!58F&!4i0Es7$*#!5JR(!4i0Hs7$*#!5nj,!4i0Ls7$*#!6>-0!4i0Rs7QH(!71]=!4i0Xs8)f-!9*tJ!4i0js7$*#!9O7N!4i1#s5F$i!=&S`!4i1:s5F$i!=Jkd!4i1As7QH(!>5A*!4i1Es7QH(!>YY.!4i1Ms7$*#!?M4,!4i1Ss6K`s!@.X2!4i1Ws6K`s!A"3?!4i1_s7$*#!AFKC!4i1cs7$*#!AjcG!4i1ks7$*#!BgDP!4i1ps7$*#!C6\T!4i4es7$*#"n)EM!4i@Ys7QH("t]f@!4i@es6K`s"ucMJ!4i@os6K`s#.jj)!4iJPs6K`s$#KY.!4iJRs6K`s$#]e0!4iJTs6K`t!"]+^!4r4Bs4@=`!"o7`!4r5!s7$*$!([(Z!4r5%s7QH)!(m4\!4r5''s7$*$!)*@Y!4r5)s6K`t!)NX]!4r50s8)f.!*''!g!4r52s7QH)!*9-n!4r54s7$*$!,_bg!4r5Zs5F$j!2BM`!4r6+s7$*$!2TYb!4r6-s7$*$!2fed!4r6/s7$*$!3#qf!4r62s7QH)!3?.n!4r64s7QH)!3Q:p!4r67s6K`t!5nj,!4r6Ms7$*$!6>-0!4r6Ys7$*$!7h,C!4r6_s7QH)!9*tJ!4r6ks7$*$!9O7N!4r7$s6K`t!?;(4!4r7Ps7QH)!?qL:!4r7Vs7QH)!@@d9!4rF&s6K`t"sX*E!4rFds7QH)"torL!4rFns7$*$"uuYQ!4rKRs4@=`#KHer!4rKVs4@=`#NPj:!4rKss5F$j$#BS2!4rPRs7$*$$#T_4!4rPTs7$*$$#fk6!5&:Bs4@=a!"f1_!5&:Ds4@=a!(?kW!5&;%s7$*%!(d.`!5&;''s7$*%!)!:]!5&;)s6K`u!)3FZ!5&;-s6K`u!)rpp!5&;2s7$*%!*0''m!5&;4s7QH*!*B3j!5&;Ks4@=a!.Fn,!5&<+s7$*%!2KSa!5&<-s7$*%!2]_c!5&</s7$*%!2oke!5&<1s7$*%!36(m!5&<4s7QH*!3H4o!5&<6s7QH*!3cFh!5&<Ls7$*%!6,!.!5&<Ps7$*%!7Ci:!5&<^s7QH*!8%8E!5&<js7$*%!9=+L!5&<ns7$*%!:g*U!5&=Os7QH*!?M46!5&=Us7QH*!@.X<!5&=Ys7$*%"n)EW!5&L[s8)f/"t]fJ!5&Lgs7QH*"ucMO!5&Lqs7$*%#K-So!5&QVs4@=a#KQks!5&Qss4@=a#NYpE!5&VRs7$*%$#KY3!5&VTs7$*%$#]e5!5&VVs7$*&!"]+^!5/@Ds4@=b!"o7`!5/A#s7$*&!([(Z!5/A''s7QH+!(m4\!5/A)s7$*&!)*@Y!5/A+s6Ka!!)NX]!5/A2s8)f0!*''!g!5/A4s7QH+!*9-n!5/A6s7$*&!,_bg!5/A\s5F$l!2BM`!5/B-s7$*&!2TYb!5/B/s7$*&!2fed!5/B1s7$*&!3#qf!5/B4s7QH+!3?.n!5/B6s7QH+!3Q:p!5/B9s6Ka!!5nj,!5/BOs7$*&!6>-0!5/B[s7$*&!7h,C!5/Bas7QH+!9*tJ!5/Bms7$*&!9O7N!5/C&s6Ka!!?;(4!5/CRs7QH+!?qL:!5/CXs7QH+!@@d9!5/R(s6Ka!"sX*E!5/Rfs7QH+"torL!5/Rps7$*&"uuYQ!5/WTs4@=b#KHer!5/WXs4@=b#NPj:!5/Wus5F$l$#BS2!5/\Ts7$*&$#T_4!5/\Vs7$*&$#fk6!58FDs4@=c!"f1_!58FFs4@=c!(?kW!58G''s7$*''!(d.`!58G)s7$*''!)!:]!58G+s6Ka"!)3FZ!58G/s6Ka"!)rpp!58G4s7$*''!*0''m!58G6s7QH,!*B3j!58GMs4@=c!.Fn,!58H-s7$*''!2KSa!58H/s7$*''!2]_c!58H1s7$*''!2oke!58H3s7$*''!36(m!58H6s7QH,!3H4o!58H8s7QH,!3cFh!58HNs7$*''!6,!.!58HRs7$*''!7Ci:!58H`s7QH,!8%8E!58Hls7$*''!9=+L!58Hps7$*''!:g*U!58IQs7QH,!?M46!58IWs7QH,!@.X<!58I[s7$*''"n)EW!58X]s8)f1"t]fJ!58Xis7QH,"ucMO!58Xss7$*''#K-So!58]Xs4@=c#KQks!58]us4@=c#NYpE!58bTs7$*''$#KY3!58bVs7$*''$#]e5!58bXs7$*(!"]+T!5ALFs6Ka#!"o7V!5AM%s6Ka#!(R"^!5AM(s6Ka#!(d.`!5AM*s8)f2!)!:X!5AM,s6Ka#!)3FZ!5AM.s7$*(!)NX]!5AM1s5F$n!)`dU!5AM3s7QH-!)rpf!5AM5s6Ka#!*0''^!5AM7s6Ka#!*B3t!5AM9s5sBs!*T?l!5AM;s7$*(!*fKn!5AM=s7$*(!+#X%!5AMNs6Ka#!.Fn"!5AN.s6Ka#!2KS\!5AN0s6Ka#!2]_^!5AN2s6Ka#!2ok`!5AN4s6Ka#!3-"l!5AN6s7QH-!3?.n!5AN8s7QH-!3Q:p!5AN;s6Ka#!42^b!5AN@s7QH-!4Dk#!5ANBs7QH-!4W"%!5ANDs7QH-!5&9o!5ANHs5sBs!58Eq!5ANJs5sBs!5JR(!5ANMs7$*(!5nj''!5ANQs6Ka#!6>-+!5ANWs7QH-!71]=!5AN]s6Ka#!7h,C!5ANcs7QH-!9*tE!5ANos6Ka#!9O7I!5AO(s6Ka#!=&S`!5AO?s5F$n!=Jkd!5AOFs7QH-!>5A*!5AOJs7QH-!>YY.!5AORs5sBs!?M4,!5AOXs6Ka#!@.X2!5AO\s8)f2!A"35!5AOds5sBs!AFK9!5AOhs5sBs!Ajc=!5AOps7$*(!BgDZ!5AOus8)f2!C6\^!5ARjs8)f2"n)EW!5A^^s7$*("t]f@!5A^js6Ka#"ucMY!5A^ts8)f2#.jj)!5AcVs6Ka##KHf1!5AcZs6Ka##NPjN!5Ad"s4@=d$#BS<!5AhVs8)f2$#T_>!5AhXs8)f2$#fk@!5SXGs3:V\!"f1s!5SXIs3:V\!(?kR!5SY)s7QH/!([(U!5SY+s7QH/!(m4f!5SY-s6Ka%!)*@Y!5SY/s6Ka%!)<L`!5SY2s6Ka%!)W^T!5SY4s5F$p!)ijj!5SY6s7$**!*''!b!5SY8s5sBu!*9-d!5SY:s8)f4!*K9a!5SY<s7$**!*]Em!5SY>s7$**!*oQo!5SY@s8)f4!,_c&!5SY`s4@=f!2BM[!5SZ1s6Ka%!2TY]!5SZ3s6Ka%!2fe_!5SZ5s6Ka%!3#qa!5SZ7s7QH/!36(m!5SZ9s7QH/!3H4o!5SZ;s7QH/!3cFh!5SZAs5F$p!4;e"!5SZCs7QH/!4Mq$!5SZEs7QH/!4`(&!5SZIs5sBu!5/?p!5SZKs5sBu!5AKr!5SZMs7$**!5\^*!5SZQs6Ka%!6,!)!5SZUs6Ka%!6bE9!5SZ]s7QH/!7Ci5!5SZcs7QH/!8%8E!5SZos6Ka%!9=+G!5SZss6Ka%!:g*U!5S[?s5F$p!=8_b!5S[Cs5F$p!>#5(!5S[Js7QH/!>GM,!5S[Ns7QH/!?;(%!5S[Vs6Ka%!?qL0!5S[\s6Ka%!@@dC!5S[ds5sBu!A4?7!5S[hs5sBu!AXW;!5S[ls5sBu!BL2M!5S[us8)f4!C$P\!5S\$s8)f4!]''fQ!5Sj,s6Ka%"sX*;!5Sjjs6Ka%"torB!5Sjts8)f4"uuY[!5SlNs7$**#K-T.!5So[s6Ka%#KQl2!5Sp#s6Ka%#NYp;!5StWs8)f4$#KY=!5StYs8)f4$#]e?!5St[s8)f5!"]+r!5\^Is4@=g!"o7t!5\^_s4@=g!%@lm!5\^bs2b8X!%S$$!5\^ds4@=g!%e00!5\^gs2b8X!&+At!5\^is4@=g!&=N+!5\^ks4@=g!&X`.!5\^os5F$q!&sr1!5\^rs24oS!'':.u!5\^ts7QH0!''L;"!5\_!s7QH0!(?kR!5\_*s6Ka&!([(U!5\_,s7$*+!(m4M!5\_.s6Ka&!)W^T!5\_5s5F$q!)ij`!5\_7s6Ka&!*''!b!5\_9s5F$q!*9-d!5\_;s5F$q!*K9a!5\_=s5F$q!*]E^!5\_@s5F$q!+#Wa!5\_Qs4@=g!.Fn"!5\_ms4@=g!/gg%!5\_os3:V]!0$s''!5\_qs3:V]!07*=!5\_ss5F$q!0I6?!5\_us5F$q!0mN9!5\`$s4@=g!1*Z;!5\`&s4@=g!1<f=!5\`)s4@=g!2'';0!5\`1s6Ka&!2KS\!5\`3s6Ka&!2]_^!5\`5s6Ka&!2ok`!5\`7s6Ka&!3-"b!5\`9s7$*+!3?.i!5\`;s7$*+!3Q:k!5\`As6Ka&!42^b!5\`Cs6Ka&!4Djn!5\`Es6Ka&!4W!p!5\`Gs6Ka&!4r3s!5\`Js5sC!!5/?p!5\`Ls5sC!!5AKr!5\`Ns5F$q!5\]p!5\`Rs6Ka&!6,!)!5\`Vs6Ka&!6G2m!5\`Ys4@=g!6bE/!5\`[s4@=g!7(Vs!5\`^s6Ka&!7Ci5!5\`cs3:V]!7h,>!5\`fs7$*+!8@Iu!5\`js7$*+!8RV"!5\`ms4@=g!9!n0!5\`ps6Ka&!94%2!5\`rs6Ka&!9F14!5\`ts6Ka&!;QT9!5\a5s3:V]!<)rC!5\a9s3:V]!<`AI!5\a@s5F$q!=8_b!5\aDs5F$q!=o.^!5\aIs6Ka&!>,:`!5\aKs6Ka&!>>Fb!5\aMs6Ka&!>PRd!5\aOs6Ka&!?;''u!5\aVs5F$q!?M4,!5\aZs5F$q!?qL0!5\a\s5F$q!@.X2!5\a^s4@=g!@@d*!5\a`s4@=g!A"35!5\ags5sC!!AFK9!5\aks5sC!!Ajc=!5\ars24oS!BL2>!5\ats24oS!B^>T!5\b!s5F$q!BpJV!5\b#s5F$q!C-VX!5\b%s5F$q"mQ''/!5\pKs5F$q"sX*6!5\pjs5F$q"t]f@!5\pls5F$q"torB!5\pts4@=g"ucM@!5\q!s4@=g"uuYB!5\qms3:V]#.acP!5\rOs5F$q#K-S[!5\u\s24oS#KQk_!5]!$s4@=g#NYp;!5]%Xs5F$q$#KY$!5]%[s5F$q$#fk''!5edIs6Ka''!"f1_!5edKs6Ka''!(?k\!5ee+s7QH1!(m4W!5ee/s7QH1!)*@^!5ee1s7$*,!)NXb!5ee5s7QH1!)`di!5ee7s7QH1!*0''m!5ee;s7QH1!*B3e!5ee=s7QH1!*T?g!5ee?s6Ka''!*fKn!5eeAs6Ka''!,_bg!5eebs4@=h!2BMe!5ef3s7QH1!2TYg!5ef5s7QH1!2fei!5ef7s7QH1!3#qk!5ef9s7QH1!3cFm!5efCs7QH1!4;e"!5efEs7QH1!4Mq$!5efGs7QH1!4`(&!5efKs7QH1!5/@*!5efMs7QH1!5AL,!5efOs6Ka''!5\^%!5efSs7QH1!6,!3!5efWs7QH1!6bE9!5ef_s7QH1!9*tO!5efss7QH1!9O7S!5eg,s7$*,!=&St!5egCs7QH1!=Jl#!5egJs7QH1!>5A*!5egNs7QH1!>YY.!5egVs7QH1!?M46!5eg\s7QH1!@.X<!5eg`s6Ka''!A"3D!5eghs7QH1!AFKH!5egls7QH1!AjcL!5egts6Ka''"n)E\!5f!ls7QH1"torL!5f"!s6Ka''"uuYL!5f#Ps6Ka''#K-S[!5f&]s24oT#KQk_!5f''%s4@=h#NYp;!5f+Ys6Ka''$#KY.!5f+[s6Ka''$#]e0!5f+]s6Ka(!"]+r!5njKs4@=i!"o7t!5njas4@=i!%@lm!5njds2b8Z!%S$$!5njfs4@=i!%e00!5njis2b8Z!&+At!5njks4@=i!&=N+!5njms4@=i!&X`.!5njqs5F$s!&sr1!5njts24oU!'':.u!5nk!s7QH2!''L;"!5nk#s7QH2!(?kR!5nk,s6Ka(!([(U!5nk.s7$*-!(m4M!5nk0s6Ka(!)W^T!5nk7s5F$s!)ij`!5nk9s6Ka(!*''!b!5nk;s5F$s!*9-d!5nk=s5F$s!*K9a!5nk?s5F$s!*]E^!5nkBs5F$s!+#Wa!5nkSs4@=i!.Fn"!5nkos4@=i!/gg%!5nkqs3:V_!0$s''!5nkss3:V_!07*=!5nkus5F$s!0I6?!5nl"s5F$s!0mN9!5nl&s4@=i!1*Z;!5nl(s4@=i!1<f=!5nl+s4@=i!2'';0!5nl3s6Ka(!2KS\!5nl5s6Ka(!2]_^!5nl7s6Ka(!2ok`!5nl9s6Ka(!3-"b!5nl;s7$*-!3?.i!5nl=s7$*-!3Q:k!5nlCs6Ka(!42^b!5nlEs6Ka(!4Djn!5nlGs6Ka(!4W!p!5nlIs6Ka(!4r3s!5nlLs5sC#!5/?p!5nlNs5sC#!5AKr!5nlPs5F$s!5\]p!5nlTs6Ka(!6,!)!5nlXs6Ka(!6G2m!5nl[s4@=i!6bE/!5nl]s4@=i!7(Vs!5nl`s6Ka(!7Ci5!5nles3:V_!7h,>!5nlhs7$*-!8@Iu!5nlls7$*-!8RV"!5nlos4@=i!9!n0!5nlrs6Ka(!94%2!5nlts6Ka(!9F14!5nm!s6Ka(!;QT9!5nm7s3:V_!<)rC!5nm;s3:V_!<`AI!5nmBs5F$s!=8_b!5nmFs5F$s!=o.^!5nmKs6Ka(!>,:`!5nmMs6Ka(!>>Fb!5nmOs6Ka(!>PRd!5nmQs6Ka(!?;''u!5nmXs5F$s!?M4,!5nm\s5F$s!?qL0!5nm^s5F$s!@.X2!5nm`s4@=i!@@d*!5nmbs4@=i!A"35!5nmis5sC#!AFK9!5nmms5sC#!Ajc=!5nmts24oU!BL2>!5nn!s24oU!B^>T!5nn#s5F$s!BpJV!5nn%s5F$s!C-VX!5nn''s5F$s"mQ''/!5o''Ms5F$s"sX*6!5o''ls5F$s"t]f@!5o''ns5F$s"torB!5o(!s4@=i"ucM@!5o(#s4@=i"uuYB!5o(os3:V_#.acP!5o)Qs5F$s#K-S[!5o,^s24oU#KQk_!5o-&s4@=i#NYp;!5o1Zs5F$s$#KY$!5o1]s5F$s$#fk''!6"pKs6Ka)!"f1_!6"pMs6Ka)!(?k\!6"q-s7QH3!(m4W!6"q1s7QH3!)*@^!6"q3s7$*.!)NXb!6"q7s7QH3!)`di!6"q9s7QH3!*0''m!6"q=s7QH3!*B3e!6"q?s7QH3!*T?g!6"qAs6Ka)!*fKn!6"qCs6Ka)!,_bg!6"qds4@=j!2BMe!6"r5s7QH3!2TYg!6"r7s7QH3!2fei!6"r9s7QH3!3#qk!6"r;s7QH3!3cFm!6"rEs7QH3!4;e"!6"rGs7QH3!4Mq$!6"rIs7QH3!4`(&!6"rMs7QH3!5/@*!6"rOs7QH3!5AL,!6"rQs6Ka)!5\^%!6"rUs7QH3!6,!3!6"rYs7QH3!6bE9!6"ras7QH3!9*tO!6"rus7QH3!9O7S!6"s.s7$*.!=&St!6"sEs7QH3!=Jl#!6"sLs7QH3!>5A*!6"sPs7QH3!>YY.!6"sXs7QH3!?M46!6"s^s7QH3!@.X<!6"sbs6Ka)!A"3D!6"sjs7QH3!AFKH!6"sns7QH3!AjcL!6"t!s6Ka)"n)E\!6#-ns7QH3"torL!6#.#s6Ka)"uuYL!6#/Rs6Ka)#K-S[!6#2_s24oV#KQk_!6#3''s4@=j#NYp;!6#7[s6Ka)$#KY.!6#7]s6Ka)$#]e0!6#7_s6Ka*!%.`u!6,!es3:Va!%Iri!6,!gs4@=k!%\*%!6,!is5F$u!&";n!6,!ls3:Va!&4H*!6,!ns4@=k!&FT,!6,!qs4@=k!&jl:!6,!ts4@=k!''1(t!6,""s24oW!''C5S!6,"$s24oW!''UAU!6,",s6Ka*!(R"T!6,"/s6Ka*!(d.[!6,"1s5F$u!)!:X!6,"8s5F$u!)`dU!6,":s6Ka*!)rpa!6,"<s6Ka*!*0''Y!6,">s6Ka*!*B3[!6,"@s5sC%!*T?]!6,"Bs5F$u!*oQ`!6,"Es5F$u!/^a.!6,"rs3:Va!/pm&!6,"ts3:Va!0.$(!6,#!s5F$u!0@0>!6,##s5F$u!0R<@!6,#''s4@=k!1!T:!6,#)s4@=k!13`<!6,#+s4@=k!1Nr?!6,#2s24oW!2BM[!6,#6s6Ka*!2TY]!6,#8s6Ka*!2fe_!6,#:s6Ka*!3#qa!6,#<s6Ka*!36(h!6,#>s7$*/!3H4j!6,#@s7$*/!4)Xk!6,#Fs5F$u!4;dm!6,#Hs6Ka*!4Mpo!6,#Js6Ka*!4`''q!6,#Ms6Ka*!5&9o!6,#Os5sC%!58Eq!6,#Qs5sC%!5JQn!6,#Ts5F$u!5nj''!6,#Xs6Ka*!6>-+!6,#[s4@=k!6Y>o!6,#^s6Ka*!6kJq!6,#as4@=k!71]3!6,#ds6Ka*!7_%o!6,#hs7$*/!8%8@!6,#ms3:Va!8IPD!6,#os3:Va!8db.!6,#ss4@=k!9*tE!6,#us4@=k!9=+G!6,$"s4@=k!9O7I!6,$6s2b8\!;lfA!6,$;s3:Va!<<)E!6,$As3:Va!=&S`!6,$Fs5F$u!=Jkd!6,$Ls4@=k!>#4s!6,$Ns4@=k!>5@u!6,$Ps4@=k!>GM"!6,$Rs4@=k!>YY$!6,$Ys5F$u!?D.!!6,$[s6Ka*!?hF%!6,$_s6Ka*!@%R''!6,$as6Ka*!@7]t!6,$cs5F$u!@Ij!!6,$is5sC%!A4?7!6,$ms5sC%!AXW;!6,$qs5sC%!BC+t!6,%"s5F$u!BU8!!6,%$s7QH4!BgDA!6,%&s7QH4!C$PC!6,%(s7QH4!C6\E!6,3,s2b8\"q:Ok!6,3es6Ka*"tT`5!6,3os6Ka*"tfl7!6,3qs6Ka*"uZG5!6,4$s5F$u"ulS7!6,4&s5F$u#(us$!6,5Rs24oW#.jio!6,=\s5F$u$#KY$!6,=_s5F$u$#fk''!65(-s7QH5!(R"^!65(2s6Ka+!)!:b!65(4s7$*0!)3F_!65(8s7$*0!)W^h!65(:s7QH5!)ijj!65(>s7QH5!*9-n!65(@s6Ka+!*K9p!65(Bs6Ka+!*]Eh!65(Ds7$*0!*oQj!65)6s7QH5!2KSf!65)8s7QH5!2]_h!65):s7QH5!2okj!65)<s7QH5!3-"l!65)Cs7$*0!42_!!65)Hs7QH5!4Dk#!65)Js7QH5!4W"%!65)Ls7QH5!5&:)!65)Ps7QH5!58F+!65)Rs7QH5!5JR#!65)Us6Ka+!5nj1!65)Ys7QH5!6>-5!65)_s7QH5!71]=!65)us7QH5!9=+Q!65*$s7QH5!:g*Z!65*Es7QH5!=8`!!65*Is7QH5!>#5(!65*Ps7QH5!>GM,!65*Ts7QH5!?;(4!65*\s7QH5!?qL:!65*bs7QH5!@@d4!65*js7QH5!A4?F!65*ns7QH5!AXWJ!65*rs7QH5!BL2H!6592s7$*0"t]fJ!659rs7QH5"ucMJ!65:''s6Ka+#.jj$!65C]s6Ka+$#KY.!65C_s6Ka+$#]e0!65Cas6Ka,!"]+h!6>-Ps5F%"!$qTs!6>-es6Ka,!%@lr!6>-hs3:Vc!%S$8!6>-js4@=m!%e00!6>-ms3:Vc!&+B$!6>-os4@=m!&=N+!6>-qs6Ka,!&X`B!6>-us7QH6!&sr1!6>.#s3:Vc!'':/*!6>.%s4@=m!''L;,!6>.''s4@=m!(?kR!6>.3s6Ka,!)!:X!6>.7s5F%"!)W^T!6>.;s5F%"!)rpa!6>.?s6Ka,!*9-d!6>.As6Ka,!*K9\!6>.Cs7QH6!*]Er!6>.Es5F%"!*oQt!6>.Gs5F%"!.Fn6!6>.ls4@=m!/(=(!6>.ns4@=m!/:I*!6>.ps4@=m!/LU,!6>.rs4@=m!/^aB!6>.ts3gth!/pm+!6>/!s3gth!0.$-!6>/#s5F%"!0@0>!6>/%s5F%"!0R<@!6>/)s6Ka,!1!TN!6>/+s6Ka,!13`P!6>/-s6Ka,!1NrS!6>/4s3:Vc!2BM[!6>/8s6Ka,!2TY]!6>/:s6Ka,!2fe_!6>/<s6Ka,!3#qa!6>/Hs5F%"!5&9j!6>/Qs5F%"!58El!6>/Ss5F%"!5JR-!6>/Vs7QH6!5ecg!6>/Xs6Ka,!6"oi!6>/Zs6Ka,!65&k!6>/\s6Ka,!6G3,!6>/_s6Ka,!6kK0!6>/cs6Ka,!7_%t!6>/os3gth!8RV''!6>/ss6Ka,!9!nD!6>0!s6Ka,!94%F!6>0#s6Ka,!9F1H!6>0%s6Ka,!;QT>!6>0;s3gth!<)rH!6>0?s3gth!<`AN!6>0Fs5F%"!=8_b!6>0Js5F%"!=o.r!6>0Ps6Ka,!>>G!!6>0Ts6Ka,!?;(*!6>0\s7QH6!?M4,!6>0`s7QH6!?qL0!6>0bs7QH6!@.X2!6>0ds4@=m!@@d4!6>0fs4@=m!A"30!6>0ms5F%"!AFK4!6>0qs5F%"!Ajc8!6>1#s3:Vc!BL2R!6>1%s3:Vc!B^>6!6>1''s5F%"!BpJ8!6>1)s5F%"!C-V:!6>1+s5F%""mQ''4!6>?Qs5F%""sX*6!6>?ps7QH6"t]f@!6>?rs7QH6"torB!6>@%s4@=m"ucMJ!6>@''s4@=m"uuYL!6>@ss3gth#.acZ!6>AUs7QH6#K-So!6>Dbs4@=m#KQks!6>E+s6Ka,$#BS-!6>I_s6Ka,$#]e0!6>Ibs6Ka-!(?k\!6G41s8)f<!(m4\!6G45s7QH7!)*@^!6G47s7$*2!)NXb!6G4;s6Ka-!)`d_!6G4=s8)f<!)rpp!6G4@s7QH7!*9-i!6G4Bs7$*2!*K9p!6G4Ds7QH7!*]Er!6G4Fs5sC(!*oQt!6G4Hs7QH7!2BMe!6G59s7QH7!2TYg!6G5;s7QH7!2fei!6G5=s7QH7!3#qk!6G5?s8)f<!3cFm!6G5Is6Ka-!4;e''!6G5Ks8)f<!4Mq)!6G5Ms8)f<!4`(+!6G5Qs7QH7!5/@*!6G5Ss7QH7!5AL,!6G5Us7QH7!5\^/!6G5Ys7QH7!6,!3!6G5]s7QH7!6bE>!6G5es8)f<!9*tO!6G6$s7QH7!9O7S!6G62s7$*2!=&Sj!6G6Is6Ka-!=Jkn!6G6Ps8)f<!>5A/!6G6Ts8)f<!>YY3!6G6\s7QH7!?M41!6G6bs7$*2!@.X7!6G6fs7$*2!A"3D!6G6ns7QH7!AFKH!6G6rs7QH7!AjcL!6G7%s7QH7!BgDU!6G7*s7QH7!C6\Y!6G9ts7QH7"n)E\!6GEhs8)f<"t]fE!6GEts7$*2"ucMO!6GF)s7$*2#.jj.!6GO_s7$*2$#KY3!6GOas7$*2$#]e5!6GOcs7$*3!"]+h!6P9Rs5F%$!$qTs!6P9gs6Ka.!%@lr!6P9js3:Ve!%S$8!6P9ls4@=o!%e00!6P9os3:Ve!&+B$!6P9qs4@=o!&=N+!6P9ss6Ka.!&X`B!6P:"s7QH8!&sr1!6P:%s3:Ve!'':/*!6P:''s4@=o!''L;,!6P:)s4@=o!(?kR!6P:5s6Ka.!)!:X!6P:9s5F%$!)W^T!6P:=s5F%$!)rpa!6P:As6Ka.!*9-d!6P:Cs6Ka.!*K9\!6P:Es7QH8!*]Er!6P:Gs5F%$!*oQt!6P:Is5F%$!.Fn6!6P:ns4@=o!/(=(!6P:ps4@=o!/:I*!6P:rs4@=o!/LU,!6P:ts4@=o!/^aB!6P;!s3gtj!/pm+!6P;#s3gtj!0.$-!6P;%s5F%$!0@0>!6P;''s5F%$!0R<@!6P;+s6Ka.!1!TN!6P;-s6Ka.!13`P!6P;/s6Ka.!1NrS!6P;6s3:Ve!2BM[!6P;:s6Ka.!2TY]!6P;<s6Ka.!2fe_!6P;>s6Ka.!3#qa!6P;Js5F%$!5&9j!6P;Ss5F%$!58El!6P;Us5F%$!5JR-!6P;Xs7QH8!5ecg!6P;Zs6Ka.!6"oi!6P;\s6Ka.!65&k!6P;^s6Ka.!6G3,!6P;as6Ka.!6kK0!6P;es6Ka.!7_%t!6P;qs3gtj!8RV''!6P;us6Ka.!9!nD!6P<#s6Ka.!94%F!6P<%s6Ka.!9F1H!6P<''s6Ka.!;QT>!6P<=s3gtj!<)rH!6P<As3gtj!<`AN!6P<Hs5F%$!=8_b!6P<Ls5F%$!=o.r!6P<Rs6Ka.!>>G!!6P<Vs6Ka.!?;(*!6P<^s7QH8!?M4,!6P<bs7QH8!?qL0!6P<ds7QH8!@.X2!6P<fs4@=o!@@d4!6P<hs4@=o!A"30!6P<os5F%$!AFK4!6P<ss5F%$!Ajc8!6P=%s3:Ve!BL2R!6P=''s3:Ve!B^>6!6P=)s5F%$!BpJ8!6P=+s5F%$!C-V:!6P=-s5F%$"mQ''4!6PKSs5F%$"sX*6!6PKrs7QH8"t]f@!6PKts7QH8"torB!6PL''s4@=o"ucMJ!6PL)s4@=o"uuYL!6PLus3gtj#.acZ!6PMWs7QH8#K-So!6PPds4@=o#KQks!6PQ-s6Ka.$#BS-!6PUas6Ka.$#]e0!6PUds6Ka/!"]+r!6Y?Ss6Ka/!(?k\!6Y@3s8)f>!(m4\!6Y@7s7QH9!)*@^!6Y@9s7$*4!)NXb!6Y@=s6Ka/!)`d_!6Y@?s8)f>!)rpp!6Y@Bs7QH9!*9-i!6Y@Ds7$*4!*K9p!6Y@Fs7QH9!*]Er!6Y@Hs5sC*!*oQt!6Y@Js7QH9!.Fn6!6YA:s7QH9!2KSf!6YA<s7QH9!2]_h!6YA>s7QH9!2okj!6YA@s7QH9!3-"q!6YAGs7$*4!42^l!6YALs8)f>!4Dk(!6YANs8)f>!4W"*!6YAPs8)f>!5&:)!6YATs7QH9!58F+!6YAVs7QH9!5JR-!6YAYs7QH9!5nj1!6YA]s7QH9!6>-5!6YAcs8)f>!71]B!6YB$s7QH9!9=+Q!6YB(s7QH9!:g*Z!6YBIs6Ka/!=8_l!6YBMs6Ka/!>#5-!6YBTs8)f>!>GM1!6YBXs8)f>!?;(4!6YB`s7$*4!?qL5!6YBfs7$*4!@@d9!6YBns7QH9!A4?F!6YBrs7QH9!AXWJ!6YC!s7QH9!BL2R!6YC*s7QH9!C$PW!6YC.s7QH9!]''fL!6YQ6s7$*4"sX*E!6YQts7$*4"torG!6YR)s7$*4"uuYQ!6YSXs7QH9#K-So!6YVes4@=p#KQks!6YW.s6Ka/$#BS2!6Y[bs7$*4$#T_4!6Y[ds7$*4$#fk6!6bERs5F%&!"o7j!6bEgs4@=q!%.a4!6bEks3gtl!%Irn!6bEms6Ka0!%\*%!6bEos5F%&!&";s!6bErs3gtl!&4H*!6bEts4@=q!&FT@!6bF"s6Ka0!&jlN!6bF%s4@=q!''1))!6bF(s3:Vg!''C55!6bF*s3:Vg!''UA7!6bF2s6Ka0!(m4W!6bF8s6Ka0!)<LQ!6bF>s5F%&!)`dU!6bFAs6Ka0!*0''c!6bFDs6Ka0!*B3e!6bFFs5F%&!*T?q!6bFHs7QH:!*fK_!6bFJs7QH:!+#Wa!6bFks6Ka0!.t7''!6bFqs4@=q!/1C)!6bFss4@=q!/CO+!6bFus4@=q!/U[-!6bG"s6Ka0!/gg*!6bG$s3gtl!0$s,!6bG&s3gtl!07*=!6bG(s5F%&!0I6?!6bG*s5F%&!0mNM!6bG.s6Ka0!1*ZO!6bG0s6Ka0!1<fQ!6bG3s6Ka0!2'';:!6bG;s6Ka0!2KS\!6bG=s6Ka0!2]_^!6bG?s6Ka0!2ok`!6bGAs6Ka0!42^b!6bGTs5F%&!5/?k!6bGVs5F%&!5AKm!6bGXs7QH:!5\^/!6bG[s4@=q!5nj''!6bG]s4@=q!6,!)!6bG_s4@=q!6>-+!6bGas6Ka0!6Y?.!6bGes6Ka0!7(W2!6bGms3gtl!8@J%!6bGus3gtl!8dbB!6bH$s6Ka0!9*tE!6bH&s6Ka0!9=+G!6bH(s6Ka0!9O7I!6bH<s3:Vg!;lfF!6bHAs3gtl!<<)J!6bHGs3gtl!=&S`!6bHLs5F%&!=Jkd!6bHRs6Ka0!>,:t!6bHVs6Ka0!>PS#!6bH_s6Ka0!?D.5!6bHas6Ka0!?hF9!6bHes6Ka0!@%R;!6bHgs6Ka0!@7]t!6bHis6Ka0!@Ij!!6bHos5F%&!A4?2!6bHss5F%&!AXW6!6bI"s5F%&!BC,)!6bI(s7QH:!BU8+!6bI*s4@=q!BgDA!6bI,s4@=q!C$PC!6bI.s4@=q!C6\E!6bW2s3:Vg"q:Ok!6bWks6Ka0"tT`I!6bWus6Ka0"tflK!6bX"s6Ka0"uZG5!6bX*s6Ka0"ulS7!6bX,s6Ka0#(us)!6bYXs3:Vg#.jj.!6b\cs4@=q#KHer!6b\gs4@=q#NYpO!6babs6Ka0$#KY.!6baes6Ka0$#fk1!6kL3s7QH;!(R"c!6kL8s7$*6!)!:b!6kL:s7$*6!)3F_!6kL>s7$*6!)W^^!6kL@s6Ka1!)ijo!6kLBs8)f@!*0''m!6kLEs7$*6!*B3j!6kLGs7QH;!*T?q!6kLIs7QH;!*fKd!6kLKs7QH;!+#Wu!6kM<s7QH;!2KSf!6kM>s7QH;!2]_h!6kM@s7QH;!2okj!6kMBs7QH;!3-"q!6kMIs7$*6!42^l!6kMNs8)f@!4Dk(!6kMPs8)f@!4W"*!6kMRs8)f@!5&:)!6kMVs7QH;!58F+!6kMXs7QH;!5JR-!6kM[s7QH;!5nj1!6kM_s7QH;!6>-5!6kMes8)f@!71]B!6kN&s7QH;!9=+Q!6kN*s7QH;!:g*Z!6kNKs6Ka1!=8_l!6kNOs6Ka1!>#5-!6kNVs8)f@!>GM1!6kNZs8)f@!?;(4!6kNbs7$*6!?qL5!6kNhs7$*6!@@d9!6kNps7QH;!A4?F!6kNts7QH;!AXWJ!6kO#s7QH;!BL2R!6kO,s7QH;!C$PW!6kO0s7QH;!]''fL!6k]8s7$*6"sX*E!6k^!s7$*6"torG!6k^+s7$*6"uuYQ!6k_Zs7QH;$#BS2!6kgds7$*6$#T_4!6kgfs7$*6$#fk6!6tQTs5F%(!"o7j!6tQis4@=s!%.a4!6tQms3gtn!%Irn!6tQos6Ka2!%\*%!6tQqs5F%(!&";s!6tQts3gtn!&4H*!6tR!s4@=s!&FT@!6tR$s6Ka2!&jlN!6tR''s4@=s!''1))!6tR*s3:Vi!''C55!6tR,s3:Vi!''UA7!6tR4s6Ka2!(m4W!6tR:s6Ka2!)<LQ!6tR@s5F%(!)`dU!6tRCs6Ka2!*0''c!6tRFs6Ka2!*B3e!6tRHs5F%(!*T?q!6tRJs7QH<!*fK_!6tRLs7QH<!+#Wa!6tRms6Ka2!.t7''!6tRss4@=s!/1C)!6tRus4@=s!/CO+!6tS"s4@=s!/U[-!6tS$s6Ka2!/gg*!6tS&s3gtn!0$s,!6tS(s3gtn!07*=!6tS*s5F%(!0I6?!6tS,s5F%(!0mNM!6tS0s6Ka2!1*ZO!6tS2s6Ka2!1<fQ!6tS5s6Ka2!2'';:!6tS=s6Ka2!2KS\!6tS?s6Ka2!2]_^!6tSAs6Ka2!2ok`!6tSCs6Ka2!42^b!6tSVs5F%(!5/?k!6tSXs5F%(!5AKm!6tSZs7QH<!5\^/!6tS]s4@=s!5nj''!6tS_s4@=s!6,!)!6tSas4@=s!6>-+!6tScs6Ka2!6Y?.!6tSgs6Ka2!7(W2!6tSos3gtn!8@J%!6tT"s3gtn!8dbB!6tT&s6Ka2!9*tE!6tT(s6Ka2!9=+G!6tT*s6Ka2!9O7I!6tT>s3:Vi!;lfF!6tTCs3gtn!<<)J!6tTIs3gtn!=&S`!6tTNs5F%(!=Jkd!6tTTs6Ka2!>,:t!6tTXs6Ka2!>PS#!6tTas6Ka2!?D.5!6tTcs6Ka2!?hF9!6tTgs6Ka2!@%R;!6tTis6Ka2!@7]t!6tTks6Ka2!@Ij!!6tTqs5F%(!A4?2!6tTus5F%(!AXW6!6tU$s5F%(!BC,)!6tU*s7QH<!BU8+!6tU,s4@=s!BgDA!6tU.s4@=s!C$PC!6tU0s4@=s!C6\E!6tc4s3:Vi"q:Ok!6tcms6Ka2"tT`I!6td"s6Ka2"tflK!6td$s6Ka2"uZG5!6td,s6Ka2"ulS7!6td.s6Ka2#(us)!6teZs3:Vi#.jj.!6thes4@=s#KHer!6this4@=s#NYpO!6tmds6Ka2$#KY.!6tmgs6Ka2$#fk1!7(WUs6Ka3!"o7t!7(X5s7QH=!(R"c!7(X:s7$*8!)!:b!7(X<s7$*8!)3F_!7(X@s7$*8!)W^^!7(XBs6Ka3!)ijo!7(XDs8)fB!*0''m!7(XGs7$*8!*B3j!7(XIs7QH=!*T?q!7(XKs7QH=!*fKd!7(XMs7QH=!+#Wu!7(Xns6Ka3!2BMe!7(Y?s7QH=!2TYg!7(YAs7QH=!2fei!7(YCs7QH=!3#qk!7(YEs8)fB!3cFm!7(YOs6Ka3!4;e''!7(YQs8)fB!4Mq)!7(YSs8)fB!4`(+!7(YWs7QH=!5/@*!7(YYs7QH=!5AL,!7(Y[s7QH=!5\^/!7(Y_s7QH=!6,!3!7(Ycs7QH=!6bE>!7(Yks8)fB!9*tO!7(Z*s7QH=!9O7S!7(Z8s7$*8!=&Sj!7(ZOs6Ka3!=Jkn!7(ZVs8)fB!>5A/!7(ZZs8)fB!>YY3!7(Zbs7QH=!?M41!7(Zhs7$*8!@.X7!7(Zls7$*8!A"3D!7(Zts7QH=!AFKH!7([#s7QH=!AjcL!7([+s7QH=!BgDU!7([0s7QH=!C6\Y!7(^%s7QH="n)E\!7(ins8)fB"t]fE!7(j%s7$*8"ucMO!7(j/s7$*8#.jj.!7(nfs4@=t#KHer!7(njs4@=t#NYpO!7(ses7$*8$#KY3!7(sgs7$*8$#]e5!7(sis7$*9!$qTs!71]ms6Ka4!%@lr!71]ps3:Vk!%S$8!71]rs4@=u!%e00!71]us3:Vk!&+B$!71^"s4@=u!&=N+!71^$s6Ka4!&X`B!71^(s7QH>!&sr1!71^+s3:Vk!'':/*!71^-s4@=u!''L;,!71^/s4@=u!(?kR!71^;s6Ka4!)!:X!71^?s5F%*!)W^T!71^Cs5F%*!)rpa!71^Gs6Ka4!*9-d!71^Is6Ka4!*K9\!71^Ks7QH>!*]Er!71^Ms5F%*!*oQt!71^Os5F%*!.t7''!71^us4@=u!/1C)!71_"s4@=u!/CO+!71_$s4@=u!/U[-!71_&s6Ka4!/gg*!71_(s3gtp!0$s,!71_*s3gtp!07*=!71_,s5F%*!0I6?!71_.s5F%*!0mNM!71_2s6Ka4!1*ZO!71_4s6Ka4!1<fQ!71_7s6Ka4!2'';:!71_?s6Ka4!2KS\!71_As6Ka4!2]_^!71_Cs6Ka4!2ok`!71_Es6Ka4!42^b!71_Xs5F%*!5/?k!71_Zs5F%*!5AKm!71_\s7QH>!5\^/!71__s4@=u!5nj''!71_as4@=u!6,!)!71_cs4@=u!6>-+!71_es6Ka4!6Y?.!71_is6Ka4!7(W2!71_qs3gtp!8@J%!71`$s3gtp!8dbB!71`(s6Ka4!9*tE!71`*s6Ka4!9=+G!71`,s6Ka4!9O7I!71`@s3:Vk!;lfF!71`Es3gtp!<<)J!71`Ks3gtp!=&S`!71`Ps5F%*!=Jkd!71`Vs6Ka4!>,:t!71`Zs6Ka4!>PS#!71`cs6Ka4!?D.5!71`es6Ka4!?hF9!71`is6Ka4!@%R;!71`ks6Ka4!@7]t!71`ms6Ka4!@Ij!!71`ss5F%*!A4?2!71a"s5F%*!AXW6!71a&s5F%*!BC,)!71a,s7QH>!BU8+!71a.s4@=u!BgDA!71a0s4@=u!C$PC!71a2s4@=u!C6\E!71o6s3:Vk"q:Ok!71oos6Ka4"tT`I!71p$s6Ka4"tflK!71p&s6Ka4"uZG5!71p.s6Ka4"ulS7!71p0s6Ka4#(us)!71q\s3:Vk#.jj.!72$fs6Ka4$#KY.!72$is6Ka4$#fk1!7:d7s7QH?!(R"O!7:d:s6Ka5!(d.V!7:d<s7QH?!)!:b!7:d>s6Ka5!)3FZ!7:d@s8)fD!)NX]!7:dCs8)fD!)`dn!7:dEs5sC0!)rpk!7:dGs6Ka5!*0''m!7:dIs6Ka5!*B3o!7:dKs7QH?!*T?g!7:dMs6Ka5!*fKi!7:dOs6Ka5!+#Wu!7:e@s7QH?!2KSf!7:eBs7QH?!2]_h!7:eDs7QH?!2okj!7:eFs7QH?!3-"]!7:eHs6Ka5!3?.d!7:eJs6Ka5!3Q:f!7:eMs6Ka5!42_&!7:eRs5sC0!4Dji!7:eTs5sC0!4W!k!7:eVs5sC0!5&:)!7:eZs7QH?!58F+!7:e\s7QH?!5JR#!7:e_s6Ka5!5nj1!7:ecs7QH?!6>-5!7:eis5sC0!71].!7:eos6Ka5!7h,9!7:eus6Ka5!9*tO!7:f,s7QH?!9O7S!7:f:s6Ka5!=&T$!7:fQs8)fD!=Jl(!7:fXs5sC0!>5@p!7:f\s5sC0!>YXt!7:fds7QH?!?M4,!7:fjs6Ka5!@.X2!7:fns7QH?!A"3D!7:g!s7QH?!AFKH!7:g%s7QH?!AjcL!7:g-s6Ka5!BgDU!7:g2s7QH?!C6\Y!7:j''s7QH?"n)EW!7:ups7QH?"t]f@!7;!''s6Ka5"ucMT!7;!1s7QH?#.jj$!7;*gs7QH?$#KY8!7;*is7QH?$#]e:!7;*ks7QH@!$qTs!7Cios6Ka6!%@lr!7Cirs3:Vm!%S$8!7Cits4@>"!%e00!7Cj"s3:Vm!&+B$!7Cj$s4@>"!&=N+!7Cj&s6Ka6!&X`B!7Cj*s7QH@!&sr1!7Cj-s3:Vm!'':/*!7Cj/s4@>"!''L;,!7Cj1s4@>"!(?kR!7Cj=s6Ka6!)!:X!7CjAs5F%,!)W^T!7CjEs5F%,!)rpa!7CjIs6Ka6!*9-d!7CjKs6Ka6!*K9\!7CjMs7QH@!*]Er!7CjOs5F%,!*oQt!7CjQs5F%,!.t7''!7Ck"s4@>"!/1C)!7Ck$s4@>"!/CO+!7Ck&s4@>"!/U[-!7Ck(s6Ka6!/gg*!7Ck*s3gtr!0$s,!7Ck,s3gtr!07*=!7Ck.s5F%,!0I6?!7Ck0s5F%,!0mNM!7Ck4s6Ka6!1*ZO!7Ck6s6Ka6!1<fQ!7Ck9s6Ka6!2'';:!7CkAs6Ka6!2KS\!7CkCs6Ka6!2]_^!7CkEs6Ka6!2ok`!7CkGs6Ka6!42^b!7CkZs5F%,!5/?k!7Ck\s5F%,!5AKm!7Ck^s7QH@!5\^/!7Ckas4@>"!5nj''!7Ckcs4@>"!6,!)!7Ckes4@>"!6>-+!7Ckgs6Ka6!6Y?.!7Ckks6Ka6!7(W2!7Ckss3gtr!8@J%!7Cl&s3gtr!8dbB!7Cl*s6Ka6!9*tE!7Cl,s6Ka6!9=+G!7Cl.s6Ka6!9O7I!7ClBs3:Vm!;lfF!7ClGs3gtr!<<)J!7ClMs3gtr!=&S`!7ClRs5F%,!=Jkd!7ClXs6Ka6!>,:t!7Cl\s6Ka6!>PS#!7Cles6Ka6!?D.5!7Clgs6Ka6!?hF9!7Clks6Ka6!@%R;!7Clms6Ka6!@7]t!7Clos6Ka6!@Ij!!7Clus5F%,!A4?2!7Cm$s5F%,!AXW6!7Cm(s5F%,!BC,)!7Cm.s7QH@!BU8+!7Cm0s4@>"!BgDA!7Cm2s4@>"!C$PC!7Cm4s4@>"!C6\E!7D&8s3:Vm"q:Ok!7D&qs6Ka6"tT`I!7D''&s6Ka6"tflK!7D''(s6Ka6"uZG5!7D''0s6Ka6"ulS7!7D''2s6Ka6#(us)!7D(^s3:Vm#.jj.!7D0hs6Ka6$#KY.!7D0ks6Ka6$#fk1!7Uuos5F%.!%.`u!7Uuss3gtt!%Irn!7Uuus4@>$!%\*%!7V!"s5F%.!%n6;!7V!$s3:Vo!&+B$!7V!&s4@>$!&=N+!7V!(s4@>$!&X`.!7V!,s3:Vo!&srE!7V!/s3:Vo!'':/*!7V!1s5F%.!''L;,!7V!3s5F%.!(?kH!7V!<s5F%.!([(K!7V!>s6Ka8!(m4M!7V!@s5F%.!)<LQ!7V!Fs4@>$!)`dK!7V!Hs5F%.!)rpa!7V!Js5F%.!*0''Y!7V!Ls6Ka8!*B3[!7V!Ns3gtt!*T?S!7V!Ps4@>$!*fK_!7V!Rs4@>$!+#WW!7V"#s5F%.!/(=2!7V"%s5F%.!/:I4!7V"''s5F%.!/LU6!7V")s5F%.!/^a.!7V"+s3gtt!/pm+!7V"-s3gtt!0.$-!7V"/s5F%.!0@0>!7V"1s5F%.!0R<@!7V"5s4@>$!1!T:!7V"7s4@>$!13`<!7V"9s4@>$!1Nr?!7V"@s3:Vo!2BMQ!7V"Ds5F%.!2TYS!7V"Fs5F%.!2feU!7V"Hs5F%.!3#qW!7V"Js5F%.!36(c!7V"Ls6Ka8!3H4e!7V"Ns6Ka8!4)Xa!7V"Ts4@>$!4;dc!7V"Vs5F%.!4Mpe!7V"Xs5F%.!4`''g!7V"[s5F%.!5&9[!7V"]s3gtt!58E]!7V"_s3gtt!5JQd!7V"bs4@>$!5ecq!7V"ds5F%.!6"os!7V"fs5F%.!65&u!7V"hs5F%.!6G2m!7V"ks4@>$!6bE%!7V"ms4@>$!7(Vs!7V"ps5F%.!7Ci+!7V"us3gtt!7h,9!7V##s6Ka8!8@J%!7V#''s6Ka8!8RV''!7V#*s4@>$!9!n0!7V#-s5F%.!94%2!7V#/s5F%.!9F14!7V#1s5F%.!;QT>!7V#Gs3gtt!<)rH!7V#Ks3gtt!<`AN!7V#Rs4@>$!=8_X!7V#Vs4@>$!=o.^!7V#[s5F%.!>,:`!7V#]s5F%.!>>Fb!7V#_s5F%.!>PRd!7V#as5F%.!?;''u!7V#hs3:Vo!?M4,!7V#ls3:Vo!?qL0!7V#ns3:Vo!@.X2!7V#ps6Ka8!@@d*!7V#rs6Ka8!A"3!!7V$$s3gtt!AFK%!7V$(s3gtt!Ajc)!7V$/s3:Vo!BL24!7V$1s3:Vo!B^>@!7V$3s4@>$!BpJB!7V$5s4@>$!C-VD!7V$7s4@>$"mQ''4!7V2]s4@>$"sX*6!7V3''s3:Vo"t]f@!7V3)s3:Vo"torB!7V31s6Ka8"ucM@!7V33s6Ka8"uuYB!7V4*s3gtt#.acZ!7V4as4@>$$#BS#!7V<ks5F%.$#]e&!7V<ns5F%/!"]+r!7_&]s6Ka9!(?ka!7_''=s8)fH!(m4f!7_''As8)fH!)*@c!7_''Cs7QHC!)NXg!7_''Gs7$*>!)`dd!7_''Is8)fH!*0''r!7_''Ms7QHC!*B3t!7_''Os8)fH!*T?l!7_''Qs7$*>!*fKd!7_''Ss7$*>!+#X%!7_''ts6Ka9!2BMj!7_(Es8)fH!2TYl!7_(Gs8)fH!2fen!7_(Is8)fH!3#qp!7_(Ks8)fH!3cFr!7_(Us7$*>!4;e''!7_(Ws8)fH!4Mq)!7_(Ys8)fH!4`(+!7_(]s8)fH!5/@/!7_(_s8)fH!5AL1!7_(as7$*>!5\^*!7_(es8)fH!6,!8!7_(is8)fH!6bE>!7_(qs8)fH!9*tT!7_)0s8)fH!9O7X!7_)>s7QHC!=&So!7_)Us7$*>!=Jks!7_)\s8)fH!>5A/!7_)`s8)fH!>YY3!7_)hs8)fH!?M46!7_)ns7QHC!@.X<!7_)rs8)fH!A"3I!7_*%s8)fH!AFKM!7_*)s8)fH!AjcQ!7_*1s7$*>!BgDZ!7_*6s8)fH!C6\^!7_-+s8)fH"n)Ea!7_9)s7QHC"torL!7_93s8)fH"uuY[!7_:bs7$*>#K-So!7_=os4@>%#KQks!7_>8s6Ka9$#BS<!7_Bls8)fH$#T_>!7_Bns8)fH$#fk@!7q2]s6Ka;!"o7t!7q3=s8)fJ!(R"c!7q3Bs8)fJ!)!:g!7q3Ds7QHE!)3Fd!7q3Hs7QHE!)W^c!7q3Js7$*@!)ijo!7q3Ns8)fJ!*9-n!7q3Ps8)fJ!*K9u!7q3Rs7$*@!*]Em!7q3Ts5sC6!*oQo!7q3Vs8)fJ!.Fn6!7q4Fs8)fJ!2KSk!7q4Hs8)fJ!2]_m!7q4Js8)fJ!2oko!7q4Ls8)fJ!3-"q!7q4Ss7QHE!42^q!7q4Xs8)fJ!4Dk(!7q4Zs8)fJ!4W"*!7q4\s8)fJ!5&:.!7q4`s8)fJ!58F0!7q4bs8)fJ!5JR(!7q4es7$*@!5nj6!7q4is8)fJ!6>-:!7q4os8)fJ!71]B!7q50s8)fJ!9=+V!7q54s8)fJ!:g*_!7q5Us7$*@!=8_q!7q5Ys7$*@!>#5-!7q5`s8)fJ!>GM1!7q5ds8)fJ!?;(9!7q5ls7QHE!?qL:!7q5rs7QHE!@@dC!7q6%s8)fJ!A4?K!7q6)s8)fJ!AXWO!7q6-s8)fJ!BL2M!7q66s8)fJ!C$P\!7q6:s8)fJ!]''fQ!7qDBs7QHE"t]fJ!7qE-s7QHE"ucMY!7qE7s8)fJ#.jj)!7qIns4@>''#KHer!7qIrs4@>''#NYpO!7qNms8)fJ$#KY=!7qNos8)fJ$#]e?!7qNqs8)fL!(?ka!8.?As8)fL!(m4f!8.?Es8)fL!)*@c!8.?Gs7QHG!)NXg!8.?Ks7$*B!)`dd!8.?Ms8)fL!*0''r!8.?Qs7QHG!*B3t!8.?Ss8)fL!*T?l!8.?Us7$*B!*fKd!8.?Ws7$*B!+#X%!8.@Hs8)fL!2KSk!8.@Js8)fL!2]_m!8.@Ls8)fL!2oko!8.@Ns8)fL!3-"q!8.@Us7QHG!42^q!8.@Zs8)fL!4Dk(!8.@\s8)fL!4W"*!8.@^s8)fL!5&:.!8.@bs8)fL!58F0!8.@ds8)fL!5JR(!8.@gs7$*B!5nj6!8.@ks8)fL!6>-:!8.@qs8)fL!71]B!8.A2s8)fL!9=+V!8.A6s8)fL!:g*_!8.AWs7$*B!=8_q!8.A[s7$*B!>#5-!8.Abs8)fL!>GM1!8.Afs8)fL!?;(9!8.Ans7QHG!?qL:!8.Ats7QHG!@@dC!8.B''s8)fL!A4?K!8.B+s8)fL!AXWO!8.B/s8)fL!BL2M!8.B8s8)fL!C$P\!8.B<s8)fL!]''fQ!8.PDs7QHG"t]fJ!8.Q/s7QHG"ucMY!8.Q9s8)fL#.jj)!8.Zos8)fL$#KY=!8.Zqs8)fL$#]e?!8.Zss8)fM!$qU(!87E"s4@>*!%@lr!87E%s3:Vu!%S$$!87E''s4@>*!%e00!87E)s6Ka>!&";s!87E+s3gu%!&4H*!87E-s4@>*!&FT,!87E0s4@>*!&jl&!87E3s6Ka>!''1))!87E6s3:Vu!''C5?!87E8s3:Vu!''UAA!87E@s5F%4!(R"J!87ECs5F%4!(d.V!87EEs5F%4!)!:N!87EIs5F%4!)W^J!87EMs4@>*!)ijV!87EOs6Ka>!*''!X!87EQs5F%4!*9-d!87ESs5F%4!*K9M!87EUs4@>*!*]ET!87EWs5F%4!*oQV!87EYs4@>*!.t71!87F*s5F%4!/1C3!87F,s5F%4!/CO5!87F.s5F%4!/U[7!87F0s4@>*!/gg*!87F2s3gu%!0$s,!87F4s3gu%!07*=!87F6s5F%4!0I6?!87F8s5F%4!0mN9!87F<s4@>*!1*Z;!87F>s4@>*!1<f=!87FAs4@>*!2'';:!87FIs5F%4!2KSR!87FKs5F%4!2]_T!87FMs5F%4!2okV!87FOs5F%4!3-"X!87FQs6Ka>!3?.d!87FSs6Ka>!3Q:f!87FYs5F%4!42^X!87F[s5F%4!4Djd!87F]s5F%4!4W!f!87F_s5F%4!4r3i!87Fbs3gu%!5/?\!87Fds3gu%!5AK^!87Ffs4@>*!5\]f!87Fis5F%4!5nir!87Fks5F%4!6+ut!87Fms5F%4!6>-!!87Fos4@>*!6Y>o!87Frs5F%4!6kJq!87Fus4@>*!71])!87G#s5F%4!7_%t!87G''s6Ka>!8%8;!87G,s3gu%!8IP?!87G.s3gu%!8db.!87G2s4@>*!9*t;!87G4s4@>*!9=+=!87G6s4@>*!9O7?!87GJs3:Vu!;lfF!87GOs3gu%!<<)J!87GUs3gu%!=&SV!87GZs4@>*!=JkZ!87G`s4@>*!>#4i!87Gbs4@>*!>5@k!87Gds4@>*!>GLm!87Gfs4@>*!>YXo!87Gms5F%4!?D-b!87Gos6Ka>!?hEf!87Gss6Ka>!@%Qh!87Gus6Ka>!@7^3!87H"s5F%4!@Ij5!87H(s3gu%!A4?#!87H,s3gu%!AXW''!87H0s3gu%!BC,)!87H6s4@>*!BU8+!87H8s5F%4!BgD7!87H:s5F%4!C$P9!87H<s5F%4!C6\;!87V@s3:Vu"q:Oa!87W$s6Ka>"tT`!!87W.s6Ka>"tfl#!87W0s6Ka>"uZGI!87W8s5F%4"ulSK!87W:s5F%4#(us)!87Xfs3:Vu#.jie!87`ps5F%4$#KY$!87`ss5F%4$#fk''!8@KAs8)fN!(R"c!8@KFs8)fN!)!:g!8@KHs7QHI!)3Fd!8@KLs7QHI!)W^c!8@KNs7$*D!)ijo!8@KRs8)fN!*9-n!8@KTs8)fN!*K9u!8@KVs7$*D!*]Em!8@KXs5sC:!*oQo!8@KZs8)fN!2BMj!8@LKs8)fN!2TYl!8@LMs8)fN!2fen!8@LOs8)fN!3#qp!8@LQs8)fN!3cFr!8@L[s7$*D!4;e''!8@L]s8)fN!4Mq)!8@L_s8)fN!4`(+!8@Lcs8)fN!5/@/!8@Les8)fN!5AL1!8@Lgs7$*D!5\^*!8@Lks8)fN!6,!8!8@Los8)fN!6bE>!8@M"s8)fN!9*tT!8@M6s8)fN!9O7X!8@MDs7QHI!=&So!8@M[s7$*D!=Jks!8@Mbs8)fN!>5A/!8@Mfs8)fN!>YY3!8@Mns8)fN!?M46!8@Mts7QHI!@.X<!8@N#s8)fN!A"3I!8@N+s8)fN!AFKM!8@N/s8)fN!AjcQ!8@N7s7$*D!BgDZ!8@N<s8)fN!C6\^!8@Q1s8)fN"n)Ea!8@]/s7QHI"torL!8@]9s8)fN"uuY[!8@^hs7$*D$#BS<!8@frs8)fN$#T_>!8@fts8)fN$#fk@!8IQ"s5F%6!%.`u!8IQ&s3gu''!%Irn!8IQ(s4@>,!%\*%!8IQ*s5F%6!%n6;!8IQ,s3:W"!&+B$!8IQ.s4@>,!&=N+!8IQ0s4@>,!&X`.!8IQ4s3:W"!&srE!8IQ7s3:W"!'':/*!8IQ9s5F%6!''L;,!8IQ;s5F%6!(?kH!8IQDs5F%6!([(K!8IQFs6Ka@!(m4M!8IQHs5F%6!)<LQ!8IQNs4@>,!)`dK!8IQPs5F%6!)rpa!8IQRs5F%6!*0''Y!8IQTs6Ka@!*B3[!8IQVs3gu''!*T?S!8IQXs4@>,!*fK_!8IQZs4@>,!+#WW!8IR+s5F%6!/(=2!8IR-s5F%6!/:I4!8IR/s5F%6!/LU6!8IR1s5F%6!/^a.!8IR3s3gu''!/pm+!8IR5s3gu''!0.$-!8IR7s5F%6!0@0>!8IR9s5F%6!0R<@!8IR=s4@>,!1!T:!8IR?s4@>,!13`<!8IRAs4@>,!1Nr?!8IRHs3:W"!2BMQ!8IRLs5F%6!2TYS!8IRNs5F%6!2feU!8IRPs5F%6!3#qW!8IRRs5F%6!36(c!8IRTs6Ka@!3H4e!8IRVs6Ka@!4)Xa!8IR\s4@>,!4;dc!8IR^s5F%6!4Mpe!8IR`s5F%6!4`''g!8IRcs5F%6!5&9[!8IRes3gu''!58E]!8IRgs3gu''!5JQd!8IRjs4@>,!5ecq!8IRls5F%6!6"os!8IRns5F%6!65&u!8IRps5F%6!6G2m!8IRss4@>,!6bE%!8IRus4@>,!7(Vs!8IS#s5F%6!7Ci+!8IS(s3gu''!7h,9!8IS+s6Ka@!8@J%!8IS/s6Ka@!8RV''!8IS2s4@>,!9!n0!8IS5s5F%6!94%2!8IS7s5F%6!9F14!8IS9s5F%6!;QT>!8ISOs3gu''!<)rH!8ISSs3gu''!<`AN!8ISZs4@>,!=8_X!8IS^s4@>,!=o.^!8IScs5F%6!>,:`!8ISes5F%6!>>Fb!8ISgs5F%6!>PRd!8ISis5F%6!?;''u!8ISps3:W"!?M4,!8ISts3:W"!?qL0!8IT!s3:W"!@.X2!8IT#s6Ka@!@@d*!8IT%s6Ka@!A"3!!8IT,s3gu''!AFK%!8IT0s3gu''!Ajc)!8IT7s3:W"!BL24!8IT9s3:W"!B^>@!8IT;s4@>,!BpJB!8IT=s4@>,!C-VD!8IT?s4@>,"mQ''4!8Ibes4@>,"sX*6!8Ic/s3:W""t]f@!8Ic1s3:W""torB!8Ic9s6Ka@"ucM@!8Ic;s6Ka@"uuYB!8Id2s3gu''#.acZ!8Idis4@>,$#BS#!8Ilss5F%6$#]e&!8Im!s5F%7!(?ka!8RWEs8)fP!(m4f!8RWIs8)fP!)*@c!8RWKs7QHK!)NXg!8RWOs7$*F!)`dd!8RWQs8)fP!*0''r!8RWUs7QHK!*B3t!8RWWs8)fP!*T?l!8RWYs7$*F!*fKd!8RW[s7$*F!+#X%!8RXLs8)fP!2KSk!8RXNs8)fP!2]_m!8RXPs8)fP!2oko!8RXRs8)fP!3-"q!8RXYs7QHK!42^q!8RX^s8)fP!4Dk(!8RX`s8)fP!4W"*!8RXbs8)fP!5&:.!8RXfs8)fP!58F0!8RXhs8)fP!5JR(!8RXks7$*F!5nj6!8RXos8)fP!6>-:!8RXus8)fP!71]B!8RY6s8)fP!9=+V!8RY:s8)fP!:g*_!8RY[s7$*F!=8_q!8RY_s7$*F!>#5-!8RYfs8)fP!>GM1!8RYjs8)fP!?;(9!8RYrs7QHK!?qL:!8RZ#s7QHK!@@dC!8RZ+s8)fP!A4?K!8RZ/s8)fP!AXWO!8RZ3s8)fP!BL2M!8RZ<s8)fP!C$P\!8RZ@s8)fP!]''fQ!8RhHs7QHK"t]fJ!8Ri3s7QHK"ucMY!8Ri=s8)fP#.jj)!8Rrss8)fP$#KY=!8Rrus8)fP$#]e?!8Rs"s8)fQ!"]+h!8[\fs5F%8!$qTs!8[]&s6KaB!%@lr!8[])s3:W$!%S$8!8[]+s4@>.!%e00!8[].s3:W$!&+B$!8[]0s4@>.!&=N+!8[]2s6KaB!&X`B!8[]6s7QHL!&sr1!8[]9s3:W$!'':/*!8[];s4@>.!''L;,!8[]=s4@>.!(?kR!8[]Is6KaB!)!:X!8[]Ms5F%8!)W^T!8[]Qs5F%8!)rpa!8[]Us6KaB!*9-d!8[]Ws6KaB!*K9\!8[]Ys7QHL!*]Er!8[][s5F%8!*oQt!8[]]s5F%8!.Fn6!8[^-s4@>.!/(=(!8[^/s4@>.!/:I*!8[^1s4@>.!/LU,!8[^3s4@>.!/^aB!8[^5s3gu)!/pm+!8[^7s3gu)!0.$-!8[^9s5F%8!0@0>!8[^;s5F%8!0R<@!8[^?s6KaB!1!TN!8[^As6KaB!13`P!8[^Cs6KaB!1NrS!8[^Js3:W$!2BM[!8[^Ns6KaB!2TY]!8[^Ps6KaB!2fe_!8[^Rs6KaB!3#qa!8[^^s5F%8!5&9j!8[^gs5F%8!58El!8[^is5F%8!5JR-!8[^ls7QHL!5ecg!8[^ns6KaB!6"oi!8[^ps6KaB!65&k!8[^rs6KaB!6G3,!8[^us6KaB!6kK0!8[_$s6KaB!7_%t!8[_0s3gu)!8RV''!8[_4s6KaB!9!nD!8[_7s6KaB!94%F!8[_9s6KaB!9F1H!8[_;s6KaB!;QT>!8[_Qs3gu)!<)rH!8[_Us3gu)!<`AN!8[_\s5F%8!=8_b!8[_`s5F%8!=o.r!8[_fs6KaB!>>G!!8[_js6KaB!?;(*!8[_rs7QHL!?M4,!8[`!s7QHL!?qL0!8[`#s7QHL!@.X2!8[`%s4@>.!@@d4!8[`''s4@>.!A"30!8[`.s5F%8!AFK4!8[`2s5F%8!Ajc8!8[`9s3:W$!BL2R!8[`;s3:W$!B^>6!8[`=s5F%8!BpJ8!8[`?s5F%8!C-V:!8[`As5F%8"mQ''4!8[ngs5F%8"sX*6!8[o1s7QHL"t]f@!8[o3s7QHL"torB!8[o;s4@>."ucMJ!8[o=s4@>."uuYL!8[p4s3gu)#.acZ!8[pks7QHL#K-So!8[t#s4@>.#KQks!8[tAs6KaB$#BS-!8\#us6KaB$#]e0!8\$#s6KaD!"]+h!8mhhs5F%:!$qTs!8mi(s6KaD!%@lr!8mi+s3:W&!%S$8!8mi-s4@>0!%e00!8mi0s3:W&!&+B$!8mi2s4@>0!&=N+!8mi4s6KaD!&X`B!8mi8s7QHN!&sr1!8mi;s3:W&!'':/*!8mi=s4@>0!''L;,!8mi?s4@>0!(?kR!8miKs6KaD!)!:X!8miOs5F%:!)W^T!8miSs5F%:!)rpa!8miWs6KaD!*9-d!8miYs6KaD!*K9\!8mi[s7QHN!*]Er!8mi]s5F%:!*oQt!8mi_s5F%:!.Fn6!8mj/s4@>0!/(=(!8mj1s4@>0!/:I*!8mj3s4@>0!/LU,!8mj5s4@>0!/^aB!8mj7s3gu+!/pm+!8mj9s3gu+!0.$-!8mj;s5F%:!0@0>!8mj=s5F%:!0R<@!8mjAs6KaD!1!TN!8mjCs6KaD!13`P!8mjEs6KaD!1NrS!8mjLs3:W&!2BM[!8mjPs6KaD!2TY]!8mjRs6KaD!2fe_!8mjTs6KaD!3#qa!8mj`s5F%:!5&9j!8mjis5F%:!58El!8mjks5F%:!5JR-!8mjns7QHN!5ecg!8mjps6KaD!6"oi!8mjrs6KaD!65&k!8mjts6KaD!6G3,!8mk"s6KaD!6kK0!8mk&s6KaD!7_%t!8mk2s3gu+!8RV''!8mk6s6KaD!9!nD!8mk9s6KaD!94%F!8mk;s6KaD!9F1H!8mk=s6KaD!;QT>!8mkSs3gu+!<)rH!8mkWs3gu+!<`AN!8mk^s5F%:!=8_b!8mkbs5F%:!=o.r!8mkhs6KaD!>>G!!8mkls6KaD!?;(*!8mkts7QHN!?M4,!8ml#s7QHN!?qL0!8ml%s7QHN!@.X2!8ml''s4@>0!@@d4!8ml)s4@>0!A"30!8ml0s5F%:!AFK4!8ml4s5F%:!Ajc8!8ml;s3:W&!BL2R!8ml=s3:W&!B^>6!8ml?s5F%:!BpJ8!8mlAs5F%:!C-V:!8mlCs5F%:"mQ''4!8n%is5F%:"sX*6!8n&3s7QHN"t]f@!8n&5s7QHN"torB!8n&=s4@>0"ucMJ!8n&?s4@>0"uuYL!8n''6s3gu+#.acZ!8n''ms7QHN#K-So!8n+%s4@>0#KQks!8n+Cs6KaD$#BS-!8n0"s6KaD$#]e0!8n0%s6KaE!"]+^!9!nhs4@>1!"o7`!9!oGs7$*J!([(Z!9!oKs7QHO!(m4\!9!oMs7$*J!)*@Y!9!oOs6KaE!)NX]!9!oVs8)fT!*''!g!9!oXs7QHO!*9-n!9!oZs7$*J!,_bg!9!p+s5F%;!2BM`!9!pQs7$*J!2TYb!9!pSs7$*J!2fed!9!pUs7$*J!3#qf!9!pXs7QHO!3?.n!9!pZs7QHO!3Q:p!9!p]s6KaE!5nj,!9!pss7$*J!6>-0!9!q*s7$*J!7h,C!9!q0s7QHO!9*tJ!9!q<s7$*J!9O7N!9!qJs6KaE!?;(4!9!r!s7QHO!?qL:!9!r''s7QHO!@@d9!9"+Ls6KaE"sX*E!9",5s7QHO"torL!9",?s7$*J"uuYQ!9"1#s4@>1#KHer!9"1''s4@>1#NPj:!9"1Ds5F%;$#BS2!9"6#s7$*J$#T_4!9"6%s7$*J$#fk6!9*ths5F%<!"o7j!9*u(s4@>2!%.a4!9*u,s3gu-!%Irn!9*u.s6KaF!%\*%!9*u0s5F%<!&";s!9*u3s3gu-!&4H*!9*u5s4@>2!&FT@!9*u8s6KaF!&jlN!9*u;s4@>2!''1))!9*u>s3:W(!''C55!9*u@s3:W(!''UA7!9*uHs6KaF!(m4W!9*uNs6KaF!)<LQ!9*uTs5F%<!)`dU!9*uWs6KaF!*0''c!9*uZs6KaF!*B3e!9*u\s5F%<!*T?q!9*u^s7QHP!*fK_!9*u`s7QHP!+#Wa!9+!,s6KaF!.t7''!9+!2s4@>2!/1C)!9+!4s4@>2!/CO+!9+!6s4@>2!/U[-!9+!8s6KaF!/gg*!9+!:s3gu-!0$s,!9+!<s3gu-!07*=!9+!>s5F%<!0I6?!9+!@s5F%<!0mNM!9+!Ds6KaF!1*ZO!9+!Fs6KaF!1<fQ!9+!Is6KaF!2'';:!9+!Qs6KaF!2KS\!9+!Ss6KaF!2]_^!9+!Us6KaF!2ok`!9+!Ws6KaF!42^b!9+!js5F%<!5/?k!9+!ls5F%<!5AKm!9+!ns7QHP!5\^/!9+!qs4@>2!5nj''!9+!ss4@>2!6,!)!9+!us4@>2!6>-+!9+""s6KaF!6Y?.!9+"&s6KaF!7(W2!9+".s3gu-!8@J%!9+"6s3gu-!8dbB!9+":s6KaF!9*tE!9+"<s6KaF!9=+G!9+">s6KaF!9O7I!9+"Rs3:W(!;lfF!9+"Ws3gu-!<<)J!9+"]s3gu-!=&S`!9+"bs5F%<!=Jkd!9+"hs6KaF!>,:t!9+"ls6KaF!>PS#!9+"us6KaF!?D.5!9+#"s6KaF!?hF9!9+#&s6KaF!@%R;!9+#(s6KaF!@7]t!9+#*s6KaF!@Ij!!9+#0s5F%<!A4?2!9+#4s5F%<!AXW6!9+#8s5F%<!BC,)!9+#>s7QHP!BU8+!9+#@s4@>2!BgDA!9+#Bs4@>2!C$PC!9+#Ds4@>2!C6\E!9+1Hs3:W("q:Ok!9+2,s6KaF"tT`I!9+26s6KaF"tflK!9+28s6KaF"uZG5!9+2@s6KaF"ulS7!9+2Bs6KaF#(us)!9+3ns3:W(#.jj.!9+7$s4@>2#KHer!9+7(s4@>2#NYpO!9+<#s6KaF$#KY.!9+<&s6KaF$#fk1!94%is4@>3!"f1_!94%ks4@>3!(?kW!94&Ls7$*L!(d.`!94&Ns7$*L!)!:]!94&Ps6KaG!)3FZ!94&Ts6KaG!)rpp!94&Ys7$*L!*0''m!94&[s7QHQ!*B3j!94&rs4@>3!.Fn,!94''Rs7$*L!2KSa!94''Ts7$*L!2]_c!94''Vs7$*L!2oke!94''Xs7$*L!36(m!94''[s7QHQ!3H4o!94'']s7QHQ!3cFh!94''ss7$*L!6,!.!94("s7$*L!7Ci:!94(0s7QHQ!8%8E!94(<s7$*L!9=+L!94(@s7$*L!:g*U!94)!s7QHQ!?M46!94)''s7QHQ!@.X<!94)+s7$*L"n)EW!948-s8)fV"t]fJ!9489s7QHQ"ucMO!948Cs7$*L#K-So!94=(s4@>3#KQks!94=Es4@>3#NYpE!94B$s7$*L$#KY3!94B&s7$*L$#]e5!94B(s7$*M!"]+h!9=+ls5F%>!$qTs!9=,,s6KaH!%@lr!9=,/s3:W*!%S$8!9=,1s4@>4!%e00!9=,4s3:W*!&+B$!9=,6s4@>4!&=N+!9=,8s6KaH!&X`B!9=,<s7QHR!&sr1!9=,?s3:W*!'':/*!9=,As4@>4!''L;,!9=,Cs4@>4!(?kR!9=,Os6KaH!)!:X!9=,Ss5F%>!)W^T!9=,Ws5F%>!)rpa!9=,[s6KaH!*9-d!9=,]s6KaH!*K9\!9=,_s7QHR!*]Er!9=,as5F%>!*oQt!9=,cs5F%>!.Fn6!9=-3s4@>4!/(=(!9=-5s4@>4!/:I*!9=-7s4@>4!/LU,!9=-9s4@>4!/^aB!9=-;s3gu/!/pm+!9=-=s3gu/!0.$-!9=-?s5F%>!0@0>!9=-As5F%>!0R<@!9=-Es6KaH!1!TN!9=-Gs6KaH!13`P!9=-Is6KaH!1NrS!9=-Ps3:W*!2BM[!9=-Ts6KaH!2TY]!9=-Vs6KaH!2fe_!9=-Xs6KaH!3#qa!9=-ds5F%>!5&9j!9=-ms5F%>!58El!9=-os5F%>!5JR-!9=-rs7QHR!5ecg!9=-ts6KaH!6"oi!9=.!s6KaH!65&k!9=.#s6KaH!6G3,!9=.&s6KaH!6kK0!9=.*s6KaH!7_%t!9=.6s3gu/!8RV''!9=.:s6KaH!9!nD!9=.=s6KaH!94%F!9=.?s6KaH!9F1H!9=.As6KaH!;QT>!9=.Ws3gu/!<)rH!9=.[s3gu/!<`AN!9=.bs5F%>!=8_b!9=.fs5F%>!=o.r!9=.ls6KaH!>>G!!9=.ps6KaH!?;(*!9=/#s7QHR!?M4,!9=/''s7QHR!?qL0!9=/)s7QHR!@.X2!9=/+s4@>4!@@d4!9=/-s4@>4!A"30!9=/4s5F%>!AFK4!9=/8s5F%>!Ajc8!9=/?s3:W*!BL2R!9=/As3:W*!B^>6!9=/Cs5F%>!BpJ8!9=/Es5F%>!C-V:!9=/Gs5F%>"mQ''4!9==ms5F%>"sX*6!9=>7s7QHR"t]f@!9=>9s7QHR"torB!9=>As4@>4"ucMJ!9=>Cs4@>4"uuYL!9=?:s3gu/#.acZ!9=?qs7QHR#K-So!9=C)s4@>4#KQks!9=CGs6KaH$#BS-!9=H&s6KaH$#]e0!9=H)s6KaI!"]+^!9F1ls4@>5!"o7`!9F2Ks7$*N!([(Z!9F2Os7QHS!(m4\!9F2Qs7$*N!)*@Y!9F2Ss6KaI!)NX]!9F2Zs8)fX!*''!g!9F2\s7QHS!*9-n!9F2^s7$*N!,_bg!9F3/s5F%?!2BM`!9F3Us7$*N!2TYb!9F3Ws7$*N!2fed!9F3Ys7$*N!3#qf!9F3\s7QHS!3?.n!9F3^s7QHS!3Q:p!9F3as6KaI!5nj,!9F4"s7$*N!6>-0!9F4.s7$*N!7h,C!9F44s7QHS!9*tJ!9F4@s7$*N!9O7N!9F4Ns6KaI!?;(4!9F5%s7QHS!?qL:!9F5+s7QHS!@@d9!9FCPs6KaI"sX*E!9FD9s7QHS"torL!9FDCs7$*N"uuYQ!9FI''s4@>5#KHer!9FI+s4@>5#NPj:!9FIHs5F%?$#BS2!9FN''s7$*N$#T_4!9FN)s7$*N$#fk6!;HO)s5F%R!"f1_!;HO+s5F%R!%.`k!;HOBs3:W>!%Iri!;HODs3:W>!%\)p!;HOFs4@>H!&";n!;HOIs3:W>!&4Gu!;HOKs3:W>!&FT"!;HONs3:W>!&jl&!;HO^s5F%R!(R"@!;HOas4@>H!(d.L!;HOcs5F%R!)!:N!;HOgs7QHf!)W^J!;HOks4@>H!)ijL!;HOms5F%R!*''!N!;HOos4@>H!*9-d!;HOqs5F%R!*K9R!;HOss5F%R!*]E^!;HOus6Ka\!*oQ`!;HP"s4@>H!,_bg!;HPBs4@>H!/^a$!;HPOs3:W>!/pm&!;HPQs3:W>!0.$(!;HPSs4@>H!0@04!;HPUs4@>H!0R<6!;HPYs3:W>!1!T0!;HP[s3:W>!13`2!;HP]s3:W>!1Nr5!;HPgs5F%R!2KSR!;HPis5F%R!2]_T!;HPks5F%R!2okV!;HPms5F%R!3-"N!;HPos5F%R!3?.Z!;HPqs5F%R!3Q:\!;HQ"s4@>H!42^X!;HQ$s4@>H!4DjZ!;HQ&s4@>H!4W!\!;HQ(s4@>H!4r3_!;HQ+s4@>H!5/?a!;HQ-s4@>H!5AKc!;HQ/s5F%R!5\]p!;HQ3s5F%R!6+ut!;HQ7s5F%R!6G2c!;HQ:s3:W>!6bDp!;HQ<s3:W>!7(Vi!;HQ?s4@>H!7Ci!!;HQDs3:W>!7h,/!;HQGs5F%R!8@Iu!;HQKs5F%R!8RV"!;HQNs3:W>!9!n&!;HQQs5F%R!94%(!;HQSs5F%R!9F1*!;HQUs5F%R!;QT9!;HQks3:W>!<)rC!;HQos3:W>!<`AI!;HR!s4@>H!=8_X!;HR%s4@>H!=o.T!;HR*s4@>H!>,:V!;HR,s4@>H!>>FX!;HR.s4@>H!>PRZ!;HR0s4@>H!?;''k!;HR7s3:W>!?M4,!;HR;s3:W>!?qL0!;HR=s3:W>!@.X2!;HR@s5F%R!A"3&!;HRHs4@>H!AFK*!;HRLs4@>H!Ajc.!;HRTs5F%R!BgD7!;HRYs4@>H!C6\;!;H`^s2b99"q:Oa!;HaBs5F%R"tT`!!;HaLs6Ka\"tfl#!;HaNs6Ka\"ucM@!;HaXs5F%R#(us$!;Hc0s5F%R#K-T$!;Hf=s5F%R#KQl(!;HfZs4@>H#NYp;!;Hk9s5F%R$#KY$!;Hk<s5F%R$#fk''!;QU*s4@>I!"f1_!;QU,s4@>I!(?kW!;QUas5sCX!([(K!;QUcs5sCX!(m4a!;QUes7$*b!)*@J!;QUgs4m\N!)NXN!;QUks6Ka]!)`d_!;QUms5sCX!)rpk!;QUos5F%S!*0''c!;QUqs7QHg!*B3o!;QUss6Ka]!*T?g!;QUus6Ka]!*oQj!;QV3s4@>I!.Fmc!;QVhs7$*b!2KSa!;QVjs7$*b!2]_c!;QVls7$*b!2oke!;QVns7$*b!3-"]!;QVps5sCX!3?._!;QVrs5sCX!3Q:a!;QVus4m\N!42^l!;QW%s5sCX!4Dji!;QW''s5sCX!4W!k!;QW)s5sCX!5&9t!;QW-s6Ka]!58F!!;QW/s6Ka]!5JR#!;QW2s6Ka]!5nj,!;QW6s7$*b!6>-0!;QW<s5sCX!71].!;QWBs5F%S!7h,4!;QWHs5sCX!9*tJ!;QWTs7$*b!9O7N!;QWbs4m\N!=&Sj!;QX$s6Ka]!=Jkn!;QX+s5sCX!>5@p!;QX/s5sCX!>YXt!;QX7s6Ka]!?M46!;QX=s7QHg!@.X<!;QXAs7QHg!A"3:!;QXIs6Ka]!AFK>!;QXMs6Ka]!AjcB!;QXUs6Ka]"n)EH!;QgCs7QHg"t]fJ!;QgOs7QHg"ucMT!;QgYs7QHg#.jj$!;Ql;s24p5#KHe^!;Ql?s24p5#NPj:!;Ql\s24p5$#BS7!;Qq;s7QHg$#T_9!;Qq=s7QHg$#fk;!;ca,s6Ka_!"f1U!;ca.s6Ka_!%.`u!;caEs3:WA!%Iri!;caGs4@>K!%\*%!;caIs5F%U!&";n!;caLs3:WA!&4H*!;caNs4@>K!&FT,!;caQs4@>K!&jl0!;caTs4@>K!''1(t!;caWs24p7!''L;"!;caas6Ka_!(R"J!;cads5F%U!(d.Q!;cafs5F%U!)!:X!;cajs7QHi!)W^J!;cans4@>K!)ijV!;caqs5F%U!*0''Y!;cass6Ka_!*B3[!;caus4@>K!*T?S!;cb"s4@>K!*oQV!;cb%s4@>K!,_b]!;cbEs4@>K!/^a.!;cbRs3:WA!/pm&!;cbTs3:WA!0.$(!;cbVs5F%U!0@0>!;cbXs5F%U!0R<@!;cb\s4@>K!1!T:!;cb^s4@>K!13`<!;cb`s4@>K!1Nr?!;cbgs24p7!2BM[!;cbks6Ka_!2TY]!;cbms6Ka_!2fe_!;cbos6Ka_!3#qa!;cbqs5F%U!36(^!;cbss5sCZ!3H4`!;cbus5sCZ!4)Xa!;cc&s4@>K!4;dc!;cc(s5F%U!4Mpe!;cc*s5F%U!4`''g!;cc-s5F%U!5&9`!;cc/s4@>K!58Eb!;cc1s4@>K!5JQd!;cc4s4@>K!5nj''!;cc8s6Ka_!6>-+!;cc;s4@>K!6Y>o!;cc>s5F%U!6kJq!;ccAs4@>K!71])!;ccDs5F%U!7_%o!;ccHs5sCZ!8%86!;ccMs3:WA!8IP:!;ccOs3:WA!8db.!;ccSs4@>K!9*tE!;ccUs4@>K!9=+G!;ccWs4@>K!9O7I!;ccks2b9<!;lfA!;ccps3:WA!<<)E!;cd!s3:WA!=&SV!;cd&s4@>K!=JkZ!;cd,s4@>K!>#4i!;cd.s4@>K!>5@k!;cd0s4@>K!>GLm!;cd2s4@>K!>YXo!;cd9s5F%U!?D-l!;cd;s6Ka_!?hEp!;cd?s6Ka_!@%Qr!;cdAs6Ka_!@7]t!;cdCs5F%U!@Ij!!;cdIs4@>K!A4?(!;cdMs4@>K!AXW,!;cdQs4@>K!BC+t!;cdWs4@>K!BU8!!;cdZs4@>K!C$P9!;cd^s4@>K"mQ''/!;cs/s4@>K"tT`+!;csOs6Ka_"tfl-!;csQs6Ka_"uZG5!;csYs5F%U"ulS7!;cs[s5F%U#(us$!;cu2s24p7#.jie!;d#=s24p7#KHe^!;d#As24p7#NPj0!;d#^s4@>K$#BS#!;d(=s5F%U$#]e&!;d(@s5F%W!"]+r!;um/s3:WC!"o7t!;umEs4@>M!%@lm!;umHs2b9>!%S$$!;umJs4@>M!%e00!;umMs2b9>!&+At!;umOs4@>M!&=N+!;umQs4@>M!&X`.!;umUs4@>M!&sr1!;umXs24p9!'':.u!;um[s24p9!(?kR!;umes5F%W!([(K!;umgs5sC\!(m4M!;umis6Kaa!)<Le!;umos4@>M!)`dK!;umqs5F%W!*''!X!;umts5F%W!*9-d!;un!s5F%W!*K9R!;un#s4@>M!*]ET!;un&s4@>M!+#WW!;un7s3:WC!.Fn"!;unSs4@>M!/gg%!;unUs3:WC!0$s''!;unWs3:WC!07*=!;unYs5F%W!0I6?!;un[s5F%W!0mN9!;un_s4@>M!1*Z;!;unas4@>M!1<f=!;unds4@>M!2'';0!;unls6Kaa!2KS\!;unns6Kaa!2]_^!;unps6Kaa!2ok`!;unrs6Kaa!3-"X!;unts5sC\!3?._!;uo!s5sC\!3Q:a!;uo''s5F%W!42^X!;uo)s5F%W!4Djd!;uo+s5F%W!4W!f!;uo-s5F%W!4r3i!;uo0s4@>M!5/?a!;uo2s4@>M!5AKc!;uo4s4@>M!5\]f!;uo8s6Kaa!6,!)!;uo<s6Kaa!6G2m!;uo?s4@>M!6bE%!;uoAs4@>M!7(Vs!;uoDs5F%W!7Ci+!;uoIs3:WC!7h,4!;uoLs5sC\!8@Iu!;uoPs5sC\!8RV"!;uoSs4@>M!9!n0!;uoVs6Kaa!94%2!;uoXs6Kaa!9F14!;uoZs6Kaa!;QT9!;uops3:WC!<)rC!;uots3:WC!<`AI!;up&s4@>M!=8_X!;up*s4@>M!=o.^!;up/s5F%W!>,:`!;up1s5F%W!>>Fb!;up3s5F%W!>PRd!;up5s5F%W!?;''u!;up<s4@>M!?M4,!;up@s4@>M!?qL0!;upBs4@>M!@.X2!;upDs4@>M!@@d*!;upFs4@>M!A"3&!;upMs4@>M!AFK*!;upQs4@>M!Ajc.!;upXs24p9!BL24!;upZs24p9!BgD7!;up^s4@>M!C6\;!<!)cs2b9>"q:Oa!<!*Ps4@>M"t]f@!<!*Rs4@>M"torB!<!*Zs4@>M"ucM@!<!*\s4@>M"uuYB!<!+Ss3:WC#.acP!<!,5s4@>M#K-S[!<!/Bs24p9#KQk_!<!/_s3:WC#NYp;!<!4>s5F%W$#KY$!<!4As5F%W$#fk''!<3$0s6Kac!"f1U!<3$2s6Kac!%.`u!<3$Is3:WE!%Iri!<3$Ks4@>O!%\*%!<3$Ms5F%Y!&";n!<3$Ps3:WE!&4H*!<3$Rs4@>O!&FT,!<3$Us4@>O!&jl0!<3$Xs4@>O!''1(t!<3$[s24p;!''L;"!<3$es6Kac!(R"J!<3$hs5F%Y!(d.Q!<3$js5F%Y!)!:X!<3$ns7QHm!)W^J!<3$rs4@>O!)ijV!<3$us5F%Y!*0''Y!<3%"s6Kac!*B3[!<3%$s4@>O!*T?S!<3%&s4@>O!*oQV!<3%)s4@>O!,_b]!<3%Is4@>O!/^a.!<3%Vs3:WE!/pm&!<3%Xs3:WE!0.$(!<3%Zs5F%Y!0@0>!<3%\s5F%Y!0R<@!<3%`s4@>O!1!T:!<3%bs4@>O!13`<!<3%ds4@>O!1Nr?!<3%ks24p;!2BM[!<3%os6Kac!2TY]!<3%qs6Kac!2fe_!<3%ss6Kac!3#qa!<3%us5F%Y!36(^!<3&"s5sC^!3H4`!<3&$s5sC^!4)Xa!<3&*s4@>O!4;dc!<3&,s5F%Y!4Mpe!<3&.s5F%Y!4`''g!<3&1s5F%Y!5&9`!<3&3s4@>O!58Eb!<3&5s4@>O!5JQd!<3&8s4@>O!5nj''!<3&<s6Kac!6>-+!<3&?s4@>O!6Y>o!<3&Bs5F%Y!6kJq!<3&Es4@>O!71])!<3&Hs5F%Y!7_%o!<3&Ls5sC^!8%86!<3&Qs3:WE!8IP:!<3&Ss3:WE!8db.!<3&Ws4@>O!9*tE!<3&Ys4@>O!9=+G!<3&[s4@>O!9O7I!<3&os2b9@!;lfA!<3&ts3:WE!<<)E!<3''%s3:WE!=&SV!<3''*s4@>O!=JkZ!<3''0s4@>O!>#4i!<3''2s4@>O!>5@k!<3''4s4@>O!>GLm!<3''6s4@>O!>YXo!<3''=s5F%Y!?D-l!<3''?s6Kac!?hEp!<3''Cs6Kac!@%Qr!<3''Es6Kac!@7]t!<3''Gs5F%Y!@Ij!!<3''Ms4@>O!A4?(!<3''Qs4@>O!AXW,!<3''Us4@>O!BC+t!<3''[s4@>O!BU8!!<3''^s4@>O!C$P9!<3''bs4@>O"mQ''/!<363s4@>O"tT`+!<36Ss6Kac"tfl-!<36Us6Kac"uZG5!<36]s5F%Y"ulS7!<36_s5F%Y#(us$!<386s24p;#.jie!<3;As24p;#KHe^!<3;Es24p;#NPj0!<3;bs4@>O$#BS#!<3@As5F%Y$#]e&!<3@Ds5F%]!"]+r!<W<5s3:WI!"o7t!<W<Ks4@>S!%@lm!<W<Ns2b9D!%S$$!<W<Ps4@>S!%e00!<W<Ss2b9D!&+At!<W<Us4@>S!&=N+!<W<Ws4@>S!&X`.!<W<[s4@>S!&sr1!<W<^s24p?!'':.u!<W<as24p?!(?kR!<W<ks5F%]!([(K!<W<ms5sCb!(m4M!<W<os6Kag!)<Le!<W<us4@>S!)`dK!<W="s5F%]!*''!X!<W=%s5F%]!*9-d!<W=''s5F%]!*K9R!<W=)s4@>S!*]ET!<W=,s4@>S!+#WW!<W==s3:WI!.Fn"!<W=Ys4@>S!/gg%!<W=[s3:WI!0$s''!<W=]s3:WI!07*=!<W=_s5F%]!0I6?!<W=as5F%]!0mN9!<W=es4@>S!1*Z;!<W=gs4@>S!1<f=!<W=js4@>S!2'';0!<W=rs6Kag!2KS\!<W=ts6Kag!2]_^!<W>!s6Kag!2ok`!<W>#s6Kag!3-"X!<W>%s5sCb!3?._!<W>''s5sCb!3Q:a!<W>-s5F%]!42^X!<W>/s5F%]!4Djd!<W>1s5F%]!4W!f!<W>3s5F%]!4r3i!<W>6s4@>S!5/?a!<W>8s4@>S!5AKc!<W>:s4@>S!5\]f!<W>>s6Kag!6,!)!<W>Bs6Kag!6G2m!<W>Es4@>S!6bE%!<W>Gs4@>S!7(Vs!<W>Js5F%]!7Ci+!<W>Os3:WI!7h,4!<W>Rs5sCb!8@Iu!<W>Vs5sCb!8RV"!<W>Ys4@>S!9!n0!<W>\s6Kag!94%2!<W>^s6Kag!9F14!<W>`s6Kag!;QT9!<W?!s3:WI!<)rC!<W?%s3:WI!<`AI!<W?,s4@>S!=8_X!<W?0s4@>S!=o.^!<W?5s5F%]!>,:`!<W?7s5F%]!>>Fb!<W?9s5F%]!>PRd!<W?;s5F%]!?;''u!<W?Bs4@>S!?M4,!<W?Fs4@>S!?qL0!<W?Hs4@>S!@.X2!<W?Js4@>S!@@d*!<W?Ls4@>S!A"3&!<W?Ss4@>S!AFK*!<W?Ws4@>S!Ajc.!<W?^s24p?!BL24!<W?`s24p?!BgD7!<W?ds4@>S!C6\;!<WMis2b9D"q:Oa!<WNVs4@>S"t]f@!<WNXs4@>S"torB!<WN`s4@>S"ucM@!<WNbs4@>S"uuYB!<WOYs3:WI#.acP!<WP;s4@>S#K-S[!<WSHs24p?#KQk_!<WSes3:WI#NYp;!<WXDs5F%]$#KY$!<WXGs5F%]$#fk''!<rN7s5F%`!"f1_!<rN9s5F%`!(?k\!<rNns8)g$!([(_!<rNps8)g$!(m4a!<rNrs7QHt!)*@Y!<rNts6Kaj!)<L`!<rO"s6Kaj!)W^^!<rO$s6Kaj!)ijo!<rO&s8)g$!*''!l!<rO(s7$*o!*9-i!<rO*s7QHt!*K9k!<rO,s4m\[!*]EY!<rO.s7$*o!*oQ[!<rO@s4@>V!.Fn,!<rOus7QHt!2KSf!<rP"s7QHt!2]_h!<rP$s7QHt!2okj!<rP&s7QHt!3-"q!<rP(s8)g$!3?.s!<rP*s8)g$!3Q:u!<rP-s6Kaj!42^l!<rP2s8)g$!4Dk(!<rP4s8)g$!4W"*!<rP6s8)g$!5&:$!<rP:s7$*o!58F&!<rP<s7$*o!5JQi!<rP?s4m\[!5nj1!<rPCs7QHt!6>-5!<rPIs8)g$!71]B!<rPOs7QHt!7h,H!<rPUs8)g$!9*tO!<rPas7QHt!9O7S!<rPos6Kaj!=&Sj!<rQ1s6Kaj!=Jkn!<rQ8s8)g$!>5A/!<rQ<s8)g$!>YY3!<rQDs7$*o!?M41!<rQJs7$*o!@.X7!<rQNs7QHt!A"3?!<rQVs7$*o!AFKC!<rQZs7$*o!AjcG!<rQbs4m\["n)EW!<r`Ps8)g$"t]fE!<r`\s7$*o"ucMT!<r`fs7QHt#.jij!<reHs24pB#KHe^!<reLs24pB#NPj:!<reis5F%`$#BS7!<rjHs7QHt$#T_9!<rjJs7QHt$#fk;!=/Z9s5F%b!"f1_!=/Z;s5F%b!(?k\!=/Zps8)g&!([(_!=/Zrs8)g&!(m4a!=/Zts7QI!!)*@Y!=/[!s6Kal!)<L`!=/[$s6Kal!)W^^!=/[&s6Kal!)ijo!=/[(s8)g&!*''!l!=/[*s7$*q!*9-i!=/[,s7QI!!*K9k!=/[.s4m\]!*]EY!=/[0s7$*q!*oQ[!=/[Bs4@>X!.Fn,!=/\"s7QI!!2KSf!=/\$s7QI!!2]_h!=/\&s7QI!!2okj!=/\(s7QI!!3-"q!=/\*s8)g&!3?.s!=/\,s8)g&!3Q:u!=/\/s6Kal!42^l!=/\4s8)g&!4Dk(!=/\6s8)g&!4W"*!=/\8s8)g&!5&:$!=/\<s7$*q!58F&!=/\>s7$*q!5JQi!=/\As4m\]!5nj1!=/\Es7QI!!6>-5!=/\Ks8)g&!71]B!=/\Qs7QI!!7h,H!=/\Ws8)g&!9*tO!=/\cs7QI!!9O7S!=/\qs6Kal!=&Sj!=/]3s6Kal!=Jkn!=/]:s8)g&!>5A/!=/]>s8)g&!>YY3!=/]Fs7$*q!?M41!=/]Ls7$*q!@.X7!=/]Ps7QI!!A"3?!=/]Xs7$*q!AFKC!=/]\s7$*q!AjcG!=/]ds4m\]"n)EW!=/lRs8)g&"t]fE!=/l^s7$*q"ucMT!=/lhs7QI!#.jij!=/qJs24pD#KHe^!=/qNs24pD#NPj:!=/qks5F%b$#BS7!=0!Js7QI!$#T_9!=0!Ls7QI!$#fk;!=Af;s5F%d!"f1_!=Af=s5F%d!(?k\!=Afrs8)g(!([(_!=Afts8)g(!(m4a!=Ag!s7QI#!)*@Y!=Ag#s6Kan!)<L`!=Ag&s6Kan!)W^^!=Ag(s6Kan!)ijo!=Ag*s8)g(!*''!l!=Ag,s7$*s!*9-i!=Ag.s7QI#!*K9k!=Ag0s4m\_!*]EY!=Ag2s7$*s!*oQ[!=AgDs4@>Z!.Fn,!=Ah$s7QI#!2KSf!=Ah&s7QI#!2]_h!=Ah(s7QI#!2okj!=Ah*s7QI#!3-"q!=Ah,s8)g(!3?.s!=Ah.s8)g(!3Q:u!=Ah1s6Kan!42^l!=Ah6s8)g(!4Dk(!=Ah8s8)g(!4W"*!=Ah:s8)g(!5&:$!=Ah>s7$*s!58F&!=Ah@s7$*s!5JQi!=AhCs4m\_!5nj1!=AhGs7QI#!6>-5!=AhMs8)g(!71]B!=AhSs7QI#!7h,H!=AhYs8)g(!9*tO!=Ahes7QI#!9O7S!=Ahss6Kan!=&Sj!=Ai5s6Kan!=Jkn!=Ai<s8)g(!>5A/!=Ai@s8)g(!>YY3!=AiHs7$*s!?M41!=AiNs7$*s!@.X7!=AiRs7QI#!A"3?!=AiZs7$*s!AFKC!=Ai^s7$*s!AjcG!=Aifs4m\_"n)EW!=B#Ts8)g("t]fE!=B#`s7$*s"ucMT!=B#js7QI##.jij!=B(Ls24pF#KHe^!=B(Ps24pF#NPj:!=B(ms5F%d$#BS7!=B-Ls7QI#$#T_9!=B-Ns7QI#$#fk;!=f)?s5F%h!"o7j!=f)Ts5F%h!%@m,!=f)Ys4@>^!%\*/!=f)\s7QI''!&"<(!=f)_s5F%h!&4H4!=f)as5F%h!&jlD!=f)gs4@>^!''1)3!=f)js4@>^!''C5+!=f)ls4@>^!''UA-!=f)ts6Kar!)!:X!=f*+s6Kar!)`d_!=f*.s7QI''!*0''c!=f*3s7$+"!+#Wk!=f*Xs6Kar!.t71!=f*^s5F%h!/1C3!=f*`s5F%h!/CO5!=f*bs5F%h!/U[7!=f*es5F%h!/pm:!=f*gs5F%h!0.$<!=f*is7QI''!0@0R!=f*ks7QI''!0R<T!=f+%s4@>^!2BM[!=f+)s6Kar!2TY]!=f++s6Kar!2fe_!=f+-s6Kar!3#qa!=f+9s6Kar!5&:$!=f+Bs7$+"!58F&!=f+Ds7$+"!5ecq!=f+Is6Kar!6"os!=f+Ks6Kar!65&u!=f+Ms6Kar!7_&.!=f+`s5F%h!8RV6!=f+gs6Kar!9=+G!=f+ks6Kar!;QTH!=f,,s5F%h!<)rW!=f,0s5F%h!<`A]!=f,7s6Kar!=8_l!=f,;s6Kar!?;(*!=f,Ms6Kar!?hF/!=f,Ss6Kar!@7]t!=f,Ws4@>^!A"3?!=f,^s7$+"!AFKC!=f,bs7$+"!AjcG!=f,is4@>^!BU85!=f,ls3:WT!BgDK!=f,ns3:WT!C$PM!=f,ps3:WT!C6\O!=f:ts4@>^"q:Ou!=f;Xs7QI''"tT`?!=f;cs6Kar"uZG5!=f;ms4@>^#(us8!=f=Es4@>^#K-So!=f@Ss4@>^#KQks!=f@qs6Kas!"]+r!=o/Bs6Kas!(?kW!=o0"s7QI(!([(d!=o0%s6Kas!)!:]!=o0''s5F%i!)3FP!=o0)s7QI(!)NXS!=o0,s5F%i!)`dU!=o0.s7QI(!)rpk!=o00s8)g-!*0''h!=o02s6Kas!*B3e!=o04s7$+#!*T?l!=o06s7$+#!*fK_!=o08s7$+#!+#Wp!=o0Ys6Kas!2BM`!=o1*s7$+#!2TYb!=o1,s7$+#!2fed!=o1.s7$+#!3#qf!=o10s7QI(!3cF^!=o1:s5F%i!4;e"!=o1<s7QI(!4Mq$!=o1>s7QI(!4`(&!=o1Bs7$+#!5/@%!=o1Ds7$+#!5AL''!=o1Fs7$+#!5\^*!=o1Js7$+#!6,!.!=o1Ns7$+#!6bE9!=o1Vs7QI(!7CiD!=o1hs7$+#!9=+L!=o1ls7$+#!:g*K!=o28s5F%i!=8_b!=o2<s5F%i!>#5(!=o2Cs7QI(!>GM,!=o2Gs7QI(!?;(/!=o2Os6Kas!?qL0!=o2Us6Kas!@@d4!=o2]s7$+#!A4?A!=o2as7$+#!AXWE!=o2es7$+#!BL2M!=o2ns7$+#!C$PR!=o2rs7$+#!]''fG!=oA%s5F%i"sX*@!=oAcs6Kas"torB!=oAms6Kas"uuYL!=oCGs7$+##K-So!=oFTs4@>_#KQks!=oFrs6Kas$#BS-!=oKQs6Kas$#T_/!=oKSs6Kas$#fk1!>#5As5F%j!"o7j!>#5Vs5F%j!%@m,!>#5[s4@>`!%\*/!>#5^s7QI)!&"<(!>#5as5F%j!&4H4!>#5cs5F%j!&jlD!>#5is4@>`!''1)3!>#5ls4@>`!''C5+!>#5ns4@>`!''UA-!>#6!s6Kat!)!:X!>#6-s6Kat!)`d_!>#60s7QI)!*0''c!>#65s7$+$!+#Wk!>#6Zs6Kat!.t71!>#6`s5F%j!/1C3!>#6bs5F%j!/CO5!>#6ds5F%j!/U[7!>#6gs5F%j!/pm:!>#6is5F%j!0.$<!>#6ks7QI)!0@0R!>#6ms7QI)!0R<T!>#7''s4@>`!2BM[!>#7+s6Kat!2TY]!>#7-s6Kat!2fe_!>#7/s6Kat!3#qa!>#7;s6Kat!5&:$!>#7Ds7$+$!58F&!>#7Fs7$+$!5ecq!>#7Ks6Kat!6"os!>#7Ms6Kat!65&u!>#7Os6Kat!7_&.!>#7bs5F%j!8RV6!>#7is6Kat!9=+G!>#7ms6Kat!;QTH!>#8.s5F%j!<)rW!>#82s5F%j!<`A]!>#89s6Kat!=8_l!>#8=s6Kat!?;(*!>#8Os6Kat!?hF/!>#8Us6Kat!@7]t!>#8Ys4@>`!A"3?!>#8`s7$+$!AFKC!>#8ds7$+$!AjcG!>#8ks4@>`!BU85!>#8ns3:WV!BgDK!>#8ps3:WV!C$PM!>#8rs3:WV!C6\O!>#G!s4@>`"q:Ou!>#GZs7QI)"tT`?!>#Ges6Kat"uZG5!>#Gos4@>`#(us8!>#IGs4@>`#K-So!>#LUs4@>`#KQks!>#Lss6Kau!"]+r!>,;Ds6Kau!(?kW!>,<$s7QI*!([(d!>,<''s6Kau!)!:]!>,<)s5F%k!)3FP!>,<+s7QI*!)NXS!>,<.s5F%k!)`dU!>,<0s7QI*!)rpk!>,<2s8)g/!*0''h!>,<4s6Kau!*B3e!>,<6s7$+%!*T?l!>,<8s7$+%!*fK_!>,<:s7$+%!+#Wp!>,<[s6Kau!2BM`!>,=,s7$+%!2TYb!>,=.s7$+%!2fed!>,=0s7$+%!3#qf!>,=2s7QI*!3cF^!>,=<s5F%k!4;e"!>,=>s7QI*!4Mq$!>,=@s7QI*!4`(&!>,=Ds7$+%!5/@%!>,=Fs7$+%!5AL''!>,=Hs7$+%!5\^*!>,=Ls7$+%!6,!.!>,=Ps7$+%!6bE9!>,=Xs7QI*!7CiD!>,=js7$+%!9=+L!>,=ns7$+%!:g*K!>,>:s5F%k!=8_b!>,>>s5F%k!>#5(!>,>Es7QI*!>GM,!>,>Is7QI*!?;(/!>,>Qs6Kau!?qL0!>,>Ws6Kau!@@d4!>,>_s7$+%!A4?A!>,>cs7$+%!AXWE!>,>gs7$+%!BL2M!>,>ps7$+%!C$PR!>,>ts7$+%!]''fG!>,M''s5F%k"sX*@!>,Mes6Kau"torB!>,Mos6Kau"uuYL!>,OIs7$+%#K-So!>,RVs4@>a#KQks!>,Rts6Kau$#BS-!>,WSs6Kau$#T_/!>,WUs6Kau$#fk1!>5ACs5F%l!"o7j!>5AXs5F%l!%@m,!>5A]s4@>b!%\*/!>5A`s7QI+!&"<(!>5Acs5F%l!&4H4!>5Aes5F%l!&jlD!>5Aks4@>b!''1)3!>5Ans4@>b!''C5+!>5Aps4@>b!''UA-!>5B#s6Kb!!)!:X!>5B/s6Kb!!)`d_!>5B2s7QI+!*0''c!>5B7s7$+&!+#Wk!>5B\s6Kb!!.t71!>5Bbs5F%l!/1C3!>5Bds5F%l!/CO5!>5Bfs5F%l!/U[7!>5Bis5F%l!/pm:!>5Bks5F%l!0.$<!>5Bms7QI+!0@0R!>5Bos7QI+!0R<T!>5C)s4@>b!2BM[!>5C-s6Kb!!2TY]!>5C/s6Kb!!2fe_!>5C1s6Kb!!3#qa!>5C=s6Kb!!5&:$!>5CFs7$+&!58F&!>5CHs7$+&!5ecq!>5CMs6Kb!!6"os!>5COs6Kb!!65&u!>5CQs6Kb!!7_&.!>5Cds5F%l!8RV6!>5Cks6Kb!!9=+G!>5Cos6Kb!!;QTH!>5D0s5F%l!<)rW!>5D4s5F%l!<`A]!>5D;s6Kb!!=8_l!>5D?s6Kb!!?;(*!>5DQs6Kb!!?hF/!>5DWs6Kb!!@7]t!>5D[s4@>b!A"3?!>5Dbs7$+&!AFKC!>5Dfs7$+&!AjcG!>5Dms4@>b!BU85!>5Dps3:WX!BgDK!>5Drs3:WX!C$PM!>5Dts3:WX!C6\O!>5S#s4@>b"q:Ou!>5S\s7QI+"tT`?!>5Sgs6Kb!"uZG5!>5Sqs4@>b#(us8!>5UIs4@>b#K-So!>5XWs4@>b#KQks!>5Xus6Kb"!"]+r!>>GFs6Kb"!(?kW!>>H&s7QI,!([(d!>>H)s6Kb"!)!:]!>>H+s5F%m!)3FP!>>H-s7QI,!)NXS!>>H0s5F%m!)`dU!>>H2s7QI,!)rpk!>>H4s8)g1!*0''h!>>H6s6Kb"!*B3e!>>H8s7$+''!*T?l!>>H:s7$+''!*fK_!>>H<s7$+''!+#Wp!>>H]s6Kb"!2BM`!>>I.s7$+''!2TYb!>>I0s7$+''!2fed!>>I2s7$+''!3#qf!>>I4s7QI,!3cF^!>>I>s5F%m!4;e"!>>I@s7QI,!4Mq$!>>IBs7QI,!4`(&!>>IFs7$+''!5/@%!>>IHs7$+''!5AL''!>>IJs7$+''!5\^*!>>INs7$+''!6,!.!>>IRs7$+''!6bE9!>>IZs7QI,!7CiD!>>Ils7$+''!9=+L!>>Ips7$+''!:g*K!>>J<s5F%m!=8_b!>>J@s5F%m!>#5(!>>JGs7QI,!>GM,!>>JKs7QI,!?;(/!>>JSs6Kb"!?qL0!>>JYs6Kb"!@@d4!>>Jas7$+''!A4?A!>>Jes7$+''!AXWE!>>Jis7$+''!BL2M!>>Jrs7$+''!C$PR!>>K!s7$+''!]''fG!>>Y)s5F%m"sX*@!>>Ygs6Kb""torB!>>Yqs6Kb""uuYL!>>[Ks7$+''#K-So!>>^Xs4@>c#KQks!>>_!s6Kb"$#BS-!>>cUs6Kb"$#T_/!>>cWs6Kb"$#fk1!>GMZs5F%n!%.`u!>GM^s3gu_!%Irn!>GM`s4@>d!%\*%!>GMbs5F%n!%n6;!>GMds3:WZ!&+B$!>GMfs4@>d!&=N+!>GMhs4@>d!&X`.!>GMls3:WZ!&srE!>GMos3:WZ!'':/*!>GMqs5F%n!''L;,!>GMss5F%n!(?kH!>GN''s5F%n!([(K!>GN)s6Kb#!(m4M!>GN+s5F%n!)<LQ!>GN1s4@>d!)`dK!>GN3s5F%n!)rpa!>GN5s5F%n!*0''Y!>GN7s6Kb#!*B3[!>GN9s3gu_!*T?S!>GN;s4@>d!*fK_!>GN=s4@>d!+#WW!>GNcs5F%n!/(=2!>GNes5F%n!/:I4!>GNgs5F%n!/LU6!>GNis5F%n!/^a.!>GNks3gu_!/pm+!>GNms3gu_!0.$-!>GNos5F%n!0@0>!>GNqs5F%n!0R<@!>GNus4@>d!1!T:!>GO"s4@>d!13`<!>GO$s4@>d!1Nr?!>GO+s3:WZ!2BMQ!>GO/s5F%n!2TYS!>GO1s5F%n!2feU!>GO3s5F%n!3#qW!>GO5s5F%n!36(c!>GO7s6Kb#!3H4e!>GO9s6Kb#!4)Xa!>GO?s4@>d!4;dc!>GOAs5F%n!4Mpe!>GOCs5F%n!4`''g!>GOFs5F%n!5&9[!>GOHs3gu_!58E]!>GOJs3gu_!5JQd!>GOMs4@>d!5ecq!>GOOs5F%n!6"os!>GOQs5F%n!65&u!>GOSs5F%n!6G2m!>GOVs4@>d!6bE%!>GOXs4@>d!7(Vs!>GO[s5F%n!7Ci+!>GO`s3gu_!7h,9!>GOcs6Kb#!8@J%!>GOgs6Kb#!8RV''!>GOjs4@>d!9!n0!>GOms5F%n!94%2!>GOos5F%n!9F14!>GOqs5F%n!;QT>!>GP2s3gu_!<)rH!>GP6s3gu_!<`AN!>GP=s4@>d!=8_X!>GPAs4@>d!=o.^!>GPFs5F%n!>,:`!>GPHs5F%n!>>Fb!>GPJs5F%n!>PRd!>GPLs5F%n!?;''u!>GPSs3:WZ!?M4,!>GPWs3:WZ!?qL0!>GPYs3:WZ!@.X2!>GP[s6Kb#!@@d*!>GP]s6Kb#!A"3!!>GPds3gu_!AFK%!>GPhs3gu_!Ajc)!>GPos3:WZ!BL24!>GPqs3:WZ!B^>@!>GPss4@>d!BpJB!>GPus4@>d!C-VD!>GQ"s4@>d"mQ''4!>G_Hs4@>d"sX*6!>G_gs3:WZ"t]f@!>G_is3:WZ"torB!>G_qs6Kb#"ucM@!>G_ss6Kb#"uuYB!>G`js3gu_#.acZ!>GaLs4@>d$#BS#!>GiVs5F%n$#]e&!>GiYs5F%o!(?ka!>PT(s8)g3!(m4f!>PT,s8)g3!)*@c!>PT.s7QI.!)NXg!>PT2s7$+)!)`dd!>PT4s8)g3!*0''r!>PT8s7QI.!*B3t!>PT:s8)g3!*T?l!>PT<s7$+)!*fKd!>PT>s7$+)!+#X%!>PU/s8)g3!2KSk!>PU1s8)g3!2]_m!>PU3s8)g3!2oko!>PU5s8)g3!3-"q!>PU<s7QI.!42^q!>PUAs8)g3!4Dk(!>PUCs8)g3!4W"*!>PUEs8)g3!5&:.!>PUIs8)g3!58F0!>PUKs8)g3!5JR(!>PUNs7$+)!5nj6!>PURs8)g3!6>-:!>PUXs8)g3!71]B!>PUns8)g3!9=+V!>PUrs8)g3!:g*_!>PV>s7$+)!=8_q!>PVBs7$+)!>#5-!>PVIs8)g3!>GM1!>PVMs8)g3!?;(9!>PVUs7QI.!?qL:!>PV[s7QI.!@@dC!>PVcs8)g3!A4?K!>PVgs8)g3!AXWO!>PVks8)g3!BL2M!>PVts8)g3!C$P\!>PW#s8)g3!]''fQ!>Pe+s7QI."t]fJ!>Peks7QI."ucMY!>Peus8)g3#.jj)!>PoVs8)g3$#KY=!>PoXs8)g3$#]e?!>PoZs8)g8!$qU<!?(qbs7QI3!%@m"!?(qes2b9[!%S$B!?(qgs5F%t!%e0D!?(qjs2b9[!&+B)!?(qls5F%t!&=N5!?(qns7QI3!&X`L!?(qrs6Kb)!&srE!?(qus3:W`!'':/*!?(r"s6Kb)!''L;,!?(r$s6Kb)!(?k\!?(r-s7QI3!([(_!?(r1s7QI3!)<Le!?(r7s7QI3!)`di!?(r9s7QI3!)rpk!?(r;s7QI3!*0''c!?(r=s7QI3!*K9R!?(r@s7QI3!*]Er!?(rCs7QI3!+#Wu!?(ris7QI3!/(=F!?(rks7QI3!/:IH!?(rms7QI3!/LUJ!?(ros7QI3!/^aL!?(rqs4@>j!/pm0!?(rss4@>j!0.$2!?(rus7QI3!0@0R!?(s"s7QI3!0R<T!?(s&s7QI3!1!TX!?(s(s7QI3!13`Z!?(s*s7QI3!1Nr]!?(s1s3:W`!2BMe!?(s5s7QI3!2TYg!?(s7s7QI3!2fei!?(s9s7QI3!3#qk!?(s;s7QI3!4)Xu!?(sEs7QI3!4;e"!?(sGs7QI3!4Mq$!?(sIs7QI3!4`(&!?(sLs7QI3!5&9`!?(sNs4@>j!58Eb!?(sPs4@>j!5JR-!?(sSs7QI3!5ed0!?(sUs7QI3!6"p2!?(sWs7QI3!65''4!?(sYs7QI3!6G36!?(s\s7QI3!6bE9!?(s^s7QI3!7(W<!?(sas7QI3!7Ci?!?(sfs4@>j!8@J*!?(sns4@>j!8dbL!?(srs7QI3!9*tO!?(sts7QI3!9=+Q!?(t!s7QI3!9O7S!?(t5s2b9[!;lfK!?(t:s4@>j!<<)O!?(t@s4@>j!=&St!?(tEs7QI3!=Jl#!?(tKs7QI3!>#5(!?(tMs7QI3!>5A*!?(tOs7QI3!>GM,!?(tQs7QI3!>YY.!?(tXs6Kb)!?D.+!?(tZs7QI3!?hF/!?(t^s7QI3!@%R1!?(t`s7QI3!@7^3!?(tcs6Kb)!A"3&!?(tjs4@>j!AFK*!?(tns4@>j!Ajc.!?(tus3:W`!BL2R!?(u"s3:W`!B^>J!?(u$s7QI3!BpJL!?(u&s7QI3!C-VN!?(u(s7QI3"mQ''/!?).Ns7QI3"sX*@!?).ms6Kb)"t]fJ!?).os6Kb)"torL!?)/"s6Kb)"ulSK!?)/ps4@>j#.acZ!?)0Rs7QI4!"]+J!?2"Ms4@>k!"o7L!?2#,s6Kb*!(R"Y!?2#/s8)g9!(d.o!?2#2s6Kb*!)W^m!?2#9s8)g9!)ije!?2#<s8)g9!*9-n!?2#?!!NBB!*K9u!?2#Cs7QI4!,_bg!?2#es5F%u!2BM[!?2$6s6Kb*!2TY]!?2$8s6Kb*!2fe_!?2$:s6Kb*!3#qa!?2$<s7$+/!42_&!?2$Gs7$+/!4Djs!?2$Is7$+/!4W!u!?2$Ks7$+/!5&:.!?2$Os8)g9!58F0!?2$Qs8)g9!5nj''!?2$Xs6Kb*!6>-+!?2$^s7$+/!71]8!?2$ds8)g9!9*tE!?2%!s6Kb*!9O7I!?2%Ds8)g9!=8`&!?2%Hs8)g9!>#5#!?2%Os7$+/!>GM''!?2%Ss7$+/!?M46!?2%_s7QI4!@.X<!?2%c!!NBB!A"3I!?2%ks8)g9!AFKM!?2%os8)g9!AjcQ!?24os7QI4"torL!?25$!!NBB"ulSd!?2:(s4@>k#NYpE!?2>\!!NBB$#BSF!?2>^!!NBB$#T_H!?2>`!!NBC!"]+T!?;(Ns6Kb+!"o7V!?;(bs5F&!!%.a4!?;(fs4m\q!%Is#!?;(hs6Kb+!%\*/!?;(js6Kb+!&"<(!?;(ms4m\q!&4H4!?;(os5F&!!&FT@!?;(rs6Kb+!&jlN!?;(us4@>l!''1))!?;)#s3:Wb!''C5+!?;)%s3:Wb!''UA-!?;)2s7QI5!)<Le!?;)9s6Kb+!)`d_!?;)<s7QI5!*0''c!?;)@s7QI5!*K9a!?;)Bs6Kb+!*]Eh!?;)Ds4@>l!*oQj!?;)Fs6Kb+!,_c&!?;)fs5F&!!.t71!?;)ls5F&!!/1C3!?;)ns5F&!!/CO5!?;)ps5F&!!/U[7!?;)rs6Kb+!/gg4!?;)ts4m\q!0$s6!?;*!s4m\q!07*G!?;*#s6Kb+!0I6I!?;*%s6Kb+!0mNM!?;*)s6Kb+!1*ZO!?;*+s6Kb+!1<fQ!?;*.s6Kb+!2'';:!?;*Gs6Kb+!5&9o!?;*Ps5sD&!58Eq!?;*Rs5sD&!5JR#!?;*Us6Kb+!5ecq!?;*Xs5F&!!65&u!?;*\s6Kb+!6Y?.!?;*`s6Kb+!7(W2!?;*hs4m\q!8@J/!?;*ps4m\q!8dbB!?;*ts6Kb+!94%F!?;+#s6Kb+!;QTH!?;+:s4m\q!<)rR!?;+>s4m\q!<`AX!?;+Es6Kb+!=8_l!?;+Is6Kb+!=o.r!?;+Os6Kb+!>>G!!?;+Ss6Kb+!?;(*!?;+[s7QI5!?hF9!?;+as7QI5!@7]t!?;+ds7QI5!@Ij!!?;+js5sD&!A4?7!?;+ns5sD&!AXW;!?;+rs5sD&!BC,)!?;,#s6Kb+!BU8+!?;,%s3:Wb!BgDK!?;,''s3:Wb!C$PM!?;,)s3:Wb!C6\O!?;:-s4@>l"q:Ou!?;:fs7QI5"tT`I!?;:qs7QI5"uZG5!?;;%s7QI5"ulS7!?;;''s7QI5#(us3!?;<Ss3:Wb#.jj$!?;?^s24pX#KHe^!?;?bs24pX#NPjN!?;@*s5F&!$#BS7!?;D^s7QI5$#]e:!?;Das7QI6!"]+^!?D.Os4@>m!"o7`!?D/.s7QI6!(R"^!?D/1s8)g;!(m4W!?D/4s7QI6!)*@Y!?D/6s6Kb,!)<L[!?D/9s6Kb,!)W^^!?D/;s6Kb,!)ijj!?D/=s7QI6!*''!q!?D/?s6Kb,!*9-n!?D/As6Kb,!*K9k!?D/Cs6Kb,!*]Eh!?D/Es4@>m!*oQj!?D/Ws4@>m!.Fn,!?D07s7QI6!2KSf!?D09s7QI6!2]_h!?D0;s7QI6!2okj!?D0=s7QI6!3-"l!?D0Ds6Kb,!42^l!?D0Is7QI6!4Dk#!?D0Ks7QI6!4W"%!?D0Ms7QI6!5&:$!?D0Qs7$+1!58F&!?D0Ss7$+1!5JR#!?D0Vs6Kb,!5nj1!?D0Zs7QI6!6>-5!?D0`s7QI6!71]=!?D0fs8)g;!9*tO!?D1#s7QI6!9O7S!?D11s6Kb,!=&Sj!?D1Hs6Kb,!=Jkn!?D1Os7QI6!>5A*!?D1Ss7QI6!>YY.!?D1[s6Kb,!?M46!?D1as7QI6!@.X<!?D1es6Kb,!A"3?!?D1ms7$+1!AFKC!?D1qs7$+1!AjcG!?D2$s6Kb,"n)EW!?D@gs7QI6"t]fJ!?D@ss7QI6"ucMJ!?DA(s6Kb,#.jj$!?DE_s1/4O#KHeT!?DEcs1/4O#NPj:!?DF+s5F&"$#BS-!?DJ_s6Kb,$#T_/!?DJas6Kb,$#fk1!?_@Qs3:Wf!"f1s!?_@Ss3:Wf!$qU(!?_@hs6Kb/!%@m''!?_@ks4@>p!%S$8!?_@ms5F&%!%e0:!?_@ps4@>p!&+B.!?_@rs5F&%!&=N5!?_@ts6Kb/!&X`B!?_A#s7QI9!&sr1!?_A&s3:Wf!'':/*!?_A(s3:Wf!''L;,!?_A*s3:Wf!(m4a!?_A:s7QI9!)W^^!?_A>s6Kb/!)rpk!?_ABs6Kb/!*B3o!?_AEs5sD*!*T?g!?_AGs6Kb/!*fKU!?_AIs6Kb/!+#Wk!?_AZs6Kb/!.Fn,!?_Aos5F&%!/(=2!?_Aqs5F&%!/:I4!?_Ass5F&%!/LU6!?_Aus5F&%!/^aB!?_B"s4m\u!/pm5!?_B$s4m\u!0.$7!?_B&s6Kb/!0@0H!?_B(s6Kb/!0R<J!?_B,s6Kb/!1!TN!?_B.s6Kb/!13`P!?_B0s6Kb/!1NrS!?_B7s3:Wf!42^l!?_BSs5sD*!5/?p!?_BUs5sD*!5AKr!?_BWs6Kb/!5\^%!?_BZs5F&%!6"os!?_B^s5F&%!6G3,!?_Bbs6Kb/!6kK0!?_Bfs6Kb/!7_&)!?_Brs4m\u!8RV1!?_C!s6Kb/!9!nD!?_C%s6Kb/!9F1H!?_C;s4@>p!;lfP!?_C@s4m\u!<<)T!?_CFs4m\u!=&Sj!?_CKs6Kb/!=Jkn!?_CQs6Kb/!>,:t!?_CUs6Kb/!>PS#!?_C^s6Kb/!?D.5!?_Ccs7QI9!@%R;!?_Cgs4@>p!@@d>!?_Cis4@>p!A"35!?_Cps5sD*!AFK9!?_Cts5sD*!Ajc=!?_D&s3:Wf!BL2H!?_D(s3:Wf!B^>,!?_D*s6Kb/!BpJ.!?_D,s6Kb/!C-V0!?_D.s6Kb/"mQ''>!?_RTs6Kb/"sX*@!?_Rss7QI9"tflK!?_S(s4@>p"ucMT!?_S*s4@>p"uuYV!?_T!s4m\u#.acZ!?_TXs6Kb/#K-S[!?_Wes24p\#KQk_!?_X-s6Kb/#NYpE!?_\as7QI9$#KY8!?_\ds7QI9$#fk;!?hFRs4@>q!"f1_!?hFTs4@>q!(?k\!?hG4s7QI:!([(d!?hG7s6Kb0!)!:b!?hG9s6Kb0!)3FZ!?hG;s6Kb0!)NX]!?hG>s6Kb0!)`d_!?hG@s7QI:!)rpk!?hGBs8)g?!*0''c!?hGDs7QI:!*B3e!?hGFs7$+5!*T?g!?hGHs6Kb0!*fKU!?hGJs6Kb0!,_bg!?hGks5F&&!2BMe!?hH<s7QI:!2TYg!?hH>s7QI:!2fei!?hH@s7QI:!3#qk!?hHBs7QI:!3cFh!?hHLs6Kb0!4;e"!?hHNs7QI:!4Mq$!?hHPs7QI:!4`(&!?hHTs7$+5!5/@%!?hHVs7$+5!5AL''!?hHXs6Kb0!5\^%!?hH\s7QI:!6,!3!?hH`s7QI:!6bE9!?hHhs7QI:!7CiD!?hI%s7QI:!9=+Q!?hI)s7QI:!:g*U!?hIJs6Kb0!=8_l!?hINs6Kb0!>#5(!?hIUs7QI:!>GM,!?hIYs7QI:!?;(*!?hIas7QI:!?qL:!?hIgs7QI:!@@d4!?hIos7$+5!A4?A!?hIss7$+5!AXWE!?hJ"s7$+5!BL2H!?hX7s6Kb0"sX*@!?hXus7QI:"torL!?hY*s6Kb0"uuYL!?hZYs6Kb0#K-SQ!?h]fs1/4S#KQkU!?h^.s4@>q#NYpE!?hbbs6Kb0$#KY.!?hbds6Kb0$#]e0!?hbfs6Kb1!"]+T!?qLTs6Kb1!"o7V!?qLhs5F&''!%.a4!?qLls4m]"!%Is#!?qLns6Kb1!%\*/!?qLps6Kb1!&"<(!?qLss4m]"!&4H4!?qLus5F&''!&FT@!?qM#s6Kb1!&jlN!?qM&s4@>r!''1))!?qM)s3:Wh!''C5+!?qM+s3:Wh!''UA-!?qM8s7QI;!)<Le!?qM?s6Kb1!)`d_!?qMBs7QI;!*0''c!?qMFs7QI;!*K9a!?qMHs6Kb1!*]Eh!?qMJs4@>r!*oQj!?qMLs6Kb1!,_c&!?qMls5F&''!.t71!?qMrs5F&''!/1C3!?qMts5F&''!/CO5!?qN!s5F&''!/U[7!?qN#s6Kb1!/gg4!?qN%s4m]"!0$s6!?qN''s4m]"!07*G!?qN)s6Kb1!0I6I!?qN+s6Kb1!0mNM!?qN/s6Kb1!1*ZO!?qN1s6Kb1!1<fQ!?qN4s6Kb1!2'';:!?qNMs6Kb1!5&9o!?qNVs5sD,!58Eq!?qNXs5sD,!5JR#!?qN[s6Kb1!5ecq!?qN^s5F&''!65&u!?qNbs6Kb1!6Y?.!?qNfs6Kb1!7(W2!?qNns4m]"!8@J/!?qO!s4m]"!8dbB!?qO%s6Kb1!94%F!?qO)s6Kb1!;QTH!?qO@s4m]"!<)rR!?qODs4m]"!<`AX!?qOKs6Kb1!=8_l!?qOOs6Kb1!=o.r!?qOUs6Kb1!>>G!!?qOYs6Kb1!?;(*!?qOas7QI;!?hF9!?qOgs7QI;!@7]t!?qOjs7QI;!@Ij!!?qOps5sD,!A4?7!?qOts5sD,!AXW;!?qP#s5sD,!BC,)!?qP)s6Kb1!BU8+!?qP+s3:Wh!BgDK!?qP-s3:Wh!C$PM!?qP/s3:Wh!C6\O!?q^3s4@>r"q:Ou!?q^ls7QI;"tT`I!?q_"s7QI;"uZG5!?q_+s7QI;"ulS7!?q_-s7QI;#(us3!?q`Ys3:Wh#.jj$!?qcds24p^#KHe^!?qchs24p^#NPjN!?qd0s5F&''$#BS7!?qhds7QI;$#]e:!?qhgs7QI<!"]+^!@%RUs4@>s!"o7`!@%S4s7QI<!(R"^!@%S7s8)gA!(m4W!@%S:s7QI<!)*@Y!@%S<s6Kb2!)<L[!@%S?s6Kb2!)W^^!@%SAs6Kb2!)ijj!@%SCs7QI<!*''!q!@%SEs6Kb2!*9-n!@%SGs6Kb2!*K9k!@%SIs6Kb2!*]Eh!@%SKs4@>s!*oQj!@%S]s4@>s!.Fn,!@%T=s7QI<!2KSf!@%T?s7QI<!2]_h!@%TAs7QI<!2okj!@%TCs7QI<!3-"l!@%TJs6Kb2!42^l!@%TOs7QI<!4Dk#!@%TQs7QI<!4W"%!@%TSs7QI<!5&:$!@%TWs7$+7!58F&!@%TYs7$+7!5JR#!@%T\s6Kb2!5nj1!@%T`s7QI<!6>-5!@%Tfs7QI<!71]=!@%Tls8)gA!9*tO!@%U)s7QI<!9O7S!@%U7s6Kb2!=&Sj!@%UNs6Kb2!=Jkn!@%UUs7QI<!>5A*!@%UYs7QI<!>YY.!@%Uas6Kb2!?M46!@%Ugs7QI<!@.X<!@%Uks6Kb2!A"3?!@%Uss7$+7!AFKC!@%V"s7$+7!AjcG!@%V*s6Kb2"n)EW!@%dms7QI<"t]fJ!@%e$s7QI<"ucMJ!@%e.s6Kb2#.jj$!@%ies1/4U#KHeT!@%iis1/4U#NPj:!@%j1s5F&($#BS-!@%nes6Kb2$#T_/!@%ngs6Kb2$#fk1!@.XUs3:Wj!"f1_!@.XWs3:Wj!$qTi!@.Xls4@>t!%@m''!@.Xos4@>t!%S$$!@.Xqs5F&)!%e0:!@.Xss4@>t!&"<(!@.Xus4m]$!&4H4!@.Y"s5F&)!&FT,!@.Y%s4@>t!&jl0!@.Y*s7QI=!'':/R!@.Y,s4@>t!''L;T!@.Y.s4@>t!(?k>!@.Y7s4@>t!([(A!@.Y9s5sD.!(m4W!@.Y;s4@>t!)W^J!@.YBs4@>t!)ijL!@.YDs5F&)!*''!N!@.YFs4@>t!*9-P!@.YHs6Kb3!*K9R!@.YJs6Kb3!*]Eh!@.YLs5F&)!*oQj!@.YNs4@>t!,_bg!@.Yns4@>t!.t6r!@.Yts3:Wj!/1Bt!@.Z!s3:Wj!/CO!!@.Z#s3:Wj!/U[#!@.Z%s4@>t!/gg4!@.Z''s4m]$!0$s6!@.Z)s4m]$!07*G!@.Z+s6Kb3!0I6I!@.Z-s6Kb3!0mN9!@.Z1s4@>t!1*Z;!@.Z3s4@>t!1<f=!@.Z6s4@>t!2'';b!@.Z>s4@>t!2KSH!@.Z@s4@>t!2]_J!@.ZBs4@>t!2okL!@.ZDs4@>t!3-"N!@.ZFs5sD.!3?._!@.ZHs5sD.!3Q:a!@.ZNs4@>t!42^X!@.ZPs4@>t!4DjZ!@.ZRs4@>t!4W!\!@.ZTs4@>t!4r3_!@.ZWs4@>t!5/?a!@.ZYs4@>t!5AKc!@.Z[s6Kb3!5\^%!@.Z^s3:Wj!5nih!@.Z`s3:Wj!6+uj!@.Zbs3:Wj!6>,l!@.Zds4@>t!6Y>o!@.Zgs4@>t!6kJq!@.Zjs4@>t!71\t!@.Zms4@>t!7_&)!@.Zqs5sD.!8%86!@.[!s4m]$!8IP:!@.[#s4m]$!8db.!@.[''s4@>t!9*t1!@.[)s4@>t!9=+3!@.[+s4@>t!9O75!@.[?s4@>t!;lfP!@.[Ds4m]$!<<)T!@.[Js4m]$!=&SV!@.[Os4@>t!=JkZ!@.[Us4@>t!>#4_!@.[Ws4@>t!>5@a!@.[Ys4@>t!>GLc!@.[[s4@>t!>YXe!@.[bs4@>t!?D-l!@.[ds4@>t!?hEp!@.[hs4@>t!@%Qr!@.[js4@>t!@@d4!@.[rs4@>t!A4?(!@.\!s4@>t!AXW,!@.\%s4@>t!BC,Q!@.\+s6Kb3!BU8S!@.\-s4@>t!BgD7!@.\/s4@>t!C$P9!@.\1s4@>t!C6\;!@.j5s4@>t"q:Oa!@.jns5F&)"tT`+!@.k#s4@>t"tfl-!@.k%s4@>t"ucMJ!@.k/s6Kb3#(us3!@.l[s7QI=#.jj$!@.p1s4@>t#NYp;!@.tes6Kb3$#KY.!@.ths6Kb3$#fk1!@7^Ws4@>u!(?k\!@7_8s5sD/!([(Z!@7_:s8)gC!(m4\!@7_<s7QI>!)*@^!@7_>s7$+9!)NXb!@7_Bs7QI>!)`di!@7_Ds5sD/!*''!g!@7_Gs7QI>!*9-n!@7_Is7$+9!*fKi!@7__s4@>u!.Fn"!@7`?s7QI>!2KSf!@7`As7QI>!2]_h!@7`Cs7QI>!2okj!@7`Es7QI>!3-"]!@7`Gs8)gC!3?.s!@7`Is8)gC!3Q:u!@7`Ls7$+9!42_!!@7`Qs5sD/!4Dji!@7`Ss5sD/!4W!k!@7`Us5sD/!5nj1!@7`bs7QI>!6>-5!@7`hs5sD/!71].!@7`ns7$+9!7h,H!@7`ts8)gC!9*tO!@7a+s7QI>!9O7S!@7a9s7$+9!=&St!@7aPs7QI>!=Jl#!@7aWs5sD/!>5@p!@7a[s5sD/!>YXt!@7acs7QI>!?M46!@7ais7QI>!@.X<!@7ams7$+9"n)E\!@7q$s7QI>"torL!@7q.s7$+9"uuYQ!@8!2s4@>u#NYp;!@8%fs7$+9$#KY3!@8%hs7$+9$#]e5!@8%js7$+:!$qTi!@@dns4@?!!%@m''!@@dqs4@?!!%S$$!@@dss5F&+!%e0:!@@dus4@?!!&"<(!@@e"s4m]&!&4H4!@@e$s5F&+!&FT,!@@e''s4@?!!&jl0!@@e,s7QI?!'':/R!@@e.s4@?!!''L;T!@@e0s4@?!!(?k>!@@e9s4@?!!([(A!@@e;s5sD0!(m4W!@@e=s4@?!!)W^J!@@eDs4@?!!)ijL!@@eFs5F&+!*''!N!@@eHs4@?!!*9-P!@@eJs6Kb5!*K9R!@@eLs6Kb5!*]Eh!@@eNs5F&+!*oQj!@@ePs4@?!!.t6r!@@f!s3:Wl!/1Bt!@@f#s3:Wl!/CO!!@@f%s3:Wl!/U[#!@@f''s4@?!!/gg4!@@f)s4m]&!0$s6!@@f+s4m]&!07*G!@@f-s6Kb5!0I6I!@@f/s6Kb5!0mN9!@@f3s4@?!!1*Z;!@@f5s4@?!!1<f=!@@f8s4@?!!2'';b!@@f@s4@?!!2KSH!@@fBs4@?!!2]_J!@@fDs4@?!!2okL!@@fFs4@?!!3-"N!@@fHs5sD0!3?._!@@fJs5sD0!3Q:a!@@fPs4@?!!42^X!@@fRs4@?!!4DjZ!@@fTs4@?!!4W!\!@@fVs4@?!!4r3_!@@fYs4@?!!5/?a!@@f[s4@?!!5AKc!@@f]s6Kb5!5\^%!@@f`s3:Wl!5nih!@@fbs3:Wl!6+uj!@@fds3:Wl!6>,l!@@ffs4@?!!6Y>o!@@fis4@?!!6kJq!@@fls4@?!!71\t!@@fos4@?!!7_&)!@@fss5sD0!8%86!@@g#s4m]&!8IP:!@@g%s4m]&!8db.!@@g)s4@?!!9*t1!@@g+s4@?!!9=+3!@@g-s4@?!!9O75!@@gAs4@?!!;lfP!@@gFs4m]&!<<)T!@@gLs4m]&!=&SV!@@gQs4@?!!=JkZ!@@gWs4@?!!>#4_!@@gYs4@?!!>5@a!@@g[s4@?!!>GLc!@@g]s4@?!!>YXe!@@gds4@?!!?D-l!@@gfs4@?!!?hEp!@@gjs4@?!!@%Qr!@@gls4@?!!@@d4!@@gts4@?!!A4?(!@@h#s4@?!!AXW,!@@h''s4@?!!BC,Q!@@h-s6Kb5!BU8S!@@h/s4@?!!BgD7!@@h1s4@?!!C$P9!@@h3s4@?!!C6\;!@A!7s4@?!"q:Oa!@A!ps5F&+"tT`+!@A"%s4@?!"tfl-!@A"''s4@?!"ucMJ!@A"1s6Kb5#(us3!@A#]s7QI?#.jj$!@A+gs6Kb5$#KY.!@A+js6Kb5$#fk1!@n.<s7$+?!([(Z!@n.@s7QID!(m4\!@n.Bs7$+?!)*@Y!@n.Ds6Kb:!)NX]!@n.Ks8)gI!*''!g!@n.Ms7QID!*9-n!@n.Os7$+?!2BM`!@n/Fs7$+?!2TYb!@n/Hs7$+?!2fed!@n/Js7$+?!3#qf!@n/Ms7QID!3?.n!@n/Os7QID!3Q:p!@n/Rs6Kb:!5nj,!@n/hs7$+?!6>-0!@n/ts7$+?!7h,C!@n0%s7QID!9*tJ!@n01s7$+?!9O7N!@n0?s6Kb:!?;(4!@n0ks7QID!?qL:!@n0qs7QID!@@d9!@n?As6Kb:"sX*E!@n@*s7QID"torL!@n@4s7$+?"uuYQ!@nIls7$+?$#KY3!@nIns7$+?$#]e5!@nIps7$+A!"]+^!A+9_s4@?(!"o7`!A+:>s7$+A!([(Z!A+:Bs7QIF!(m4\!A+:Ds7$+A!)*@Y!A+:Fs6Kb<!)NX]!A+:Ms8)gK!*''!g!A+:Os7QIF!*9-n!A+:Qs7$+A!,_bg!A+;"s5F&2!2BM`!A+;Hs7$+A!2TYb!A+;Js7$+A!2fed!A+;Ls7$+A!3#qf!A+;Os7QIF!3?.n!A+;Qs7QIF!3Q:p!A+;Ts6Kb<!5nj,!A+;js7$+A!6>-0!A+<!s7$+A!7h,C!A+<''s7QIF!9*tJ!A+<3s7$+A!9O7N!A+<As6Kb<!?;(4!A+<ms7QIF!?qL:!A+<ss7QIF!@@d9!A+KCs6Kb<"sX*E!A+L,s7QIF"torL!A+L6s7$+A"uuYQ!A+Pos4@?(#KHer!A+Pss4@?(#NPj:!A+Q;s5F&2$#BS2!A+Uos7$+A$#T_4!A+Uqs7$+A$#fk6!A=E`s4@?*!"f1_!A=Ebs4@?*!(?kW!A=FCs7$+C!(d.`!A=FEs7$+C!)!:]!A=FGs6Kb>!)3FZ!A=FKs6Kb>!)rpp!A=FPs7$+C!*0''m!A=FRs7QIH!*B3j!A=Fis4@?*!.Fn,!A=GIs7$+C!2KSa!A=GKs7$+C!2]_c!A=GMs7$+C!2oke!A=GOs7$+C!36(m!A=GRs7QIH!3H4o!A=GTs7QIH!3cFh!A=Gjs7$+C!6,!.!A=Gns7$+C!7Ci:!A=H''s7QIH!8%8E!A=H3s7$+C!9=+L!A=H7s7$+C!:g*U!A=Hms7QIH!?M46!A=Hss7QIH!@.X<!A=I"s7$+C"n)EW!A=X$s8)gM"t]fJ!A=X0s7QIH"ucMO!A=X:s7$+C#K-So!A=\ts4@?*#KQks!A=]<s4@?*#NYpE!A=aps7$+C$#KY3!A=ars7$+C$#]e5!A=ats7$+E!(?kW!AOREs7$+E!(d.`!AORGs7$+E!)!:]!AORIs6Kb@!)3FZ!AORMs6Kb@!)rpp!AORRs7$+E!*0''m!AORTs7QIJ!*B3j!AOSKs7$+E!2KSa!AOSMs7$+E!2]_c!AOSOs7$+E!2oke!AOSQs7$+E!36(m!AOSTs7QIJ!3H4o!AOSVs7QIJ!3cFh!AOSls7$+E!6,!.!AOSps7$+E!7Ci:!AOT)s7QIJ!8%8E!AOT5s7$+E!9=+L!AOT9s7$+E!:g*U!AOTos7QIJ!?M46!AOTus7QIJ!@.X<!AOU$s7$+E"n)EW!AOd&s8)gO"t]fJ!AOd2s7QIJ"ucMO!AOd<s7$+E$#BS2!AOmss7$+E$#T_4!AOmus7$+E$#fk6!Aa]ds4@?.!"f1_!Aa]fs4@?.!(?kW!Aa^Gs7$+G!(d.`!Aa^Is7$+G!)!:]!Aa^Ks6KbB!)3FZ!Aa^Os6KbB!)rpp!Aa^Ts7$+G!*0''m!Aa^Vs7QIL!*B3j!Aa^ms4@?.!.Fn,!Aa_Ms7$+G!2KSa!Aa_Os7$+G!2]_c!Aa_Qs7$+G!2oke!Aa_Ss7$+G!36(m!Aa_Vs7QIL!3H4o!Aa_Xs7QIL!3cFh!Aa_ns7$+G!6,!.!Aa_rs7$+G!7Ci:!Aa`+s7QIL!8%8E!Aa`7s7$+G!9=+L!Aa`;s7$+G!:g*U!Aa`qs7QIL!?M46!Aaa"s7QIL!@.X<!Aaa&s7$+G"n)EW!Aap(s8)gQ"t]fJ!Aap4s7QIL"ucMO!Aap>s7$+G#K-So!Aau#s4@?.#KQks!Aau@s4@?.#NYpE!Ab$ts7$+G$#KY3!Ab%!s7$+G$#]e5!Ab%#s7$+L!"]+J!B:&js3:X)!"o7L!B:'')s24pt!%.`k!B:''-s2b:$!%Ird!B:''/s3:X)!%\)p!B:''1s4@?3!%n61!B:''3s24pt!&+Ao!B:''5s3:X)!&=N!!B:''7s3:X)!&X`$!B:'';s3:X)!''C5?!B:''Bs5F&=!(?k4!B:''Ks3:X)!([(7!B:''Ms5F&=!(m4W!B:''Os3:X)!)W^6!B:''Vs24pt!)ijB!B:''Xs4@?3!*''!D!B:''Zs24pt!*9-P!B:''\s6KbG!*K9H!B:''`s5F&=!+#WC!B:''rs3:X)!.FmO!B:(2s24pt!/(<i!B:(4s24pt!/:Hk!B:(6s24pt!/LTm!B:(8s24pt!/^a$!B:(:s2b:$!/pm!!B:(<s2b:$!0.$#!B:(>s4@?3!0@04!B:(@s4@?3!0R<6!B:(Ds3:X)!1!T0!B:(Fs3:X)!13`2!B:(Hs3:X)!1Nr5!B:(Rs3:X)!2KS>!B:(Ts3:X)!2]_@!B:(Vs3:X)!2okB!B:(Xs3:X)!3-"D!B:(Zs5F&=!3?.Z!B:(\s5F&=!3Q:\!B:(bs3:X)!42^D!B:(ds3:X)!4DjP!B:(fs3:X)!4W!R!B:(hs3:X)!4r3U!B:(ks3:X)!5/?W!B:(ms3:X)!5AKY!B:(rs24pt!5ni^!B:(ts24pt!6+u`!B:)!s24pt!6>,b!B:)#s3:X)!6Y>e!B:)&s3:X)!6kJg!B:))s3:X)!71\j!B:),s3:X)!7_%j!B:)0s5F&=!8%81!B:)5s2b:$!8IP5!B:)7s2b:$!8db$!B:);s3:X)!9*t''!B:)=s3:X)!9=+)!B:)?s3:X)!9O7+!B:)Ss24pt!;lf<!B:)Xs2b:$!<<)@!B:)^s2b:$!=&SB!B:)cs24pt!=JkF!B:)is3:X)!>#4U!B:)ks3:X)!>5@W!B:)ms3:X)!>GLY!B:)os3:X)!>YX[!B:*!s24pt!?D-b!B:*#s4@?3!?hEf!B:*''s4@?3!@%Qh!B:*)s4@?3!@@d4!B:*1s3:X)!A4>s!B:*5s3:X)!AXW"!B:*9s3:X)!B^>@!B:*Bs24pt!BpJB!B:*Ds24pt!C-VD!B:*Fs24pt"mQ''*!B:8ls24pt"sX*"!B:96s3:X)"t]f,!B:98s3:X)"tor.!B:9As6KbG"uuYL!B::9s2b:$#NPj0!B:>Fs0)M`$#BS-!B:C%s6KbG$#]e0!B:C(s6KbH!"]+T!BC,ks6KbH!"o7V!BC-Js6KbH!(R"^!BC-Ms6KbH!(d.`!BC-Os8)gW!)!:X!BC-Qs6KbH!)3FZ!BC-Ss7$+M!)NX]!BC-Vs5F&>!)`dU!BC-Xs7QIR!)rpf!BC-Zs6KbH!*0''^!BC-\s6KbH!*B3t!BC-^s5sDC!*T?l!BC-`s7$+M!*fKn!BC-bs7$+M!+#X%!BC-ss6KbH!.Fn"!BC.Ss6KbH!2KS\!BC.Us6KbH!2]_^!BC.Ws6KbH!2ok`!BC.Ys6KbH!3-"l!BC.[s7QIR!3?.n!BC.]s7QIR!3Q:p!BC.`s6KbH!42^b!BC.es7QIR!4Dk#!BC.gs7QIR!4W"%!BC.is7QIR!5&9o!BC.ms5sDC!58Eq!BC.os5sDC!5JR(!BC.rs7$+M!5nj''!BC/!s6KbH!6>-+!BC/''s7QIR!71]=!BC/-s6KbH!7h,C!BC/3s7QIR!9*tE!BC/?s6KbH!9O7I!BC/Ms6KbH!=&S`!BC/ds5F&>!=Jkd!BC/ks7QIR!>5A*!BC/os7QIR!>YY.!BC0"s5sDC!?M4,!BC0(s6KbH!@.X2!BC0,s8)gW!A"35!BC04s5sDC!AFK9!BC08s5sDC!Ajc=!BC0@s7$+M!BgDZ!BC0Es8)gW!C6\^!BC3:s8)gW"n)EW!BC?.s7$+M"t]f@!BC?:s6KbH"ucMY!BC?Ds8)gW#.jj)!BCD&s6KbH#KHf1!BCD*s6KbH#NPjN!BCDGs4@?4$#BS<!BCI&s8)gW$#T_>!BCI(s8)gW$#fk@!BL2ks24q!!"f1U!BL2ms24q!!$qT_!BL3-s3:X+!%@lh!BL30s24q!!%S#o!BL32s3:X+!%e0&!BL34s5F&?!&";i!BL36s2b:&!&4Gu!BL38s3:X+!&FT"!BL3;s3:X+!&jl&!BL3Bs5F&?!''UAA!BL3Ks3:X+!(R"6!BL3Ns3:X+!(d.L!BL3Ps6KbI!)!::!BL3Ws24q!!)`d7!BL3Ys3:X+!)rpM!BL3[s3:X+!*0'';!BL3]s4@?5!*B3e!BL3_s3:X+!*fK_!BL3ds24q!!,_b]!BL4/s0)Mb!.t6h!BL45s24q!!/1Bj!BL47s24q!!/CNl!BL49s24q!!/UZn!BL4;s3:X+!/gfu!BL4=s2b:&!0$s"!BL4?s2b:&!07*3!BL4As4@?5!0I65!BL4Cs4@?5!0mN/!BL4Gs3:X+!1*Z1!BL4Is3:X+!1<f3!BL4Ls3:X+!2BM=!BL4Us3:X+!2TY?!BL4Ws3:X+!2feA!BL4Ys3:X+!3#qC!BL4[s3:X+!36(Y!BL4]s5F&?!3H4[!BL4_s5F&?!4)XM!BL4es24q!!4;dO!BL4gs3:X+!4MpQ!BL4is3:X+!4`''S!BL4ls3:X+!5&9V!BL4ns3:X+!58EX!BL4ps3:X+!5ecS!BL4us3:X+!6"oU!BL5"s3:X+!65&W!BL5$s3:X+!6G2c!BL5''s3:X+!6bDf!BL5)s3:X+!7(Vi!BL5,s3:X+!7Chl!BL51s2b:&!7h,/!BL54s5F&?!8@Ip!BL58s5F&?!8RUr!BL5;s3:X+!9!n&!BL5>s3:X+!94%(!BL5@s3:X+!9F1*!BL5Bs3:X+!;QT4!BL5Xs2b:&!<)r>!BL5\s2b:&!<`AD!BL5cs24q!!=8_D!BL5gs24q!!=o.T!BL5ls3:X+!>,:V!BL5ns3:X+!>>FX!BL5ps3:X+!>PRZ!BL5rs3:X+!?;''W!BL6$s3:X+!?M3m!BL6(s3:X+!?qKq!BL6*s3:X+!@.Ws!BL6-s6KbI!A"2q!BL65s3:X+!AFJu!BL69s3:X+!Ajc$!BL6Cs5F&?!BgD#!BL6Es5F&?!C$P%!BL6Gs5F&?!C6\''!BLDKs24q!"q:OM!BLE/s4@?5"tT`!!BLE9s4@?5"tfl#!BLE;s4@?5"ucMJ!BLEEs6KbI#(urt!BLJGs3:X+#NYoh!BLO&s6KbI$#KY.!BLO)s6KbI$#fk1!BU8ls5F&@!"f1_!BU8ns5F&@!,_bg!BU:0s4@?6#K-T$!BUP+s5F&@#KQl(!BUPHs4@?6#NYp;!B^>ms4@?7!"f1U!B^>os4@?7!(?kR!B^?Os6KbK!(m4a!B^?Ss6KbK!)*@Y!B^?Us6KbK!)<Le!B^?Xs6KbK!)W^T!B^?Zs5F&A!)ij`!B^?\s6KbK!*0''Y!B^?_s6KbK!*B3o!B^?as5sDF!*T?g!B^?cs6KbK!*fKi!B^?es6KbK!,_b]!B^@1s24q#!2BM[!B^@Ws6KbK!2TY]!B^@Ys6KbK!2fe_!B^@[s6KbK!3#qa!B^@]s6KbK!3cFh!B^@gs5F&A!4;dm!B^@is6KbK!4Mpo!B^@ks6KbK!4`''q!B^@os5sDF!5/?p!B^@qs5sDF!5AKr!B^@ss6KbK!5\^%!B^A"s6KbK!6,!)!B^A&s6KbK!6bE/!B^A.s6KbK!9*tE!B^ABs6KbK!9O7I!B^APs6KbK!=&S`!B^Ags5F&A!=Jkd!B^Ans6KbK!>5@u!B^Ars6KbK!>YY$!B^B%s5F&A!?M4,!B^B+s6KbK!@.X2!B^B/s7QIU!A"35!B^B7s5sDF!AFK9!B^B;s5sDF!Ajc=!B^BCs6KbK"n)EW!B^Q1s6KbK"t]f@!B^Q=s6KbK"ucMT!B^QGs7QIU#.jj$!B^V)s4@?7#KHer!B^V-s4@?7#NPj0!B^VJs24q#$#BS7!B^[)s7QIU$#T_9!B^[+s7QIU$#fk;!BgDns5F&B!"f1_!BgDps5F&B!,_bg!BgF2s4@?8#K-T$!Bg\-s5F&B#KQl(!Bg\Js4@?8#NYp;!BpJos4@?9!"f1U!BpJqs4@?9!(?kR!BpKQs6KbM!(m4a!BpKUs6KbM!)*@Y!BpKWs6KbM!)<Le!BpKZs6KbM!)W^T!BpK\s5F&C!)ij`!BpK^s6KbM!*0''Y!BpKas6KbM!*B3o!BpKcs5sDH!*T?g!BpKes6KbM!*fKi!BpKgs6KbM!,_b]!BpL3s24q%!2BM[!BpLYs6KbM!2TY]!BpL[s6KbM!2fe_!BpL]s6KbM!3#qa!BpL_s6KbM!3cFh!BpLis5F&C!4;dm!BpLks6KbM!4Mpo!BpLms6KbM!4`''q!BpLqs5sDH!5/?p!BpLss5sDH!5AKr!BpLus6KbM!5\^%!BpM$s6KbM!6,!)!BpM(s6KbM!6bE/!BpM0s6KbM!9*tE!BpMDs6KbM!9O7I!BpMRs6KbM!=&S`!BpMis5F&C!=Jkd!BpMps6KbM!>5@u!BpMts6KbM!>YY$!BpN''s5F&C!?M4,!BpN-s6KbM!@.X2!BpN1s7QIW!A"35!BpN9s5sDH!AFK9!BpN=s5sDH!Ajc=!BpNEs6KbM"n)EW!Bp]3s6KbM"t]f@!Bp]?s6KbM"ucMT!Bp]Is7QIW#.jj$!Bpb+s4@?9#KHer!Bpb/s4@?9#NPj0!BpbLs24q%$#BS7!Bpg+s7QIW$#T_9!Bpg-s7QIW$#fk;!C$Pps5F&D!"f1_!C$Prs5F&D!%.`k!C$Q4s3:X0!%Iri!C$Q6s3:X0!%\)p!C$Q8s4@?:!&";n!C$Q;s3:X0!&4Gu!C$Q=s3:X0!&FT"!C$Q@s3:X0!&jl&!C$QPs5F&D!(R"@!C$QSs4@?:!(d.L!C$QUs5F&D!)!:N!C$QYs7QIX!)W^J!C$Q]s4@?:!)ijL!C$Q_s5F&D!*''!N!C$Qas4@?:!*9-d!C$Qcs5F&D!*K9R!C$Qes5F&D!*]E^!C$Qgs6KbN!*oQ`!C$Qis4@?:!,_bg!C$R4s4@?:!/^a$!C$RAs3:X0!/pm&!C$RCs3:X0!0.$(!C$REs4@?:!0@04!C$RGs4@?:!0R<6!C$RKs3:X0!1!T0!C$RMs3:X0!13`2!C$ROs3:X0!1Nr5!C$RYs5F&D!2KSR!C$R[s5F&D!2]_T!C$R]s5F&D!2okV!C$R_s5F&D!3-"N!C$Ras5F&D!3?.Z!C$Rcs5F&D!3Q:\!C$Ris4@?:!42^X!C$Rks4@?:!4DjZ!C$Rms4@?:!4W!\!C$Ros4@?:!4r3_!C$Rrs4@?:!5/?a!C$Rts4@?:!5AKc!C$S!s5F&D!5\]p!C$S%s5F&D!6+ut!C$S)s5F&D!6G2c!C$S,s3:X0!6bDp!C$S.s3:X0!7(Vi!C$S1s4@?:!7Ci!!C$S6s3:X0!7h,/!C$S9s5F&D!8@Iu!C$S=s5F&D!8RV"!C$S@s3:X0!9!n&!C$SCs5F&D!94%(!C$SEs5F&D!9F1*!C$SGs5F&D!;QT9!C$S]s3:X0!<)rC!C$Sas3:X0!<`AI!C$Shs4@?:!=8_X!C$Sls4@?:!=o.T!C$Sqs4@?:!>,:V!C$Sss4@?:!>>FX!C$Sus4@?:!>PRZ!C$T"s4@?:!?;''k!C$T)s3:X0!?M4,!C$T-s3:X0!?qL0!C$T/s3:X0!@.X2!C$T2s5F&D!A"3&!C$T:s4@?:!AFK*!C$T>s4@?:!Ajc.!C$TFs5F&D!BgD7!C$TKs4@?:!C6\;!C$bPs2b:+"q:Oa!C$c4s5F&D"tT`!!C$c>s6KbN"tfl#!C$c@s6KbN"ucM@!C$cJs5F&D#(us$!C$e"s5F&D#K-T$!C$h/s5F&D#KQl(!C$hLs4@?:#NYp;!C$m+s5F&D$#KY$!C$m.s5F&D$#fk''!C-Vqs4@?;!"f1U!C-Vss4@?;!(?kR!C-WSs6KbO!(m4a!C-WWs6KbO!)*@Y!C-WYs6KbO!)<Le!C-W\s6KbO!)W^T!C-W^s5F&E!)ij`!C-W`s6KbO!*0''Y!C-Wcs6KbO!*B3o!C-Wes5sDJ!*T?g!C-Wgs6KbO!*fKi!C-Wis6KbO!,_b]!C-X5s24q''!2BM[!C-X[s6KbO!2TY]!C-X]s6KbO!2fe_!C-X_s6KbO!3#qa!C-Xas6KbO!3cFh!C-Xks5F&E!4;dm!C-Xms6KbO!4Mpo!C-Xos6KbO!4`''q!C-Xss5sDJ!5/?p!C-Xus5sDJ!5AKr!C-Y"s6KbO!5\^%!C-Y&s6KbO!6,!)!C-Y*s6KbO!6bE/!C-Y2s6KbO!9*tE!C-YFs6KbO!9O7I!C-YTs6KbO!=&S`!C-Yks5F&E!=Jkd!C-Yrs6KbO!>5@u!C-Z!s6KbO!>YY$!C-Z)s5F&E!?M4,!C-Z/s6KbO!@.X2!C-Z3s7QIY!A"35!C-Z;s5sDJ!AFK9!C-Z?s5sDJ!Ajc=!C-ZGs6KbO"n)EW!C-i5s6KbO"t]f@!C-iAs6KbO"ucMT!C-iKs7QIY#.jj$!C-n-s4@?;#KHer!C-n1s4@?;#NPj0!C-nNs24q''$#BS7!C-s-s7QIY$#T_9!C-s/s7QIY$#fk;!I4Yjs4@?t!%.a4!I4Yns3h!o!%Irn!I4Yps6Kc3!%\*%!I4Yrs5F'')!&";s!I4Yus3h!o!&4H*!I4Z"s4@?t!&FT@!I4Z%s6Kc3!&jlN!I4Z(s4@?t!''1))!I4Z+s3:Xj!''C55!I4Z-s3:Xj!''UA7!I4Z5s6Kc3!(m4W!I4Z;s6Kc3!)<LQ!I4ZAs5F'')!)`dU!I4ZDs6Kc3!*0''c!I4ZGs6Kc3!*B3e!I4ZIs5F'')!*T?q!I4ZKs7QJ=!*fK_!I4ZMs7QJ=!+#Wa!I4Zss4@?t!/(=(!I4Zus4@?t!/:I*!I4["s4@?t!/LU,!I4[$s4@?t!/^aB!I4[&s3h!o!/pm+!I4[(s3h!o!0.$-!I4[*s5F'')!0@0>!I4[,s5F'')!0R<@!I4[0s6Kc3!1!TN!I4[2s6Kc3!13`P!I4[4s6Kc3!1NrS!I4[;s3:Xj!2BM[!I4[?s6Kc3!2TY]!I4[As6Kc3!2fe_!I4[Cs6Kc3!3#qa!I4[Os5F'')!5&9j!I4[Xs5F'')!58El!I4[Zs5F'')!5JR-!I4[]s7QJ=!5ecg!I4[_s6Kc3!6"oi!I4[as6Kc3!65&k!I4[cs6Kc3!6G3,!I4[fs6Kc3!6kK0!I4[js6Kc3!7_%t!I4\!s3h!o!8RV''!I4\%s6Kc3!9!nD!I4\(s6Kc3!94%F!I4\*s6Kc3!9F1H!I4\,s6Kc3!;QT>!I4\Bs3h!o!<)rH!I4\Fs3h!o!<`AN!I4\Ms5F'')!=8_b!I4\Qs5F'')!=o.r!I4\Ws6Kc3!>>G!!I4\[s6Kc3!?;(*!I4\cs7QJ=!?M4,!I4\gs7QJ=!?qL0!I4\is7QJ=!@.X2!I4\ks4@?t!@@d4!I4\ms4@?t!A"30!I4\ts5F'')!AFK4!I4]#s5F'')!Ajc8!I4]*s3:Xj!BL2R!I4],s3:Xj!B^>6!I4].s5F'')!BpJ8!I4]0s5F'')!C-V:!I4]2s5F'')"mQ''4!I4kXs5F'')"sX*6!I4l"s7QJ="t]f@!I4l$s7QJ="torB!I4l,s4@?t"ucMJ!I4l.s4@?t"uuYL!I4m%s3h!o#.acZ!I4m\s7QJ=$#BS-!I4ufs6Kc3$#]e0!I4uis6K^c@sS+U&<^E$!"8sG!O_t=s0)O4!"f1U!O_t?s0)O4!$qT_!O_tTs6Kcp!%@lr!O_tWs3:YR!%S$8!O_tYs4@@\!%e0:!O_t[s4@@\!&";s!O_t]s3h"W!&4H*!O_t_s4@@\!&FT@!O_tbs6Kcp!&jl:!O_tes5F''f!''1)3!O_ths4@@\!''C5!!O_tjs4@@\!''UA#!O_trs3:YR!(R"@!O_tus4@@\!(d.L!O_u#s3:YR!)W^J!O_u*s4@@\!)ijL!O_u,s6Kcp!*''!N!O_u.s5F''f!*9-Z!O_u1s4@@\!*fKU!O_u6s4@@\!,_b]!O_uVs24rH!.t6h!O_u\s24rH!/1Bj!O_u^s24rH!/CNl!O_u`s24rH!/UZn!O_ubs6Kcp!/gg*!O_uds3h"W!0$s,!O_ufs3h"W!07*G!O_uhs6Kcp!0I6I!O_ujs6Kcp!0mNM!O_uns6Kcp!1*ZO!O_ups6Kcp!1<fQ!O_uss6Kcp!2'';D!O`!&s3:YR!2KS>!O`!(s3:YR!2]_@!O`!*s3:YR!2okB!O`!,s3:YR!3-"N!O`!.s5F''f!3?.Z!O`!0s5F''f!3Q:\!O`!6s4@@\!42^X!O`!8s4@@\!4DjZ!O`!:s4@@\!4W!\!O`!<s4@@\!4r3_!O`!?s4@@\!5/?a!O`!As4@@\!5AKc!O`!Fs24rH!5ni^!O`!Hs24rH!6+u`!O`!Js24rH!6>,b!O`!Ls6Kcp!6Y?.!O`!Os4@@\!6kK0!O`!Rs6Kcp!71\t!O`!Us4@@\!7_%t!O`!Ys5F''f!8%81!O`!^s3h"W!8IP5!O`!`s3h"W!8dbB!O`!ds6Kcp!9*t''!O`!fs6Kcp!9=+)!O`!hs6Kcp!9O7+!O`"''s3:YR!;lfF!O`",s3h"W!<<)J!O`"2s3h"W!=&SV!O`"7s4@@\!=JkZ!O`"=s6Kcp!>#4_!O`"?s6Kcp!>5@a!O`"As6Kcp!>GLc!O`"Cs6Kcp!>YXe!O`"Js5F''f!?D.!!O`"Ls5F''f!?hF%!O`"Ps5F''f!@%R''!O`"Rs5F''f!@7^)!O`"Us5F''f!A"3&!O`"\s4@@\!AFK*!O`"`s4@@\!Ajc.!O`"gs4@@\!BU85!O`"js24rH!BgD7!O`"ls24rH!C$P9!O`"ns24rH!C6\;!O`0rs3:YR"q:Oa!O`1Vs6Kcp"tT`5!O`1`s5F''f"tfl7!O`1bs5F''f"uZG?!O`1ks5F''f#(us)!O`3Cs4@@\#K-T.!O`6Qs6Kcp#KQl2!O`6ns3:YR#NYp''!\s`ds4@B.!"f1U!\s`fs4@B.!,_b]!\sb(s24so#K-So!\t##s4@B.#KQks!\t#@s3:[$#NYp''")7pRs6Ki&"*ae)")7pes6Ki&",6dA")7pos6Ki&",m3G")7q&s6Ki&".&uR")7q)s5F,q".B2K")7q,s5F,q".T>M")7q.s5F,q".fJO")7q0s5F,q"/#VQ")7q2s5F,q"/5bS")7q4s5F,q"/GnU")7q6s5F,q"/Z%W")7q8s5F,q"/l1Y")7q:s5F,q"0)=[")7q<s5F,q"0;I]")7q>s5F,q"0MU_")7q@s5F,q"0_aa")7qBs5F,q"0qmc")7qDs5F,q"1/$e")7qFs5F,q"1A0g")7qHs5F,q"1S<i")7qJs5F,q"1eHk")7qLs5F,q"2"Tm")7qNs5F,q"24`o")7qPs5F,q"2Flq")7qRs5F,q"2Y#s")7qTs5F,q"2k/u")7qVs5F,q"3(<"")7qXs5F,r",[''E")A")s6Ki/")Iqh"*4Qns4@Ep",6d-"*4R#s4@Ep",[''E"*4R&s4@Ep"-ii<"*4R1s6Ki/".0&S"*4R4s6Ki/".K8V"*4R6s6Ki/".]DX"*4R8s6Ki/".oPZ"*4R:s6Ki/"/,\\"*4R<s6Ki/"/>h^"*4R>s6Ki/"/Pt`"*4R@s6Ki/"/c+b"*4RBs6Ki/"/u7d"*4RDs6Ki/"02Cf"*4RFs6Ki/"0DOh"*4RHs6Ki/"0V[j"*4RJs6Ki/"0hgl"*4RLs6Ki/"1%sn"*4RNs6Ki/"18*p"*4RPs6Ki/"1J6r"*4RRs6Ki/"1\Bt"*4RTs6Ki/"1nO!"*4RVs6Ki/"2+[#"*4RXs6Ki/"2=g%"*4RZs6Ki/"2Os''"*4R\s6Ki/"2b*)"*4R^s6Ki/"2t6+"*4R`s6Ki/"31B-"*F]]s5F-''"*adt"*F]ps5F-''",6d7"*F^%s5F-''",m3="*F^1s5F-''".&uH"*F^4s5F-''".B2K"*F^7s5F-''".T>M"*F^9s5F-''".fJO"*F^;s5F-''"/#VQ"*F^=s5F-''"/5bS"*F^?s5F-''"/GnU"*F^As5F-''"/Z%W"*F^Cs5F-''"/l1Y"*F^Es5F-''"0)=["*F^Gs5F-''"0;I]"*F^Is5F-''"0MU_"*F^Ks5F-''"0_aa"*F^Ms5F-''"0qmc"*F^Os5F-''"1/$e"*F^Qs5F-''"1A0g"*F^Ss5F-''"1S<i"*F^Us5F-''"1eHk"*F^Ws5F-''"2"Tm"*F^Ys5F-''"24`o"*F^[s5F-''"2Flq"*F^]s5F-''"2Y#s"*F^_s5F-''"2k/u"*F^as5F-''"3(<""*F^cs5F-,")Ir''"*t&ns5F-,"+L::"*t''''s6Ki6",R!D"*t''-s6Ki6"-iiP"*t''8s6Ki6".0&I"*t'';s5F-,".K8L"*t''=s5F-,".]DN"*t''?s5F-,".oPP"*t''As5F-,"/,\R"*t''Cs5F-,"/>hT"*t''Es5F-,"/PtV"*t''Gs5F-,"/c+X"*t''Is5F-,"/u7Z"*t''Ks5F-,"02C\"*t''Ms5F-,"0DO^"*t''Os5F-,"0V[`"*t''Qs5F-,"0hgb"*t''Ss5F-,"1%sd"*t''Us5F-,"18*f"*t''Ws5F-,"1J6h"*t''Ys5F-,"1\Bj"*t''[s5F-,"1nNl"*t'']s5F-,"2+Zn"*t''_s5F-,"2=fp"*t''as5F-,"2Orr"*t''cs5F-,"2b)t"*t''es5F-,"2t6!"*t''gs5F-,"31B#"+C?/s6Ki:".&uR"+^Pis4@F)"+L:&"+^Q.s4@F)",R!0"+^Q2s6Ki=",m33"+^Q=s4@F)".&uR"+^Q@s6Ki=".B2U"+^QCs6Ki=".T>W"+^QEs6Ki=".fJY"+^QGs6Ki="/#V["+^QIs6Ki="/5b]"+^QKs6Ki="/Gn_"+^QMs6Ki="/Z%a"+^QOs6Ki="/l1c"+^QQs6Ki="0)=e"+^QSs6Ki="0;Ig"+^QUs6Ki="0MUi"+^QWs6Ki="0_ak"+^QYs6Ki="0qmm"+^Q[s6Ki="1/$o"+^Q]s6Ki="1A0q"+^Q_s6Ki="1S<s"+^Qas6Ki="1eHu"+^Qcs6Ki="2"U""+^Qes6Ki="24a$"+^Qgs6Ki="2Fm&"+^Qis6Ki="2Y$("+^Qks6Ki="2k0*"+^Qms6Ki="3(<,"+^Qos6KiA",[''E",-iCs6KiC")Ir1",?u&s5F-9"+L:D",?u4s7QPM",R!N",?u:s7QPM"-iiZ",?uEs7QPM".0&S",?uHs6KiC".K8V",?uJs6KiC".]DX",?uLs6KiC".oPZ",?uNs6KiC"/,\\",?uPs6KiC"/>h^",?uRs6KiC"/Pt`",?uTs6KiC"/c+b",?uVs6KiC"/u7d",?uXs6KiC"02Cf",?uZs6KiC"0DOh",?u\s6KiC"0V[j",?u^s6KiC"0hgl",?u`s6KiC"1%sn",?ubs6KiC"18*p",?uds6KiC"1J6r",?ufs6KiC"1\Bt",?uhs6KiC"1nO!",?ujs6KiC"2+[#",?uls6KiC"2=g%",?uns6KiC"2Os''",?ups6KiC"2b*)",?urs6KiC"2t6+",?uts6KiC"31B-",I&9s6KiD".&uR",R+qs6KiE"*ae)",R,/s6KiE",6dA",R,9s6KiE",m3G",R,Es6KiE".&uR",R,Hs5F-;".B2K",R,Ks5F-;".T>M",R,Ms5F-;".fJO",R,Os5F-;"/#VQ",R,Qs5F-;"/5bS",R,Ss5F-;"/GnU",R,Us5F-;"/Z%W",R,Ws5F-;"/l1Y",R,Ys5F-;"0)=[",R,[s5F-;"0;I]",R,]s5F-;"0MU_",R,_s5F-;"0_aa",R,as5F-;"0qmc",R,cs5F-;"1/$e",R,es5F-;"1A0g",R,gs5F-;"1S<i",R,is5F-;"1eHk",R,ks5F-;"2"Tm",R,ms5F-;"24`o",R,os5F-;"2Flq",R,qs5F-;"2Y#s",R,ss5F-;"2k/u",R,us5F-;"3(<"",R-"s5F-<")Iqr",[2)s4@F2"+L:0",[27s5F-<",R!:",[2=s5F-<"-iiF",[2Hs5F-<".0&I",[2Ks5F-<".K8L",[2Ms5F-<".]DN",[2Os5F-<".oPP",[2Qs5F-<"/,\R",[2Ss5F-<"/>hT",[2Us5F-<"/PtV",[2Ws5F-<"/c+X",[2Ys5F-<"/u7Z",[2[s5F-<"02C\",[2]s5F-<"0DO^",[2_s5F-<"0V[`",[2as5F-<"0hgb",[2cs5F-<"1%sd",[2es5F-<"18*f",[2gs5F-<"1J6h",[2is5F-<"1\Bj",[2ks5F-<"1nNl",[2ms5F-<"2+Zn",[2os5F-<"2=fp",[2qs5F-<"2Orr",[2ss5F-<"2b)t",[2us5F-<"2t6!",[3"s5F-<"31B#",d8<s6KiG".&uR"-E\Bs6KiM".&uR"-WhDs6KiO".&uR"-`nEs6KiP".&uR"-itFs6KiQ".&uR".B=]s4@FQ".T>C"0)Hms6Kj,".T>W"jI#Xs25)c!"f1s"jI#Zs25)c!$qU("jI#os5F4,!%@lm"jI#rs2bGh!%S$."jI#ts4@M"!%e00"jI$"s2bGh!&+At"jI$$s4@M"!&=N+"jI$&s5F4,!&X`8"jI$*s6Kp6!&sr''"jI$-s3:em!'':/*"jI$/s3:em!''L;,"jI$1s3:em!(?k\"jI$=s7QW@!)!:b"jI$As6Kp6!)W^T"jI$Es5F4,!)rpk"jI$Is6Kp6!*9-n"jI$Ks7QW@!*K9f"jI$Ms5F4,!*]E^"jI$Os5F4,!*oQ`"jI$Qs5F4,!,_c&"jI$qs6Kp6!.t71"jI%"s5F4,!/1C3"jI%$s5F4,!/CO5"jI%&s5F4,!/U[7"jI%(s5F4,!/gg%"jI%*s3:em!0$s''"jI%,s3:em!07*="jI%.s5F4,!0I6?"jI%0s5F4,!0mNC"jI%4s5F4,!1*ZE"jI%6s5F4,!1<fG"jI%9s5F4,!2'';:"jI%As7QW@!2KSf"jI%Cs7QW@!2]_h"jI%Es7QW@!2okj"jI%Gs7QW@!42^b"jI%Zs6Kp6!5/?u"jI%\s6Kp6!5AL""jI%^s5F4,!5\]p"jI%as5F4,!5nj1"jI%cs5F4,!6,!3"jI%es5F4,!6>-5"jI%gs5F4,!6Y?$"jI%ks5F4,!7(W("jI%ss3:em!8@Iu"jI&&s3:em!8db8"jI&*s5F4,!9*tO"jI&,s5F4,!9=+Q"jI&.s5F4,!9O7S"jI&Bs2bGh!;lfA"jI&Gs3:em!<<)E"jI&Ms3:em!=&S`"jI&Rs5F4,!=Jkd"jI&Xs5F4,!>,:j"jI&\s5F4,!>PRn"jI&es6Kp6!?D.+"jI&gs7QW@!?hF/"jI&ks7QW@!@%R1"jI&ms7QW@!@7]j"jI&os7QW@!@Iil"jI&us6Kp6!A4?<"jI''$s6Kp6!AXW@"jI''(s6Kp6!BC,)"jI''.s5F4,!BU8+"jI''0s3:em!BgDA"jI''2s3:em!C$PC"jI''4s3:em!C6\E"jI58s2bGh"q:Ok"jI5qs7QW@"tT`?"jI6&s7QW@"tflA"jI6(s7QW@"uZG+"jI60s7QW@"ulS-"jI62s7QW@#(us$"jI7^s3:em#.jio"jI:is25)c#KHe^"jI:ms25)c#NPjN"jI;5s6Kp6$#BS7"jI?is7QW@$#]e:"jI?ls7QWA!"]+r"jR)[s6Kp7!.Fn6"jR@js4@M##KHer"jR@ns4@M##NYpO"k<Sus4@M*!%.a4"k<T$s3h/%!%Irn"k<T&s6Kp>!%\*%"k<T(s5F44!&";s"k<T+s3h/%!&4H*"k<T-s4@M*!&FT@"k<T0s6Kp>!&jlN"k<T3s4@M*!''1))"k<T6s3:eu!''C55"k<T8s3:eu!''UA7"k<T@s6Kp>!(m4W"k<TFs6Kp>!)<LQ"k<TLs5F44!)`dU"k<TOs6Kp>!*0''c"k<TRs6Kp>!*B3e"k<TTs5F44!*T?q"k<TVs7QWH!*fK_"k<TXs7QWH!+#Wa"k<U)s4@M*!/(=("k<U+s4@M*!/:I*"k<U-s4@M*!/LU,"k<U/s4@M*!/^aB"k<U1s3h/%!/pm+"k<U3s3h/%!0.$-"k<U5s5F44!0@0>"k<U7s5F44!0R<@"k<U;s6Kp>!1!TN"k<U=s6Kp>!13`P"k<U?s6Kp>!1NrS"k<UFs3:eu!2BM["k<UJs6Kp>!2TY]"k<ULs6Kp>!2fe_"k<UNs6Kp>!3#qa"k<UZs5F44!5&9j"k<Ucs5F44!58El"k<Ues5F44!5JR-"k<Uhs7QWH!5ecg"k<Ujs6Kp>!6"oi"k<Uls6Kp>!65&k"k<Uns6Kp>!6G3,"k<Uqs6Kp>!6kK0"k<Uus6Kp>!7_%t"k<V,s3h/%!8RV''"k<V0s6Kp>!9!nD"k<V3s6Kp>!94%F"k<V5s6Kp>!9F1H"k<V7s6Kp>!;QT>"k<VMs3h/%!<)rH"k<VQs3h/%!<`AN"k<VXs5F44!=8_b"k<V\s5F44!=o.r"k<Vbs6Kp>!>>G!"k<Vfs6Kp>!?;(*"k<Vns7QWH!?M4,"k<Vrs7QWH!?qL0"k<Vts7QWH!@.X2"k<W!s4@M*!@@d4"k<W#s4@M*!A"30"k<W*s5F44!AFK4"k<W.s5F44!Ajc8"k<W5s3:eu!BL2R"k<W7s3:eu!B^>6"k<W9s5F44!BpJ8"k<W;s5F44!C-V:"k<W=s5F44"mQ''4"k<ecs5F44"sX*6"k<f-s7QWH"t]f@"k<f/s7QWH"torB"k<f7s4@M*"ucMJ"k<f9s4@M*"uuYL"k<g0s3h/%#.acZ"k<ggs7QWH$#BS-"k<oqs6Kp>$#]e0"k<ots6Kp?!(?k\"kEZCs5sR:!([(U"kEZEs6Kp?!(m4a"kEZGs7QWI!)*@Y"kEZIs6Kp?!)<Lj"kEZLs6Kp?!)W^m"kEZNs8)uN!)ij["kEZPs7QWI!*''!b"kEZRs7QWI!*9-d"kEZTs7QWI!*K9p"kEZVs6Kp?!*]Eh"kEZXs6Kp?!*oQj"kEZZs7QWI!2BMe"kE[Ks7QWI!2TYg"kE[Ms7QWI!2fei"kE[Os7QWI!3#qk"kE[Qs5sR:!36(c"kE[Ss6Kp?!3H4e"kE[Us6Kp?!3cFh"kE[[s8)uN!4;dh"kE[]s5sR:!4Mpj"kE[_s5sR:!4`''l"kE[cs7QWI!5/@*"kE[es7QWI!5AL,"kE[gs6Kp?!5\^%"kE[ks7QWI!6,!3"kE[os7QWI!6bE*"kE\"s5sR:!7Ci5"kE\(s6Kp?!8%8;"kE\4s7QWI!9=+Q"kE\8s7QWI!:g*U"kE\Ys8)uN!=8`&"kE\]s8)uN!>#4n"kE\ds5sR:!>GLr"kE\hs5sR:!?;(4"kE\ps6Kp?!?qL0"kE]!s6Kp?!@@d>"kE])s7QWI!A4?F"kE]-s7QWI!AXWJ"kE]1s7QWI!BL2H"kE]:s7QWI!C$PW"kE]>s7QWI!]''fL"kEkFs6Kp?"sX*@"kEl/s6Kp?"torB"kEl9s7QWI"uuYV"kEmhs6Kp?$#BS7"kEurs7QWI$#T_9"kEuts7QWI$#fk;"mH!ts25**!"f1i"mH"!s25**!$qTs"mH"6s5F4H!%@lm"mH"9s2bH/!%S$."mH";s4@M>!%e00"mH"=s5F4H!&";n"mH"?s3:f4!&4H*"mH"As4@M>!&FT6"mH"Ds5F4H!&jl0"mH"Is6KpR!'':/H"mH"Ks5F4H!''L;J"mH"Ms5F4H!(?kH"mH"Vs5F4H!([(K"mH"Xs6KpR!(m4W"mH"Zs5F4H!)<L["mH"`s3:f4!)`dA"mH"bs5F4H!)rpW"mH"ds5F4H!*0''O"mH"fs4@M>!*B3e"mH"hs3:f4!*T?q"mH"js7QW\!*fKU"mH"ls7QW\!+#WM"mH#(s5F4H!.Fmm"mH#=s4@M>!/(=("mH#?s4@M>!/:I*"mH#As4@M>!/LU,"mH#Cs4@M>!/^a8"mH#Es3:f4!/pm&"mH#Gs3:f4!0.$("mH#Is5F4H!0@0>"mH#Ks5F4H!0R<@"mH#Os5F4H!1!TD"mH#Qs5F4H!13`F"mH#Ss5F4H!1NrI"mH#Zs6KpR!2BMQ"mH#^s5F4H!2TYS"mH#`s5F4H!2feU"mH#bs5F4H!3#qW"mH#ds5F4H!36(c"mH#fs6KpR!3H4e"mH#hs6KpR!4)Xa"mH#ns3:f4!4;dc"mH#ps5F4H!4Mpe"mH#rs5F4H!4`''g"mH#us5F4H!5&9V"mH$"s3:f4!58EX"mH$$s3:f4!5JR-"mH$''s7QW\!5ecg"mH$)s5F4H!6"oi"mH$+s5F4H!65&k"mH$-s5F4H!6G3""mH$0s5F4H!6bE%"mH$2s5F4H!7(W("mH$5s5F4H!7Ci+"mH$:s3:f4!7h,9"mH$=s6KpR!8@Iu"mH$As6KpR!8RV""mH$Ds5F4H!9!n:"mH$Gs5F4H!94%<"mH$Is5F4H!9F1>"mH$Ks5F4H!;QT9"mH$as3:f4!<)rC"mH$es3:f4!<`AI"mH$ls3:f4!=8_N"mH$ps3:f4!=o.h"mH$us5F4H!>,:j"mH%"s5F4H!>>Fl"mH%$s5F4H!>PRn"mH%&s5F4H!?;''k"mH%-s4@M>!?M3m"mH%1s4@M>!?qKq"mH%3s4@M>!@.Ws"mH%6s6KpR!A"2q"mH%>s3:f4!AFJu"mH%Bs3:f4!Ajc$"mH%Is6KpR!BL2R"mH%Ks6KpR!B^>@"mH%Ms3:f4!BpJB"mH%Os3:f4!C-VD"mH%Qs3:f4"mQ''/"mH4"s3:f4"sX*,"mH4As4@M>"t]f,"mH4Cs4@M>"tor."mH4Ls6KpR"uuYL"mH5Ds3:f4#.ad#"mH6&s7QW\#NPjD"mH9Qs3:f4$#BS-"mH>0s6KpR$#]e0"mH>3s6KpS!"]+J"mQ(!s4@M?!"o7L"mQ))s4@M?!.Fn6"mQ?Qs4@M?#NYpO"mu@$s5F4M!"f1_"mu@&s5F4M!(?kW"mu@[s6KpW!([(Z"mu@]s7QWa!(m4f"mu@_s7$9\!)*@T"mu@as5sRR!)<L["mu@ds5sRR!)W^Y"mu@fs5sRR!)ij`"mu@hs7QWa!*''!g"mu@js6KpW!*9-_"mu@ls8)uf!*K9f"mu@ns5F4M!*]E^"mu@ps6KpW!*oQ`"muA-s4@MC!.Fn,"muAbs7$9\!2KSa"muAds7$9\!2]_c"muAfs7$9\!2oke"muAhs7$9\!3-"b"muAjs7QWa!3?.n"muAls7QWa!3Q:p"muAos5sRR!42^g"muAts6KpW!4Djn"muB!s6KpW!4W!p"muB#s6KpW!5&9t"muB''s6KpW!58F!"muB)s6KpW!5JQn"muB,s5F4M!5nj,"muB0s7$9\!6>-0"muB6s6KpW!71]3"muB<s7$9\!7h,C"muBBs7QWa!9*tJ"muBNs7$9\!9O7N"muB\s5sRR!=&Se"muBss5sRR!=Jki"muC%s6KpW!>5@u"muC)s6KpW!>YY$"muC1s6KpW!?M4''"muC7s5sRR!@.X-"muC;s8)uf!A"3:"muCCs6KpW!AFK>"muCGs6KpW!AjcB"muCOs5F4M"n)ER"muR=s7QWa"t]f;"muRIs5sRR"ucMY"muRSs8)uf#.jio"muW5s25*/#KHe^"muW9s25*/#NPj:"muWVs5F4M$#BS<"mu\5s8)uf$#T_>"mu\7s8)uf$#fk@"q1JBs5F4k!"f1_"q1JDs5F4k!(?k\"q1K$s8*!/!([(_"q1K&s8*!/!(m4a"q1K(s7QX*!)*@Y"q1K*s6Kpu!)<L`"q1K-s6Kpu!)W^^"q1K/s6Kpu!)ijo"q1K1s8*!/!*''!l"q1K3s7$:%!*9-i"q1K5s7QX*!*K9k"q1K7s4mkf!*]EY"q1K9s7$:%!*oQ["q1KKs4@Ma!.Fn,"q1L+s7QX*!2KSf"q1L-s7QX*!2]_h"q1L/s7QX*!2okj"q1L1s7QX*!3-"q"q1L3s8*!/!3?.s"q1L5s8*!/!3Q:u"q1L8s6Kpu!42^l"q1L=s8*!/!4Dk("q1L?s8*!/!4W"*"q1LAs8*!/!5&:$"q1LEs7$:%!58F&"q1LGs7$:%!5JQi"q1LJs4mkf!5nj1"q1LNs7QX*!6>-5"q1LTs8*!/!71]B"q1LZs7QX*!7h,H"q1L`s8*!/!9*tO"q1Lls7QX*!9O7S"q1M%s6Kpu!=&Sj"q1M<s6Kpu!=Jkn"q1MCs8*!/!>5A/"q1MGs8*!/!>YY3"q1MOs7$:%!?M41"q1MUs7$:%!@.X7"q1MYs7QX*!A"3?"q1Mas7$:%!AFKC"q1Mes7$:%!AjcG"q1Mms4mkf"n)EW"q1\[s8*!/"t]fE"q1\gs7$:%"ucMT"q1\qs7QX*#.jij"q1aSs25*M#KHe^"q1aWs25*M#NPj:"q1ats5F4k$#BS7"q1fSs7QX*$#T_9"q1fUs7QX*$#fk;"sEsWs0)\N!"f1U"sEsYs0)\N!$qT_"sEsns6Kq5!%@lr"sEsqs3:fl!%S$8"sEsss4@N!!%e0:"sEsus4@N!!&";s"sEt"s3h/q!&4H*"sEt$s4@N!!&FT@"sEt''s6Kq5!&jl:"sEt*s5F5+!''1)3"sEt-s4@N!!''C5!"sEt/s4@N!!''UA#"sEt7s3:fl!(R"@"sEt:s4@N!!(d.L"sEt=s3:fl!)W^J"sEtDs4@N!!)ijL"sEtFs6Kq5!*''!N"sEtHs5F5+!*9-Z"sEtKs4@N!!*fKU"sEtPs4@N!!,_b]"sEtps25*b!.t6h"sEu!s25*b!/1Bj"sEu#s25*b!/CNl"sEu%s25*b!/UZn"sEu''s6Kq5!/gg*"sEu)s3h/q!0$s,"sEu+s3h/q!07*G"sEu-s6Kq5!0I6I"sEu/s6Kq5!0mNM"sEu3s6Kq5!1*ZO"sEu5s6Kq5!1<fQ"sEu8s6Kq5!2'';D"sEu@s3:fl!2KS>"sEuBs3:fl!2]_@"sEuDs3:fl!2okB"sEuFs3:fl!3-"N"sEuHs5F5+!3?.Z"sEuJs5F5+!3Q:\"sEuPs4@N!!42^X"sEuRs4@N!!4DjZ"sEuTs4@N!!4W!\"sEuVs4@N!!4r3_"sEuYs4@N!!5/?a"sEu[s4@N!!5AKc"sEu`s25*b!5ni^"sEubs25*b!6+u`"sEuds25*b!6>,b"sEufs6Kq5!6Y?."sEuis4@N!!6kK0"sEuls6Kq5!71\t"sEuos4@N!!7_%t"sEuss5F5+!8%81"sF!#s3h/q!8IP5"sF!%s3h/q!8dbB"sF!)s6Kq5!9*t''"sF!+s6Kq5!9=+)"sF!-s6Kq5!9O7+"sF!As3:fl!;lfF"sF!Fs3h/q!<<)J"sF!Ls3h/q!=&SV"sF!Qs4@N!!=JkZ"sF!Ws6Kq5!>#4_"sF!Ys6Kq5!>5@a"sF![s6Kq5!>GLc"sF!]s6Kq5!>YXe"sF!ds5F5+!?D.!"sF!fs5F5+!?hF%"sF!js5F5+!@%R''"sF!ls5F5+!@7^)"sF!os5F5+!A"3&"sF"!s4@N!!AFK*"sF"%s4@N!!Ajc."sF",s4@N!!BU85"sF"/s25*b!BgD7"sF"1s25*b!C$P9"sF"3s25*b!C6\;"sF07s3:fl"q:Oa"sF0ps6Kq5"tT`5"sF1%s5F5+"tfl7"sF1''s5F5+"uZG?"sF10s5F5+#(us)"sF2]s4@N!#K-T."sF5ks6Kq5#KQl2"sF63s3:fl#NYp''"sO$Xs6Kq6!"o7t"sO%8s7QX@!(R"c"sO%=s7$:;!)!:b"sO%?s7$:;!)3F_"sO%Cs7$:;!)W^^"sO%Es6Kq6!)ijo"sO%Gs8*!E!*0''m"sO%Js7$:;!*B3j"sO%Ls7QX@!*T?q"sO%Ns7QX@!*fKd"sO%Ps7QX@!+#Wu"sO%qs6Kq6!2BMe"sO&Bs7QX@!2TYg"sO&Ds7QX@!2fei"sO&Fs7QX@!3#qk"sO&Hs8*!E!3cFm"sO&Rs6Kq6!4;e''"sO&Ts8*!E!4Mq)"sO&Vs8*!E!4`(+"sO&Zs7QX@!5/@*"sO&\s7QX@!5AL,"sO&^s7QX@!5\^/"sO&bs7QX@!6,!3"sO&fs7QX@!6bE>"sO&ns8*!E!9*tO"sO''-s7QX@!9O7S"sO'';s7$:;!=&Sj"sO''Rs6Kq6!=Jkn"sO''Ys8*!E!>5A/"sO'']s8*!E!>YY3"sO''es7QX@!?M41"sO''ks7$:;!@.X7"sO''os7$:;!A"3D"sO("s7QX@!AFKH"sO(&s7QX@!AjcL"sO(.s7QX@!BgDU"sO(3s7QX@!C6\Y"sO+(s7QX@"n)E\"sO6qs8*!E"t]fE"sO7(s7$:;"ucMO"sO72s7$:;#.jj."sO;is4@N"#KHer"sO;ms4@N"#NYpO"sO@hs7$:;$#KY3"sO@js7$:;$#]e5"sO@ls7$:D!"]+T"tKZbs6Kq?!"o7V"tK[!s5F55!%.a4"tK[%s4ml0!%Is#"tK[''s6Kq?!%\*/"tK[)s6Kq?!&"<("tK[,s4ml0!&4H4"tK[.s5F55!&FT@"tK[1s6Kq?!&jlN"tK[4s4@N+!''1))"tK[7s3:g!!''C5+"tK[9s3:g!!''UA-"tK[Fs7QXI!)<Le"tK[Ms6Kq?!)`d_"tK[Ps7QXI!*0''c"tK[Ts7QXI!*K9a"tK[Vs6Kq?!*]Eh"tK[Xs4@N+!*oQj"tK[Zs6Kq?!,_c&"tK\%s5F55!.t71"tK\+s5F55!/1C3"tK\-s5F55!/CO5"tK\/s5F55!/U[7"tK\1s6Kq?!/gg4"tK\3s4ml0!0$s6"tK\5s4ml0!07*G"tK\7s6Kq?!0I6I"tK\9s6Kq?!0mNM"tK\=s6Kq?!1*ZO"tK\?s6Kq?!1<fQ"tK\Bs6Kq?!2'';:"tK\[s6Kq?!5&9o"tK\ds5sS:!58Eq"tK\fs5sS:!5JR#"tK\is6Kq?!5ecq"tK\ls5F55!65&u"tK\ps6Kq?!6Y?."tK\ts6Kq?!7(W2"tK]''s4ml0!8@J/"tK]/s4ml0!8dbB"tK]3s6Kq?!94%F"tK]7s6Kq?!;QTH"tK]Ns4ml0!<)rR"tK]Rs4ml0!<`AX"tK]Ys6Kq?!=8_l"tK]]s6Kq?!=o.r"tK]cs6Kq?!>>G!"tK]gs6Kq?!?;(*"tK]os7QXI!?hF9"tK]us7QXI!@7]t"tK^#s7QXI!@Ij!"tK^)s5sS:!A4?7"tK^-s5sS:!AXW;"tK^1s5sS:!BC,)"tK^7s6Kq?!BU8+"tK^9s3:g!!BgDK"tK^;s3:g!!C$PM"tK^=s3:g!!C6\O"tKlAs4@N+"q:Ou"tKm%s7QXI"tT`I"tKm0s7QXI"uZG5"tKm9s7QXI"ulS7"tKm;s7QXI#(us3"tKngs3:g!#.jj$"tKqrs25*l#KHe^"tKr!s25*l#NPjN"tKr>s5F55$#BS7"tL!rs7QXI$#]e:"tL!us7QXJ!"]+^"tT`cs4@N,!"o7`"tTaBs7QXJ!(R"^"tTaEs8*!O!(m4W"tTaHs7QXJ!)*@Y"tTaJs6Kq@!)<L["tTaMs6Kq@!)W^^"tTaOs6Kq@!)ijj"tTaQs7QXJ!*''!q"tTaSs6Kq@!*9-n"tTaUs6Kq@!*K9k"tTaWs6Kq@!*]Eh"tTaYs4@N,!*oQj"tTaks4@N,!.Fn,"tTbKs7QXJ!2KSf"tTbMs7QXJ!2]_h"tTbOs7QXJ!2okj"tTbQs7QXJ!3-"l"tTbXs6Kq@!42^l"tTb]s7QXJ!4Dk#"tTb_s7QXJ!4W"%"tTbas7QXJ!5&:$"tTbes7$:E!58F&"tTbgs7$:E!5JR#"tTbjs6Kq@!5nj1"tTbns7QXJ!6>-5"tTbts7QXJ!71]="tTc%s8*!O!9*tO"tTc7s7QXJ!9O7S"tTcEs6Kq@!=&Sj"tTc\s6Kq@!=Jkn"tTccs7QXJ!>5A*"tTcgs7QXJ!>YY."tTcos6Kq@!?M46"tTcus7QXJ!@.X<"tTd$s6Kq@!A"3?"tTd,s7$:E!AFKC"tTd0s7$:E!AjcG"tTd8s6Kq@"n)EW"tTs&s7QXJ"t]fJ"tTs2s7QXJ"ucMJ"tTs<s6Kq@#.jj$"tU"ss1/Cc#KHeT"tU#"s1/Cc#NPj:"tU#?s5F56$#BS-"tU''ss6Kq@$#T_/"tU''us6Kq@$#fk1"t]fcs3:g#!"f1s"t]fes3:g#!$qU("t]g%s6KqA!%@m''"t]g(s4@N-!%S$8"t]g*s5F57!%e0:"t]g-s4@N-!&+B."t]g/s5F57!&=N5"t]g1s6KqA!&X`B"t]g5s7QXK!&sr1"t]g8s3:g#!'':/*"t]g:s3:g#!''L;,"t]g<s3:g#!(m4a"t]gLs7QXK!)W^^"t]gPs6KqA!)rpk"t]gTs6KqA!*B3o"t]gWs5sS<!*T?g"t]gYs6KqA!*fKU"t]g[s6KqA!+#Wk"t]gls6KqA!.Fn,"t]h,s5F57!/(=2"t]h.s5F57!/:I4"t]h0s5F57!/LU6"t]h2s5F57!/^aB"t]h4s4ml2!/pm5"t]h6s4ml2!0.$7"t]h8s6KqA!0@0H"t]h:s6KqA!0R<J"t]h>s6KqA!1!TN"t]h@s6KqA!13`P"t]hBs6KqA!1NrS"t]hIs3:g#!42^l"t]hes5sS<!5/?p"t]hgs5sS<!5AKr"t]his6KqA!5\^%"t]hls5F57!6"os"t]hps5F57!6G3,"t]hts6KqA!6kK0"t]i#s6KqA!7_&)"t]i/s4ml2!8RV1"t]i3s6KqA!9!nD"t]i7s6KqA!9F1H"t]iMs4@N-!;lfP"t]iRs4ml2!<<)T"t]iXs4ml2!=&Sj"t]i]s6KqA!=Jkn"t]ics6KqA!>,:t"t]igs6KqA!>PS#"t]ips6KqA!?D.5"t]ius7QXK!@%R;"t]j$s4@N-!@@d>"t]j&s4@N-!A"35"t]j-s5sS<!AFK9"t]j1s5sS<!Ajc="t]j8s3:g#!BL2H"t]j:s3:g#!B^>,"t]j<s6KqA!BpJ."t]j>s6KqA!C-V0"t]j@s6KqA"mQ''>"t^#fs6KqA"sX*@"t^$0s7QXK"tflK"t^$:s4@N-"ucMT"t^$<s4@N-"uuYV"t^%3s4ml2#.acZ"t^%js6KqA#K-S["t^)"s25*n#KQk_"t^)?s6KqA#NYpE"t^-ss7QXK$#KY8"t^.!s7QXK$#fk;"tflds4@N.!"f1_"tflfs4@N.!(?k\"tfmFs7QXL!([(d"tfmIs6KqB!)!:b"tfmKs6KqB!)3FZ"tfmMs6KqB!)NX]"tfmPs6KqB!)`d_"tfmRs7QXL!)rpk"tfmTs8*!Q!*0''c"tfmVs7QXL!*B3e"tfmXs7$:G!*T?g"tfmZs6KqB!*fKU"tfm\s6KqB!,_bg"tfn(s5F58!2BMe"tfnNs7QXL!2TYg"tfnPs7QXL!2fei"tfnRs7QXL!3#qk"tfnTs7QXL!3cFh"tfn^s6KqB!4;e""tfn`s7QXL!4Mq$"tfnbs7QXL!4`(&"tfnfs7$:G!5/@%"tfnhs7$:G!5AL''"tfnjs6KqB!5\^%"tfnns7QXL!6,!3"tfnrs7QXL!6bE9"tfo%s7QXL!7CiD"tfo7s7QXL!9=+Q"tfo;s7QXL!:g*U"tfo\s6KqB!=8_l"tfo`s6KqB!>#5("tfogs7QXL!>GM,"tfoks7QXL!?;(*"tfoss7QXL!?qL:"tfp$s7QXL!@@d4"tfp,s7$:G!A4?A"tfp0s7$:G!AXWE"tfp4s7$:G!BL2H"tg)Is6KqB"sX*@"tg*2s7QXL"torL"tg*<s6KqB"uuYL"tg+ks6KqB#K-SQ"tg/#s1/Ce#KQkU"tg/@s4@N.#NYpE"tg3ts6KqB$#KY."tg4!s6KqB$#]e0"tg4#s6KqI!"]+T"uQAls4@N5!"o7V"uQB+s3:g+!%.`u"uQB/s4ml:!%Is#"uQB1s4@N5!%\*/"uQB3s6KqI!%n6''"uQB5s4@N5!&+B."uQB7s5F5?!&=N5"uQB9s4@N5!&X`."uQB=s4@N5!''1)Q"uQBAs7QXS!''C55"uQBCs7QXS!''UA7"uQBKs4@N5!(R"@"uQBNs4@N5!(d.Q"uQBPs6KqI!)!:D"uQBWs4@N5!)`dK"uQBYs4@N5!)rpW"uQB[s4@N5!*0''O"uQB]s4@N5!*B3e"uQB_s4@N5!*T?g"uQBas6KqI!*fK_"uQBcs6KqI!+#WW"uQBts4@N5!.Fn""uQC4s3:g+!/(<s"uQC6s3:g+!/:Hu"uQC8s3:g+!/LU""uQC:s3:g+!/^a."uQC<s4ml:!/pm5"uQC>s4ml:!0.$7"uQC@s6KqI!0@0H"uQCBs6KqI!0R<J"uQCFs4@N5!1!T:"uQCHs4@N5!13`<"uQCJs4@N5!1Nr?"uQCQs7QXS!2BMG"uQCUs4@N5!2TYI"uQCWs4@N5!2feK"uQCYs4@N5!3#qM"uQC[s4@N5!36(^"uQC]s5sSD!3H4`"uQC_s5sSD!4)XW"uQCes4@N5!4;dY"uQCgs4@N5!4Mp["uQCis4@N5!4`'']"uQCls4@N5!5&9`"uQCns4@N5!58Eb"uQCps4@N5!5JR#"uQCss6KqI!5ec]"uQCus4@N5!6"o_"uQD"s4@N5!65&a"uQD$s4@N5!6G2m"uQD''s4@N5!6bDp"uQD)s4@N5!7(Vs"uQD,s4@N5!7Ci!"uQD1s4ml:!7h,4"uQD4s5sSD!8@J/"uQD8s5sSD!8RV1"uQD;s4@N5!9!n0"uQD>s4@N5!94%2"uQD@s4@N5!9F14"uQDBs4@N5!;QTH"uQDXs4ml:!<)rR"uQD\s4ml:!<`AX"uQDcs4@N5!=8_X"uQDgs4@N5!=o.^"uQDls4@N5!>,:`"uQDns4@N5!>>Fb"uQDps4@N5!>PRd"uQDrs4@N5!?;''k"uQE$s4@N5!?M3m"uQE(s4@N5!?qKq"uQE*s4@N5!@.Ws"uQE-s6KqI!A"3&"uQE5s4@N5!AFK*"uQE9s4@N5!Ajc."uQE@s7QXS!BL2H"uQEBs7QXS!B^>6"uQEDs4@N5!BpJ8"uQEFs4@N5!C-V:"uQEHs4@N5"mQ''>"uQSns4@N5"sX*,"uQT8s4@N5"t]f,"uQT:s4@N5"tor."uQTCs6KqI"uuYL"uQU;s4ml:#.ad-"uQUrs6KqI#NPj:"uQYHs4@N5$#BS-"uQ^''s6KqI$#]e0"uQ^*s6KqJ!"f1_"uZHLs7QXT!(R"O"uZHOs7$:O!(d.e"uZHQs7$:O!)!:b"uZHSs7$:O!)3F_"uZHWs7$:O!)W^h"uZHYs7QXT!)ij["uZH\s7$:O!*0''m"uZH^s7QXT!*B3j"uZHcs6KqJ!,_bg"uZI0s4@N6!2BMe"uZIVs7QXT!2TYg"uZIXs7QXT!2fei"uZIZs7QXT!3#qk"uZI\s5sSE!36(r"uZI^s8*!Y!3H4t"uZI`s8*!Y!3cFm"uZIfs7QXT!4;dh"uZIhs5sSE!4Mpj"uZIjs5sSE!4`''l"uZJ!s7QXT!6,!3"uZJ%s7QXT!6bE*"uZJ-s5sSE!7Ci:"uZJ3s8*!Y!8%8J"uZJ?s7QXT!9=+Q"uZJCs7QXT!:g*Z"uZJds7QXT!=8`!"uZJhs7QXT!>#4n"uZJos5sSE!>GLr"uZJss5sSE!?;(4"uZK&s7QXT!?qL:"uZK,s7QXT!@@d9"uZYQs7$:O"t]fJ"uZZ<s7QXT"ucMO"uZZFs7$:O#NPj:"uZ_Is4@N6$#BS2"uZd(s7$:O$#T_4"uZd*s7$:O$#fk6"ucMms3:g-!"f1_"ucMos3:g-!$qTi"ucN/s4@N7!%@m''"ucN2s4@N7!%S$$"ucN4s5F5A!%e0:"ucN6s4@N7!&"<("ucN8s4ml<!&4H4"ucN:s5F5A!&FT,"ucN=s4@N7!&jl0"ucNBs7QXU!'':/R"ucNDs4@N7!''L;T"ucNFs4@N7!(?k>"ucNOs4@N7!([(A"ucNQs5sSF!(m4W"ucNSs4@N7!)W^J"ucNZs4@N7!)ijL"ucN\s5F5A!*''!N"ucN^s4@N7!*9-P"ucN`s6KqK!*K9R"ucNbs6KqK!*]Eh"ucNds5F5A!*oQj"ucNfs4@N7!,_bg"ucO1s4@N7!.t6r"ucO7s3:g-!/1Bt"ucO9s3:g-!/CO!"ucO;s3:g-!/U[#"ucO=s4@N7!/gg4"ucO?s4ml<!0$s6"ucOAs4ml<!07*G"ucOCs6KqK!0I6I"ucOEs6KqK!0mN9"ucOIs4@N7!1*Z;"ucOKs4@N7!1<f="ucONs4@N7!2'';b"ucOVs4@N7!2KSH"ucOXs4@N7!2]_J"ucOZs4@N7!2okL"ucO\s4@N7!3-"N"ucO^s5sSF!3?._"ucO`s5sSF!3Q:a"ucOfs4@N7!42^X"ucOhs4@N7!4DjZ"ucOjs4@N7!4W!\"ucOls4@N7!4r3_"ucOos4@N7!5/?a"ucOqs4@N7!5AKc"ucOss6KqK!5\^%"ucP!s3:g-!5nih"ucP#s3:g-!6+uj"ucP%s3:g-!6>,l"ucP''s4@N7!6Y>o"ucP*s4@N7!6kJq"ucP-s4@N7!71\t"ucP0s4@N7!7_&)"ucP4s5sSF!8%86"ucP9s4ml<!8IP:"ucP;s4ml<!8db."ucP?s4@N7!9*t1"ucPAs4@N7!9=+3"ucPCs4@N7!9O75"ucPWs4@N7!;lfP"ucP\s4ml<!<<)T"ucPbs4ml<!=&SV"ucPgs4@N7!=JkZ"ucPms4@N7!>#4_"ucPos4@N7!>5@a"ucPqs4@N7!>GLc"ucPss4@N7!>YXe"ucQ%s4@N7!?D-l"ucQ''s4@N7!?hEp"ucQ+s4@N7!@%Qr"ucQ-s4@N7!@@d4"ucQ5s4@N7!A4?("ucQ9s4@N7!AXW,"ucQ=s4@N7!BC,Q"ucQCs6KqK!BU8S"ucQEs4@N7!BgD7"ucQGs4@N7!C$P9"ucQIs4@N7!C6\;"uc_Ms4@N7"q:Oa"uc`1s5F5A"tT`+"uc`;s4@N7"tfl-"uc`=s4@N7"ucMJ"uc`Gs6KqK#(us3"ucass7QXU#.jj$"uceIs4@N7#NYp;"ucj(s6KqK$#KY."ucj+s6KqK$#fk1"ulSos4@N8!(?k\"ulTPs5sSG!([(Z"ulTRs8*![!(m4\"ulTTs7QXV!)*@^"ulTVs7$:Q!)NXb"ulTZs7QXV!)`di"ulT\s5sSG!*''!g"ulT_s7QXV!*9-n"ulTas7$:Q!*fKi"ulU"s4@N8!.Fn""ulUWs7QXV!2KSf"ulUYs7QXV!2]_h"ulU[s7QXV!2okj"ulU]s7QXV!3-"]"ulU_s8*![!3?.s"ulUas8*![!3Q:u"ulUds7$:Q!42_!"ulUis5sSG!4Dji"ulUks5sSG!4W!k"ulUms5sSG!5nj1"ulV%s7QXV!6>-5"ulV+s5sSG!71]."ulV1s7$:Q!7h,H"ulV7s8*![!9*tO"ulVCs7QXV!9O7S"ulVQs7$:Q!=&St"ulVhs7QXV!=Jl#"ulVos5sSG!>5@p"ulVss5sSG!>YXt"ulW&s7QXV!?M46"ulW,s7QXV!@.X<"ulW0s7$:Q"n)E\"ulf<s7QXV"torL"ulfFs7$:Q"uuYQ"ulkJs4@N8#NYp;"ulp)s7$:Q$#KY3"ulp+s7$:Q$#]e5"ulp-s7$;G!$qU(#(ln&s4@O.!%@lr#(ln)s3:h$!%S$$#(ln+s4@O.!%e00#(ln-s6KrB!&";s#(ln/s3h1)!&4H*#(ln1s4@O.!&FT,#(ln4s4@O.!&jl&#(ln7s6KrB!''1))#(ln:s3:h$!''C5?#(ln<s3:h$!''UAA#(lnDs5F68!(R"J#(lnGs5F68!(d.V#(lnIs5F68!)!:N#(lnMs5F68!)W^J#(lnQs4@O.!)ijV#(lnSs6KrB!*''!X#(lnUs5F68!*9-d#(lnWs5F68!*K9M#(lnYs4@O.!*]ET#(ln[s5F68!*oQV#(ln]s4@O.!.t71#(lo.s5F68!/1C3#(lo0s5F68!/CO5#(lo2s5F68!/U[7#(lo4s4@O.!/gg*#(lo6s3h1)!0$s,#(lo8s3h1)!07*=#(lo:s5F68!0I6?#(lo<s5F68!0mN9#(lo@s4@O.!1*Z;#(loBs4@O.!1<f=#(loEs4@O.!2'';:#(loMs5F68!2KSR#(loOs5F68!2]_T#(loQs5F68!2okV#(loSs5F68!3-"X#(loUs6KrB!3?.d#(loWs6KrB!3Q:f#(lo]s5F68!42^X#(lo_s5F68!4Djd#(loas5F68!4W!f#(locs5F68!4r3i#(lofs3h1)!5/?\#(lohs3h1)!5AK^#(lojs4@O.!5\]f#(loms5F68!5nir#(loos5F68!6+ut#(loqs5F68!6>-!#(loss4@O.!6Y>o#(lp!s5F68!6kJq#(lp$s4@O.!71])#(lp''s5F68!7_%t#(lp+s6KrB!8%8;#(lp0s3h1)!8IP?#(lp2s3h1)!8db.#(lp6s4@O.!9*t;#(lp8s4@O.!9=+=#(lp:s4@O.!9O7?#(lpNs3:h$!;lfF#(lpSs3h1)!<<)J#(lpYs3h1)!=&SV#(lp^s4@O.!=JkZ#(lpds4@O.!>#4i#(lpfs4@O.!>5@k#(lphs4@O.!>GLm#(lpjs4@O.!>YXo#(lpqs5F68!?D-b#(lpss6KrB!?hEf#(lq"s6KrB!@%Qh#(lq$s6KrB!@7^3#(lq&s5F68!@Ij5#(lq,s3h1)!A4?##(lq0s3h1)!AXW''#(lq4s3h1)!BC,)#(lq:s4@O.!BU8+#(lq<s5F68!BgD7#(lq>s5F68!C$P9#(lq@s5F68!C6\;#(m*Ds3:h$"q:Oa#(m+(s6KrB"tT`!#(m+2s6KrB"tfl##(m+4s6KrB"uZGI#(m+<s5F68"ulSK#(m+>s5F68#(us)#(m,js3:h$#.jie#(m4ts5F68$#KY$#(m5"s5F68$#fk''#.X^Es25,P!"f1U#.X^Gs25,P!$qT_#.X^\s3:hZ!%@lh#.X^_s25,P!%S#o#.X^as3:hZ!%e0&#.X^cs5F6n!&";i#.X^es2bJU!&4Gu#.X^gs3:hZ!&FT"#.X^js3:hZ!&jl&#.X^qs5F6n!''UAA#.X_%s3:hZ!(R"6#.X_(s3:hZ!(d.L#.X_*s6Ks#!)!::#.X_1s25,P!)`d7#.X_3s3:hZ!)rpM#.X_5s3:hZ!*0'';#.X_7s4@Od!*B3e#.X_9s3:hZ!*fK_#.X_>s25,P!,_b]#.X_^s0)^<!.t6h#.X_ds25,P!/1Bj#.X_fs25,P!/CNl#.X_hs25,P!/UZn#.X_js3:hZ!/gfu#.X_ls2bJU!0$s"#.X_ns2bJU!07*3#.X_ps4@Od!0I65#.X_rs4@Od!0mN/#.X`!s3:hZ!1*Z1#.X`#s3:hZ!1<f3#.X`&s3:hZ!2BM=#.X`/s3:hZ!2TY?#.X`1s3:hZ!2feA#.X`3s3:hZ!3#qC#.X`5s3:hZ!36(Y#.X`7s5F6n!3H4[#.X`9s5F6n!4)XM#.X`?s25,P!4;dO#.X`As3:hZ!4MpQ#.X`Cs3:hZ!4`''S#.X`Fs3:hZ!5&9V#.X`Hs3:hZ!58EX#.X`Js3:hZ!5ecS#.X`Os3:hZ!6"oU#.X`Qs3:hZ!65&W#.X`Ss3:hZ!6G2c#.X`Vs3:hZ!6bDf#.X`Xs3:hZ!7(Vi#.X`[s3:hZ!7Chl#.X``s2bJU!7h,/#.X`cs5F6n!8@Ip#.X`gs5F6n!8RUr#.X`js3:hZ!9!n&#.X`ms3:hZ!94%(#.X`os3:hZ!9F1*#.X`qs3:hZ!;QT4#.Xa2s2bJU!<)r>#.Xa6s2bJU!<`AD#.Xa=s25,P!=8_D#.XaAs25,P!=o.T#.XaFs3:hZ!>,:V#.XaHs3:hZ!>>FX#.XaJs3:hZ!>PRZ#.XaLs3:hZ!?;''W#.XaSs3:hZ!?M3m#.XaWs3:hZ!?qKq#.XaYs3:hZ!@.Ws#.Xa\s6Ks#!A"2q#.Xads3:hZ!AFJu#.Xahs3:hZ!Ajc$#.Xars5F6n!BgD##.Xats5F6n!C$P%#.Xb!s5F6n!C6\''#.Xp%s25,P"q:OM#.Xp^s4@Od"tT`!#.Xphs4@Od"tfl##.Xpjs4@Od"ucMJ#.Xpts6Ks##(urt#.Y!!s3:hZ#NYoh#.Y%Us6Ks#$#KY.#.Y%Xs6Ks#$#fk1#.adFs3:h[!"f1s#.adHs3:h[!(?kR#.ae(s7QZ.!([(U#.ae*s7QZ.!(m4f#.ae,s6Ks$!)*@Y#.ae.s6Ks$!)<L`#.ae1s6Ks$!)W^T#.ae3s5F6o!)ijj#.ae5s7$<)!*''!b#.ae7s5sTt!*9-d#.ae9s8*#3!*K9a#.ae;s7$<)!*]Em#.ae=s7$<)!*oQo#.ae?s8*#3!,_c&#.ae_s4@Oe!2BM[#.af0s6Ks$!2TY]#.af2s6Ks$!2fe_#.af4s6Ks$!3#qa#.af6s7QZ.!36(m#.af8s7QZ.!3H4o#.af:s7QZ.!3cFh#.af@s5F6o!4;e"#.afBs7QZ.!4Mq$#.afDs7QZ.!4`(&#.afHs5sTt!5/?p#.afJs5sTt!5AKr#.afLs7$<)!5\^*#.afPs6Ks$!6,!)#.afTs6Ks$!6bE9#.af\s7QZ.!7Ci5#.afbs7QZ.!8%8E#.afns6Ks$!9=+G#.afrs6Ks$!:g*U#.ag>s5F6o!=8_b#.agBs5F6o!>#5(#.agIs7QZ.!>GM,#.agMs7QZ.!?;(%#.agUs6Ks$!?qL0#.ag[s6Ks$!@@dC#.agcs5sTt!A4?7#.aggs5sTt!AXW;#.agks5sTt!BL2M#.agts8*#3!C$P\#.ah#s8*#3!]''fQ#.b!+s6Ks$"sX*;#.b!is6Ks$"torB#.b!ss8*#3"uuY[#.b#Ms7$<)#K-T.#.b&Zs6Ks$#KQl2#.b''"s6Ks$#NYp;#.b+Vs8*#3$#KY=#.b+Xs8*#3$#]e?#.b+Zs8*&<!$qT_#JpHfs5F:#!%S$.#JpHms5F:#!&FT6#JpHts5F:#!&jl:#JpI&s5F:#!''UAA#JpI/s5F:#!(R"@#JpI2s4@Rn!(d.B#JpI5s5F:#!)W^^#JpI<s6L!-!)ijL#JpI>s6L!-!*''!N#JpI@s6L!-!*9-d#JpICs6L!-!+#Wk#JpIms25/Z!/(<i#JpIos25/Z!/:Hk#JpIqs25/Z!/UZn#JpIts5F:#!0mNC#JpJ+s5F:#!1*ZE#JpJ-s5F:#!1<fG#JpJ0s5F:#!2BMQ#JpJ9s5F:#!2TYS#JpJ;s5F:#!2feU#JpJ=s5F:#!3#qW#JpJ?s4@Rn!36(O#JpJAs4@Rn!3H4Q#JpJCs4@Rn!42^l#JpJJs4@Rn!4DjZ#JpJLs4@Rn!4W!\#JpJNs4@Rn!5&9t#JpJRs6L!-!58F!#JpJTs6L!-!5ecS#JpJYs5F:#!6+ut#JpJ^s5F:#!6Y?$#JpJas4@Rn!6kK&#JpJds5F:#!71\t#JpJgs4@Rn!7h,%#JpJms4@Rn!8db8#JpK!s5F:#!9*t;#JpK#s5F:#!9=+=#JpK%s5F:#!9O7?#JpKGs6L!-!=8_l#JpKKs6L!-!=o.h#JpKPs4@Rn!>,:j#JpKRs4@Rn!>>Fl#JpKTs4@Rn!>PRn#JpKVs4@Rn!?;(*#JpK]s5F:#!?M4,#JpKas5F:#!?qL0#JpKcs5F:#!@.X2#JpKls6L!-!A4?<#JpKps6L!-!AjcB#JpL''s5F:#!BgDK#JpL)s5F:#!C$PM#JpL+s5F:#!C6\O#JpNts6L!-"q:Ou#JpZhs6L!-"tT`5#JpZrs6L!-"tfl7#JpZts6L!.!$qTA#K$Ngs25/[!%S#e#K$Nss25/[!&X_o#K$O"s25/[!''1)Q#K$O&s7Q]8!''L;T#K$O0s25/[!(R"6#K$O3s3:ke!(d.8#K$O6s25/[!)W^6#K$O=s25/[!)ijB#K$O?s25/[!*''!D#K$OAs25/[!*9-<#K$ODs25/[!*T?g#K$OFs6L!.!*fKU#K$OHs6L!.!+#WC#K$Ons/$%=!/(<K#K$Ops/$%=!/:HM#K$Ors/$%=!/UZP#K$Ous25/[!0mN%#K$P,s25/[!1*Z''#K$P.s25/[!1<f)#K$P1s25/[!2'';b#K$P9s25/[!2KS4#K$P;s25/[!2]_6#K$P=s25/[!2ok8#K$P?s25/[!3-"D#K$PAs3:ke!3?.F#K$PCs3:ke!3Q:H#K$PJs25/[!4;dO#K$PLs3:ke!4MpQ#K$PNs3:ke!4`''S#K$PRs25/[!5/?M#K$PTs25/[!5AKO#K$PVs6L!.!5\^%#K$PYs/$%=!5niT#K$P\s25/[!6G2Y#K$Pas25/[!6bDf#K$Pcs25/[!7(V_#K$Pfs3:ke!7Chl#K$Pls3:ke!8%7r#K$Pus25/[!9!mq#K$Q#s25/[!94$s#K$Q%s25/[!9F0u#K$Q''s25/[!=&SB#K$QJs25/[!=JkF#K$QPs25/[!>#4U#K$QRs25/[!>5@W#K$QTs25/[!>GLY#K$QVs25/[!>YX[#K$Q]s25/[!?D-X#K$Q_s25/[!?hE\#K$Qcs25/[!@%Q^#K$Qes25/[!A"2g#K$Qos25/[!AFJk#K$Qus25/[!BC,Q#K$R&s6L!.!BU8S#K$R)s25/[!C$P%#K$R-s25/[!]''eo#K$`Ss25/["sX)c#K$`rs25/["t]em#K$`ts25/["toqo#K$bVs7Q]8#.jj$#K-Ths5F:%!%S$.#K-Tts5F:%!&X`8#K-U#s4@Rp!&sr;#K-U&s3:kf!'':/*#K-U(s5F:%!''L;,#K-U*s5F:%!(?k\#K-U3s7Q]9!([(_#K-U5s7Q]9!(m4C#K-U7s7Q]9!)W^T#K-U>s5F:%!)ijj#K-U@s5F:%!*''!l#K-UBs5F:%!*9-d#K-UDs4@Rp!*K9\#K-UFs5F:%!*]E^#K-UHs6L!/!*oQ`#K-UJs5F:%!/^a8#K-V,s5F:%!1!TD#K-V.s5F:%!13`F#K-V0s5F:%!1NrI#K-V7s3:kf!2BMe#K-V;s7Q]9!2TYg#K-V=s7Q]9!2fei#K-V?s7Q]9!3#qk#K-VAs7Q]9!36(m#K-VCs7Q]9!3H4o#K-VEs7Q]9!42^b#K-VLs7Q]9!4Dk##K-VNs7Q]9!4W"%#K-VPs7Q]9!5&9j#K-VTs5F:%!58El#K-VVs5F:%!5JQn#K-VYs5F:%!5nj1#K-V]s7Q]9!6G3"#K-Vbs5F:%!6bE9#K-Vds5F:%!7(W(#K-Vgs7Q]9!7Ci?#K-Vms7Q]9!8%8E#K-W!s5F:%!9!n:#K-W$s7Q]9!94%<#K-W&s7Q]9!9F1>#K-W(s7Q]9!=&S`#K-WKs5F:%!=Jkd#K-WQs5F:%!>#5(#K-WSs5F:%!>5A*#K-WUs5F:%!>GM,#K-WWs5F:%!>YY.#K-W^s5F:%!?D-l#K-W`s6L!/!?hEp#K-Wds6L!/!@%Qr#K-Wfs6L!/!@7^)#K-Whs4@Rp!@Ij+#K-Wns5F:%!A4?2#K-Wrs5F:%!Ajc8#K-X&s3:kf!BL2>#K-X(s3:kf!B^>@#K-X*s5F:%!BpJB#K-X,s5F:%!C-VD#K-X.s5F:%!]''f8#K-f2s4@Rp"q:Ok#K-fjs5F:%"tT`+#K-fts6L!/"tfl-#K-g!s6L!/"uZG?#K-g)s4@Rp"ulSA#K-g+s4@Rp#.acZ#K-hXs5F:%$#BRn#K-pbs4@Rp$#T^p#K-pds4@Rp$#fjr#K?`hs25/^!%.a*#K?`ns5F:''!%n61#K?a!s5F:''!&X`8#K?a%s5F:''!''C5?#K?a,s5F:''!(?kH#K?a5s4@Rr!([(A#K?a7s4@Rr!)!:N#K?a?s6L!1!)`d_#K?aAs4@Rr!)rpa#K?aCs4@Rr!*0''c#K?aEs6L!1!*K9f#K?aLs6L!1!.t6h#K?ars25/^!/1Bj#K?ats25/^!/CNl#K?b"s25/^!/^a8#K?b.s5F:''!1!TD#K?b0s5F:''!13`F#K?b2s5F:''!1NrI#K?b<s5F:''!2KSR#K?b>s5F:''!2]_T#K?b@s5F:''!2okV#K?bBs5F:''!3-"N#K?bDs4@Rr!3?.P#K?bFs4@Rr!3Q:R#K?bMs6L!1!4;dY#K?bOs4@Rr!4Mp[#K?bQs4@Rr!4`'']#K?bUs6L!1!5/?u#K?bWs6L!1!5AL"#K?b\s25/^!5nir#K?b_s5F:''!6G3"#K?bds5F:''!6bDp#K?bfs5F:''!7(W(#K?bis4@Rr!7Ci!#K?bos4@Rr!8%8''#K?c#s5F:''!9!n:#K?c&s5F:''!94%<#K?c(s5F:''!9F1>#K?c*s5F:''!=&Sj#K?cMs6L!1!=Jkn#K?cSs5F:''!>#4_#K?cUs5F:''!>5@a#K?cWs5F:''!>GLc#K?cYs5F:''!>YXe#K?c`s6L!1!?D.!#K?cbs6L!1!?hF%#K?cfs6L!1!@%R''#K?chs6L!1!A"3:#K?crs6L!1!AFK>#K?d#s6L!1!B^>@#K?d,s6L!1!BpJB#K?d.s6L!1!C-VD#K?d0s6L!1!]''fB#K?rVs6L!1"sX*6#K?rus5F:''"t]f@#K?s"s5F:''"torB#KQlls5F:)!%S$.#KQm#s5F:)!&X`8#KQm''s4@Rt!&sr;#KQm*s3:kj!'':/*#KQm,s5F:)!''L;,#KQm.s5F:)!(?k\#KQm7s7Q]=!([(_#KQm9s7Q]=!(m4C#KQm;s7Q]=!)W^T#KQmBs5F:)!)ijj#KQmDs5F:)!*''!l#KQmFs5F:)!*9-d#KQmHs4@Rt!*K9\#KQmJs5F:)!*]E^#KQmLs6L!3!*oQ`#KQmNs5F:)!/^a8#KQn0s5F:)!1!TD#KQn2s5F:)!13`F#KQn4s5F:)!1NrI#KQn;s3:kj!2BMe#KQn?s7Q]=!2TYg#KQnAs7Q]=!2fei#KQnCs7Q]=!3#qk#KQnEs7Q]=!36(m#KQnGs7Q]=!3H4o#KQnIs7Q]=!42^b#KQnPs7Q]=!4Dk##KQnRs7Q]=!4W"%#KQnTs7Q]=!5&9j#KQnXs5F:)!58El#KQnZs5F:)!5JQn#KQn]s5F:)!5nj1#KQnas7Q]=!6G3"#KQnfs5F:)!6bE9#KQnhs5F:)!7(W(#KQnks7Q]=!7Ci?#KQnqs7Q]=!8%8E#KQo%s5F:)!9!n:#KQo(s7Q]=!94%<#KQo*s7Q]=!9F1>#KQo,s7Q]=!=&S`#KQoOs5F:)!=Jkd#KQoUs5F:)!>#5(#KQoWs5F:)!>5A*#KQoYs5F:)!>GM,#KQo[s5F:)!>YY.#KQobs5F:)!?D-l#KQods6L!3!?hEp#KQohs6L!3!@%Qr#KQojs6L!3!@7^)#KQols4@Rt!@Ij+#KQors5F:)!A4?2#KQp!s5F:)!Ajc8#KQp*s3:kj!BL2>#KQp,s3:kj!B^>@#KQp.s5F:)!BpJB#KQp0s5F:)!C-VD#KQp2s5F:)!]''f8#KR)6s4@Rt"q:Ok#KR)ns5F:)"tT`+#KR*#s6L!3"tfl-#KR*%s6L!3"uZG?#KR*-s4@Rt"ulSA#KR*/s4@Rt#.acZ#KR+\s5F:)$#BRn#KR3fs4@Rt$#T^p#KR3hs4@Rt$#fjr#NGe0s4@S:!%.a*#NGe6s5F:D!&FT6#NGe@s5F:D!&jl:#NGeCs3:l0!''1(t#NGeFs250&!''C5+#NGeHs250&!''UA-#NGePs5F:D!(R"T#NGeSs6L!N!(d.V#NGeUs6L!N!)!:N#NGeYs7Q]X!)W^T#NGe]s5F:D!)ij`#NGe_s5F:D!*''!b#NGeas5F:D!*B3e#NGeds5F:D!*T?S#NGefs4@S:!*fKU#NGehs4@S:!+#Wa#NGf9s4@S:!/(=(#NGf;s4@S:!/:I*#NGf=s4@S:!/U[-#NGf@s5F:D!0mNC#NGfLs5F:D!1*ZE#NGfNs5F:D!1<fG#NGfQs5F:D!2'';0#NGfYs5F:D!2KSR#NGf[s5F:D!2]_T#NGf]s5F:D!2okV#NGf_s5F:D!3-"b#NGfas6L!N!3?.d#NGfcs6L!N!3Q:f#NGfjs5F:D!4;dm#NGfls6L!N!4Mpo#NGfns6L!N!4`''q#NGfrs5F:D!5/?k#NGfts5F:D!5AKm#NGg!s4@S:!5\]f#NGg$s4@S:!5nir#NGg''s5F:D!6G3"#NGg,s5F:D!6bE/#NGg.s5F:D!7(W(#NGg1s6L!N!7Ci5#NGg7s6L!N!8%8;#NGg@s5F:D!9!n:#NGgCs5F:D!94%<#NGgEs5F:D!9F1>#NGgGs5F:D!=&S`#NGgjs5F:D!=Jkd#NGgps5F:D!>#4s#NGgrs5F:D!>5@u#NGgts5F:D!>GM"#NGh!s5F:D!>YY$#NGh(s5F:D!?D.!#NGh-s5F:D!@%R''#NGh1s3:l0!@@d4#NGh3s3:l0!A"30#NGh:s5F:D!AFK4#NGh@s5F:D!BC+t#NGhFs4@S:!BU8!#NGhHs3:l0!BgDA#NGhJs3:l0!C$PC#NGhLs3:l0!C6\E#NGk@s5F:D"mZ-S#NH!ss5F:D"sX*,#NH"=s5F:D"tfl7#NH"Gs3:l0"ucMJ#NH"Is3:l0"uuYL#NH$!s250&#.jie#NH,+s6L!N$#KY.#NH,-s6L!N$#]e0#NH,/s6L!O!$qT_#NPk3s6L!O!%S$8#NPk:s6L!O!&FT@#NPkAs6L!O!&jl0#NPkDs4@S;!''1(t#NPkGs250''!''C55#NPkIs250''!''UA7#NPkQs6L!O!(m4C#NPkWs6L!O!)<L[#NPk]s6L!O!)`d_#NPk`s6L!O!*0''c#NPkcs5F:E!*B3Q#NPkes6L!O!*T?S#NPkgs4@S;!*fKP#NPkis4@S;!+#Wk#NPl:s250''!/(<i#NPl<s250''!/:Hk#NPl>s250''!/UZn#NPlAs6L!O!0mNM#NPlMs6L!O!1*ZO#NPlOs6L!O!1<fQ#NPlRs6L!O!2'';0#NPlZs6L!O!2KS\#NPl\s6L!O!2]_^#NPl^s6L!O!2ok`#NPl`s6L!O!42^l#NPlss6L!O!5/?u#NPlus6L!O!5AL"#NPm"s4@S;!5\]f#NPm%s250''!5nj''#NPm(s6L!O!6G3,#NPm-s6L!O!6kK0#NPm1s6L!O!8dbB#NPmCs6L!O!9*tE#NPmEs6L!O!9=+G#NPmGs6L!O!9O7I#NPmis6L!O!=8_l#NPmms6L!O!=o.r#NPmss6L!O!>>G!#NPn"s6L!O!?;(*#NPn*s4@S;!?M4"#NPn.s4@S;!?qL&#NPn0s4@S;!@.X(#NPn2s4@S;!@@cu#NPn4s4@S;!A"3:#NPn;s6L!O!AFK>#NPnAs6L!O!BC+t#NPnGs4@S;!BU8!#NPnIs4@S;!BgDK#NPnKs4@S;!C$PM#NPnMs4@S;!C6\O#NPqAs6L!O"mZ-?#NQ''ts6L!O"sX*6#NQ(>s4@S;"t]f6#NQ(@s4@S;"tor8#NQ(Hs4@S;"ucM6#NQ(Js4@S;"uuY8#NQ*"s250''#.jie#NQ2,s4@S;$#KXo#NQ2.s4@S;$#]dq#NQ20s4@Wn!"]+J$#9MPs4@Wn!"o7L$#9N/s7$D2!(R"T$#9N2s7Qb7!(d.e$#9N5s7$D2!)*@^$#9N7s7$D2!)NXb$#9N;s7Qb7!)`di$#9N=s6L&-!*''!l$#9N@s8*+<!*9-d$#9NCs8*+<!*fKi$#9NXs4@Wn!.Fn6$#9O8s7$D2!2KSa$#9O:s7$D2!2]_c$#9O<s7$D2!2oke$#9O>s7$D2!3-"b$#9O@s8*+<!3?.s$#9OBs8*+<!3Q:u$#9OEs7$D2!42_!$#9OJs6L&-!4Djn$#9OLs6L&-!4W!p$#9ONs6L&-!5&:.$#9ORs8*+<!58F0$#9OTs8*+<!5nj,$#9O[s7$D2!6>-0$#9Oas6L&-!71]3$#9Ogs7Qb7!7h,H$#9Oms8*+<!9*tJ$#9P$s7$D2!9O7N$#9P2s7$D2!=&St$#9PIs7Qb7!=Jl#$#9PPs6L&-!>5@u$#9PTs6L&-!>YY$$#9P\s8*+<!?M4,$#9Pbs6L&-!@.X2$#9Pls8*+<!A4?K$#9Pps8*+<!AXWO$#9Pts8*+<"n)E\$#9_rs6L&-"torB$#9e+s4@Wn#NYpO$#BT0s5s])!(R"T$#BT3s7$D3!(d.`$#BT5s5s])!)!:S$#BT7s7$D3!)3F_$#BT;s7$D3!)ij`$#BT@s7$D3!*9-n$#BTCs5s])!*T?b$#BTFs5s])!*oQe$#BU9s5s])!2KSW$#BU;s5s])!2]_Y$#BU=s5s])!2ok[$#BU?s5s])!3-"b$#BUAs7Qb8!3?.n$#BUCs7Qb8!3Q:p$#BUFs7$D3!4;dm$#BULs6L&.!4Mpo$#BUNs6L&.!4`''q$#BUVs5s])!5\]u$#BUZs5s])!6,!$$#BU^s5s])!6bE/$#BUfs6L&.!7Ci:$#BUls7Qb8!8%8E$#BV#s5s])!9=+B$#BV''s5s])!:g*Z$#BVQs6L&.!>5@u$#BVUs6L&.!>YY$$#BV_s7Qb8!?qL:$#BVes7Qb8!@@d/$#BW&s5s])"n)E\$#Bess7Qb8"torL$#Bf(s5s])"uuYG$#BgWs5s])$#BS($#Boas5s])$#T_*$#Bocs5s])$#fk,$#T`2s5s]+!(R"T$#T`5s7$D5!(d.`$#T`7s5s]+!)!:S$#T`9s7$D5!)3F_$#T`=s7$D5!)ij`$#T`Bs7$D5!*9-n$#T`Es5s]+!*T?b$#T`Hs5s]+!*oQe$#Ta;s5s]+!2KSW$#Ta=s5s]+!2]_Y$#Ta?s5s]+!2ok[$#TaAs5s]+!3-"b$#TaCs7Qb:!3?.n$#TaEs7Qb:!3Q:p$#TaHs7$D5!4;dm$#TaNs6L&0!4Mpo$#TaPs6L&0!4`''q$#TaXs5s]+!5\]u$#Ta\s5s]+!6,!$$#Ta`s5s]+!6bE/$#Tahs6L&0!7Ci:$#Tans7Qb:!8%8E$#Tb%s5s]+!9=+B$#Tb)s5s]+!:g*Z$#TbSs6L&0!>5@u$#TbWs6L&0!>YY$$#Tbas7Qb:!?qL:$#Tbgs7Qb:!@@d/$#Tc(s5s]+"n)E\$#Tqus7Qb:"torL$#Tr*s5s]+"uuYG$#TsYs5s]+$#BS($#U&cs5s]+$#T_*$#U&es5s]+$#fk,$#]f3s5s],!(R"T$#]f6s7$D6!(d.`$#]f8s5s],!)!:S$#]f:s7$D6!)3F_$#]f>s7$D6!)ij`$#]fCs7$D6!*9-n$#]fFs5s],!*T?b$#]fIs5s],!*oQe$#]g<s5s],!2KSW$#]g>s5s],!2]_Y$#]g@s5s],!2ok[$#]gBs5s],!3-"b$#]gDs7Qb;!3?.n$#]gFs7Qb;!3Q:p$#]gIs7$D6!4;dm$#]gOs6L&1!4Mpo$#]gQs6L&1!4`''q$#]gYs5s],!5\]u$#]g]s5s],!6,!$$#]gas5s],!6bE/$#]gis6L&1!7Ci:$#]gos7Qb;!8%8E$#]h&s5s],!9=+B$#]h*s5s],!:g*Z$#]hTs6L&1!>5@u$#]hXs6L&1!>YY$$#]hbs7Qb;!?qL:$#]hhs7Qb;!@@d/$#]i)s5s],"n)E\$#^#!s7Qb;"torL$#^#+s5s],"uuYG$#^$Zs5s],$#BS($#^,ds5s],$#T_*$#^,fs5s],$#fk,~>')
%
classmethod: Font
freeSansBoldCOPYING
"                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  'This License' refers to version 3 of the GNU General Public License.

  'Copyright' also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  'The Program' refers to any copyrightable work licensed under this
License.  Each licensee is addressed as 'you'.  'Licensees' and
'recipients' may be individuals or organizations.

  To 'modify' a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a 'modified version' of the
earlier work or a work 'based on' the earlier work.

  A 'covered work' means either the unmodified Program or a work based
on the Program.

  To 'propagate' a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To 'convey' a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays 'Appropriate Legal Notices'
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The 'source code' for a work means the preferred form of the work
for making modifications to it.  'Object code' means any non-source
form of a work.

  A 'Standard Interface' means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The 'System Libraries' of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
'Major Component', in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The 'Corresponding Source' for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    'keep intact all notices'.

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
'aggregate' if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A 'User Product' is either (1) a 'consumer product', which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, 'normally used' refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  'Installation Information' for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  'Additional permissions' are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered 'further
restrictions' within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An 'entity transaction' is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A 'contributor' is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's 'contributor version'.

  A contributor's 'essential patent claims' are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, 'control' includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a 'patent license' is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To 'grant' such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  'Knowingly relying' means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is 'discriminatory' if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License 'or any later version' applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM 'AS IS' WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the 'copyright' line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an 'about box'.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a 'copyright disclaimer' for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<http://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<http://www.gnu.org/philosophy/why-not-lgpl.html>.
"
%
classmethod: Font
mICRDemoCheckPrixa
	<font: #MICRDemoCheckPrixa>
	^self
		file: 'MICRDemoCheckPrixa.otf'
		contents: (ByteArray fromASCII85String:
':K1:h!"/dW!!<3T6UjNf[(sM&!!!IY!!!e,7o2u[lPKXT!!!@R!!!*(:K&o%;0,kH!!!$B!!!",@r5X
n#9+"*!!!/7!!!%?BOtU_ngP+c!!!#3!!!!WBP:sc#9a1s!!!#k!!!!EBPhj9Oade,!!!3W!!!$(CLqO
(#;-6-!!!7+!!!*HD..[.!(0Q_!!!$:!!!!''DIIBnFuDD+!!!%M!!!*]E,Tf>s2P*f!!!6`!!!!A!!*
''"!!*''"1?Kf8?Oo9l!!<>eza3A4[za3A4[s2"^c"1A9m!!!!$!!3-#z!!*''"",6dS!$VNNs2"_n"1
A11zzz!!!!a!!#gq!(-_d!!33h!K[9b!!!)5!f?sX!/pul!f?sX!Sm`2!;ZZqzzz!!*''"zz!!#_b6W*
nL!$D8f!knX7!(-i%!7_&L!!*''"!!*''!s8N''!!$D7C!!!!=!EK1$z!!!!W!!!!"z!!*''4!&afXz!
!3-*!([(jz!!<3H!)ERqz!!E97!&afXz!!N?3!-8,@z!!WE9!&afXz!!iQ3!.Y%Mz!!rW4!.Y%Mz!"&]
a!!!!"z!"/cC!/^aWz!"8iD!/^aWz!"JuF!/^aWz!"],C!&afXz!"f29!([(l!!*3/!!!"8!20Ap!!*3
/!!*''F!=]#2!!*3/!!3-1!AOQV!!*3/!!<3l!C$Pd!!*3/!!E9I!=]#2!!*3/!!N?@!J^XW!!*3/!!W
EK!=]#2!!*3/!!iQ=!MKJq!!*3/!!rW>!MKJq!!*3/!"&^B!20Ap!!*3/!"/cZ!OVn0!!*3/!"8i[!OV
n0!!*3/!"Ju]!OY:5E-ZJ<B4uB0-t=\K1,(F:+C]U=6YL%@CJ]%cG[W3I6#:?[EbT0"FE8RFATMF''G%
G2:9h@]M6tL4R6YL%@CJ]%cG[XK]B6A$!E^OMO@r"n]Bm=&I+AGEp;FG)5DaS2L@r"n]Bm=&I+>PW*0N
Mb*F(oQ1+>GK&0H`_rARfLPEbTc,BQS?83\N.1GBYZVBk)0p0f*8k@rH2a6ND$)Dub.`EWBeRB)lTFF9
!E`-id`W.0(Ij1&s!.0`Wm-+95jNGlSre6NCd"AH63?CB.02EWBeRGQ;.P/c[!o5lb^$C]GRXEWBeRB)
lTFF9$@^+96E^AH6cOAH6`NFoZ(RA,n4^9`R`b6NC!a6i^cuD#eJS6NCd"AH63?CB.02EWBeRGQ;.P;?
18.B)m&SC]IlDEWAH,BE2TD@fU9E:]PM9B`NAX@/r=g+95+98H;*X;?0)bAH6QIDZE-)BE2TD@fU9E:]
PM9B`NAX@/r=g+94.s0E<g-0E>,RAH6`NEr]nSDZFYT+94+r/c[R*0E<3q6NCd"AH63?CB.02EWBeRGQ
;.PBE3,SF9$7[3WLf50*$1rG5uge/c]_gB`MWCEWBYN0`X!0@K8"\@fUEID#aP9!!!!$!!!!$!!!$,!!
*''"!!!!=!!<3%!!!$,!!WGk!!!!*!-/&Ez!!!!(zzzzzzzzz!!`K(zzzzz!!!!a!!!!b!!iQ*!!3-&!
!E9*!!WE''z!''^HMzz!!!!,!"8i:!"Ju>!"],B!"o8F!#,DJ!#>PN!#P\R!#bhV!#ttZ!$2+^!$D7b!
$VCf!$hON!!!!+z!!!!F!%%[n!%7gr!%It!!%\+%!%n7)!&+C-!&=O1!&O[5!&ag9!&ss=!''1*A!''C
6E!''UAc!,)?4!#,DE!!<3(!$D7n!&+C2!'':0a!*]G/!.+\F!!!!A!%e1(!&4I7!''pTh!*oS5s8W,^
!##>4s3L`Gs2tAEs/l=>!!*''"!!!!1!!!!1zz!!!!b!!iQh!($Yc!eUIQ!eUMt!eUMt!eUM2!eULD!e
UM2!eULD!eUIQ!eUKV!AFL&!A+9\!q$$m!h]N-!j)GF!oX+n!c\2S![n$_!qlU:!q-+''!EK1:!K@''^
!q61(!d"DV".fK,!oj7\!pTb.!^H`"!oa2&!j_k@!\aU8!_r_&!q61%!n72M"0qn,!p0I_!k/-u!c@uF
!PJIU!W)io!Q"gZ!WE''A!R:Zf!@.XX!V?@+!XJc1!>YYQ!>b^O!WE''+!>PSK"!mpS!X8W3!Vud=!X&
K.!WW3C!E]=-!KmF<!?qLL!X8W1!U]pf!q?6j!VZR"!Wi?%!RC`[!eUKV!3H7)!3ZA&!!<3$zs24mczz
zzz!!!!"!!!*D!!*(P!rr<+!"o8>!"Jt9!"/c=s2"aD!#bgQ!"/cGs2"aD!$;0J!"/cKs2"aD!$M;1!"
/cMs+::Z!$hMf!"8i8s5F"e!$D6q!"8iMs3(HO!$VBk!"8iPs4[M_!"8hi!"AoOs7$''u!$_I(!"Ju:s
3:TS!$M<L!"JuQs5F"g!$hN\!"],<s2"aI!"o7j!"],Js5F"i!#tst!"f2=s3:TV!$2+)!"f2Rs3(HT!
$VC5!"f2Us5F"m!"8hD!#5JCs1A=H!#bgJ!#5JQs24mQ!"T&)!#>PPs4./c!#kn&!#>PRs5F"o!$;0&!
#>PVs1JCJ!$M;a!#>PXs(;<I!$hMH!#YbEs-Nd(!#5Iu!#YbXs5X.t!$D72!#YbZs1/1J!$VBn!#Yb\s
2Y0X!$hNU!#bhFs/c8>!$D72!#bh[s69S&!$VC-!#bh^s7-./!"8h]!#kn[s7$(.!$M<q!#kn]s4[Mm!
$_Hm!#kn_s69S(!"Jt_!#ttNs69S(!#bh%!#tt[s4./i!$D6q!#tt]s24mW!$VBE!#tt`s187O!$;0p!
$)%]s4[Mo!$M<T!$)%_s5F#!!$hNm!$2+Js0_nK!"Jth!$2+Xs5X/$!$2+)!$;1Ks2"aX!#bh,!$;1[s
7$(2!$2+)!$D7Ls(VNV!"JtH!$D7Rs3(Hc!#bgX!$D7\s1JCU!"8gN!$M=Os4[Ms!"o7j!$M=[s4mYu!
#tsm!$M=_s5F#&!"JtZ!$VC\s2Y0a!#tst!$_IOs(;<V!"Jt?!$_IUs4[Mu!#bgM!$_I_s24m^!$2*g!
$qV,s7$(:!'':/M!%.b.s69S5!''C5N!%@n2s69S6!&ss"!%S$Ws7lXN!'':/F!&FU:s7$(L!'':/M!''
1*-s7$(M!%@m;!''1*/s69SF!%\*/!''1*9s69SG!%%[8!'':0.s69SG!%@m4!'':00s7$(N!%\*/!''
:0:s7$(O!%Is5!''L<.s69SI!%7g3!''L<1s69SI!%Is5!''L<<s69SI!'':/7!!*''"!"&]I!%\*NCg
hF''!!iQ-zs8N''"!!!!"CLqO(!!iQ)!!*''"!!*''&!!3-#!!*''*!!*.a!!E9%!$;23!,_di!0R>X!
4DmO!7Cl*!<rQQ!BpNd!I=d.!MTV%!QkH(!V-:#!YPPS![[t"!\sg>!^Zrj!ce?e!!rW7s0Vh=s2"aRs
1n[Ss2"aWs0VhKs2"aYs$Zo2s+::rs*"GH!"8hd!$D6q!$M<c!$VBk!$hNu!!<3/s5sA*s7$(5s5X._!
"8hP!$M<L!$_I&!$hN\!!E90s2"aJs5F"rs5F"ts5F"^!"8hP!$2+)!$M<c!$VC5!$hO''!!*''-s2"a
<!"Jt@!#bgJ!#tsV!!rW8s7lX4s4./gs69S''s5F#"s,d:''s1JCTs)e;bs(;<Vs&f=-!"8go!#5Iu!$
;1$!$D72!$M<Q!$VBn!$_Ha!$hNU!!N?1s/c8Cs7$(3s69S-s69S/s7--o!"8h]!$D72!$M<q!$VBs!$
_Hm!$hO/!!iQ6s4[Mcs69S%s69S*s4./ls4[Mrs24m\s/c8Gs1877!$;0p!$D6q!$M<T!$VC%!$hNm!!
E90s0_n:s5X.ts5X/#s69Re!"8hD!#bh,!#tt.!$2+)!!N?1s(VNCs24mLs3(H\s2Y0Zs1JC:!"8gN!"
Jt_!"o7j!#bgm!#tsm!$2+!!!<31s4./fs2Y0Zs5F"_!"8g>!"Jt?!"o7c!#bgM!#tsV!$2*g!!*'']s
7$''j!'':/M!''C5G!!3-^s7$(Ps69Rb!&ss"!!*''-s7lWr!'':/F!''C5N!!*''\s7$''m!%7g:!%@
m;!%Is5!%\*/!&OZ?!!WELs7$(:s69S4s69S5s7$(>s5F#7s7$''i!%Is5!!WELs69S3s69S4s69S5s6
9S?s69SFs4[MT!!rW5!"Ju/!"],B!!E99!#>P=!#Yb]!!rWO!$qUZ!%.ao!#5J_!%S$b!&FU2!#Ybs!''
L<#!<<6(!!**$''2;%c;FG)5DaS2L@r"n]Bm=%d!<E3Qp^dH#)Zf^Q$ip&B!r*`;p`0K!$j3gE"AJ],q
F^R/"nsqdpK8*$*#&bn!!<6&2b?e4DfBuBBkM+$+=L_K+>PW*0HahM+@BgR@r"n]Bm=&=+@0g[+ED1/B
QS;<Eb0<''Ecu#)/kno);FG)5DaS2L@r"n]Bm=&]DfT]''C]FG9!"oG8!<<*3!!#+]!''UA_+rLAI)#t
TU!"Ju/&-)\4!!#@f!!*''$!)im"!<*!o!K7''M!V6@\!c.q''!pKek"+p^#"8`3<"BGYX"IB89"WR\5
"b?in"p5&u#+c%d#A+4##L*MY#]^4.#r)a#$/Q":$?lj%$QTU`$k`t<$t''L4%."E#%874V%DE;]%U]d
1%fQu%%tkJ@&4mGQ&M+N5&^(e)&n;Qe%\S"?M=;/Q$hkQ1c4f.3(\`1iUje\N*_oT?pR_[b$:mesH>7/
[HD2Jpcp\<=3sTkYJ9W+Ki,X9qEZb0V#B?,[V&oA/#,R]SU`]>0#7a!+!Vd&JpDV<Zq"=BR''h/Q)T*M
)i$N"($$@m4i$6T!\#,.?6GTZf(#BYKHFWUDu9+$2l+8_]98I?O5>XSpnML_"8)uCLG$C7A-pDO:1QBn
6dpDF/F5RJ/!Oj6Ml)ADW8E;6IK64.gbJ9;q1)?re@FI%HN+86[<$Mt`-$DAR9T*>tm3=6l&H3^6qQuX
5]n99GLTca#X#>GR&>sSgl+86WW%\S">)UA+(G6.GmpDN]DpDO//E;(7c71)Ni8I?N`6jiZr#G6O3F<4
"H$A!DBJ:D\`84s;UTca$g#>GOr#''GlTIrlV,,mSQu$MRg1%R:@%pW:\S?-WQHl<4PlT2>si>sA\n>s
Sgk+8;Bq$MU1uTi;Br>Z(q'')$a1LU)s&6#!!#n$?RBeT*>d`cM&7%pRoeEpP-uf):$OQ(\ah2$N-ku$
6Js$#,7EMU*'',6#GG*(qjp[mpKRq`$6IIsTpC4N+)2#or(.6hQBn3cmfuPon,/%X8dZX:>m>G%QD#DG
#<<,4pK[usQ@O''!%M"EBph7qRpI!7#im%Z#anY9=11"9B+8b%&1:UZO*qrnDjLD_\+8=b"jBf>O*mX[
s''jc$*?68uK#$uGG\0(J)#IpJ$\/tBL#.U@L?69[SN;G''7q6IOD[+d\:F;*$.q^E9SFL_Shi;4eqZ3
CuhpE[<HF9W6PO8CB:q6IODR.k\agCrN>Jbpl2q@<CE>mD%ipE]^C"r#ql,[CTapKF55pNNn;6[&S*q"
[SuqiUg8"]f_cB3H7"pMHH+15iKOTc_&D$jHBr#/9sC"])"BDF,:fpT0nj89h#RE$+t:pu)Beq_8i["o
G/#qg/MWpC)tcpV!^''W3$^,#kRe[ofLnipB20#.gl%d#PT%mh"''W+a"s/+N<^-lj11tleJdm0cMJG"
qs?6Jo?%f4Y,mVQ)tso[9KPOD:cKP8#&.5!Oa%sP"H]q(NLLk#o_0696oI5.9D]01=-8Sc*tJ#_7g]@n
r_Nr=F#XO$$gZ^4^)qZd"ZogN8Mi=4n)lM(!LOt("qLB%MlldLX[ifns7[!T$MW9[pNlQJpFc2>nn?oL
bTFbu0r4[[)uIK0$M21NPcL[F^)Qeop%o[)4Sr(S"oA])+Co,FQtRQOe;LI''e1qC+U''Jd6;[%4H1iZ
8Z/K=R2#''>3`U5C&eWqRr+$Mu4FQM3WK1CB&5G5(\c$MV3(#=WX''di\=AoKEU-pQkP+"u?V\@Rge#,
P)$5$;_(IAiL.l(=8eadi\<r#KrX1^E/sCTQpdnT6EmLqbdZ8BOQ6e2@B0jau9,"W#qc=%ej2#G5(("p
W@\N$MVa8"8Jegj;%Q:4UUsp,RXETqoe_?,RXH[4UUq.#7gWC6ONPqo)n^ppAbpT$M\-W$4cqdH`_#V''
_omr''),2n''<q4,hA''XQDfd$6E*''"&6lU/aG\i6Z<kNIbpBB4%pG!``p*9tTpKU&mpB^@D$MT)VpO
<!h"f-1+GCUTVJ9kfKH2#^W#=Wp%kUmtSW;!4a?M@;#`lkZZaW$iKO*LuFQ@=@-D/joL+8]pP=9\G!,R
P%5MlldnG=W&m$M^M(`qN2OO9IFX:e1Bg)uC9QFF0a[+8C1.$4ch<6ONPn\bNK%/IM6(.15iIOpC`Hr4
N9,#5=8T_$,nt<<acWpgc)dqcjC''JGbuBL''IO/pmqZd?8W''"pJ6loYZ2#CpBA,&3OofJpB<#RpOXh
$pd''rG''=dg1r4N9/ptu?1$N#E-$N(cs#Q-%GKa%?<Gm;@)A5XKZpJuXCq&$47X7m,!9(retp^)9^pJ
gl9pG_hLpK.5@pG)PEqc*GAq_@tLqcWYBq`"7K+0>Z)$N!X_q]>VX*tG''=G5&nWpVa=-$MS6.">:,V@
g@a__1]9:nF=Nm&GH_]dJFY#qm\Kjo>_T3WhYHC)q`5"00NW81N.2qP&qcUpJ1TbG5;0?!NYr%pe(8f"
8Pjl<u(T?+R\?2+874ep@g?:0cKdfq^(tkqc*Glq^)+oqcEYCme\m9+_DcMc1am.%JNF5qr.9r''fQKs
;*Fdbq]U8-%eh''<G5''LgpUI=r$MST8">:,VB[d:]C\uTbpK!gh<a2<M<Zh2bpLsfnUW:R9)Y65Dq^E
T`au''Ota;''i-\<<g1f>1$>1.G1p+&<(NPC''S08U''oIYnG%1pTD#4jV.FaAb]UIpORSpH[0aYGBK@
;F<6WbH'';_Wq[>JI,9Qemp\omD3Z:L^?V)OpchA!$*dRX/SHb^HQ(=KcU7HjfTHA]^We.f$''D2#EhW
+;OpJ^tqYP07[]t257pArK''q[f)8%^D[Mq&6@9pP/8ASbYA_KDRP1SHdu@Y.*I2eblQS-49ONeH[l;p
KW''Sq&jk^pBC0`''Y+>?"o!]cq]P)!$26[Y<8.''PpE(INi@t]:Jh@E-i<T5c67i!Aq[#OQpBVi7i?S
a?pHVCZ]VT[FVB>Pur8n0Z#5<B;`s(+qW3NoQSbm#E#LJrJ95l!M4T%&59DCRPb&NTKg)HRf%eq)=$H/
?I5c,Xt@/S:RUB^HEpd=d1r''LX_#5;3od07jkQ*A=KSbl^uMKoBVQ>&g0+8[,W+T!/R*<h"lL8(1VT:
VUd*hE2!GmDQ`@n<@:V*Xt^qpP?ap`BZiVhLk7)P<Lh^)igM%eijg$MXJm^(pATqbjUsK4mN-)1)%hSH
hr-[^p8sqc*<`pH&%[\&5>?^ks#$qh''/!h2GuK@itRZq_95f1''PR-RAnaVSbpl]#L''Ym=KWb?48Xa
/7JhE8?>)i9<#^,WOIZVCL;:7+*tJ#h6ONRoo)j@84;E,H_4>=JW?:k?qn`O66TkeN:''^M_pTFb@ZDX
M<)kHkYGmCpUHYS(eJ:r@nq^q]&q^;,g"b3+tR[>"lMPZl])k@3Dd>P=*m]llPq)fC>q`b7T#4n=bVsk
Z"Ad80*r<*:MpqR-8pI5=3#!?d":IH0!VZuotq%X&C+G%Z/PkR%PW=l8g8Ds4kh@n-.!Vc$temuAh!AH
ZB:2HGBVQ>u[Wu_q]Y*Q6/^8Z!/*cD;\!G;3PAbufQ9!_[Ge#KdUZQ<nN@]mGJX080;XTrrqIX6)TH\@
l[+#oK"E,''94AfGAuZ+/!C^=&bu%UFXjp]o4@GBX)<hY2-O"4amrB"#R%arC''ho_/mj/,''39k:0M*
?rq:hpXUMqhYUdtWh6_qZ5_-+6889F<]!$GE20.N*tBTJdJ&Xp1hj'')X5<SLo+SY.H%?^rcd)7kV]U/
G"\N`H<'';0V;=F5cijdFg_jP:J*u!:IST1[,VkU*18%UDN$nD,Vq]PbJj!=@"*Y)V0^%`\OMt\pRG7p
t>pN,1)]_ClG''r(sp$M_O`$Mt>=UiL=B@iP:R-i4>L&c30oqZ6)q^Rq[7+125lG%c#3)adEcpBViSh"
Libf?M%F>!j>@0nIaHFJJRDXT>KWpLNjtpORl1i8iPTUE=cA"]B\;>XBAd:@Iog+8<t`nNPh,!W*HiqZ
-LAq[_j;pB;W8&bj]gd#bcV]c5#(;+;W;qj=%"pcYbR$24jBXV1<`''Bo0fpg4d1#mV-r\ui9@*Y[b_G
r<Y^U7IXJ_b?jb2FKe_+%A&#j877L$MW!C"K_n==8Q[OpEJ8GU\Ao9PbSk`gK`t::?@nK''Dm=Sp\78o
Sp4J-=;rMH5ql''9>JkD%>BjadAf>W`H)cB9''E*GhAm&PF)H+jmpE0,`kKil&a)812Nun0OOp,TZGF+
m>SsZ+=RN@3QUP>E\pBKBql`,K:H__b;Ym1*dr''V9SU?@-^)p>R5@Uhu;qZJ*DYdC3oXJ;C0oCkB_''
Dm;XAB`oYUqjmd]14PK?s-_V%Vq_\paaJ\GBX)FhY0_#"8=l''$MSuSZ`ps9XrF[ECJQ&LA0VHUEsL?&
a\bu9D+n%Q%f<,rG5,cqpFk\1lfA4*$=`ql-jo_J+pnhWVYb&/C$GEMGP<cR''(Xlm\24Q#qf`cr"sF?
O3sSQ.H#Of<G[cNMAfG]9I<''/(F2%@gTD);,%Ul#Rpg87>Q$3l$hA>oN,msAm#PSZ(.KpLTS9CNCIi<
]gK6&)ZpNN/5>]-+j8K[gLpH[Wc"j>2kQH1#9qbh\EW02scG]7hFF<CA^-3XnVVkA5/9QpO)h?3LD,mk
.VO]r1e<o3ROh@qs04::h4#Hsr<W3mSNY$b<QqdC]VpO<FOTYRM9)ml_T=!.<J,7=0_#MN;(9M@`\<,`
nrJ5rsY)d,^==C<69+pnfo>71*uh?2e#$MSuSZ`ps9XrF[ECJQ&LA0VHUEsL?&a\bu9D+n%QkTU?D?%K
-Q0<G8UkkC>*"8@q/(&&F+pBL@6pC]+Iq\8oA0)G\H*;^K7,52cnS#mDY=8)ai)<\ce_tO/;+o<-1><>
J"%VPZ>pMO]Ip_1a^i843Mk7bA`1ai_*!s]KaF0;Kn\f:ATg\1gE/GBNFlmG2);d=)[nfeFtPngU%Z`^
nZbIC1A*W#h=6;C''X\&09tA,AQ8pIs!0$`sH1iqI`T"8D:A-joabG6^fU"eL0RRV*T:&L@5[q^)+Jeg
fk5[^EHB+1DAoIUR"o)b3lepAj[$gXE%#IX@M*RXCBGEZ,GbA>",@"n+n-''&h[\Yi.\OpM^AEU7eN\)
\^SqODV3@WgoQWWc"SE?=@2BCEMjd$4cq_JZX`Ope.S!]ug"7[X#e)Gek/d#*P"2Od$du[&''jG_Ai*a
aOq[00)LiYpB2D9X/EVP]i7L`*YZ&SpFQR_[!;k+Lk:;3Ec7LN)`Ll"5T^ZLq_7boSbiR/BPM?k923IX
J0&t?%f;]G`V9nEpG-pngYN%epcTAhg]pKK@)L?t[`b6`F\<''cEGc_9GG1lUpY>KFXnr4p133[QHWWO
+)fl5oBn=Y+,^0:DhY0t*"-`Le''mU&&RWqUMqfrE.a%XspbI53b*\3uj3st`6q_*4"`0tpH+8^Wp@Wl
''mC)^5aYdkkMg''8*bQ?N%;G6.FkpO!)<?NbWZX.+Q9UEB4hr"0+-#5:(O)[3R<R\-T!Sbk''c#HseU
I"$ipJoi(ZqiW?$L]rC''Kq"YPS=Q"L*h<NGpKa).ph=pQpc\@X"8H4+GmD-GJhsPOpE0;+"eu:r$hqa
:$iA!KUB^H0p\G''MW2c,l)kHjiGmCL:J9QBjBnLLL5l5:NpN-RhVhLk0)PX-pXra/2I!Gt1W`sS/+-g
h''qf":aF9R8jJuG.WS=#M:*h<NG>+g''6?ZuPFFn]5XbpEU]Gai`()LR*aAfchT"o!/1#&ItL[Vd2a''
DG>Cg''-*HUR%u#Sbk6h#H!lAIXHBZIWurE;dRn&Sq<GjPSojIP*D^\Sbm5K#KNKUC7ua4q^;7Kq_87^
C34iM)gV0,SHj%]QC=,!R@9]h%V>NNh)Xs!cZ^!8T_F;;''lHGDCOUM1Bc@^nC6G,t)e=DAClBHTN2^s
'')o0D)e>aVb:&%fo`1iKiZ5]A3.<u04Oa0`D+"[;<1A=TKH`hUmU)KVbS@9Q1qe(0ZWiKemZ6''Q3Ml
lanXT>%0pacW7pEg&h#)H`:?[I8.K7IrpF;t*Y#5?46.g;LA'')N?5#E5UHXdGI]Pa%u-U)Whe#5c:8,
m=d:pKmStpKdmp6h_Mn)#%?=$?dKf*(pWiFs$T$:''r'':)[<%&Q_GT!iiElh<!l/#F^,:Ni_^''.#,7
EMU*''+jc4tGOJ9E%3*=$^m$MPJD7LJl.#?_CW*Y.p@G5%YR!V\nS)UJ-rcHZOf(\f<lTn&GN:C;7dqc
ur(3=6i))Y[MP9aXDqF?0c''*mOt`QBn6eqd0#%''r"Y78-X2t$DANd#"Aq0TQ^+uG6.G*pDV<%cM&5Z
$?R=\#'';m5U)qP`7LK#u]bOHQFF\m`*rCEl8ID/WQD#AsTDL)QF^5@"6jiZp#G>$''8-VZn*tJ#SG5,
]o!V\t,cHXQ,?j$2spV@S)$6T"J#G>$''q]&69J9E%3>mEq.*rDN*>nog9pYuLOJ<k:L$6K*(;%!%9(8
7%[U*''-i#G?U5F\`?f*rFql$6B\(S+p?UpLfs"qe2N*q%jb?]G7(Q!''^Mb!<<]3,60+l/-%I+56+.Q
9`S#j=TDe/A,p?ED?+_XHiSd!LB*bCVZ=F2_Z8?imf<Ol#QYM<,69.m.fha56NKj];ZU#%?3+O:B`W)P
HNATsK)p`.MZK.FRfT2`V#de$[/ml?^B)7RaT9Wed/hu&hZ;j?mfE%]q#UFeJ9"C+H1uNR#>]iEbT@5i
*DVcC"d#=ANg:WaMKDoA$ZcOr$4@(]$4AQqqn+Ng$i*I2Es<cpr(eOE$RZ;U]I=0q6ZIB?*dJ,.+:8LI
#=WX''diStl!#6jg$hjoV$4G7XGs`Y]""O]dGm>l-$Np,/pAbpT$4G=ZS^ALL$O8?m$a''/hX[id$TD:
Sa/dhMe#:BidjK;iKRie1*KD.8-%eh7E9GMMiG&hVrG,D.0TVSB,TPtt\Gm5f,$QJskq[<-&pJ^7Lijd
#NaL]WudMiSk,XD)FpJCT[f(U!T,kiJ8q\T-*$b?-D)uEV33Vtc4?2IUq.Jkgn@1-*CTaP*4qcjAJQ@K
A;+NfD+"b_DVMLZX]JXjb&$hbtU$O8!c$O=PYE&o)3pNh)h8R6I;*X`0=$;(XH$]E=)>gE(Lc3jhP$?T
>V$UkF")@$YC<=/a7#!!#4$_`l:FWUul$DJUMHa<EAGP>sV!NYr)$XO23$Wd\0$Vq+P$O1^''$]oQ-9Q
pO549Tp7$W@BR$O:d>J"[6mJ:J%''9GMjXEe\m`Hj^1$>m^s4$C7D.$X!gZ$\4Ob*Xd/e4Eh1-QBho$Q
@K>Fq%rhN''qp/D$_i0;$i''-)F^,7]TQ^)\aT:GY$\3bL*t+BbTcORBpBV-,~>')
%
category: '*PDFtalk test resources-test instances'
classmethod: FontHeader
example
	^FontHeader
		version: 1.0
		fontRevision: 2.2
		checkSumAdjustment: 3453633193
		flags: 3
		unitsPerEm: 1000
		created: (Timestamp d: 12 m: 9 y: 2008 h: 11 m: 59 s: 27)
		modified: (Timestamp d: 12 m: 9 y: 2008 h: 11 m: 59 s: 27)
		glyphBBox: (-53 @ -285 corner: 1121 @ 1012)
		macStyle: 0
		lowestRecPPEM: 3
		fontDirectionHint: 2
		indexToLocFormat: 0
		glyphDataFormat: 0
%
classmethod: FontHeader
exampleDifferentDates
	^FontHeader
		version: 1.0
		fontRevision: 1.0
		checkSumAdjustment: 3395040194
		flags: 3
		unitsPerEm: 1000
		created: (Timestamp d: 14 m: 1 y: 2010 h: 1)
		modified: (Timestamp d: 22 m: 7 y: 2010 h: 9 m: 46 s: 28)
		glyphBBox: (-80 @ -214 corner: 1033 @ 991)
		macStyle: 0
		lowestRecPPEM: 3
		fontDirectionHint: 2
		indexToLocFormat: 0
		glyphDataFormat: 0
%
classmethod: FontHeader
exampleUnitsPerEm2000
	^FontHeader
		version: 1.0
		fontRevision: 7.504
		checkSumAdjustment: 2521734574
		flags: 3
		unitsPerEm: 2000
		created: (Timestamp d: 18 m: 10 y: 2013 h: 16 m: 13 s: 8)
		modified: (Timestamp d: 18 m: 10 y: 2013 h: 15 m: 13 s: 13)
		glyphBBox: (-1351 @ -476 corner: 3135 @ 1948)
		macStyle: 0
		lowestRecPPEM: 7
		fontDirectionHint: 2
		indexToLocFormat: 0
		glyphDataFormat: 0
%
category: '*PDFtalk test resources-test instances'
classmethod: Glyph
example
	^Glyph
		id: 1
		name: 'a string'
		charString: #[42]
		code: 1
		hMetric: (HorMetric advanceWidth: 500 lsb: 16)
%
category: '*PDFtalk test resources-test instances'
classmethod: HorMetric
example
	^HorMetric advanceWidth: 1 lsb: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: IndexedSegment
example
	^IndexedSegment startCode: 1 endCode: 1 delta: 1 glyphIdArrayIndex: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: NameRecord
example
	^NameRecord
		platformID: 1
		encodingID: 1
		languageID: 1
		nameID: 1
		bytes: #[97 32 115 116 114 105 110 103]
%
category: '*PDFtalk test resources-test instances'
classmethod: ScriptRecord
example
	^ScriptRecord tag: 1 offset: 1
%
category: '*PDFtalk test resources-test instances'
classmethod: Segment
example
	^Segment startCode: 10 endCode: 20 delta: -9
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'PostScript Testing'.
	dict at: #comment put: 'Tests for the PostScript scanner and interpreter'.
	dict at: #isFunctional put: false.
	dict at: #notice put: 'The MIT License

Copyright © 2020 Christian Haider

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.'.
	dict at: #storeVersion put: '2.5.0.1'.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components := (components at:  #'PDFtalk Testing') at: #codeComponents.
	components at: dict name put: dict.
%
DoIt
System myUserProfile insertDictionary: PostScript at: 1.
%
# Define class ScannerTests
DoIt
TestCase
	subclass: 'ScannerTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	ScannerTests category: 'PostScript Testing'.
	ScannerTests namespacePath: #(#PostScript).
%
# Define class ObjectTests
DoIt
TestCase
	subclass: 'ObjectTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	ObjectTests category: 'PostScript Testing'.
	ObjectTests namespacePath: #(#PostScript).
%
# Define class OperatorTests
DoIt
TestCase
	subclass: 'OperatorTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	OperatorTests category: 'PostScript Testing'.
	OperatorTests namespacePath: #(#PostScript).
%
# Define class ScannerStringTests
DoIt
TestCase
	subclass: 'ScannerStringTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	ScannerStringTests category: 'PostScript Testing'.
	ScannerStringTests namespacePath: #(#PostScript).
%
# Define class PostScriptTests
DoIt
TestCase
	subclass: 'PostScriptTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	PostScriptTests category: 'PostScript Testing'.
	PostScriptTests namespacePath: #(#PostScript).
%
# Define class InterpreterTests
DoIt
TestCase
	subclass: 'InterpreterTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	InterpreterTests category: 'PostScript Testing'.
	InterpreterTests namespacePath: #(#PostScript).
%
# Define class NumberTokenTests
DoIt
TestCase
	subclass: 'NumberTokenTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	NumberTokenTests category: 'PostScript Testing'.
	NumberTokenTests namespacePath: #(#PostScript).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: PostScript at: 1.
%
category: 'Testing'
method: InterpreterTests
test3Plus4
	| interpreter object |
	interpreter := Interpreter on: '3 4 add'.
	self assert: interpreter stack isEmpty.
	object := interpreter next.
	self assert: object = 3.
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: interpreter stack top value = 3.
	self assert: interpreter stack printString = '|| 3 <'.
	object := interpreter next.
	self assert: object = 4.
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: interpreter stack top value = 4.
	self assert: interpreter stack printString = '|| 3 4 <'.
	object := interpreter next.
	self assert: object value = #add.
	self assert: object printPostScript = 'add'.
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: interpreter stack top value = 7.
	self assert: interpreter stack printString = '|| 7 <'
%
method: InterpreterTests
testArrayConstruction
	| interpreter object |
	interpreter := Interpreter on: '[3 4]'.
	self assert: interpreter stack isEmpty.
	object := interpreter next.
	self assert: object printPostScript = '['.
	self assert: (object isKindOf: Symbol).
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: interpreter stack top value = Mark new.
	self assert: interpreter stack printString = '|| *mark* <'.
	object := interpreter next.
	self assert: object = 3.
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: interpreter stack top value = 3.
	self assert: interpreter stack printString = '|| *mark* 3 <'.
	object := interpreter next.
	self assert: object = 4.
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: interpreter stack top value = 4.
	self assert: interpreter stack printString = '|| *mark* 3 4 <'.
	object := interpreter next.
	self assert: (object isKindOf: Symbol).
	self assert: object printPostScript = ']'.
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: (interpreter stack top isKindOf: Array).
	self assert: interpreter stack printString = '|| [3 4] <'
%
method: InterpreterTests
testComment
	| interpreter |
	interpreter := Interpreter on: '3 4 add 	%aComment'.
	self assert: interpreter stack isEmpty.
	self assert: interpreter step printString = '|| 3 <'.
	self assert: interpreter step printString = '|| 3 4 <'.
	self assert: interpreter step printString = '|| 7 <'.
	self should: [interpreter next] raise: EndOfTokenStreamNotification
%
method: InterpreterTests
testCommentPlus
	| interpreter |
	interpreter := Interpreter on: '3 4 add 	%aComment
	/end'.
	self assert: interpreter stack isEmpty.
	self assert: interpreter step printString = '|| 3 <'.
	self assert: interpreter step printString = '|| 3 4 <'.
	self assert: interpreter step printString = '|| 7 <'.
	self assert: interpreter step printString = '|| 7 /end <'.
	self assert: interpreter scanner atEnd
%
method: InterpreterTests
testDictionaryConstruction
	| interpreter object |
	interpreter := Interpreter on: '	<</a 0.1 /abc (tx) /bbb {pop pop}>>pop'.
	self assert: interpreter printString = '||  <'.
	self assert: interpreter step printString = '|| *mark* <'.
	self assert: interpreter step printString = '|| *mark* /a <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /abc <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /abc (tx) <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /abc (tx) /bbb <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /abc (tx) /bbb {pop pop} <'.
	object := interpreter next.
	self assert: (object isKindOf: Symbol).
	self assert: object printPostScript = '>>'.
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: (interpreter stack top isKindOf: PSDictionary).
	self assert: interpreter printString = '|| <</a 0.1 /abc (tx) /bbb {pop pop}>> <'.
	self assert: interpreter step printString = '||  <'
%
method: InterpreterTests
testEmpty
	| interpreter |
	interpreter := Interpreter on: ''.
	self assert: interpreter stack isEmpty.
	self assert: interpreter next isNil.
	self assert: interpreter scanner atEnd.
	self should: [interpreter next] raise: EndOfTokenStreamNotification
%
method: InterpreterTests
testNestedArrayConstruction
	| interpreter object |
	interpreter := Interpreter on: '[3 [(abc) /bcd] 4]'.
	self assert: interpreter stack isEmpty.
	object := interpreter next.
	self assert: object printPostScript = '['.
	object processIn: interpreter.
	self assert: interpreter printString = '|| *mark* <'.
	self assert: interpreter step printString = '|| *mark* 3 <'.
	self assert: interpreter step printString = '|| *mark* 3 *mark* <'.
	self assert: interpreter step printString = '|| *mark* 3 *mark* (abc) <'.
	self assert: interpreter step printString = '|| *mark* 3 *mark* (abc) /bcd <'.
	self assert: interpreter step printString = '|| *mark* 3 [(abc) /bcd] <'.
	self assert: interpreter step printString = '|| *mark* 3 [(abc) /bcd] 4 <'.
	self assert: interpreter step printString = '|| [3 [(abc) /bcd] 4] <'
%
method: InterpreterTests
testNestedDictionaryConstruction
	| interpreter |
	interpreter := Interpreter on: '	<</a 0.1 /dict <</abc (tx)>> /bbb {pop pop}>> pop'.
	self assert: interpreter printString = '||  <'.
	self assert: interpreter step printString = '|| *mark* <'.
	self assert: interpreter step printString = '|| *mark* /a <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /dict <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /dict *mark* <'.
	self assert: (interpreter step: 2) printString = '|| *mark* /a 0.1 /dict *mark* /abc (tx) <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /dict <</abc (tx)>> <'.
	self assert: (interpreter stack top isKindOf: PSDictionary).
	self assert: interpreter step printString = '|| *mark* /a 0.1 /dict <</abc (tx)>> /bbb <'.
	self assert: interpreter step printString = '|| *mark* /a 0.1 /dict <</abc (tx)>> /bbb {pop pop} <'.
	self assert: (interpreter stack top isKindOf: Procedure).
	self assert: interpreter step printString = '|| <</a 0.1 /dict <</abc (tx)>> /bbb {pop pop}>> <'.
	self assert: (interpreter stack top isKindOf: PSDictionary).
	self assert: interpreter step printString = '||  <'.
%
method: InterpreterTests
testNestedProcedureConstruction
	| interpreter |
	interpreter := Interpreter on: '/abc {
	dup pop /xyz {2 3 add} def
}def'.
	self assert: interpreter stack isEmpty.
	self assert: interpreter step printString = '|| /abc <'.
	self assert: interpreter step printString = '|| /abc {dup pop /xyz {2 3 add} def} <'.
	self assert: interpreter step printString = '||  <'.
%
method: InterpreterTests
testOperatorNotFound
	| interpreter object |
	interpreter := Interpreter on: '3 4 zork'.
	self assert: interpreter stack isEmpty.
	self assert: interpreter step printString = '|| 3 <'.
	self assert: interpreter step printString = '|| 3 4 <'.
	object := interpreter next.
	self assert: (object isKindOf: Symbol).
	self assert: object value = #zork.
	self should: [object processIn: interpreter] raise: LookupError.
	[object processIn: interpreter] on: LookupError do: [:ex |
		self assert: ex object == interpreter.
		self assert: ex reason = #valueAt: asString.
		self assert: ex key = #zork].
	self assert: interpreter stack printString = '|| 3 4 <'
%
method: InterpreterTests
testProcedureConstruction
	| interpreter object |
	interpreter := Interpreter on: '/abc {
	dup pop
}def'.
	self assert: interpreter stack isEmpty.
	object := interpreter next.
	self assert: object printPostScript = '/abc'.
	object processIn: interpreter.
	object := interpreter next.
	self assert: object printPostScript = '{dup pop}'.
	self assert: (object isKindOf: Procedure).
	object processIn: interpreter.
	self deny: interpreter stack isEmpty.
	self assert: (interpreter stack top isKindOf: Procedure).
	self assert: interpreter printString = '|| /abc {dup pop} <'.
	object := interpreter next.
	self assert: (object isKindOf: Symbol).
	self assert: object printPostScript = 'def'
%
method: InterpreterTests
testRun
	| ps |
	ps := Interpreter run: '3 4 add'.
	self assert: ps stack top value = 7.
	self assert: ps stack size = 1.
	ps run: 'dup mul'.
	self assert: ps stack top value = 49.
	self assert: ps stack size = 1.
	ps := Interpreter run: '3 4 add dup mul'.
	self assert: ps stack top value = 49.
	self assert: ps stack size = 1.
	ps := Interpreter run: '3 4 mul'.
	self assert: ps stack top value = 12.
	self assert: ps stack size = 1.
	ps := (Interpreter on: '3 4 mul') step: 2.
	self assert: ps stack top value = 4.
	self assert: ps stack size = 2.
	ps run: 'add dup'.
	self assert: ps stack top value = 7.
	self assert: ps stack size = 2.
	ps run.
	self assert: ps stack top value = 49.
	self assert: ps stack size = 1
%
method: InterpreterTests
testRunCascaded
	| ps |
	ps := (Interpreter on: '')
		run: '3 4 add';
		run: 'dup mul';
		yourself.
	self assert: ps stack top value = 49.
	self assert: ps stack size = 1.
	ps := (Interpreter new)
		run: '3';
		run: '4';
		run: 'add';
		run: 'dup';
		run: 'mul';
		yourself.
	self assert: ps stack top value = 49.
	self assert: ps stack size = 1.
	ps := (Interpreter new)
		run: '3';
		run: '4';
		run: 'add';
		run: 'dup';
		run: 'mul';
		yourself.
	self assert: ps stack top value = 49.
	self assert: ps stack size = 1
%
category: 'Testing'
method: NumberTokenTests
testE1
	| scanner |
	scanner := Scanner new.
	self deny: (scanner isReal: 'e1').
	self deny: (scanner isReal: '.e1').
	self assert: (scanner isReal: '.1e1').
	self assert: (scanner isReal: '1.e1').
%
method: NumberTokenTests
testIsBigRadix
	| scanner num1 num2 token1 token2 |
	scanner := Scanner on: '36#HalloIchBinEineZahl 36#HALLOICHBINEINEZAHL'.
	num1 := scanner isRadix: '36#HalloIchBinEineZahl'.
	num2 := scanner isRadix: '36#HALLOICHBINEINEZAHL'.
	self assert: num1 = num2.
	token1 := scanner nextPostScriptObject.
	self assert: token1 = 178382264521767329680834841049.
	token2 := scanner nextPostScriptObject.
	self assert: token2 = 178382264521767329680834841049.
	self assert: token1 = token2
%
method: NumberTokenTests
testIsInteger
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isInteger: '123').
	self assert: (scanner isInteger: '-98').
	self assert: (scanner isInteger: '43445').
	self assert: (scanner isInteger: '0').
	self assert: (scanner isInteger: '+17').
	"mine"
	self assert: (scanner isInteger: '123456789012345678901234567890').
%
method: NumberTokenTests
testIsIntegerNotReal
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isInteger: '123').
	self assert: (scanner isInteger: '-98').
	self assert: (scanner isInteger: '43445').
	self assert: (scanner isInteger: '0').
	self assert: (scanner isInteger: '+17').
	"mine"
	self assert: (scanner isInteger: '123456789012345678901234567890').
	self deny: (scanner isReal: '123').
	self deny: (scanner isReal: '-98').
	self deny: (scanner isReal: '43445').
	self deny: (scanner isReal: '0').
	self deny: (scanner isReal: '+17').
	"mine"
	self deny: (scanner isReal: '123456789012345678901234567890').
%
method: NumberTokenTests
testIsIntegerNotRealNotRadix
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isInteger: '123').
	self assert: (scanner isInteger: '-98').
	self assert: (scanner isInteger: '43445').
	self assert: (scanner isInteger: '0').
	self assert: (scanner isInteger: '+17').
	"mine"
	self assert: (scanner isInteger: '123456789012345678901234567890').
	self deny: (scanner isReal: '123').
	self deny: (scanner isReal: '-98').
	self deny: (scanner isReal: '43445').
	self deny: (scanner isReal: '0').
	self deny: (scanner isReal: '+17').
	"mine"
	self deny: (scanner isReal: '123456789012345678901234567890').
	self deny: (scanner isRadix: '123').
	self deny: (scanner isRadix: '-98').
	self deny: (scanner isRadix: '43445').
	self deny: (scanner isRadix: '0').
	self deny: (scanner isRadix: '+17').
	"mine"
	self deny: (scanner isRadix: '123456789012345678901234567890').
%
method: NumberTokenTests
testIsRadix
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isRadix: '8#1777').
	self assert: (scanner isRadix: '16#FFFE').
	self assert: (scanner isRadix: '2#1000').
	"mine"
	self deny: (scanner isRadix: '49#62tvs').
	self assert: (scanner isRadix: '36#HalloIchBinEineZahl').
	self deny: (scanner isRadix: '15#EF').
%
method: NumberTokenTests
testIsRadixNotInteger
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isRadix: '8#1777').
	self assert: (scanner isRadix: '16#FFFE').
	self assert: (scanner isRadix: '2#1000').
	"mine"
	self assert: (scanner isRadix: '36#HalloIchBinEineZahl').
	self deny: (scanner isRadix: '49#62tvs').
	self deny: (scanner isRadix: '15#EF').

	self deny: (scanner isInteger: '8#1777').
	self deny: (scanner isInteger: '16#FFFE').
	self deny: (scanner isInteger: '2#1000').
	"mine"
	self deny: (scanner isInteger: '36#HalloIchBinEineZahl').
%
method: NumberTokenTests
testIsRadixNotIntegerNotReal
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isRadix: '8#1777').
	self assert: (scanner isRadix: '16#FFFE').
	self assert: (scanner isRadix: '2#1000').
	"mine"
	self assert: (scanner isRadix: '36#HalloIchBinEineZahl').
	self deny: (scanner isRadix: '49#62tvs').
	self deny: (scanner isRadix: '15#EF').

	self deny: (scanner isInteger: '8#1777').
	self deny: (scanner isInteger: '16#FFFE').
	self deny: (scanner isInteger: '2#1000').
	"mine"
	self deny: (scanner isInteger: '36#HalloIchBinEineZahl').

	self deny: (scanner isReal: '8#1777').
	self deny: (scanner isReal: '16#FFFE').
	self deny: (scanner isReal: '2#1000').
	"mine"
	self deny: (scanner isReal: '36#HalloIchBinEineZahl').
%
method: NumberTokenTests
testIsReal
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isReal: '-.002').
	self assert: (scanner isReal: '34.5').
	self assert: (scanner isReal: '-3.62').
	self assert: (scanner isReal: '123.6e10').
	self assert: (scanner isReal: '1.0E-5').
	self assert: (scanner isReal: '1E6').
	self assert: (scanner isReal: '-1.').
	self assert: (scanner isReal: '0.0').
	"mine"
	self deny: (scanner isReal: '0.0e2.3').
%
method: NumberTokenTests
testIsRealNotInteger
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isReal: '-.002').
	self assert: (scanner isReal: '34.5').
	self assert: (scanner isReal: '-3.62').
	self assert: (scanner isReal: '123.6e10').
	self assert: (scanner isReal: '1.0E-5').
	self assert: (scanner isReal: '1E6').
	self assert: (scanner isReal: '-1.').
	self assert: (scanner isReal: '0.0').
	self deny: (scanner isInteger: '-.002').
	self deny: (scanner isInteger: '34.5').
	self deny: (scanner isInteger: '-3.62').
	self deny: (scanner isInteger: '123.6e10').
	self deny: (scanner isInteger: '1.0E-5').
	self deny: (scanner isInteger: '1E6').
	self deny: (scanner isInteger: '-1.').
	self deny: (scanner isInteger: '0.0').
%
method: NumberTokenTests
testIsRealNotIntegerNotRadix
	| scanner |
	scanner := Scanner new.
	self assert: (scanner isReal: '-.002').
	self assert: (scanner isReal: '34.5').
	self assert: (scanner isReal: '-3.62').
	self assert: (scanner isReal: '123.6e10').
	self assert: (scanner isReal: '1.0E-5').
	self assert: (scanner isReal: '1E6').
	self assert: (scanner isReal: '-1.').
	self assert: (scanner isReal: '0.0').
	self deny: (scanner isInteger: '-.002').
	self deny: (scanner isInteger: '34.5').
	self deny: (scanner isInteger: '-3.62').
	self deny: (scanner isInteger: '123.6e10').
	self deny: (scanner isInteger: '1.0E-5').
	self deny: (scanner isInteger: '1E6').
	self deny: (scanner isInteger: '-1.').
	self deny: (scanner isInteger: '0.0').
	self deny: (scanner isRadix: '-.002').
	self deny: (scanner isRadix: '34.5').
	self deny: (scanner isRadix: '-3.62').
	self deny: (scanner isRadix: '123.6e10').
	self deny: (scanner isRadix: '1.0E-5').
	self deny: (scanner isRadix: '1E6').
	self deny: (scanner isRadix: '-1.').
	self deny: (scanner isRadix: '0.0').
%
category: 'tests'
method: ObjectTests
testProcedures
	self assert: (Procedure source: 'pop pop') printString = '{pop pop}'.
	self assert: 'pop pop' asProcedure printString = '{pop pop}'
%
category: 'Testing Arithmetic and Math'
method: OperatorTests
testAbs
	self assert: (Interpreter run: '4.5 abs') printString = '|| 4.5 <'.
	self assert: (Interpreter run: '-3 abs') printString = '|| 3 <'.
	self assert: (Interpreter run: '0 abs') printString = '|| 0 <'.
	self should: [Interpreter run: 'abs'] raise: Stackunderflow
%
method: OperatorTests
testAdd
	self assert: (Interpreter run: '3 4 add') printString = '|| 7 <'.
	self assert: (Interpreter run: '9.9 1.1 add') printString = '|| 11 <'.
	self should: [Interpreter run: '4 add'] raise: Stackunderflow
%
method: OperatorTests
testAtan
	self assert: (Interpreter run: '0 1 atan') printString = '|| 0 <'.
	self assert: (Interpreter run: '1 0 atan') printString = '|| 90 <'.
	self assert: (Interpreter run: '-100 0 atan') printString = '|| 270 <'.
	self assert: (Interpreter run: '4 4 atan') printString = '|| 45 <'.
	self should: [Interpreter run: 'atan'] raise: Stackunderflow
%
method: OperatorTests
testCeiling
	self assert: (Interpreter run: '3.2 ceiling') printString = '|| 4 <'.
	self assert: (Interpreter run: '-4.8 ceiling') printString = '|| -4 <'.
	self assert: (Interpreter run: '99 ceiling') printString = '|| 99 <'.
	self should: [Interpreter run: 'ceiling'] raise: Stackunderflow
%
method: OperatorTests
testCos
	self assert: (Interpreter run: '0 cos') printString = '|| 1 <'.
	self assert: (Interpreter run: '90 cos') printString = '|| 0 <'.
	self should: [Interpreter run: 'cos'] raise: Stackunderflow
%
method: OperatorTests
testDiv
	self assert: (Interpreter run: '3 2 div') printString = '|| 1.5 <'.
	self assert: (Interpreter run: '4 2 div') printString = '|| 2 <'.
	self should: [Interpreter run: '2 div'] raise: Stackunderflow
%
method: OperatorTests
testExp
	self assert: (Interpreter run: '9 0.5 exp') printString = '|| 3 <'.
	self assert: (Interpreter run: '-9 -1 exp') printString = '|| -0.11111111 <'.
	self should: [Interpreter run: '2 exp'] raise: Stackunderflow
%
method: OperatorTests
testFloor
	self assert: (Interpreter run: '3.2 floor') printString = '|| 3 <'.
	self assert: (Interpreter run: '-4.8 floor') printString = '|| -5 <'.
	self assert: (Interpreter run: '99 floor') printString = '|| 99 <'.
	self should: [Interpreter run: 'floor'] raise: Stackunderflow
%
method: OperatorTests
testIdiv
	self assert: (Interpreter run: '3 2 idiv') printString = '|| 1 <'.
	self assert: (Interpreter run: '4 2 idiv') printString = '|| 2 <'.
	self assert: (Interpreter run: '-5 2 idiv') printString = '|| -2 <'.
	self should: [Interpreter run: '2 idiv'] raise: Stackunderflow
%
method: OperatorTests
testLn
	self assert: (Interpreter run: '10 ln') printString = '|| 2.30258509 <'.
	self assert: (Interpreter run: '100 ln') printString = '|| 4.60517019 <'.
	self should: [Interpreter run: 'ln'] raise: Stackunderflow
%
method: OperatorTests
testLog
	self assert: (Interpreter run: '10 log') printString = '|| 1 <'.
	self assert: (Interpreter run: '100 log') printString = '|| 2 <'.
	self should: [Interpreter run: 'log'] raise: Stackunderflow
%
method: OperatorTests
testMod
	self assert: (Interpreter run: '5 3 mod') printString = '|| 2 <'.
	self assert: (Interpreter run: '5 2 mod') printString = '|| 1 <'.
	self assert: (Interpreter run: '-5 3 mod') printString = '|| -2 <'.
	self should: [Interpreter run: '2 mod'] raise: Stackunderflow
%
method: OperatorTests
testMul
	self assert: (Interpreter run: '5 3 mul') printString = '|| 15 <'.
	self assert: (Interpreter run: '5 2 mul') printString = '|| 10 <'.
	self assert: (Interpreter run: '-5 3 mul') printString = '|| -15 <'.
	self should: [Interpreter run: '2 mul'] raise: Stackunderflow
%
method: OperatorTests
testNeg
	self assert: (Interpreter run: '4.5 neg') printString = '|| -4.5 <'.
	self assert: (Interpreter run: '-3 neg') printString = '|| 3 <'.
	self should: [Interpreter run: 'neg'] raise: Stackunderflow
%
method: OperatorTests
testRand
	| stack |
	self assert: ((Interpreter run: 'rand') stack top isKindOf: Integer).
	self assert: (Interpreter run: 'rand') stack top positive.
	stack := (Interpreter run: 'rand rand') stack.
	self deny: stack top = (stack at: 1)
%
method: OperatorTests
testRound
	self assert: (Interpreter run: '3.2 round') printString = '|| 3 <'.
	self assert: (Interpreter run: '6.5 round') printString = '|| 7 <'.
	self assert: (Interpreter run: '-4.8 round') printString = '|| -5 <'.
	self assert: (Interpreter run: '-6.5 round') printString = '|| -7 <'.	"different: PLRM says -6"
	self assert: (Interpreter run: '99 round') printString = '|| 99 <'.
	self should: [Interpreter run: 'round'] raise: Stackunderflow
%
method: OperatorTests
testRrand
	| stack |
	self assert: ((Interpreter run: 'rrand') stack top isKindOf: Integer).
	self assert: (Interpreter run: 'rrand') stack top positive.
	stack := (Interpreter run: 'rrand rrand') stack.
	self assert: stack top = (stack at: 1)
%
method: OperatorTests
testSin
	self assert: (Interpreter run: '0 sin') printString = '|| 0 <'.
	self assert: (Interpreter run: '90 sin') printString = '|| 1 <'.
	self should: [Interpreter run: 'sin'] raise: Stackunderflow
%
method: OperatorTests
testSqrt
	self assert: (Interpreter run: '81 sqrt') printString = '|| 9 <'.
	self assert: (Interpreter run: '10 sqrt') printString = '|| 3.16227766 <'.
	self should: [Interpreter run: 'sqrt'] raise: Stackunderflow
%
method: OperatorTests
testSrand
	self assert: (Interpreter run: '1 srand') printString = '||  <'.
	self assert: (Interpreter run: '1 srand rand') printString = '|| 1082937746 <'.
	self assert: (Interpreter run: '1 srand rand') printString = '|| 1082937746 <'.
	self assert: (Interpreter run: '2 srand rand') printString = '|| 1799098886 <'
%
method: OperatorTests
testSub
	self assert: (Interpreter run: '32 4 sub') printString = '|| 28 <'.
	self assert: (Interpreter run: '3 4 sub') printString = '|| -1 <'.
	self assert: (Interpreter run: '9.9 1.1 sub') printString = '|| 8.8 <'.
	self should: [Interpreter run: '4 sub'] raise: Stackunderflow
%
method: OperatorTests
testTruncate
	self assert: (Interpreter run: '3.2 truncate') printString = '|| 3 <'.
	self assert: (Interpreter run: '-4.8 truncate') printString = '|| -4 <'.
	self assert: (Interpreter run: '99 truncate') printString = '|| 99 <'.
	self should: [Interpreter run: 'truncate'] raise: Stackunderflow
%
category: 'Testing Array'
method: OperatorTests
testAload
	self assert: (Interpreter run: '[23 (ab) -6] aload') printString = '|| 23 (ab) -6 [23 (ab) -6] <'.
	self should: [Interpreter run: 'aload'] raise: Stackunderflow
%
method: OperatorTests
testArray
	self assert: (Interpreter run: '3 array') printString = '|| [null null null] <'.
	self should: [Interpreter run: 'array'] raise: Stackunderflow
%
method: OperatorTests
testArrayConstruction
	self assert: (Interpreter run: '[') printString = '|| *mark* <'.
	self assert: (Interpreter run: '[5 4 3]') printString = '|| [5 4 3] <'.
	self assert: (Interpreter run: 'mark 5 4 3 counttomark array astore exch pop') printString = '|| [5 4 3] <'.
	self assert: (Interpreter run: '[1 2 add]') printString = '|| [3] <'.
	self should: [Interpreter run: ']'] raise: Unmatchedmark
%
method: OperatorTests
testAstore
	self assert: (Interpreter run: '(a) (bcd) (ef) 3 array astore') printString = '|| [(a) (bcd) (ef)] <'.
	self should: [Interpreter run: 'astore'] raise: Stackunderflow
%
category: 'Testing Collections'
method: OperatorTests
testCopyArray
	self assert: (Interpreter run: '
		/a1 [1 2 3] def
		a1 dup length array copy') printString = '|| [1 2 3] <'
%
method: OperatorTests
testCopyDictionary
	self assert: (Interpreter run: '
		/a1 <</a 1 /b 2 /c 3>> def
		a1 dup length dict copy') printString = '|| <</a 1 /b 2 /c 3>> <'
%
method: OperatorTests
testForall
	self assert: (Interpreter run: '0 [ 13 29 3 -8 21 ] { add } forall') printString = '|| 58 <'.
	self assert: (Interpreter run: '
	/d 2 dict def
	d /abc 123 put
	d /xyz (test) put
	d { } forall') printString = '|| /abc 123 /xyz (test) <'.
	self should: [Interpreter run: '{ add } forall'] raise: Stackunderflow
%
method: OperatorTests
testForallExit
	self assert: (Interpreter run: '0 [ 13 29 3 8 21 ] {1 index 42 gt {(end) exit} if add } forall') printString = '|| 45 8 (end) <'
%
method: OperatorTests
testGet
	self assert: (Interpreter run: '[31 41 59] 0 get') printString = '|| 31 <'.
	self assert: (Interpreter run: '[0 (string1) [ ] {add 2 div}] 2 get') printString = '|| [] <'.
	self assert: (Interpreter run: '
	/mykey (myvalue) def
	currentdict /mykey get') printString = '|| (myvalue) <'.
	self assert: (Interpreter run: '(abc) 1 get') printString = '|| 98 <'.
	self assert: (Interpreter run: '(a) 0 get') printString = '|| 97 <'.
	self should: [Interpreter run: '0 get'] raise: Stackunderflow
%
method: OperatorTests
testGetinterval
	self assert: (Interpreter run: '[9 8 7 6 5] 1 3 getinterval') printString = '|| [8 7 6] <'.
	self assert: (Interpreter run: '(abcde) 1 3 getinterval') printString = '|| (bcd) <'.
	self assert: (Interpreter run: '(abcde) 0 0 getinterval') printString = '|| () <'.
	self should: [Interpreter run: '0 0 getinterval'] raise: Stackunderflow
%
method: OperatorTests
testLength
	self assert: (Interpreter run: '[1 2 4] length') printString = '|| 3 <'.
	self assert: (Interpreter run: '[ ] length') printString = '|| 0 <'.
	self assert: (Interpreter run: '/ar 20 array def ar length') printString = '|| 20 <'.
	self assert: (Interpreter run: '
	/mydict 5 dict def
	mydict length') printString = '|| 0 <'.
	self assert: (Interpreter run: '
	/mydict 5 dict def
	mydict /firstkey (firstvalue) put
	mydict length') printString = '|| 1 <'.
	self assert: (Interpreter run: '(abc\n) length') printString = '|| 4 <'.
	self assert: (Interpreter run: '() length') printString = '|| 0 <'.
	self assert: (Interpreter run: '/foo length') printString = '|| 3 <'.
	self should: [Interpreter run: 'length'] raise: Stackunderflow
%
method: OperatorTests
testPut
	self assert: (Interpreter run: '
	/ar [5 17 3 8] def
	ar 2 (abcd) put
	ar') printString = '|| [5 17 (abcd) 8] <'.
	self assert: (Interpreter run: '
	/d 5 dict def
	d /abc 123 put
	d { } forall') printString = '|| /abc 123 <'.
	self assert: (Interpreter run: '
	/st (abc) def
	st 0 65 put
	st') printString = '|| (Abc) <'.
	self should: [Interpreter run: '(a) 0 put'] raise: Stackunderflow
%
method: OperatorTests
testPutinterval
	self assert: (Interpreter run: '/ar [5 8 2 7 3] def
ar 1 [(a) (b) (c)] putinterval
ar') printString = '|| [5 (a) (b) (c) 3] <'.
	self assert: (Interpreter run: '/st (abc) def
st 1 (de) putinterval
st') printString = '|| (ade) <'.
	self should: [Interpreter run: '0 0 putinterval'] raise: Stackunderflow
%
category: 'Testing Control'
method: OperatorTests
testCountexecstack
	self assert: (Interpreter run: 'countexecstack') printString = '|| 0 <'.
	self assert: (Interpreter run: '/a {3 2 add countexecstack} def a') printString = '|| 5 1 <'
%
method: OperatorTests
testExec
	self assert: (Interpreter run: '(3 2 add) cvx exec') printString = '|| 5 <'.
	self assert: (Interpreter run: '3 2 /add exec') printString = '|| 3 2 /add <'.
	self assert: (Interpreter run: '3 2 /add cvx exec') printString = '|| 5 <'.
	self should: [Interpreter run: 'exec'] raise: Stackunderflow
%
method: OperatorTests
testFor
	self assert: (Interpreter run: '0 1 1 4 {add} for') printString = '|| 10 <'.
	self assert: (Interpreter run: '1 2 6 { } for') printString = '|| 1 3 5 <'.
	self assert: (Interpreter run: '3 -.5 1 { } for') printString = '|| 3 2.5 2 1.5 1 <'.
	self should: [Interpreter run: '1 4 {add} for'] raise: Stackunderflow
%
method: OperatorTests
testForExit
	self assert: (Interpreter run: '1 1 100 {dup 6 ge {exit} if} for') printString = '|| 1 2 3 4 5 6 <'.
	self should: [Interpreter run: 'exit'] raise: ExitNotification
%
method: OperatorTests
testIf
	self assert: (Interpreter run: '3 4 lt {(3 is less than 4)} if') printString = '|| (3 is less than 4) <'.
	self assert: (Interpreter run: '
		4 3 lt
			{(TruePart)}
			{(FalsePart)}
		ifelse') printString = '|| (FalsePart) <'.
	self should: [Interpreter run: '{add} if'] raise: Stackunderflow.
	self should: [Interpreter run: '{4} {add} ifelse'] raise: Stackunderflow
%
method: OperatorTests
testLoopExit
	self assert: (Interpreter run: '{count 4 ge {(end) exit} if (abc)} loop') printString = '|| (abc) (abc) (abc) (abc) (end) <'
%
method: OperatorTests
testRepeat
	self assert: (Interpreter run: '4 {(abc)} repeat') printString = '|| (abc) (abc) (abc) (abc) <'.
	self assert: (Interpreter run: '1 2 3 4 3 {pop} repeat') printString = '|| 1 <'.
	self assert: (Interpreter run: '4 { } repeat') printString = '||  <'.
	self assert: (Interpreter run: 'mark 0 {(will not happen)} repeat') printString = '|| *mark* <'.
	self should: [Interpreter run: '{add} repeat'] raise: Stackunderflow
%
method: OperatorTests
testRepeatExit
	self assert: (Interpreter run: '100 {count 4 ge {(end) exit} if (abc)} repeat') printString = '|| (abc) (abc) (abc) (abc) (end) <'
%
method: OperatorTests
testStopped
	self assert: (Interpreter run: '
		{100 {
			count 4 ge {
				(end) stop
			} if (abc)
		} repeat} stopped
			{(error occured)}
		if') printString = '|| (abc) (abc) (abc) (abc) (end) (error occured) <'
%
category: 'Testing Dictionary'
method: OperatorTests
testCountdictstack
	self assert: (Interpreter run: 'countdictstack') printString = '|| 3 <'.
	self assert: (Interpreter run: '1 dict begin countdictstack') printString = '|| 4 <'
%
method: OperatorTests
testCurrentdict
	self assert: (Interpreter run: 'currentdict') printString = '|| <<>> <'.
	self assert: (Interpreter run: '1 dict begin /a 42 def currentdict') printString = '|| <</a 42>> <'
%
method: OperatorTests
testDef
	| interpreter |
	interpreter := Interpreter run: '/A 65 def'.
	self assert: interpreter stack isEmpty.
	self assert: (interpreter dictionaryStack top at: #A) = 65.
	self assert: (Interpreter run: '/ncnt 1 def currentdict') printString = '|| <</ncnt 1>> <'.
	self assert: (Interpreter run: '
	/ncnt 1 def
	/ncnt ncnt 1 add def
	currentdict') printString = '|| <</ncnt 2>> <'.
	self should: [Interpreter run: '65 def'] raise: Stackunderflow
%
method: OperatorTests
testDict
	self assert: (Interpreter run: '3 dict') printString = '|| <<>> <'.
	self should: [Interpreter run: 'dict'] raise: Stackunderflow
%
method: OperatorTests
testDictionaries
	self assert: (Interpreter run: 'globaldict') printString = '|| <<>> <'.
	self assert: (Interpreter run: '/a 1 def userdict') printString = '|| <</a 1>> <'.
	self assert: (Interpreter run: 'systemdict length') pop > 120
%
method: OperatorTests
testKnown
	self assert: (Interpreter run: '
		/mydict 5 dict def
		mydict /total 0 put
		mydict /total known') printString = '|| true <'.
	self assert: (Interpreter run: '
		/mydict 5 dict def
		mydict /total 0 put
		mydict /badname known') printString = '|| false <'.
	self should: [Interpreter run: '/total known'] raise: Stackunderflow
%
method: OperatorTests
testLoad
	self assert: (Interpreter run: '
		/avg {add 2 div} def
		/avg load') printString = '|| {add 2 div} <'.
	self should: [Interpreter run: 'load'] raise: Stackunderflow
%
method: OperatorTests
testMaxlength
	self assert: (Interpreter run: '<</a 1 /b 2>> maxlength') printString = '|| 27 <'.
	self assert: (Interpreter run: '<</a 1 /b 2 /c 3>> maxlength') printString = '|| 27 <'.
	self should: [Interpreter run: 'maxlength'] raise: Stackunderflow
%
method: OperatorTests
testStore
	self assert: (Interpreter run: '/abc 123 store currentdict') printString = '|| <</abc 123>> <'.
	self assert: (Interpreter run: '
		/abc 123 def
		/abc 456 store
		currentdict') printString = '|| <</abc 456>> <'.
	self should: [Interpreter run: '123 store'] raise: Stackunderflow
%
method: OperatorTests
testUndef
	self assert: (Interpreter run: '
		/abc 123 def
		currentdict') printString = '|| <</abc 123>> <'.
	self assert: (Interpreter run: '
		/abc 123 def
		currentdict /abc undef
		currentdict') printString = '|| <<>> <'.
	self should: [Interpreter run: '/a undef'] raise: Stackunderflow
%
method: OperatorTests
testWhere
	self assert: (Interpreter run: '
		/abc 123 def
		3 dict begin /a 1 def 
		/abc where') printString = '|| <</abc 123>> true <'.
	self assert: (Interpreter run: '
		/abc 123 def
		3 dict begin /a 1 def 
		/a where') printString = '|| <</a 1>> true <'.
	self assert: (Interpreter run: '
		/abc 123 def
		3 dict begin /a 1 def 
		/ab where') printString = '|| false <'.
	self should: [Interpreter run: 'where'] raise: Stackunderflow
%
category: 'Testing Miscellaneous'
method: OperatorTests
testGlobal
	self assert: (Interpreter run: 'currentglobal') printString = '|| false <'.
	self assert: (Interpreter run: 'true setglobal currentglobal') printString = '|| true <'
%
method: OperatorTests
testLanguagelevel
	self assert: (Interpreter run: 'languagelevel') printString = '|| 3 <'
%
method: OperatorTests
testProduct
	self assert: (Interpreter run: 'product') printString = '|| (PDFtalk PostScript) <'
%
method: OperatorTests
testRevision
	self assert: ((Interpreter run: #revision asString) pop isKindOf: Integer)
%
method: OperatorTests
testSerialnumber
	self assert: (Interpreter run: 'serialnumber') printString = '|| 1 <'
%
method: OperatorTests
testVersion
	"runs only when the proper store is connected"

	self assert: ('2.5.0.*' match: (Interpreter run: 'version') pop)
%
category: 'Testing Operand Stack Manipulation'
method: OperatorTests
testClear
	self assert: (Interpreter run: '(a) (b) (c) clear') printString = '||  <'.
	self assert: (Interpreter run: '(a) clear') printString = '||  <'.
	self assert: (Interpreter run: 'clear') printString = '||  <'
%
method: OperatorTests
testCleartomark
	self assert: (Interpreter run: '3 4 mark 20 15 cleartomark') printString = '|| 3 4 <'.
	self assert: (Interpreter run: '3 4 mark cleartomark') printString = '|| 3 4 <'.
	self should: [Interpreter run: '3 4 cleartomark'] raise: Unmatchedmark
%
method: OperatorTests
testCopy
	self assert: (Interpreter run: '(a) (b) (c) 2 copy') printString = '|| (a) (b) (c) (b) (c) <'.
	self assert: (Interpreter run: '(a) (b) (c) 0 copy') printString = '|| (a) (b) (c) <'.
	self should: [Interpreter run: '(a) (b) (c) 4 copy'] raise: Stackunderflow
%
method: OperatorTests
testCount
	self assert: (Interpreter run: '(a) (b) (c) (d) count') printString = '|| (a) (b) (c) (d) 4 <'.
	self assert: (Interpreter run: '(a) (b) (c) count') printString = '|| (a) (b) (c) 3 <'.
	self assert: (Interpreter run: 'count') printString = '|| 0 <'
%
method: OperatorTests
testCounttomark
	self assert: (Interpreter run: '1 mark 2 3 counttomark') printString = '|| 1 *mark* 2 3 2 <'.
	self assert: (Interpreter run: '1 mark counttomark') printString = '|| 1 *mark* 0 <'.
	self should: [Interpreter run: '3 4 counttomark'] raise: Unmatchedmark
%
method: OperatorTests
testDup
	self assert: (Interpreter run: '3 4 dup') printString = '|| 3 4 4 <'.
	self should: [Interpreter run: 'dup'] raise: Stackunderflow
%
method: OperatorTests
testExch
	self assert: (Interpreter run: '1 2 exch') printString = '|| 2 1 <'.
	self assert: (Interpreter run: '1 2 exch exch') printString = '|| 1 2 <'.
	self should: [Interpreter run: '3 exch'] raise: Stackunderflow
%
method: OperatorTests
testIndex
	self assert: (Interpreter run: '(a) (b) (c) (d) 0 index') printString = '|| (a) (b) (c) (d) (d) <'.
	self assert: (Interpreter run: '(a) (b) (c) (d) 3 index') printString = '|| (a) (b) (c) (d) (a) <'.
	self should: [Interpreter run: '0 index'] raise: Stackunderflow.
	self should: [Interpreter run: '(a) (b) (c) (d) 4 index'] raise: Stackunderflow
%
method: OperatorTests
testMark
	self assert: (Interpreter run: '(a) (b) (c) (d) mark') printString = '|| (a) (b) (c) (d) *mark* <'.
	self assert: (Interpreter run: 'mark') printString = '|| *mark* <'
%
method: OperatorTests
testPop
	self assert: (Interpreter run: '3 4 pop') printString = '|| 3 <'.
	self assert: (Interpreter run: '3 4 pop pop') printString = '||  <'.
	self should: [Interpreter run: '3 4 pop pop pop'] raise: Stackunderflow
%
method: OperatorTests
testRoll
	self assert: (Interpreter run: '(a) (b) (c) 3 -1 roll') printString = '|| (b) (c) (a) <'.
	self assert: (Interpreter run: '(a) (b) (c) 3 1 roll') printString = '|| (c) (a) (b) <'.
	self assert: (Interpreter run: '(a) (b) (c) 3 0 roll') printString = '|| (a) (b) (c) <'.
	self should: [Interpreter run: '(a) (b) (c) 4 1 roll'] raise: Stackunderflow
%
category: 'Testing Relational, Boolean, and Bitwise'
method: OperatorTests
testAnd
	self assert: (Interpreter run: 'true true and') printString = '|| true <'.
	self assert: (Interpreter run: 'true false and') printString = '|| false <'.
	self assert: (Interpreter run: 'false true and') printString = '|| false <'.
	self assert: (Interpreter run: 'false false and') printString = '|| false <'.
	self assert: (Interpreter run: '99 1 and') printString = '|| 1 <'.
	self assert: (Interpreter run: '52 7 and') printString = '|| 4 <'.
	self should: [Interpreter run: '4 and'] raise: Stackunderflow
%
method: OperatorTests
testBitshift
	self assert: (Interpreter run: '7 3 bitshift') printString = '|| 56 <'.
	self assert: (Interpreter run: '142 -3 bitshift') printString = '|| 17 <'.
	self should: [Interpreter run: '4 bitshift'] raise: Stackunderflow
%
method: OperatorTests
testEq
	self assert: (Interpreter run: '4.0 4 eq') printString = '|| true <'.
	self assert: (Interpreter run: '(abc) (abc) eq') printString = '|| true <'.
	self assert: (Interpreter run: '(abc) /abc eq') printString = '|| true <'.
	self assert: (Interpreter run: '[1 2 3] dup eq') printString = '|| true <'.
	self assert: (Interpreter run: '[1 2 3] [1 2 3] eq') printString = '|| false <'.
	self should: [Interpreter run: '4 eq'] raise: Stackunderflow
%
method: OperatorTests
testGe
	self assert: (Interpreter run: '4.2 4 ge') printString = '|| true <'.
	self assert: (Interpreter run: '(abc) (d) ge') printString = '|| false <'.
	self assert: (Interpreter run: '(aba) (ab) ge') printString = '|| true <'.
	self assert: (Interpreter run: '(aba) (aba) ge') printString = '|| true <'.
	self should: [Interpreter run: '4 ge'] raise: Stackunderflow
%
method: OperatorTests
testGt
	self assert: (Interpreter run: '4.2 4 gt') printString = '|| true <'.
	self assert: (Interpreter run: '(abc) (d) gt') printString = '|| false <'.
	self assert: (Interpreter run: '(aba) (ab) gt') printString = '|| true <'.
	self assert: (Interpreter run: '(aba) (aba) gt') printString = '|| false <'.
	self should: [Interpreter run: '4 gt'] raise: Stackunderflow
%
method: OperatorTests
testLe
	self assert: (Interpreter run: '4.2 4 le') printString = '|| false <'.
	self assert: (Interpreter run: '(abc) (d) le') printString = '|| true <'.
	self assert: (Interpreter run: '(aba) (ab) le') printString = '|| false <'.
	self assert: (Interpreter run: '(aba) (aba) le') printString = '|| true <'.
	self should: [Interpreter run: '4 le'] raise: Stackunderflow
%
method: OperatorTests
testLt
	self assert: (Interpreter run: '4.2 4 lt') printString = '|| false <'.
	self assert: (Interpreter run: '(abc) (d) lt') printString = '|| true <'.
	self assert: (Interpreter run: '(aba) (ab) lt') printString = '|| false <'.
	self assert: (Interpreter run: '(aba) (aba) lt') printString = '|| false <'.
	self should: [Interpreter run: '4 lt'] raise: Stackunderflow
%
method: OperatorTests
testNe
	self assert: (Interpreter run: '4.0 4 ne') printString = '|| false <'.
	self assert: (Interpreter run: '(abc) (abc) ne') printString = '|| false <'.
	self assert: (Interpreter run: '(abc) /abc ne') printString = '|| false <'.
	self assert: (Interpreter run: '[1 2 3] dup ne') printString = '|| false <'.
	self assert: (Interpreter run: '[1 2 3] [1 2 3] ne') printString = '|| true <'.
	self should: [Interpreter run: '4 ne'] raise: Stackunderflow
%
method: OperatorTests
testNot
	self assert: (Interpreter run: 'true not') printString = '|| false <'.
	self assert: (Interpreter run: 'false not') printString = '|| true <'.
	self assert: (Interpreter run: '52 not') printString = '|| -53 <'.
	self should: [Interpreter run: 'not'] raise: Stackunderflow
%
method: OperatorTests
testOr
	self assert: (Interpreter run: 'true true or') printString = '|| true <'.
	self assert: (Interpreter run: 'true false or') printString = '|| true <'.
	self assert: (Interpreter run: 'false true or') printString = '|| true <'.
	self assert: (Interpreter run: 'false false or') printString = '|| false <'.
	self assert: (Interpreter run: '17 5 or') printString = '|| 21 <'.
	self assert: (Interpreter run: '52 7 or') printString = '|| 55 <'.
	self should: [Interpreter run: '4 or'] raise: Stackunderflow
%
method: OperatorTests
testXor
	self assert: (Interpreter run: 'true true xor') printString = '|| false <'.
	self assert: (Interpreter run: 'true false xor') printString = '|| true <'.
	self assert: (Interpreter run: 'false true xor') printString = '|| true <'.
	self assert: (Interpreter run: 'false false xor') printString = '|| false <'.
	self assert: (Interpreter run: '7 3 xor') printString = '|| 4 <'.
	self assert: (Interpreter run: '12 3 xor') printString = '|| 15 <'.
	self should: [Interpreter run: '4 xor'] raise: Stackunderflow
%
category: 'Testing Resource'
method: OperatorTests
testDefineCategory
	self assert: (Interpreter run: '
		true setglobal
			/catdict /Generic /Category findresource def
			/Widget catdict /Category defineresource pop
		false setglobal
		/Frob1 <</a 1>> /Widget defineresource') printString = '|| <</a 1>> <'.
	self assert: (Interpreter run: '
		true setglobal
			/catdict /Generic /Category findresource def
			/Widget catdict /Category defineresource pop
		false setglobal
		/Frob1 <</a 1>> /Widget defineresource pop
		/Frob1 /Widget findresource') printString = '|| <</a 1>> <'.
	self assert: (Interpreter run: '
		true setglobal
			/catdict /Generic /Category findresource def
			/Widget catdict /Category defineresource pop
		false setglobal
		/Frob1 <</a 1>> /Widget defineresource pop
		/Frob1 /Widget resourcestatus') printString = '|| 0 1 true <'.
	self assert: (Interpreter run: '
		true setglobal
			/catdict /Generic /Category findresource def
			/Widget catdict /Category defineresource pop
		false setglobal
		/Frob1 <</a 1>> /Widget defineresource pop
		(*) {} 10 string /Widget resourceforall') printString = '|| Frob1 <'
%
method: OperatorTests
testGenericCategory
	| source |
	self assert: (Interpreter run: '/Generic /Category findresource') stack top size = 5.
	source := '
		currentglobal 								% Save the current VM status on the stack.
		true setglobal
			/Generic /Category findresource
			dup length 1 add dict copy
			dup /InstanceType /dicttype put
			/Widget exch /Category defineresource pop
		setglobal 								% Restore the saved VM status.
		/Button <</a 1>> /Widget defineresource'.
	self assert: (Interpreter run: source) printString = '|| <</a 1>> <'
%
category: 'Testing String'
method: OperatorTests
testAnchorsearch
	self assert: (Interpreter run: '(abbc) (ab) anchorsearch') printString = '|| (bc) (ab) true <'.
	self assert: (Interpreter run: '(abbc) (bb) anchorsearch') printString = '|| (abbc) false <'.
	self assert: (Interpreter run: '(abbc) (bc) anchorsearch') printString = '|| (abbc) false <'.
	self assert: (Interpreter run: '(abbc) (B) anchorsearch') printString = '|| (abbc) false <'.
	self should: [Interpreter run: '(ab) anchorsearch'] raise: Stackunderflow
%
method: OperatorTests
testSearch
	self assert: (Interpreter run: '(abbc) (ab) search') printString = '|| (bc) (ab) () true <'.
	self assert: (Interpreter run: '(abbc) (bb) search') printString = '|| (c) (bb) (a) true <'.
	self assert: (Interpreter run: '(abbc) (bc) search') printString = '|| () (bc) (ab) true <'.
	self assert: (Interpreter run: '(abbc) (B) search') printString = '|| (abbc) false <'.
	self should: [Interpreter run: '(ab) search'] raise: Stackunderflow
%
method: OperatorTests
testString
	self assert: (Interpreter run: '3 string') printString = '|| (\000\000\000) <'.
	self should: [Interpreter run: 'string'] raise: Stackunderflow
%
method: OperatorTests
testToken
	self assert: (Interpreter run: '(15 (St1) {1 2 add}) token') printString = '|| ((St1) {1 2 add}) 15 true <'.
	self assert: (Interpreter run: '((St1) {1 2 add}) token') printString = '|| ({1 2 add}) (St1) true <'.
	self assert: (Interpreter run: '({1 2 add}) token') printString = '|| () {1 2 add} true <'.
	self assert: (Interpreter run: '( ) token') printString = '|| false <'.
	self should: [Interpreter run: 'token'] raise: Stackunderflow
%
category: 'Testing Type, Attribute, and Conversion'
method: OperatorTests
testCvi
	self assert: (Interpreter run: '(3.3E1) cvi') printString = '|| 33 <'.
	self assert: (Interpreter run: '-47.8 cvi') printString = '|| -47 <'.
	self assert: (Interpreter run: '520.9 cvi') printString = '|| 520 <'.
	self should: [Interpreter run: 'cvi'] raise: Stackunderflow
%
method: OperatorTests
testCvn
	self assert: (Interpreter run: '(abc) cvn') printString = '|| /abc <'.
	self assert: (Interpreter run: '(abc) cvx cvn') printString = '|| abc <'.
	self should: [Interpreter run: 'cvn'] raise: Stackunderflow
%
method: OperatorTests
testCvr
	self assert: (Interpreter run: '(3.3E1) cvr') printString = '|| 33 <'.
	self assert: (Interpreter run: '-47.8 cvr') printString = '|| -47.8 <'.
	self assert: (Interpreter run: '(-47.8) cvr') printString = '|| -47.8 <'.
	self assert: (Interpreter run: '520.9 cvr') printString = '|| 520.9 <'.
	self should: [Interpreter run: 'cvr'] raise: Stackunderflow
%
method: OperatorTests
testCvrs
	self assert: (Interpreter run: '
		/temp 12 string def
		123 10 temp cvrs') printString = '|| (123) <'.
	self assert: (Interpreter run: '
		/temp 12 string def
		-123 10 temp cvrs') printString = '|| (-123) <'.
	self assert: (Interpreter run: '
		/temp 12 string def
		123.4 10 temp cvrs') printString = '|| (123.4) <'.
	self assert: (Interpreter run: '
		/temp 12 string def
		123 16 temp cvrs') printString = '|| (7B) <'.
	self assert: (Interpreter run: '
		/temp 12 string def
		-123 16 temp cvrs') printString = '|| (FFFFFF85) <'.
	self assert: (Interpreter run: '
		/temp 12 string def
		123.4 16 temp cvrs') printString = '|| (7B) <'.
	self should: [Interpreter run: '(abc) cvs'] raise: Stackunderflow
%
method: OperatorTests
testCvs
	self assert: (Interpreter run: '
		/str 20 string def
		123 456 add str cvs') printString = '|| (579) <'.
	self assert: (Interpreter run: '
		/str 20 string def
		mark str cvs') printString = '|| (--nostringval--) <'.
	self should: [Interpreter run: '(abc) cvs'] raise: Stackunderflow
%
method: OperatorTests
testType
	self assert: (Interpreter run: '[1 2 3] type') printString = '|| arraytype <'.
	self assert: (Interpreter run: 'true type') printString = '|| booleantype <'.
	self assert: (Interpreter run: '<</a 1>> type') printString = '|| dicttype <'.
	self assert: (Interpreter run: '47 type') printString = '|| integertype <'.
	self assert: (Interpreter run: 'mark type') printString = '|| marktype <'.
	self assert: (Interpreter run: '/name type') printString = '|| nametype <'.
	self assert: (Interpreter run: '/name cvx type') printString = '|| operatortype <'.
	self assert: (Interpreter run: 'null type') printString = '|| nulltype <'.
	self assert: (Interpreter run: '-47.8 type') printString = '|| realtype <'.
	self assert: (Interpreter run: '(3.3E1) type') printString = '|| stringtype <'.
	self assert: (Interpreter run: '(3.3E1) cvx type') printString = '|| stringtype <'.
	self should: [Interpreter run: 'type'] raise: Stackunderflow
%
category: 'testing'
method: PostScriptTests
testAddDiv
	self assert: (Interpreter run: '40 60 add 2 div') printString = '|| 50 <'
%
method: PostScriptTests
testAverage
	self assert: (Interpreter run: '
	/average {add 2 div} def
	40 60 average') printString = '|| 50 <'
%
method: PostScriptTests
testPrintRadix
	self assert: (0 printPostScriptRadix: 16) = '0'.
	self assert: (10 printPostScriptRadix: 16) = 'A'.
	self assert: (20 printPostScriptRadix: 32) = 'K'.
	self assert: (10 printPostScriptRadix: 8) = '12'.
	self assert: (9999 printPostScriptRadix: 16) = '270F'.
%
category: 'Testing'
method: ScannerStringTests
testAsciiBase85String
	| scanner object |
	scanner := Scanner on: '<~9jqo^BlbD-BleB1DJ+*+F(f,q/0JhKF<GL>Cj@.4Gp$d7F!,L7@<6@)/0JDEF<G%<+EV:2F!,
O<DJ+*.@<*K0@<6L(Df-\0Ec5e;DffZ(EZee.Bl.9pF"AGXBPCsi+DGm>@3BB/F*&OCAfu2/AKY
i(DIb:@FD,*)+C]U=@3BN#EcYf8ATD3s@q?d$AftVqCh[NqF<G:8+EV:.+Cf>-FD5W8ARlolDIa
l(DId<j@<?3r@:F%a+D58''ATD4$Bl@l3De:,-DJs`8ARoFb/0JMK@qB4^F!,R<AKZ&-DfTqBG%G
>uD.RTpAKYo''+CT/5+Cei#DII?(E,9)oF*2M7/c~>'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: String).
	self assert: object = 'Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.'.
%
method: ScannerStringTests
testHexadecimalString
	| scanner object |
	scanner := Scanner on: '<1fEA00a2>'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: String).
	self assert: object printPostScript = '(\037\352\000\242)'.
	self assert: object asByteArray = #[31 234 0 162].
%
method: ScannerStringTests
testHexadecimalStrings
	| scanner |
	self assert: (Scanner on: '<901fa3>') nextPostScriptObject asByteArray = #[144 31 163].
	self assert: (Scanner on: '<901fa>') nextPostScriptObject asByteArray = #[144 31 160].
	self assert: (Scanner on: '<90 1f a>') nextPostScriptObject asByteArray = #[144 31 160].
	self assert: (Scanner on: '<	9 0	1 f	a >') nextPostScriptObject asByteArray = #[144 31 160].
	self should: [(Scanner on: '<901faG>') nextPostScriptObject] raise: Syntaxerror.
	scanner := Scanner on: '<901fa3> 123'.
	self assert: scanner nextPostScriptObject asByteArray = #[144 31 163].
	self assert: scanner nextPostScriptObject = 123.
%
method: ScannerStringTests
testNibble
	self assert: (Scanner new nibbleFor: $0) = 0.
	self assert: (Scanner new nibbleFor: $1) = 1.
	self assert: (Scanner new nibbleFor: $2) = 2.
	self assert: (Scanner new nibbleFor: $3) = 3.
	self assert: (Scanner new nibbleFor: $4) = 4.
	self assert: (Scanner new nibbleFor: $5) = 5.
	self assert: (Scanner new nibbleFor: $6) = 6.
	self assert: (Scanner new nibbleFor: $7) = 7.
	self assert: (Scanner new nibbleFor: $8) = 8.
	self assert: (Scanner new nibbleFor: $9) = 9.
	self assert: (Scanner new nibbleFor: $A) = 10.
	self assert: (Scanner new nibbleFor: $B) = 11.
	self assert: (Scanner new nibbleFor: $C) = 12.
	self assert: (Scanner new nibbleFor: $D) = 13.
	self assert: (Scanner new nibbleFor: $E) = 14.
	self assert: (Scanner new nibbleFor: $F) = 15.
	self assert: (Scanner new nibbleFor: $a) = 10.
	self assert: (Scanner new nibbleFor: $b) = 11.
	self assert: (Scanner new nibbleFor: $c) = 12.
	self assert: (Scanner new nibbleFor: $d) = 13.
	self assert: (Scanner new nibbleFor: $e) = 14.
	self assert: (Scanner new nibbleFor: $f) = 15.
	self should: [Scanner new nibbleFor: $g] raise: Syntaxerror.
%
method: ScannerStringTests
testOctalCharacterPrinting
	| object |
	object := (Scanner on: '(\034)') nextPostScriptObject.
	self assert: object = (String with: 28 asCharacter).
	self assert: object printPostScript = '(\034)'.
%
method: ScannerStringTests
testString
	| scanner object |
	scanner := Scanner on: '(This is a string)'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: String).
	self assert: object = 'This is a string'.
%
method: ScannerStringTests
testStringAndNumber
	| scanner object |
	scanner := Scanner on: '(This is a string) 123'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: String).
	self assert: object = 'This is a string'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object = 123.
%
method: ScannerStringTests
testStrings
	self assert: (Scanner on: '(This is a string)') nextPostScriptObject = 'This is a string'.
	self assert: (Scanner on: '(Strings may contain newlines
and such)') nextPostScriptObject = 'Strings may contain newlines
and such'.
	self assert: (Scanner on: '(Strings may contain special characters *!&}^% and
balanced parentheses () (and so on).)') nextPostScriptObject = 'Strings may contain special characters *!&}^% and
balanced parentheses () (and so on).'.
	self assert: (Scanner on: '(The following is an empty string)') nextPostScriptObject = 'The following is an empty string'.
	self assert: (Scanner on: '()') nextPostScriptObject size isZero.
	self assert: (Scanner on: '(It has 0 (zero) length.)') nextPostScriptObject = 'It has 0 (zero) length.'.
%
method: ScannerStringTests
testStringsWithBackSlash
	self assert: (Scanner on: '(These \
two strings \
are the same.)') nextPostScriptObject = 'These two strings are the same.'.
	self assert: (Scanner on: '(This string has a newline at the end of it.
)') nextPostScriptObject = 'This string has a newline at the end of it.
'.
	self assert: (Scanner on: '(So does this one.\n)
)') nextPostScriptObject = 'So does this one.
'.
	self assert: (Scanner on: '(\tAfter a tab and before a cr.\n)') nextPostScriptObject = '	After a tab and before a cr.
'.
%
method: ScannerStringTests
testStringsWithEscapes
	self assert: (Scanner on: '(\\)') nextPostScriptObject = '\'.
	self assert: (Scanner on: '(\/)') nextPostScriptObject = '/'.
	self assert: (Scanner on: '(\()') nextPostScriptObject = '('.
	self assert: (Scanner on: '(\))') nextPostScriptObject = ')'.
	self assert: (Scanner on: '(\\\/\(\))') nextPostScriptObject = '\/()'
%
method: ScannerStringTests
testStringsWithOctalCharacters
	self assert: (Scanner on: '(\0533)') nextPostScriptObject = '+3'.
	self assert: (Scanner on: '(\53)') nextPostScriptObject = '+'.
	self assert: (Scanner on: '(\053)') nextPostScriptObject = '+'
%
category: 'Testing'
method: ScannerTests
testArrayDefinition
	| scanner object |
	scanner := Scanner on: '	[0.1 abc (tx) /bbb] ff'.
	object := scanner nextPostScriptObject.
	self assert: object value = #'['.
	self assert: (object isKindOf: Symbol).
	object := scanner nextPostScriptObject.
	self assert: object value = 0.1.
	self assert: (object isKindOf: Number).
	object := scanner nextPostScriptObject.
	self assert: object value = #abc.
	self assert: (object isKindOf: Symbol).
	object := scanner nextPostScriptObject.
	self assert: object = 'tx'.
	self assert: (object isKindOf: String).
	object := scanner nextPostScriptObject.
	self assert: object object = #bbb.
	self assert: (object isKindOf: LiteralName).
	object := scanner nextPostScriptObject.
	self assert: object value = #']'.
	self assert: (object isKindOf: Symbol).
	object := scanner nextPostScriptObject.
	self assert: object value = #ff.
	self assert: (object isKindOf: Symbol)
%
method: ScannerTests
testArrayDefinitionBook
	| scanner object |
	scanner := Scanner on: '	[ 123 /abc (xyz) ]'.
	object := scanner nextPostScriptObject.
	self assert: object value = #'['.
	self assert: (object isKindOf: Symbol).
	object := scanner nextPostScriptObject.
	self assert: object value = 123.
	self assert: (object isKindOf: Number).
	object := scanner nextPostScriptObject.
	self assert: object object = #abc.
	self assert: (object isKindOf: LiteralName).
	object := scanner nextPostScriptObject.
	self assert: object = 'xyz'.
	self assert: (object isKindOf: String).
	object := scanner nextPostScriptObject.
	self assert: object value = #']'.
	self assert: (object isKindOf: Symbol)
%
method: ScannerTests
testComment
	| scanner |
	scanner := Scanner on: '		12.3 45.6 m	% a comment
78.9'.
	self assert: scanner nextPostScriptObject = 12.3.
	self assert: scanner nextPostScriptObject = 45.6.
	self assert: scanner nextPostScriptObject printPostScript = 'm'.
	self assert: scanner nextPostScriptObject = 78.9.
%
method: ScannerTests
testDictionaryDefinition
	| scanner object |
	scanner := Scanner on: '	<</a 0.1 /abc (tx) /bbb {pop pop}>>ff'.
	object := scanner nextPostScriptObject.
	self assert: object value = #<<.
	self assert: (object isKindOf: Symbol).
	object := scanner nextPostScriptObject.
	self assert: object object = #a.
	self assert: (object isKindOf: LiteralName).
	object := scanner nextPostScriptObject.
	self assert: object value = 0.1.
	self assert: (object isKindOf: Number).
	object := scanner nextPostScriptObject.
	self assert: object object = #abc.
	self assert: (object isKindOf: LiteralName).
	object := scanner nextPostScriptObject.
	self assert: object = 'tx'.
	self assert: (object isKindOf: String).
	object := scanner nextPostScriptObject.
	self assert: object object = #bbb.
	self assert: (object isKindOf: LiteralName).
	object := scanner nextPostScriptObject.
	self assert: object printString = '{pop pop}'.
	self assert: (object isKindOf: Procedure).
	object := scanner nextPostScriptObject.
	self assert: object value = #>>.
	self assert: (object isKindOf: Symbol).
	object := scanner nextPostScriptObject.
	self assert: object value = #ff.
	self assert: (object isKindOf: Symbol)
%
method: ScannerTests
testEmptyWhitespace
	| scanner |
	scanner := Scanner on: '   '.
	self should: [scanner nextPostScriptObject] raise: EndOfTokenStreamNotification.
%
method: ScannerTests
testEmptyWhitespace2
	| scanner |
	scanner := Scanner on: ' 		
	
  123'.
	self assert: scanner nextPostScriptObject = 123
%
method: ScannerTests
testFloatToken
	| scanner object |
	scanner := Scanner on: '123.456'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Number).
	self assert: object = 123.456.
%
method: ScannerTests
testLiteralNames
	self assert: ((Scanner on: '/abc') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/abc') nextPostScriptObject object = #abc.
	self assert: ((Scanner on: '/Offset') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/Offset') nextPostScriptObject object = #Offset.
	self assert: ((Scanner on: '/$$') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/$$') nextPostScriptObject object = #'$$'.
	self assert: ((Scanner on: '/23A') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/23A') nextPostScriptObject object = #'23A'.
	self assert: ((Scanner on: '/13-456') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/13-456') nextPostScriptObject object = #'13-456'.
	self assert: ((Scanner on: '/a.b') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/a.b') nextPostScriptObject object = #'a.b'.
	self assert: ((Scanner on: '/$MyDict') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/$MyDict') nextPostScriptObject object = #'$MyDict'.
	self assert: ((Scanner on: '/@pattern') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/@pattern') nextPostScriptObject object = #'@pattern'.
	self assert: ((Scanner on: '23A') nextPostScriptObject isKindOf: Symbol).
	self assert: ((Scanner on: '23E1') nextPostScriptObject isKindOf: Number).
	self assert: ((Scanner on: '23#1') nextPostScriptObject isKindOf: Number)
%
method: ScannerTests
testNames
	self assert: (Scanner on: 'abc') nextPostScriptObject = #abc.
	self assert: (Scanner on: 'Offset') nextPostScriptObject = #Offset.
	self assert: (Scanner on: '$$') nextPostScriptObject = #'$$'.
	self assert: (Scanner on: '23A') nextPostScriptObject = #'23A'.
	self assert: (Scanner on: '13-456') nextPostScriptObject = #'13-456'.
	self assert: (Scanner on: 'a.b') nextPostScriptObject = #'a.b'.
	self assert: (Scanner on: '$MyDict') nextPostScriptObject = #'$MyDict'.
	self assert: (Scanner on: '@pattern') nextPostScriptObject = #'@pattern'.
	self assert: ((Scanner on: '/') nextPostScriptObject isKindOf: LiteralName).
	self assert: (Scanner on: '/') nextPostScriptObject object = #''.
	self assert: (Scanner on: '/ abc') nextPostScriptObject object = #''.
	self assert: ((Scanner on: '23A') nextPostScriptObject isKindOf: Symbol).
	self assert: ((Scanner on: '23E1') nextPostScriptObject isKindOf: Number).
	self assert: ((Scanner on: '23#1') nextPostScriptObject isKindOf: Number)
%
method: ScannerTests
testNumberToken
	| scanner object |
	scanner := Scanner on: '123'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object value = 123.
%
method: ScannerTests
testNumberZeroToken
	| scanner object |
	scanner := Scanner on: '0'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object value = 0.
%
method: ScannerTests
testProcedureDefinition
	| scanner object |
	scanner := Scanner on: '	/abc{2 dup mul}def'.
	object := scanner nextPostScriptObject.
	self assert: object object = #abc.
	self assert: (object isKindOf: LiteralName).
	object := scanner nextPostScriptObject.
	self assert: object printString = '{2 dup mul}'.
	self assert: (object isKindOf: Procedure).
	object := scanner nextPostScriptObject.
	self assert: object value = #def.
	self assert: (object isKindOf: Symbol)
%
method: ScannerTests
testProcedureDefinitionWithWhitespace
	| scanner object |
	scanner := Scanner on: '	/abc {
	2 dup mul
}def'.
	object := scanner nextPostScriptObject.
	self assert: object object = #abc.
	self assert: (object isKindOf: LiteralName).
	object := scanner nextPostScriptObject.
	self assert: object printString = '{2 dup mul}'.
	self assert: (object isKindOf: Procedure).
	object := scanner nextPostScriptObject.
	self assert: object value = #def.
	self assert: (object isKindOf: Symbol)
%
method: ScannerTests
testReturnComment
	| scanner |
	scanner := Scanner on: '		12.3 45.6 m	% a comment
78.9'.
	self assert: scanner nextPostScriptObject = 12.3.
	self assert: scanner nextPostScriptObject = 45.6.
	self assert: scanner nextPostScriptObject printPostScript = 'm'.
	self assert: scanner nextPostScriptObject = 78.9.
%
method: ScannerTests
testStartComment
	| scanner |
	scanner := Scanner on: '	% a comment
78.9'.
	self assert: scanner nextPostScriptObject = 78.9.
%
method: ScannerTests
testThreeNumberToken
	| scanner object |
	scanner := Scanner on: '123 456 7.89'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object = 123.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object = 456.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Number).
	self assert: object = 7.89
%
method: ScannerTests
testTwoComments
	| scanner |
	scanner := Scanner on: '	% a comment
78.9	 %and another
m'.
	self assert: scanner nextPostScriptObject = 78.9.
	self assert: scanner nextPostScriptObject printPostScript = 'm'.
%
method: ScannerTests
testTwoNumberToken
	| scanner object |
	scanner := Scanner on: '123 456'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object = 123.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object = 456.
%
method: ScannerTests
testTwoRadixToken
	| scanner object |
	scanner := Scanner on: '8#23 16#1ff'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object = 19.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object = 511.
%
method: ScannerTests
testTwoRealToken
	| scanner object |
	scanner := Scanner on: '1.23 +45.6e-23'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Number).
	self assert: object = 1.23.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Number).
	self assert: object asFloat asStringLocaleC = '4.56e-22'
%
method: ScannerTests
testWhitespaceAndNumberZeroToken
	| scanner object |
	scanner := Scanner on: ' 0'.
	object := scanner nextPostScriptObject.
	self assert: (object isKindOf: Integer).
	self assert: object value = 0.
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: PostScript at: 1.
%
category: '*PostScript Testing-examples'
classmethod: Category
exampleResourceDictionary
	| dict |
	dict := PSDictionary new.
	dict at: #DefineResource put: self genericDefineResource.
	dict at: #UndefineResource put: self genericUndefineResource.
	dict at: #FindResource put: self genericFindResource.
	dict at: #ResourceStatus put: self genericResourceStatus.
	dict at: #ResourceForAll put: self genericResourceForAll.
	dict at: #Category put: #Example.
	dict at: #InstanceType put: #dicttype.
	dict at: #ResourceFileName put: self genericResourceFileName.
	^dict
%
category: '*PostScript Testing-font metric loading'
classmethod: CharacterNames
adobeGlyphDecodingForNewFonts
	"<IdentityDictionary key: Symbol value: Integer>
	the file format is slightly different from the AGL (Adobe Glyph List)"

	| rst dict |
	rst := self aglfnTxt readStream.
	dict := IdentityDictionary new.
	[rst atEnd] whileFalse: [
		| line |
		line := rst upTo: Character lf.
		(line notEmpty and: [
		(line first = $#) not]) ifTrue: [
				| tokens |
				tokens := line tokensBasedOn: $;.
				dict at: (tokens at: 2) asSymbol put: ('16r' , tokens first) asNumber]].
	^dict
%
classmethod: CharacterNames
aglfnTxt
	"from https://raw.githubusercontent.com/adobe-type-tools/agl-aglfn/master/aglfn.txt"

	^'# -----------------------------------------------------------
# Copyright 2002-2019 Adobe (http://www.adobe.com/).
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the
# following conditions are met:
#
# Redistributions of source code must retain the above
# copyright notice, this list of conditions and the following
# disclaimer.
#
# Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials
# provided with the distribution.
#
# Neither the name of Adobe nor the names of its contributors
# may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------
# Name:          Adobe Glyph List For New Fonts
# Table version: 1.7
# Date:          November 6, 2008
# URL:           https://github.com/adobe-type-tools/agl-aglfn
#
# Description:
#
# AGLFN (Adobe Glyph List For New Fonts) provides a list of base glyph
# names that are recommended for new fonts, which are compatible with
# the AGL (Adobe Glyph List) Specification, and which should be used
# as described in Section 6 of that document. AGLFN comprises the set
# of glyph names from AGL that map via the AGL Specification rules to
# the semantically correct UV (Unicode Value). For example, "Asmall"
# is omitted because AGL maps this glyph name to the PUA (Private Use
# Area) value U+F761, rather than to the UV that maps from the glyph
# name "A." Also omitted is "ffi," because AGL maps this to the
# Alphabetic Presentation Forms value U+FB03, rather than decomposing
# it into the following sequence of three UVs: U+0066, U+0066, and
# U+0069. The name "arrowvertex" has been omitted because this glyph
# now has a real UV, and AGL is now incorrect in mapping it to the PUA
# value U+F8E6. If you do not find an appropriate name for your glyph
# in this list, then please refer to Section 6 of the AGL
# Specification.
#
# Format: three semicolon-delimited fields:
#   (1) Standard UV or CUS UV--four uppercase hexadecimal digits
#   (2) Glyph name--upper/lowercase letters and digits
#   (3) Character names: Unicode character names for standard UVs, and
#       descriptive names for CUS UVs--uppercase letters, hyphen, and
#       space
#
# The records are sorted by glyph name in increasing ASCII order,
# entries with the same glyph name are sorted in decreasing priority
# order, the UVs and Unicode character names are provided for
# convenience, lines starting with "#" are comments, and blank lines
# should be ignored.
#
# Revision History:
#
# 1.7 [6 November 2008]
# - Reverted to the original 1.4 and earlier mappings for Delta,
#   Omega, and mu.
# - Removed mappings for "afii" names. These should now be assigned
#   "uni" names.
# - Removed mappings for "commaaccent" names. These should now be
#   assigned "uni" names.
#
# 1.6 [30 January 2006]
# - Completed work intended in 1.5.
#
# 1.5 [23 November 2005]
# - Removed duplicated block at end of file.
# - Changed mappings:
#   2206;Delta;INCREMENT changed to 0394;Delta;GREEK CAPITAL LETTER DELTA
#   2126;Omega;OHM SIGN changed to 03A9;Omega;GREEK CAPITAL LETTER OMEGA
#   03BC;mu;MICRO SIGN changed to 03BC;mu;GREEK SMALL LETTER MU
# - Corrected statement above about why "ffi" is omitted.
#
# 1.4 [24 September 2003]
# - Changed version to 1.4, to avoid confusion with the AGL 1.3.
# - Fixed spelling errors in the header.
# - Fully removed "arrowvertex," as it is mapped only to a PUA Unicode
#   value in some fonts.
#
# 1.1 [17 April 2003]
# - Renamed [Tt]cedilla back to [Tt]commaaccent.
#
# 1.0 [31 January 2003]
# - Original version.
# - Derived from the AGLv1.2 by:
#   removing the PUA area codes;
#   removing duplicate Unicode mappings; and
#   renaming "tcommaaccent" to "tcedilla" and "Tcommaaccent" to "Tcedilla"
#
0041;A;LATIN CAPITAL LETTER A
00C6;AE;LATIN CAPITAL LETTER AE
01FC;AEacute;LATIN CAPITAL LETTER AE WITH ACUTE
00C1;Aacute;LATIN CAPITAL LETTER A WITH ACUTE
0102;Abreve;LATIN CAPITAL LETTER A WITH BREVE
00C2;Acircumflex;LATIN CAPITAL LETTER A WITH CIRCUMFLEX
00C4;Adieresis;LATIN CAPITAL LETTER A WITH DIAERESIS
00C0;Agrave;LATIN CAPITAL LETTER A WITH GRAVE
0391;Alpha;GREEK CAPITAL LETTER ALPHA
0386;Alphatonos;GREEK CAPITAL LETTER ALPHA WITH TONOS
0100;Amacron;LATIN CAPITAL LETTER A WITH MACRON
0104;Aogonek;LATIN CAPITAL LETTER A WITH OGONEK
00C5;Aring;LATIN CAPITAL LETTER A WITH RING ABOVE
01FA;Aringacute;LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE
00C3;Atilde;LATIN CAPITAL LETTER A WITH TILDE
0042;B;LATIN CAPITAL LETTER B
0392;Beta;GREEK CAPITAL LETTER BETA
0043;C;LATIN CAPITAL LETTER C
0106;Cacute;LATIN CAPITAL LETTER C WITH ACUTE
010C;Ccaron;LATIN CAPITAL LETTER C WITH CARON
00C7;Ccedilla;LATIN CAPITAL LETTER C WITH CEDILLA
0108;Ccircumflex;LATIN CAPITAL LETTER C WITH CIRCUMFLEX
010A;Cdotaccent;LATIN CAPITAL LETTER C WITH DOT ABOVE
03A7;Chi;GREEK CAPITAL LETTER CHI
0044;D;LATIN CAPITAL LETTER D
010E;Dcaron;LATIN CAPITAL LETTER D WITH CARON
0110;Dcroat;LATIN CAPITAL LETTER D WITH STROKE
2206;Delta;INCREMENT
0045;E;LATIN CAPITAL LETTER E
00C9;Eacute;LATIN CAPITAL LETTER E WITH ACUTE
0114;Ebreve;LATIN CAPITAL LETTER E WITH BREVE
011A;Ecaron;LATIN CAPITAL LETTER E WITH CARON
00CA;Ecircumflex;LATIN CAPITAL LETTER E WITH CIRCUMFLEX
00CB;Edieresis;LATIN CAPITAL LETTER E WITH DIAERESIS
0116;Edotaccent;LATIN CAPITAL LETTER E WITH DOT ABOVE
00C8;Egrave;LATIN CAPITAL LETTER E WITH GRAVE
0112;Emacron;LATIN CAPITAL LETTER E WITH MACRON
014A;Eng;LATIN CAPITAL LETTER ENG
0118;Eogonek;LATIN CAPITAL LETTER E WITH OGONEK
0395;Epsilon;GREEK CAPITAL LETTER EPSILON
0388;Epsilontonos;GREEK CAPITAL LETTER EPSILON WITH TONOS
0397;Eta;GREEK CAPITAL LETTER ETA
0389;Etatonos;GREEK CAPITAL LETTER ETA WITH TONOS
00D0;Eth;LATIN CAPITAL LETTER ETH
20AC;Euro;EURO SIGN
0046;F;LATIN CAPITAL LETTER F
0047;G;LATIN CAPITAL LETTER G
0393;Gamma;GREEK CAPITAL LETTER GAMMA
011E;Gbreve;LATIN CAPITAL LETTER G WITH BREVE
01E6;Gcaron;LATIN CAPITAL LETTER G WITH CARON
011C;Gcircumflex;LATIN CAPITAL LETTER G WITH CIRCUMFLEX
0120;Gdotaccent;LATIN CAPITAL LETTER G WITH DOT ABOVE
0048;H;LATIN CAPITAL LETTER H
25CF;H18533;BLACK CIRCLE
25AA;H18543;BLACK SMALL SQUARE
25AB;H18551;WHITE SMALL SQUARE
25A1;H22073;WHITE SQUARE
0126;Hbar;LATIN CAPITAL LETTER H WITH STROKE
0124;Hcircumflex;LATIN CAPITAL LETTER H WITH CIRCUMFLEX
0049;I;LATIN CAPITAL LETTER I
0132;IJ;LATIN CAPITAL LIGATURE IJ
00CD;Iacute;LATIN CAPITAL LETTER I WITH ACUTE
012C;Ibreve;LATIN CAPITAL LETTER I WITH BREVE
00CE;Icircumflex;LATIN CAPITAL LETTER I WITH CIRCUMFLEX
00CF;Idieresis;LATIN CAPITAL LETTER I WITH DIAERESIS
0130;Idotaccent;LATIN CAPITAL LETTER I WITH DOT ABOVE
2111;Ifraktur;BLACK-LETTER CAPITAL I
00CC;Igrave;LATIN CAPITAL LETTER I WITH GRAVE
012A;Imacron;LATIN CAPITAL LETTER I WITH MACRON
012E;Iogonek;LATIN CAPITAL LETTER I WITH OGONEK
0399;Iota;GREEK CAPITAL LETTER IOTA
03AA;Iotadieresis;GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
038A;Iotatonos;GREEK CAPITAL LETTER IOTA WITH TONOS
0128;Itilde;LATIN CAPITAL LETTER I WITH TILDE
004A;J;LATIN CAPITAL LETTER J
0134;Jcircumflex;LATIN CAPITAL LETTER J WITH CIRCUMFLEX
004B;K;LATIN CAPITAL LETTER K
039A;Kappa;GREEK CAPITAL LETTER KAPPA
004C;L;LATIN CAPITAL LETTER L
0139;Lacute;LATIN CAPITAL LETTER L WITH ACUTE
039B;Lambda;GREEK CAPITAL LETTER LAMDA
013D;Lcaron;LATIN CAPITAL LETTER L WITH CARON
013F;Ldot;LATIN CAPITAL LETTER L WITH MIDDLE DOT
0141;Lslash;LATIN CAPITAL LETTER L WITH STROKE
004D;M;LATIN CAPITAL LETTER M
039C;Mu;GREEK CAPITAL LETTER MU
004E;N;LATIN CAPITAL LETTER N
0143;Nacute;LATIN CAPITAL LETTER N WITH ACUTE
0147;Ncaron;LATIN CAPITAL LETTER N WITH CARON
00D1;Ntilde;LATIN CAPITAL LETTER N WITH TILDE
039D;Nu;GREEK CAPITAL LETTER NU
004F;O;LATIN CAPITAL LETTER O
0152;OE;LATIN CAPITAL LIGATURE OE
00D3;Oacute;LATIN CAPITAL LETTER O WITH ACUTE
014E;Obreve;LATIN CAPITAL LETTER O WITH BREVE
00D4;Ocircumflex;LATIN CAPITAL LETTER O WITH CIRCUMFLEX
00D6;Odieresis;LATIN CAPITAL LETTER O WITH DIAERESIS
00D2;Ograve;LATIN CAPITAL LETTER O WITH GRAVE
01A0;Ohorn;LATIN CAPITAL LETTER O WITH HORN
0150;Ohungarumlaut;LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
014C;Omacron;LATIN CAPITAL LETTER O WITH MACRON
2126;Omega;OHM SIGN
038F;Omegatonos;GREEK CAPITAL LETTER OMEGA WITH TONOS
039F;Omicron;GREEK CAPITAL LETTER OMICRON
038C;Omicrontonos;GREEK CAPITAL LETTER OMICRON WITH TONOS
00D8;Oslash;LATIN CAPITAL LETTER O WITH STROKE
01FE;Oslashacute;LATIN CAPITAL LETTER O WITH STROKE AND ACUTE
00D5;Otilde;LATIN CAPITAL LETTER O WITH TILDE
0050;P;LATIN CAPITAL LETTER P
03A6;Phi;GREEK CAPITAL LETTER PHI
03A0;Pi;GREEK CAPITAL LETTER PI
03A8;Psi;GREEK CAPITAL LETTER PSI
0051;Q;LATIN CAPITAL LETTER Q
0052;R;LATIN CAPITAL LETTER R
0154;Racute;LATIN CAPITAL LETTER R WITH ACUTE
0158;Rcaron;LATIN CAPITAL LETTER R WITH CARON
211C;Rfraktur;BLACK-LETTER CAPITAL R
03A1;Rho;GREEK CAPITAL LETTER RHO
0053;S;LATIN CAPITAL LETTER S
250C;SF010000;BOX DRAWINGS LIGHT DOWN AND RIGHT
2514;SF020000;BOX DRAWINGS LIGHT UP AND RIGHT
2510;SF030000;BOX DRAWINGS LIGHT DOWN AND LEFT
2518;SF040000;BOX DRAWINGS LIGHT UP AND LEFT
253C;SF050000;BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
252C;SF060000;BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
2534;SF070000;BOX DRAWINGS LIGHT UP AND HORIZONTAL
251C;SF080000;BOX DRAWINGS LIGHT VERTICAL AND RIGHT
2524;SF090000;BOX DRAWINGS LIGHT VERTICAL AND LEFT
2500;SF100000;BOX DRAWINGS LIGHT HORIZONTAL
2502;SF110000;BOX DRAWINGS LIGHT VERTICAL
2561;SF190000;BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
2562;SF200000;BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE
2556;SF210000;BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE
2555;SF220000;BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE
2563;SF230000;BOX DRAWINGS DOUBLE VERTICAL AND LEFT
2551;SF240000;BOX DRAWINGS DOUBLE VERTICAL
2557;SF250000;BOX DRAWINGS DOUBLE DOWN AND LEFT
255D;SF260000;BOX DRAWINGS DOUBLE UP AND LEFT
255C;SF270000;BOX DRAWINGS UP DOUBLE AND LEFT SINGLE
255B;SF280000;BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
255E;SF360000;BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
255F;SF370000;BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
255A;SF380000;BOX DRAWINGS DOUBLE UP AND RIGHT
2554;SF390000;BOX DRAWINGS DOUBLE DOWN AND RIGHT
2569;SF400000;BOX DRAWINGS DOUBLE UP AND HORIZONTAL
2566;SF410000;BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
2560;SF420000;BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
2550;SF430000;BOX DRAWINGS DOUBLE HORIZONTAL
256C;SF440000;BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
2567;SF450000;BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
2568;SF460000;BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
2564;SF470000;BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE
2565;SF480000;BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE
2559;SF490000;BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
2558;SF500000;BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
2552;SF510000;BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
2553;SF520000;BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE
256B;SF530000;BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE
256A;SF540000;BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE
015A;Sacute;LATIN CAPITAL LETTER S WITH ACUTE
0160;Scaron;LATIN CAPITAL LETTER S WITH CARON
015E;Scedilla;LATIN CAPITAL LETTER S WITH CEDILLA
015C;Scircumflex;LATIN CAPITAL LETTER S WITH CIRCUMFLEX
03A3;Sigma;GREEK CAPITAL LETTER SIGMA
0054;T;LATIN CAPITAL LETTER T
03A4;Tau;GREEK CAPITAL LETTER TAU
0166;Tbar;LATIN CAPITAL LETTER T WITH STROKE
0164;Tcaron;LATIN CAPITAL LETTER T WITH CARON
0398;Theta;GREEK CAPITAL LETTER THETA
00DE;Thorn;LATIN CAPITAL LETTER THORN
0055;U;LATIN CAPITAL LETTER U
00DA;Uacute;LATIN CAPITAL LETTER U WITH ACUTE
016C;Ubreve;LATIN CAPITAL LETTER U WITH BREVE
00DB;Ucircumflex;LATIN CAPITAL LETTER U WITH CIRCUMFLEX
00DC;Udieresis;LATIN CAPITAL LETTER U WITH DIAERESIS
00D9;Ugrave;LATIN CAPITAL LETTER U WITH GRAVE
01AF;Uhorn;LATIN CAPITAL LETTER U WITH HORN
0170;Uhungarumlaut;LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
016A;Umacron;LATIN CAPITAL LETTER U WITH MACRON
0172;Uogonek;LATIN CAPITAL LETTER U WITH OGONEK
03A5;Upsilon;GREEK CAPITAL LETTER UPSILON
03D2;Upsilon1;GREEK UPSILON WITH HOOK SYMBOL
03AB;Upsilondieresis;GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
038E;Upsilontonos;GREEK CAPITAL LETTER UPSILON WITH TONOS
016E;Uring;LATIN CAPITAL LETTER U WITH RING ABOVE
0168;Utilde;LATIN CAPITAL LETTER U WITH TILDE
0056;V;LATIN CAPITAL LETTER V
0057;W;LATIN CAPITAL LETTER W
1E82;Wacute;LATIN CAPITAL LETTER W WITH ACUTE
0174;Wcircumflex;LATIN CAPITAL LETTER W WITH CIRCUMFLEX
1E84;Wdieresis;LATIN CAPITAL LETTER W WITH DIAERESIS
1E80;Wgrave;LATIN CAPITAL LETTER W WITH GRAVE
0058;X;LATIN CAPITAL LETTER X
039E;Xi;GREEK CAPITAL LETTER XI
0059;Y;LATIN CAPITAL LETTER Y
00DD;Yacute;LATIN CAPITAL LETTER Y WITH ACUTE
0176;Ycircumflex;LATIN CAPITAL LETTER Y WITH CIRCUMFLEX
0178;Ydieresis;LATIN CAPITAL LETTER Y WITH DIAERESIS
1EF2;Ygrave;LATIN CAPITAL LETTER Y WITH GRAVE
005A;Z;LATIN CAPITAL LETTER Z
0179;Zacute;LATIN CAPITAL LETTER Z WITH ACUTE
017D;Zcaron;LATIN CAPITAL LETTER Z WITH CARON
017B;Zdotaccent;LATIN CAPITAL LETTER Z WITH DOT ABOVE
0396;Zeta;GREEK CAPITAL LETTER ZETA
0061;a;LATIN SMALL LETTER A
00E1;aacute;LATIN SMALL LETTER A WITH ACUTE
0103;abreve;LATIN SMALL LETTER A WITH BREVE
00E2;acircumflex;LATIN SMALL LETTER A WITH CIRCUMFLEX
00B4;acute;ACUTE ACCENT
0301;acutecomb;COMBINING ACUTE ACCENT
00E4;adieresis;LATIN SMALL LETTER A WITH DIAERESIS
00E6;ae;LATIN SMALL LETTER AE
01FD;aeacute;LATIN SMALL LETTER AE WITH ACUTE
00E0;agrave;LATIN SMALL LETTER A WITH GRAVE
2135;aleph;ALEF SYMBOL
03B1;alpha;GREEK SMALL LETTER ALPHA
03AC;alphatonos;GREEK SMALL LETTER ALPHA WITH TONOS
0101;amacron;LATIN SMALL LETTER A WITH MACRON
0026;ampersand;AMPERSAND
2220;angle;ANGLE
2329;angleleft;LEFT-POINTING ANGLE BRACKET
232A;angleright;RIGHT-POINTING ANGLE BRACKET
0387;anoteleia;GREEK ANO TELEIA
0105;aogonek;LATIN SMALL LETTER A WITH OGONEK
2248;approxequal;ALMOST EQUAL TO
00E5;aring;LATIN SMALL LETTER A WITH RING ABOVE
01FB;aringacute;LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE
2194;arrowboth;LEFT RIGHT ARROW
21D4;arrowdblboth;LEFT RIGHT DOUBLE ARROW
21D3;arrowdbldown;DOWNWARDS DOUBLE ARROW
21D0;arrowdblleft;LEFTWARDS DOUBLE ARROW
21D2;arrowdblright;RIGHTWARDS DOUBLE ARROW
21D1;arrowdblup;UPWARDS DOUBLE ARROW
2193;arrowdown;DOWNWARDS ARROW
2190;arrowleft;LEFTWARDS ARROW
2192;arrowright;RIGHTWARDS ARROW
2191;arrowup;UPWARDS ARROW
2195;arrowupdn;UP DOWN ARROW
21A8;arrowupdnbse;UP DOWN ARROW WITH BASE
005E;asciicircum;CIRCUMFLEX ACCENT
007E;asciitilde;TILDE
002A;asterisk;ASTERISK
2217;asteriskmath;ASTERISK OPERATOR
0040;at;COMMERCIAL AT
00E3;atilde;LATIN SMALL LETTER A WITH TILDE
0062;b;LATIN SMALL LETTER B
005C;backslash;REVERSE SOLIDUS
007C;bar;VERTICAL LINE
03B2;beta;GREEK SMALL LETTER BETA
2588;block;FULL BLOCK
007B;braceleft;LEFT CURLY BRACKET
007D;braceright;RIGHT CURLY BRACKET
005B;bracketleft;LEFT SQUARE BRACKET
005D;bracketright;RIGHT SQUARE BRACKET
02D8;breve;BREVE
00A6;brokenbar;BROKEN BAR
2022;bullet;BULLET
0063;c;LATIN SMALL LETTER C
0107;cacute;LATIN SMALL LETTER C WITH ACUTE
02C7;caron;CARON
21B5;carriagereturn;DOWNWARDS ARROW WITH CORNER LEFTWARDS
010D;ccaron;LATIN SMALL LETTER C WITH CARON
00E7;ccedilla;LATIN SMALL LETTER C WITH CEDILLA
0109;ccircumflex;LATIN SMALL LETTER C WITH CIRCUMFLEX
010B;cdotaccent;LATIN SMALL LETTER C WITH DOT ABOVE
00B8;cedilla;CEDILLA
00A2;cent;CENT SIGN
03C7;chi;GREEK SMALL LETTER CHI
25CB;circle;WHITE CIRCLE
2297;circlemultiply;CIRCLED TIMES
2295;circleplus;CIRCLED PLUS
02C6;circumflex;MODIFIER LETTER CIRCUMFLEX ACCENT
2663;club;BLACK CLUB SUIT
003A;colon;COLON
20A1;colonmonetary;COLON SIGN
002C;comma;COMMA
2245;congruent;APPROXIMATELY EQUAL TO
00A9;copyright;COPYRIGHT SIGN
00A4;currency;CURRENCY SIGN
0064;d;LATIN SMALL LETTER D
2020;dagger;DAGGER
2021;daggerdbl;DOUBLE DAGGER
010F;dcaron;LATIN SMALL LETTER D WITH CARON
0111;dcroat;LATIN SMALL LETTER D WITH STROKE
00B0;degree;DEGREE SIGN
03B4;delta;GREEK SMALL LETTER DELTA
2666;diamond;BLACK DIAMOND SUIT
00A8;dieresis;DIAERESIS
0385;dieresistonos;GREEK DIALYTIKA TONOS
00F7;divide;DIVISION SIGN
2593;dkshade;DARK SHADE
2584;dnblock;LOWER HALF BLOCK
0024;dollar;DOLLAR SIGN
20AB;dong;DONG SIGN
02D9;dotaccent;DOT ABOVE
0323;dotbelowcomb;COMBINING DOT BELOW
0131;dotlessi;LATIN SMALL LETTER DOTLESS I
22C5;dotmath;DOT OPERATOR
0065;e;LATIN SMALL LETTER E
00E9;eacute;LATIN SMALL LETTER E WITH ACUTE
0115;ebreve;LATIN SMALL LETTER E WITH BREVE
011B;ecaron;LATIN SMALL LETTER E WITH CARON
00EA;ecircumflex;LATIN SMALL LETTER E WITH CIRCUMFLEX
00EB;edieresis;LATIN SMALL LETTER E WITH DIAERESIS
0117;edotaccent;LATIN SMALL LETTER E WITH DOT ABOVE
00E8;egrave;LATIN SMALL LETTER E WITH GRAVE
0038;eight;DIGIT EIGHT
2208;element;ELEMENT OF
2026;ellipsis;HORIZONTAL ELLIPSIS
0113;emacron;LATIN SMALL LETTER E WITH MACRON
2014;emdash;EM DASH
2205;emptyset;EMPTY SET
2013;endash;EN DASH
014B;eng;LATIN SMALL LETTER ENG
0119;eogonek;LATIN SMALL LETTER E WITH OGONEK
03B5;epsilon;GREEK SMALL LETTER EPSILON
03AD;epsilontonos;GREEK SMALL LETTER EPSILON WITH TONOS
003D;equal;EQUALS SIGN
2261;equivalence;IDENTICAL TO
212E;estimated;ESTIMATED SYMBOL
03B7;eta;GREEK SMALL LETTER ETA
03AE;etatonos;GREEK SMALL LETTER ETA WITH TONOS
00F0;eth;LATIN SMALL LETTER ETH
0021;exclam;EXCLAMATION MARK
203C;exclamdbl;DOUBLE EXCLAMATION MARK
00A1;exclamdown;INVERTED EXCLAMATION MARK
2203;existential;THERE EXISTS
0066;f;LATIN SMALL LETTER F
2640;female;FEMALE SIGN
2012;figuredash;FIGURE DASH
25A0;filledbox;BLACK SQUARE
25AC;filledrect;BLACK RECTANGLE
0035;five;DIGIT FIVE
215D;fiveeighths;VULGAR FRACTION FIVE EIGHTHS
0192;florin;LATIN SMALL LETTER F WITH HOOK
0034;four;DIGIT FOUR
2044;fraction;FRACTION SLASH
20A3;franc;FRENCH FRANC SIGN
0067;g;LATIN SMALL LETTER G
03B3;gamma;GREEK SMALL LETTER GAMMA
011F;gbreve;LATIN SMALL LETTER G WITH BREVE
01E7;gcaron;LATIN SMALL LETTER G WITH CARON
011D;gcircumflex;LATIN SMALL LETTER G WITH CIRCUMFLEX
0121;gdotaccent;LATIN SMALL LETTER G WITH DOT ABOVE
00DF;germandbls;LATIN SMALL LETTER SHARP S
2207;gradient;NABLA
0060;grave;GRAVE ACCENT
0300;gravecomb;COMBINING GRAVE ACCENT
003E;greater;GREATER-THAN SIGN
2265;greaterequal;GREATER-THAN OR EQUAL TO
00AB;guillemotleft;LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
00BB;guillemotright;RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
2039;guilsinglleft;SINGLE LEFT-POINTING ANGLE QUOTATION MARK
203A;guilsinglright;SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
0068;h;LATIN SMALL LETTER H
0127;hbar;LATIN SMALL LETTER H WITH STROKE
0125;hcircumflex;LATIN SMALL LETTER H WITH CIRCUMFLEX
2665;heart;BLACK HEART SUIT
0309;hookabovecomb;COMBINING HOOK ABOVE
2302;house;HOUSE
02DD;hungarumlaut;DOUBLE ACUTE ACCENT
002D;hyphen;HYPHEN-MINUS
0069;i;LATIN SMALL LETTER I
00ED;iacute;LATIN SMALL LETTER I WITH ACUTE
012D;ibreve;LATIN SMALL LETTER I WITH BREVE
00EE;icircumflex;LATIN SMALL LETTER I WITH CIRCUMFLEX
00EF;idieresis;LATIN SMALL LETTER I WITH DIAERESIS
00EC;igrave;LATIN SMALL LETTER I WITH GRAVE
0133;ij;LATIN SMALL LIGATURE IJ
012B;imacron;LATIN SMALL LETTER I WITH MACRON
221E;infinity;INFINITY
222B;integral;INTEGRAL
2321;integralbt;BOTTOM HALF INTEGRAL
2320;integraltp;TOP HALF INTEGRAL
2229;intersection;INTERSECTION
25D8;invbullet;INVERSE BULLET
25D9;invcircle;INVERSE WHITE CIRCLE
263B;invsmileface;BLACK SMILING FACE
012F;iogonek;LATIN SMALL LETTER I WITH OGONEK
03B9;iota;GREEK SMALL LETTER IOTA
03CA;iotadieresis;GREEK SMALL LETTER IOTA WITH DIALYTIKA
0390;iotadieresistonos;GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS
03AF;iotatonos;GREEK SMALL LETTER IOTA WITH TONOS
0129;itilde;LATIN SMALL LETTER I WITH TILDE
006A;j;LATIN SMALL LETTER J
0135;jcircumflex;LATIN SMALL LETTER J WITH CIRCUMFLEX
006B;k;LATIN SMALL LETTER K
03BA;kappa;GREEK SMALL LETTER KAPPA
0138;kgreenlandic;LATIN SMALL LETTER KRA
006C;l;LATIN SMALL LETTER L
013A;lacute;LATIN SMALL LETTER L WITH ACUTE
03BB;lambda;GREEK SMALL LETTER LAMDA
013E;lcaron;LATIN SMALL LETTER L WITH CARON
0140;ldot;LATIN SMALL LETTER L WITH MIDDLE DOT
003C;less;LESS-THAN SIGN
2264;lessequal;LESS-THAN OR EQUAL TO
258C;lfblock;LEFT HALF BLOCK
20A4;lira;LIRA SIGN
2227;logicaland;LOGICAL AND
00AC;logicalnot;NOT SIGN
2228;logicalor;LOGICAL OR
017F;longs;LATIN SMALL LETTER LONG S
25CA;lozenge;LOZENGE
0142;lslash;LATIN SMALL LETTER L WITH STROKE
2591;ltshade;LIGHT SHADE
006D;m;LATIN SMALL LETTER M
00AF;macron;MACRON
2642;male;MALE SIGN
2212;minus;MINUS SIGN
2032;minute;PRIME
00B5;mu;MICRO SIGN
00D7;multiply;MULTIPLICATION SIGN
266A;musicalnote;EIGHTH NOTE
266B;musicalnotedbl;BEAMED EIGHTH NOTES
006E;n;LATIN SMALL LETTER N
0144;nacute;LATIN SMALL LETTER N WITH ACUTE
0149;napostrophe;LATIN SMALL LETTER N PRECEDED BY APOSTROPHE
0148;ncaron;LATIN SMALL LETTER N WITH CARON
0039;nine;DIGIT NINE
2209;notelement;NOT AN ELEMENT OF
2260;notequal;NOT EQUAL TO
2284;notsubset;NOT A SUBSET OF
00F1;ntilde;LATIN SMALL LETTER N WITH TILDE
03BD;nu;GREEK SMALL LETTER NU
0023;numbersign;NUMBER SIGN
006F;o;LATIN SMALL LETTER O
00F3;oacute;LATIN SMALL LETTER O WITH ACUTE
014F;obreve;LATIN SMALL LETTER O WITH BREVE
00F4;ocircumflex;LATIN SMALL LETTER O WITH CIRCUMFLEX
00F6;odieresis;LATIN SMALL LETTER O WITH DIAERESIS
0153;oe;LATIN SMALL LIGATURE OE
02DB;ogonek;OGONEK
00F2;ograve;LATIN SMALL LETTER O WITH GRAVE
01A1;ohorn;LATIN SMALL LETTER O WITH HORN
0151;ohungarumlaut;LATIN SMALL LETTER O WITH DOUBLE ACUTE
014D;omacron;LATIN SMALL LETTER O WITH MACRON
03C9;omega;GREEK SMALL LETTER OMEGA
03D6;omega1;GREEK PI SYMBOL
03CE;omegatonos;GREEK SMALL LETTER OMEGA WITH TONOS
03BF;omicron;GREEK SMALL LETTER OMICRON
03CC;omicrontonos;GREEK SMALL LETTER OMICRON WITH TONOS
0031;one;DIGIT ONE
2024;onedotenleader;ONE DOT LEADER
215B;oneeighth;VULGAR FRACTION ONE EIGHTH
00BD;onehalf;VULGAR FRACTION ONE HALF
00BC;onequarter;VULGAR FRACTION ONE QUARTER
2153;onethird;VULGAR FRACTION ONE THIRD
25E6;openbullet;WHITE BULLET
00AA;ordfeminine;FEMININE ORDINAL INDICATOR
00BA;ordmasculine;MASCULINE ORDINAL INDICATOR
221F;orthogonal;RIGHT ANGLE
00F8;oslash;LATIN SMALL LETTER O WITH STROKE
01FF;oslashacute;LATIN SMALL LETTER O WITH STROKE AND ACUTE
00F5;otilde;LATIN SMALL LETTER O WITH TILDE
0070;p;LATIN SMALL LETTER P
00B6;paragraph;PILCROW SIGN
0028;parenleft;LEFT PARENTHESIS
0029;parenright;RIGHT PARENTHESIS
2202;partialdiff;PARTIAL DIFFERENTIAL
0025;percent;PERCENT SIGN
002E;period;FULL STOP
00B7;periodcentered;MIDDLE DOT
22A5;perpendicular;UP TACK
2030;perthousand;PER MILLE SIGN
20A7;peseta;PESETA SIGN
03C6;phi;GREEK SMALL LETTER PHI
03D5;phi1;GREEK PHI SYMBOL
03C0;pi;GREEK SMALL LETTER PI
002B;plus;PLUS SIGN
00B1;plusminus;PLUS-MINUS SIGN
211E;prescription;PRESCRIPTION TAKE
220F;product;N-ARY PRODUCT
2282;propersubset;SUBSET OF
2283;propersuperset;SUPERSET OF
221D;proportional;PROPORTIONAL TO
03C8;psi;GREEK SMALL LETTER PSI
0071;q;LATIN SMALL LETTER Q
003F;question;QUESTION MARK
00BF;questiondown;INVERTED QUESTION MARK
0022;quotedbl;QUOTATION MARK
201E;quotedblbase;DOUBLE LOW-9 QUOTATION MARK
201C;quotedblleft;LEFT DOUBLE QUOTATION MARK
201D;quotedblright;RIGHT DOUBLE QUOTATION MARK
2018;quoteleft;LEFT SINGLE QUOTATION MARK
201B;quotereversed;SINGLE HIGH-REVERSED-9 QUOTATION MARK
2019;quoteright;RIGHT SINGLE QUOTATION MARK
201A;quotesinglbase;SINGLE LOW-9 QUOTATION MARK
0027;quotesingle;APOSTROPHE
0072;r;LATIN SMALL LETTER R
0155;racute;LATIN SMALL LETTER R WITH ACUTE
221A;radical;SQUARE ROOT
0159;rcaron;LATIN SMALL LETTER R WITH CARON
2286;reflexsubset;SUBSET OF OR EQUAL TO
2287;reflexsuperset;SUPERSET OF OR EQUAL TO
00AE;registered;REGISTERED SIGN
2310;revlogicalnot;REVERSED NOT SIGN
03C1;rho;GREEK SMALL LETTER RHO
02DA;ring;RING ABOVE
2590;rtblock;RIGHT HALF BLOCK
0073;s;LATIN SMALL LETTER S
015B;sacute;LATIN SMALL LETTER S WITH ACUTE
0161;scaron;LATIN SMALL LETTER S WITH CARON
015F;scedilla;LATIN SMALL LETTER S WITH CEDILLA
015D;scircumflex;LATIN SMALL LETTER S WITH CIRCUMFLEX
2033;second;DOUBLE PRIME
00A7;section;SECTION SIGN
003B;semicolon;SEMICOLON
0037;seven;DIGIT SEVEN
215E;seveneighths;VULGAR FRACTION SEVEN EIGHTHS
2592;shade;MEDIUM SHADE
03C3;sigma;GREEK SMALL LETTER SIGMA
03C2;sigma1;GREEK SMALL LETTER FINAL SIGMA
223C;similar;TILDE OPERATOR
0036;six;DIGIT SIX
002F;slash;SOLIDUS
263A;smileface;WHITE SMILING FACE
0020;space;SPACE
2660;spade;BLACK SPADE SUIT
00A3;sterling;POUND SIGN
220B;suchthat;CONTAINS AS MEMBER
2211;summation;N-ARY SUMMATION
263C;sun;WHITE SUN WITH RAYS
0074;t;LATIN SMALL LETTER T
03C4;tau;GREEK SMALL LETTER TAU
0167;tbar;LATIN SMALL LETTER T WITH STROKE
0165;tcaron;LATIN SMALL LETTER T WITH CARON
2234;therefore;THEREFORE
03B8;theta;GREEK SMALL LETTER THETA
03D1;theta1;GREEK THETA SYMBOL
00FE;thorn;LATIN SMALL LETTER THORN
0033;three;DIGIT THREE
215C;threeeighths;VULGAR FRACTION THREE EIGHTHS
00BE;threequarters;VULGAR FRACTION THREE QUARTERS
02DC;tilde;SMALL TILDE
0303;tildecomb;COMBINING TILDE
0384;tonos;GREEK TONOS
2122;trademark;TRADE MARK SIGN
25BC;triagdn;BLACK DOWN-POINTING TRIANGLE
25C4;triaglf;BLACK LEFT-POINTING POINTER
25BA;triagrt;BLACK RIGHT-POINTING POINTER
25B2;triagup;BLACK UP-POINTING TRIANGLE
0032;two;DIGIT TWO
2025;twodotenleader;TWO DOT LEADER
2154;twothirds;VULGAR FRACTION TWO THIRDS
0075;u;LATIN SMALL LETTER U
00FA;uacute;LATIN SMALL LETTER U WITH ACUTE
016D;ubreve;LATIN SMALL LETTER U WITH BREVE
00FB;ucircumflex;LATIN SMALL LETTER U WITH CIRCUMFLEX
00FC;udieresis;LATIN SMALL LETTER U WITH DIAERESIS
00F9;ugrave;LATIN SMALL LETTER U WITH GRAVE
01B0;uhorn;LATIN SMALL LETTER U WITH HORN
0171;uhungarumlaut;LATIN SMALL LETTER U WITH DOUBLE ACUTE
016B;umacron;LATIN SMALL LETTER U WITH MACRON
005F;underscore;LOW LINE
2017;underscoredbl;DOUBLE LOW LINE
222A;union;UNION
2200;universal;FOR ALL
0173;uogonek;LATIN SMALL LETTER U WITH OGONEK
2580;upblock;UPPER HALF BLOCK
03C5;upsilon;GREEK SMALL LETTER UPSILON
03CB;upsilondieresis;GREEK SMALL LETTER UPSILON WITH DIALYTIKA
03B0;upsilondieresistonos;GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS
03CD;upsilontonos;GREEK SMALL LETTER UPSILON WITH TONOS
016F;uring;LATIN SMALL LETTER U WITH RING ABOVE
0169;utilde;LATIN SMALL LETTER U WITH TILDE
0076;v;LATIN SMALL LETTER V
0077;w;LATIN SMALL LETTER W
1E83;wacute;LATIN SMALL LETTER W WITH ACUTE
0175;wcircumflex;LATIN SMALL LETTER W WITH CIRCUMFLEX
1E85;wdieresis;LATIN SMALL LETTER W WITH DIAERESIS
2118;weierstrass;SCRIPT CAPITAL P
1E81;wgrave;LATIN SMALL LETTER W WITH GRAVE
0078;x;LATIN SMALL LETTER X
03BE;xi;GREEK SMALL LETTER XI
0079;y;LATIN SMALL LETTER Y
00FD;yacute;LATIN SMALL LETTER Y WITH ACUTE
0177;ycircumflex;LATIN SMALL LETTER Y WITH CIRCUMFLEX
00FF;ydieresis;LATIN SMALL LETTER Y WITH DIAERESIS
00A5;yen;YEN SIGN
1EF3;ygrave;LATIN SMALL LETTER Y WITH GRAVE
007A;z;LATIN SMALL LETTER Z
017A;zacute;LATIN SMALL LETTER Z WITH ACUTE
017E;zcaron;LATIN SMALL LETTER Z WITH CARON
017C;zdotaccent;LATIN SMALL LETTER Z WITH DOT ABOVE
0030;zero;DIGIT ZERO
03B6;zeta;GREEK SMALL LETTER ZETA
# END
'
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'PostScript CIDInit Testing'.
	dict at: #comment put: 'Tests for CMaps'.
	dict at: #isFunctional put: false.
	dict at: #notice put: 'The MIT License

Copyright © 2020 Christian Haider

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.'.
	dict at: #storeVersion put: '2.5.0.1'.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components := (components at:  #'PDFtalk Testing') at: #codeComponents.
	components at: dict name put: dict.
%
DoIt
System myUserProfile insertDictionary: PostScript at: 1.
%
# Define class CMapTests
DoIt
TestCase
	subclass: 'CMapTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	CMapTests category: 'PostScript CIDInit Testing'.
	CMapTests namespacePath: #(#PostScript).
%
# Define class CIDTests
DoIt
TestCase
	subclass: 'CIDTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PostScript
%
DoIt
	CIDTests category: 'PostScript CIDInit Testing'.
	CIDTests namespacePath: #(#PostScript).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: PostScript at: 1.
%
category: 'testing'
method: CIDTests
testBfChar
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
2 beginbfchar
<27> /quotesingle
<5c> /yen
endbfchar') dictionaryStack top at: #bfchar) asArray prettyPrintString = '[[<27> /quotesingle] [<5C> /yen]]'.
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
2 beginbfchar
<27> <42>
<5c> 51
endbfchar') dictionaryStack top at: #bfchar) asArray prettyPrintString = '[[<27> <42>] [<5C> 51]]'
%
method: CIDTests
testBfCharMultiple
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
2 beginbfchar
<27> /quotesingle
<5c> /yen
endbfchar
2 beginbfchar
<37> <42>
<6c> 51
endbfchar') dictionaryStack top at: #bfchar) asArray prettyPrintString = '[[<27> /quotesingle] [<5C> /yen] [<37> <42>] [<6C> 51]]'
%
method: CIDTests
testBfCharOutOfRange
	| source cmap |
	source := '/CIDInit /ProcSet findresource begin
begincmap
/CMapName /test def
/CIDSystemInfo <</Registry (Adobe) /Ordering (UCS) /Supplement 0>> def
1 begincodespacerange
<00> <F0>
endcodespacerange
4 beginbfchar
<27> /quotesingle
<5c> /yen
<37> <42>
<FA> <77>
endbfchar
endcmap'.
	cmap := CMap newWith: (Interpreter run: source) dictionaryStack top.
	self deny: cmap isValid.
	self deny: cmap bfMappings isValid.
	self assert: cmap bfMappings unmapped first = ((Code bytes: #[250]) --> 119).
	self assert: cmap cidMappings isValid.
	self assert: cmap notdefMappings isValid
%
method: CIDTests
testBfRange
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
2 begincodespacerange
  <00> <7f>
  <8121> <EE9E>
endcodespacerange

2 beginbfrange
<00> <26>  <00>
<61> <7d> <61>
endbfrange

2 beginbfrange
<8152> <8153> <8152>
<ed80> <ed96> <ed80>
endbfrange') dictionaryStack top at: #bfrange) asArray prettyPrintString = '[[<00> <26> <00>] [<61> <7D> <61>] [<8152> <8153> <8152>] [<ED80> <ED96> <ED80>]]'
%
method: CIDTests
testBfRangeNames
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
2 begincodespacerange
  <00> <7f>
  <8121> <EE7E>
endcodespacerange

2 beginbfrange
<00> <03>  [/a /b /c /d]
<61> <63> [/A /B /C]
endbfrange') dictionaryStack top at: #bfrange) asArray prettyPrintString = '[[<00> <03> [/a /b /c /d]] [<61> <63> [/A /B /C]]]'
%
method: CIDTests
testCID
	| ps cmap |
	ps := Interpreter run: '/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (Adobe)
/Ordering (UCS) /Supplement 0 >> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
15 beginbfchar
<0003> <0020>
<000F> <002C>
<0010> <002D>
<0011> <002E>
<0013> <0030>
<0014> <0031>
<0015> <0032>
<0016> <0033>
<0017> <0034>
<0018> <0035>
<0019> <0036>
<001A> <0037>
<001B> <0038>
<001C> <0039>
<001D> <003A>
endbfchar
endcmap CMapName currentdict /CMap defineresource pop end end'.
	cmap := (ps resources at: #CMap) at: #'Adobe-Identity-UCS'.
	self assert: cmap prettyPrintString = '<<
	/CIDSystemInfo <<
		/Registry (Adobe)
		/Ordering (UCS)
		/Supplement 0>>
	/CMapName /Adobe-Identity-UCS
	/CMapType 2
	/codespacerange [<0000>..<FFFF>]
	/bfchar [[<0003> <0020>] [<000F> <002C>] [<0010> <002D>] [<0011> <002E>] [<0013> <0030>] [<0014> <0031>] [<0015> <0032>] [<0016> <0033>] [<0017> <0034>] [<0018> <0035>] [<0019> <0036>] [<001A> <0037>] [<001B> <0038>] [<001C> <0039>] [<001D> <003A>]]>>'
%
method: CIDTests
testCIDChar
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
2 begincodespacerange
  <8100> <83ff>
  <6400> <65FF>
endcodespacerange

5 begincidchar
<8143> 8286
<8144> 8274
<814a>  8272
<8387>  7936
<838e>  7937
endcidchar

2 begincidchar
<6421> 5970
<6521> 6064
endcidchar') dictionaryStack top at: #cidchar) asArray prettyPrintString = '[[<8143> 8286] [<8144> 8274] [<814A> 8272] [<8387> 7936] [<838E> 7937] [<6421> 5970] [<6521> 6064]]'
%
method: CIDTests
testCIDRange
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
  <2121> <7E7E>
endcodespacerange

6 begincidrange
<2121> <217e>  633
<2221> <222e>  727
<223a> <2241>  741
<224a> <2250>  749
<225c> <226a>  756
<2272> <2279>  771
endcidrange

2 begincidrange
<6421> <647e> 5970
<6521> <657e> 6064
endcidrange') dictionaryStack top at: #cidrange) asArray prettyPrintString = '[[<2121> <217E> 633] [<2221> <222E> 727] [<223A> <2241> 741] [<224A> <2250> 749] [<225C> <226A> 756] [<2272> <2279> 771] [<6421> <647E> 5970] [<6521> <657E> 6064]]'
%
method: CIDTests
testCMapResources
	self assert: (Interpreter run: '/Identity-H /CMap findresource') stack top size = 8.
	self assert: (Interpreter run: '(*) {} 10 string /CMap resourceforall') stack size = 181
%
method: CIDTests
testCodeSpaceOverlappingCodes
	| source cmap |
	source := '/CIDInit /ProcSet findresource begin
begincmap
/CMapName /GBK2K-V def
/CIDSystemInfo <</Registry (Adobe) /Ordering (GB1) /Supplement 5>> def
3 begincodespacerange
	<00><7F>
	<81308130><FE39FE39>
	<8140><FEFE>
endcodespacerange'.
	cmap := CMap newWith: (Interpreter run: source) dictionaryStack top.
	self assert: cmap isValid.
	self assert: (cmap coderanges collect: [:e | e printString]) asSource = '#(''<00>..<7F>'' ''<81308130>..<FE39FE39>'' ''<8140>..<FEFE>'')'.
%
method: CIDTests
testCodeSpaceRange
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<0000> <FFFF>
endcodespacerange') dictionaryStack top at: #codespacerange) printPostScript = '[<0000>..<FFFF>]'
%
method: CIDTests
testCodeSpaceRangeFromSpec
	"from 5014.CIDFont_Spec.pdf p. 75"

	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
4 begincodespacerange
	<00>    <80>
	<8140> <9FFC>
	<A0>    <DF>
	<E040> <FBFC>
endcodespacerange') dictionaryStack top at: #codespacerange) printPostScript = '[<00>..<80> <8140>..<9FFC> <A0>..<DF> <E040>..<FBFC>]'
%
method: CIDTests
testCodeSpaceRangeFromSpecOverlappingCodes
	"from 5014.CIDFont_Spec.pdf p. 75"

	| source |
	source := '/CIDInit /ProcSet findresource begin
begincmap
/CMapName /test def
/CIDSystemInfo <</Registry (Adobe) /Ordering (UCS) /Supplement 0>> def
4 begincodespacerange
	<00>    <80>
	<8140> <9FFC>
	<79>    <DF>
	<E040> <FBFC>
endcodespacerange'.
	self should: [CMap newWith: (Interpreter run: source) dictionaryStack top] raise: Error.
	[CMap newWith: (Interpreter run: source) dictionaryStack top] on: Error do: [:ex |
		self assert: ex messageText = 'code space is invalid: ranges overlap']
%
method: CIDTests
testCodeSpaceRangeFromSpecWrongCount
	"from 5014.CIDFont_Spec.pdf p. 75"

	self
		should: [
		Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
3 begincodespacerange
	<00>    <80>
	<8140> <9FFC>
	<A0>    <DF>
	<E040> <FBFC>
endcodespacerange']
		raise: Error.
	[
	Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
3 begincodespacerange
	<00>    <80>
	<8140> <9FFC>
	<A0>    <DF>
	<E040> <FBFC>
endcodespacerange'] on: Error do: [:ex |
			self assert: ex messageText = 'codespacerange count is wrong']
%
method: CIDTests
testCodeSpaceRangeMultiple
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
1 begincodespacerange
<A000> <FFFF>
endcodespacerange') dictionaryStack top at: #codespacerange) printPostScript = '[<00>..<FF> <A000>..<FFFF>]'
%
method: CIDTests
testNotdefChar
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
2 beginnotdefchar
<03> 1
<0F> 2
endnotdefchar') dictionaryStack top at: #notdefchar) asArray prettyPrintString = '[[<03> 1] [<0F> 2]]'.
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
2 beginnotdefchar
<03> 1
<0F> 2
endnotdefchar
2 beginnotdefchar
<05> 3
<07> 4
endnotdefchar') dictionaryStack top at: #notdefchar) asArray prettyPrintString = '[[<03> 1] [<0F> 2] [<05> 3] [<07> 4]]'
%
method: CIDTests
testNotdefRange
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
2 beginnotdefrange
<00> <1f> 1
<fc> <ff> 231
endnotdefrange') dictionaryStack top at: #notdefrange) asArray prettyPrintString = '[[<00> <1F> 1] [<FC> <FF> 231]]'.
	self assert: ((Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
<00> <FF>
endcodespacerange
2 beginnotdefrange
<00> <1f> 1
<fc> <ff> 231
endnotdefrange
2 beginnotdefrange
<30> <39> 56
<64> <66> 78
endnotdefrange') dictionaryStack top at: #notdefrange) asArray prettyPrintString = '[[<00> <1F> 1] [<FC> <FF> 231] [<30> <39> 56] [<64> <66> 78]]'
%
method: CIDTests
testPrintCode
	self assert: (Code bytes: #[0]) printPostScript = '<00>'.
	self assert: (Code bytes: #[255]) printPostScript = '<FF>'.
	self assert: (Code bytes: #[0 0]) printPostScript = '<0000>'.
	self assert: (Code bytes: #[42 89]) printPostScript = '<2A59>'.
	self assert: (Code bytes: #[0 0 0 0]) printPostScript = '<00000000>'.
	self assert: (Code bytes: #[42 89 23 74]) printPostScript = '<2A59174A>'.
%
method: CIDTests
testRearrangedFont
	| ps |
	ps := Interpreter run: (String fromASCII85: '%51(?6qM91F<E55Ec5GdATT&,Bl7I%ATMd4EarZ''@V''1dD@I%.8p,#+0JP.QBkM+$/P@Zc/Q+/[1N7ME;G0q\/P$=T#qnnnDD<h"/PKkkBQPgc1N7Lh;G0q\/P$<W02QRuFD55n/OO2[DI[6uGtD$G#qo4jBl8!''BhMlK/OMj''9//"X1N7Lh;G0q\/P$<W01L)+Db"_40eb=66>p[N/N>P*FtHTb;bAW4%1+[WF`_OrBl63k0JP.GDerr93&>Ms/Q,5?8hERC#qnhJ9keKH1Ikkf1GBp\>p*TfB5)7(ARTV"@;]^hA7fatF:A[6+C\npBl8''7ASkjtEbTb@>;76S+>=om+>=ol/ho4h+D#G$F`V,2@<?O(GRZAMF`V,+Df0Y+%5f8;AS5^p@V0+`@<)f>1,hB>06),QFCfN-DJ*cs%6QLX4s2M(ASqr>2D@<;05#<6G%D+F2e>/q06CoEA7Z342eG5r4?$k9%:sEf@V0+`@<)ed1*C%;B5)6mAo_<tB4VN70JG[54>JfY+<Wd#0Koq.2DIB<4?$e7+?VP:4q2(@A7B.k@;]^h%1P''8F`V,+Df0Y+%5K&8AS5^p@V0+`@<)f>3&*:#4s2sI0f<H)%6S322D[N>4Cqt[1Hl7ZDId3g@q]:k%1P''8@V''1dDIR3u@;]^h%6QU)1bh0:4?,&P2a/?,4?,&P0g6%/AR[W/4s2t!@Q7m^+?X4E3+G,]ASu$fAo_<tB4VM]1E^g]AS,juF:A[7+C\npBl7BlEa`iuAIUa]0f:^M+?VV<2)@E=+?VV<2)7?)4Cr%_0KpUAARmeZ4s2t!A2l8,%:sEf@V0XhDJ*Mi%5]2MF(Js%DKH<s1*C%;B5)6mAo_<tB4VN73&*9I4s2sI0f:gP+<Wd+0f:dO%6S333G(Gt4Cr#70g6^BARd`44q2(@A7B.k@;]^h%1P0;F`V,+Df0Y+%5Au7AS5^p@V0XhDJ*Mi4D$9$0KpUAAh[h/4s1t%%:sEf@V0XhDJ*Mi%:sEfEb/["Ea`iuARoCkDKH>!DIa1c,pbutA5Zu[Dfp)1AITq378HA^~>').
	self assert: ps printString = '||  <'.
	self assert: ((ps resources at: #Font) at: #'Jun101-Light-K-G-R-83pv_RKSJ-H') prettyPrintString = '<<
	/name #''Jun101-Light-K-G-R-83pv_RKSJ-H''
	/fonts [/Jun101-Light-83pv-RKSJ-H /Poetica-ChanceryIV /ShinseiKai-CBSK1-83pv-RKSJ-H /FutoGoB101-Bold-83pv-RKSJ-H /FutoMinA101-Bold-83pv-RKSJ-H /HSMinW3Gai30]
	/Jun101-Light-83pv-RKSJ-H <<
		/name #''Jun101-Light-83pv-RKSJ-H''
		/usematrix [1 0 0 1 0 0.15]
		/bfchar [[<27> /quotesingle] [<5C> /yen] [<60> /grave] [<7E> /tilde] [<7F> <7F>]]
		/bfrange [[<00> <26> <00>] [<61> <7D> <61>]]>>
	/Poetica-ChanceryIV <<
		/name #''Poetica-ChanceryIV''
		/bfchar [[<815C> <815C>] [<EB63> <EB63>]]
		/bfrange [[<8141> <8147> <8141>] [<EB8C> <EB8D> <EB8C>]]>>
	/ShinseiKai-CBSK1-83pv-RKSJ-H <<
		/name #''ShinseiKai-CBSK1-83pv-RKSJ-H''
		/bfrange [[<8152> <8153> <8152>] [<ED80> <ED96> <ED80>]]>>
	/FutoGoB101-Bold-83pv-RKSJ-H <<
		/name #''FutoGoB101-Bold-83pv-RKSJ-H''
		/bfrange [[<8154> <8155> <8154>] [<EC9F> <ECF1> <EC9F>]]>>
	/FutoMinA101-Bold-83pv-RKSJ-H <<
		/name #''FutoMinA101-Bold-83pv-RKSJ-H''
		/bfrange [[<F000> <F0FF> 0]]>>>>'
%
method: CIDTests
testUseCMap
	| ps cmap map1Source map2Source |
	map1Source := '
/CIDInit /ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo 3 dict dup begin /Registry (Adobe) def /Ordering (Japan1) def /Supplement 0 def end def
/CMapName /Test-H def
/CMapVersion 1 def
/CMapType 0 def
/WMode 0 def
1 begincodespacerange
  <00> <FF>
endcodespacerange
5 begincidchar
<43> 86
<44> 74
<4a> 72
<87> 36
<8e> 37
endcidchar
1 begincidrange
<41> <42> 78
endcidrange
endcmap
CMapName currentdict /CMap defineresource pop end end'.
	map2Source := '
/CIDInit /ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo 3 dict dup begin /Registry (Adobe) def /Ordering (Japan1) def /Supplement 0 def end def
/Test-H usecmap
/CMapName /Test-V def
/CMapVersion 1 def
/CMapType 0 def
/WMode 1 def
1 begincidrange
<81> <83> 87
endcidrange
2 begincidchar
<84> 86
<85> 82
endcidchar
endcmap
CMapName currentdict /CMap defineresource pop end end'.
	ps := Interpreter run: map1Source.
	ps run: map2Source.
	cmap := (ps resources at: #CMap) at: #'Test-V'.
	self assert: cmap prettyPrintString = '<<
	/CIDSystemInfo <<
		/Registry (Adobe)
		/Ordering (Japan1)
		/Supplement 0>>
	/codespacerange [<00>..<FF>]
	/cidchar [[<43> 86] [<44> 74] [<4A> 72] [<87> 36] [<8E> 37] [<84> 86] [<85> 82]]
	/cidrange [[<41> <42> 78] [<81> <83> 87]]
	/CMapName /Test-V
	/CMapVersion 1
	/CMapType 0
	/WMode 1>>'
%
method: CIDTests
testUseCMap_Ext_RKSJ
	| ps cmap cmapUsed |
	(Category respondsTo: #cmapExt_RKSJ_H) ifFalse: [
		"the CMap instances are not loaded"
		^self].
	ps := Interpreter run: '
/CIDInit /ProcSet findresource begin

12 dict begin

begincmap

/CIDSystemInfo 3 dict dup begin
	/Registry (Adobe) def
	/Ordering (Japan1) def
	/Supplement 0 def
end def

/Ext-RKSJ-H usecmap

/CMapName /Ext-RKSJ-V def
/CMapVersion 1 def
/CMapType 0 def

/UIDOffset 800 def
/XUID [1 10 25335] def

/WMode 1 def

1 begincidrange
<8141> <8142> 7887
endcidrange

5 begincidchar
<8143> 8286
<8144> 8274
<814a> 8272
<8387> 7936
<838e> 7937
endcidchar

endcmap

CMapName currentdict /CMap defineresource pop

end
end'.
	cmap := (ps resources at: #CMap) at: #'Ext-RKSJ-V'.
	cmapUsed := (ps resources at: #CMap) at: #'Ext-RKSJ-H'.
	self assert: (cmap at: #CIDSystemInfo) prettyPrintString = '<<
	/Registry (Adobe)
	/Ordering (Japan1)
	/Supplement 0>>'.
	self assert: (cmap at: #CMapName) object = #'Ext-RKSJ-V'.
	self assert: (cmapUsed at: #CMapName) object = #'Ext-RKSJ-H'.
	self assert: (cmap at: #CMapType) = 0.
	self assert: (cmap at: #codespacerange) prettyPrintString = '[<00>..<80> <8140>..<9FFC> <A0>..<DF> <E040>..<FCFC>]'.
	self assert: (cmap at: #cidrange) size = 666.
	self assert: (cmapUsed at: #cidrange) size = 665.
	self assert: (cmap at: #cidchar) prettyPrintString = '[[<8143> 8286] [<8144> 8274] [<814A> 8272] [<8387> 7936] [<838E> 7937]]'.
	self assert: (cmapUsed includesKey: #cidchar) not.
	self assert: (cmap at: #WMode) = 1.
	self assert: (cmapUsed at: #WMode) = 0
%
method: CIDTests
testUseMatrix
	self assert: (Interpreter run: '
/CIDInit /ProcSet findresource begin

/Jun101-Light-K-G-R-83pv_RKSJ-H
[	/Jun101-Light-83pv-RKSJ-H
	/Poetica-ChanceryIV
	/ShinseiKai-CBSK1-83pv-RKSJ-H
	/FutoGoB101-Bold-83pv-RKSJ-H
	/FutoMinA101-Bold-83pv-RKSJ-H
	/HSMinW3Gai30 
] beginrearrangedfont

1 beginusematrix [1 0 0 1 0 0.15] endusematrix

') dictionaryStack top prettyPrintString = '<<
	/name #''Jun101-Light-K-G-R-83pv_RKSJ-H''
	/fonts [/Jun101-Light-83pv-RKSJ-H /Poetica-ChanceryIV /ShinseiKai-CBSK1-83pv-RKSJ-H /FutoGoB101-Bold-83pv-RKSJ-H /FutoMinA101-Bold-83pv-RKSJ-H /HSMinW3Gai30]
	/Jun101-Light-83pv-RKSJ-H <<
		/name #''Jun101-Light-83pv-RKSJ-H''
		/usematrix [1 0 0 1 0 0.15]>>>>'
%
category: 'testing'
method: CMapTests
testCodeLength
	self assert: (Code bytes: #[0]) length = 1.
	self assert: (Code bytes: #[0 0]) length = 2.
	self assert: (Code bytes: #[0 0 0]) length = 3.
	self assert: (Code bytes: #[0 0 0 0]) length = 4.
	self assert: (Code bytes: #[]) length = 0
%
method: CMapTests
testCodespaceMappings
	self assert: ((Code bytes: #[10]) to: (Code bytes: #[50])) asCodespace numberOfMappings = 0.
	self assert: ((Code bytes: #[10]) to: (Code bytes: #[50])) asCodespace numberOfCodes = 41.
	self assert: ((Code bytes: #[100 10]) to: (Code bytes: #[200 50])) asCodespace numberOfMappings = 0.
	self assert: ((Code bytes: #[100 10]) to: (Code bytes: #[200 50])) asCodespace numberOfCodes = 4141
%
method: CMapTests
testCodespaceMappingsAccessing
	| space1 space2 space3 |
	space1 := ((Code bytes: #[10]) to: (Code bytes: #[50])) asCodespace.
	self assert: (space1 at: (Code bytes: #[10])) isNil.
	space1 addMapping: (Code bytes: #[11]) --> 42.
	self assert: (space1 at: (Code bytes: #[11])) = ((Code bytes: #[11]) --> 42).
	space2 := ((Code bytes: #[100 10]) to: (Code bytes: #[200 50])) asCodespace.
	self assert: (space2 at: (Code bytes: #[100 10])) isNil.
	space2 addMapping: (Code bytes: #[110 11]) --> 42.
	self assert: (space2 at: (Code bytes: #[110 11])) = ((Code bytes: #[11]) --> 42).
	space3 := ((Code bytes: #[20 100 10]) to: (Code bytes: #[22 200 50])) asCodespace.
	self assert: (space3 at: (Code bytes: #[20 100 10])) isNil.
	space3 addMapping: (Code bytes: #[21 110 11]) --> 42.
	self assert: (space3 at: (Code bytes: #[21 110 11])) = ((Code bytes: #[11]) --> 42)
%
method: CMapTests
testDestinations
	| dict |
	dict := (Interpreter run: '/CIDInit /ProcSet findresource begin
begincmap
1 begincodespacerange
  <00> <7f>
endcodespacerange
3 beginbfchar
<10> <32>
<11> 42
<12> /yen
endbfchar
5 beginbfrange
<00> <03>  [/a /b /c /d]
<31> <33> [/A /C /D]
<41> <45> [1 2 3 4 5]
<51> <55> [<01> <04> <02> <03> <05>]
<61> <65> [<01> 4 <02> /yen 42]
endbfrange
endcmap') dictionaryStack top.
	self assert: (Mappings
		fromChars: (dict at: #bfchar)
		andRanges: (dict at: #bfrange)
		in: (dict at: #codespacerange)) = (Mappings codespaces: (Array with: (ByteCodespace
			range: (Range from: #[0] to: #[127])
			mappings: ((OrderedCollection new: 16)
				add: (Range from: #[0] to: #[3]) --> 97;
				add: (Code bytes: #[16]) --> 50;
				add: (Code bytes: #[17]) --> 42;
				add: (Code bytes: #[18]) --> 165;
				add: (Code bytes: #[49]) --> 65;
				add: (Range from: #[50] to: #[51]) --> 67;
				add: (Range from: #[65] to: #[69]) --> 1;
				add: (Code bytes: #[81]) --> 1;
				add: (Code bytes: #[82]) --> 4;
				add: (Range from: #[83] to: #[84]) --> 2;
				add: (Code bytes: #[85]) --> 5;
				add: (Code bytes: #[97]) --> 1;
				add: (Code bytes: #[98]) --> 4;
				add: (Code bytes: #[99]) --> 2;
				add: (Code bytes: #[100]) --> 165;
				add: (Code bytes: #[101]) --> 42;
				yourself))))
%
category: 'testing canonical mappings'
method: CMapTests
testAsSimplestMapping
	self assert: ((Code bytes: #[42]) --> 86) asSimplestMapping = ((Code bytes: #[42]) --> 86).
	self assert: (((Code bytes: #[0 0]) to: (Code bytes: #[0 55])) --> 42) asSimplestMapping = (((Code bytes: #[0 0]) to: (Code bytes: #[0 55])) --> 42).
	self assert: (((Code bytes: #[0 55]) to: (Code bytes: #[0 55])) --> 42) asSimplestMapping = ((Code bytes: #[0 55]) --> 42)
%
method: CMapTests
testFromMappings
	self assert: (BfMappings
		fromMappings: (Array
			with: (Code bytes: #[48]) --> 48
			with: (Code bytes: #[57]) --> 57
			with: (Code bytes: #[53]) --> 53)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: (Code bytes: #[48]) --> 48
				with: (Code bytes: #[53]) --> 53
				with: (Code bytes: #[57]) --> 57))))
%
method: CMapTests
testFromMappingsIncluding
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: (Code bytes: #[57]) --> 57
			with: ((Code bytes: #[53]) to: (Code bytes: #[59])) --> 53)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
				with: ((Code bytes: #[53]) to: (Code bytes: #[59])) --> 53))))
%
method: CMapTests
testFromMappingsJoinAfter
	self assert: (BfMappings
		fromMappings: (Array
			with: (Code bytes: #[48]) --> 48
			with: (Code bytes: #[57]) --> 57
			with: (Code bytes: #[56]) --> 56)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: (Code bytes: #[48]) --> 48
				with: ((Code bytes: #[56]) to: (Code bytes: #[57])) --> 56)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: (Code bytes: #[57]) --> 57
			with: ((Code bytes: #[53]) to: (Code bytes: #[56])) --> 53)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
				with: ((Code bytes: #[53]) to: (Code bytes: #[57])) --> 53))))
%
method: CMapTests
testFromMappingsJoinBefore
	self assert: (BfMappings
		fromMappings: (Array
			with: (Code bytes: #[48]) --> 48
			with: (Code bytes: #[57]) --> 57
			with: (Code bytes: #[49]) --> 49)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[49])) --> 48
				with: (Code bytes: #[57]) --> 57)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: (Code bytes: #[57]) --> 57
			with: ((Code bytes: #[52]) to: (Code bytes: #[55])) --> 52)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[55])) --> 48
				with: (Code bytes: #[57]) --> 57))))
%
method: CMapTests
testFromMappingsJoinBeforeAndAfter
	self assert: (BfMappings
		fromMappings: (Array
			with: (Code bytes: #[55]) --> 55
			with: (Code bytes: #[57]) --> 57
			with: (Code bytes: #[56]) --> 56)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array with: ((Code bytes: #[55]) to: (Code bytes: #[57])) --> 55)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: (Code bytes: #[57]) --> 57
			with: ((Code bytes: #[52]) to: (Code bytes: #[56])) --> 52)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array with: ((Code bytes: #[48]) to: (Code bytes: #[57])) --> 48))))
%
method: CMapTests
testFromMappingsOrdering
	self assert: (BfMappings
		fromMappings: (Array
			with: (Code bytes: #[48]) --> 48
			with: (Code bytes: #[57]) --> 57
			with: (Code bytes: #[53]) --> 53)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: (Code bytes: #[48]) --> 48
				with: (Code bytes: #[53]) --> 53
				with: (Code bytes: #[57]) --> 57)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: (Code bytes: #[57]) --> 57
			with: ((Code bytes: #[53]) to: (Code bytes: #[55])) --> 53)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
				with: ((Code bytes: #[53]) to: (Code bytes: #[55])) --> 53
				with: (Code bytes: #[57]) --> 57))))
%
method: CMapTests
testFromMappingsOverwriteFirst
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: ((Code bytes: #[42]) to: (Code bytes: #[50])) --> 52)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[42]) to: (Code bytes: #[50])) --> 52
				with: (Code bytes: #[51]) --> 51)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: (Code bytes: #[48]) --> 57)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: (Code bytes: #[48]) --> 57
				with: ((Code bytes: #[49]) to: (Code bytes: #[51])) --> 49))))
%
method: CMapTests
testFromMappingsOverwriteLast
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: ((Code bytes: #[51]) to: (Code bytes: #[60])) --> 52)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[50])) --> 48
				with: ((Code bytes: #[51]) to: (Code bytes: #[60])) --> 52)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[51])) --> 48
			with: (Code bytes: #[51]) --> 57)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[50])) --> 48
				with: (Code bytes: #[51]) --> 57))))
%
method: CMapTests
testFromMappingsOverwriteMiddle
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[58])) --> 48
			with: (Code bytes: #[51]) --> 52)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[50])) --> 48
				with: (Code bytes: #[51]) --> 52
				with: ((Code bytes: #[52]) to: (Code bytes: #[58])) --> 52)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[58])) --> 48
			with: ((Code bytes: #[51]) to: (Code bytes: #[55])) --> 52)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array
				with: ((Code bytes: #[48]) to: (Code bytes: #[50])) --> 48
				with: ((Code bytes: #[51]) to: (Code bytes: #[55])) --> 52
				with: ((Code bytes: #[56]) to: (Code bytes: #[58])) --> 56))))
%
method: CMapTests
testFromMappingsOverwriteMiddleWithSame
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[58])) --> 48
			with: (Code bytes: #[51]) --> 51)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array with: ((Code bytes: #[48]) to: (Code bytes: #[58])) --> 48)))).
	self assert: (BfMappings
		fromMappings: (Array
			with: ((Code bytes: #[48]) to: (Code bytes: #[58])) --> 48
			with: ((Code bytes: #[51]) to: (Code bytes: #[55])) --> 51)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) = (BfMappings codespaces: (Array with: (ByteCodespace
			range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
			mappings: (Array with: ((Code bytes: #[48]) to: (Code bytes: #[58])) --> 48))))
%
method: CMapTests
testMappingsFromChars
	| mappings |
	mappings := (OrderedCollection new: 11)
		add: (Code bytes: #[48]) --> 48;
		add: (Code bytes: #[49]) --> 49;
		add: (Code bytes: #[50]) --> 50;
		add: (Code bytes: #[51]) --> 51;
		add: (Code bytes: #[52]) --> 52;
		add: (Code bytes: #[53]) --> 53;
		add: (Code bytes: #[54]) --> 54;
		add: (Code bytes: #[55]) --> 55;
		add: (Code bytes: #[56]) --> 56;
		add: (Code bytes: #[57]) --> 57;
		add: (Code bytes: #[0 32]) --> 32;
		yourself.
	self assert: (BfMappings
		fromMappings: mappings
		in: (Array
			with: ((Code bytes: #[20]) to: (Code bytes: #[80]))
			with: ((Code bytes: #[0 0]) to: (Code bytes: #[0 255])))) = (BfMappings codespaces: (Array
			with: (ByteCodespace
				range: ((Code bytes: #[20]) to: (Code bytes: #[80]))
				mappings: (Array with: ((Code bytes: #[48]) to: (Code bytes: #[57])) --> 48))
			with: (IndexedCodespace
				range: ((Code bytes: #[0 0]) to: (Code bytes: #[0 255]))
				codespaces: (Array with: (ByteCodespace
					range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
					mappings: (Array with: (Code bytes: #[32]) --> 32))))))
%
method: CMapTests
testMappingsOverwrittenCode
	"overwrite code"

	self assert: ((Code bytes: #[55]) --> 55 mappingsOverwrittenBy: (Code bytes: #[55]) --> 56) = (Array with: (Code bytes: #[55]) --> 56).
	"overwrite code with range"
	self assert: ((Code bytes: #[55]) --> 55 mappingsOverwrittenBy: ((Code bytes: #[55]) to: (Code bytes: #[58])) --> 56) = (Array with: ((Code bytes: #[55]) to: (Code bytes: #[58])) --> 56).
	"attach in front"
	self assert: ((Code bytes: #[54]) --> 54 mappingsOverwrittenBy: ((Code bytes: #[55]) to: (Code bytes: #[58])) --> 55) = (Array with: ((Code bytes: #[54]) to: (Code bytes: #[58])) --> 54).
	"attach at the end"
	self assert: ((Code bytes: #[59]) --> 59 mappingsOverwrittenBy: ((Code bytes: #[55]) to: (Code bytes: #[58])) --> 55) = (Array with: ((Code bytes: #[55]) to: (Code bytes: #[59])) --> 55).
	"not touching -> ignored"
	self assert: ((Code bytes: #[54]) --> 53 mappingsOverwrittenBy: ((Code bytes: #[55]) to: (Code bytes: #[58])) --> 55) = (Array with: ((Code bytes: #[55]) to: (Code bytes: #[58])) --> 55)
%
method: CMapTests
testMappingsOverwrittenRange
	"overwrite inside range"

	self assert: (((Code bytes: #[52]) to: (Code bytes: #[56])) --> 30 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array with: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50).
	"attach in front"
	self assert: (((Code bytes: #[40]) to: (Code bytes: #[49])) --> 40 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array with: ((Code bytes: #[40]) to: (Code bytes: #[59])) --> 40).
	"attach at the end"
	self assert: (((Code bytes: #[60]) to: (Code bytes: #[69])) --> 60 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array with: ((Code bytes: #[50]) to: (Code bytes: #[69])) --> 50).
	"overlapping in front"
	self assert: (((Code bytes: #[40]) to: (Code bytes: #[55])) --> 10 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array
		with: ((Code bytes: #[40]) to: (Code bytes: #[49])) --> 10
		with: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50).
	"overlapping in front - joined"
	self assert: (((Code bytes: #[40]) to: (Code bytes: #[55])) --> 40 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array with: ((Code bytes: #[40]) to: (Code bytes: #[59])) --> 40).
	"overlapping at the end"
	self assert: (((Code bytes: #[55]) to: (Code bytes: #[69])) --> 10 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array
		with: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50
		with: ((Code bytes: #[60]) to: (Code bytes: #[69])) --> 15).
	"overlapping at the end - joined"
	self assert: (((Code bytes: #[55]) to: (Code bytes: #[69])) --> 55 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array with: ((Code bytes: #[50]) to: (Code bytes: #[69])) --> 50).
	"fully overlapping"
	self assert: (((Code bytes: #[40]) to: (Code bytes: #[69])) --> 10 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array
		with: ((Code bytes: #[40]) to: (Code bytes: #[49])) --> 10
		with: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50
		with: ((Code bytes: #[60]) to: (Code bytes: #[69])) --> 30).
	"fully overlapping - joined"
	self assert: (((Code bytes: #[40]) to: (Code bytes: #[69])) --> 40 mappingsOverwrittenBy: ((Code bytes: #[50]) to: (Code bytes: #[59])) --> 50) = (Array with: ((Code bytes: #[40]) to: (Code bytes: #[69])) --> 40)
%
category: 'testing codespace'
method: CMapTests
testCodespace
	| ordered unordered |
	ordered := (Array
		with: ((Code bytes: #[0]) to: (Code bytes: #[127]))
		with: ((Code bytes: #[192 128]) to: (Code bytes: #[223 191]))
		with: ((Code bytes: #[224 128 128]) to: (Code bytes: #[239 191 191]))
		with: ((Code bytes: #[240 128 128 128]) to: (Code bytes: #[247 191 191 191]))).
	unordered := CMap sortedCodespaceranges: (Array
		with: ((Code bytes: #[224 128 128]) to: (Code bytes: #[239 191 191]))
		with: ((Code bytes: #[0]) to: (Code bytes: #[127]))
		with: ((Code bytes: #[240 128 128 128]) to: (Code bytes: #[247 191 191 191]))
		with: ((Code bytes: #[192 128]) to: (Code bytes: #[223 191]))).
	self assert: ordered = unordered
%
method: CMapTests
testCodespaceIsValid
	self should: [(CMap sortedCodespaceranges: (Array with: (Range from: #[0] to: #[255]) with: (Range from: #[0 0] to: #[255 255])))] raise: Error.
	self should: [(CMap sortedCodespaceranges: (Array with: (Range from: #[42] to: #[42]) with: (Range from: #[42] to: #[42])))] raise: Error.
	self should: [(CMap sortedCodespaceranges: (Array with: (Range from: #[0] to: #[42]) with: (Range from: #[42] to: #[255])))] raise: Error.
	self should: [(CMap sortedCodespaceranges: (Array with: (Range from: #[0] to: #[255]) with: (Range from: #[0] to: #[255])))] raise: Error.
	self should: [(CMap sortedCodespaceranges: (Array with: (Range from: #[0] to: #[255]) with: (Range from: #[42] to: #[42])))] raise: Error.
	self should: [(CMap sortedCodespaceranges: (Array with: (Range from: #[42] to: #[42]) with: (Range from: #[0] to: #[255])))] raise: Error.
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[0] to: #[42]) with: (Range from: #[43] to: #[255]))) = (Array with: (Range from: #[0] to: #[255])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[42] to: #[42]) with: (Range from: #[43] to: #[43]))) = (Array with: (Range from: #[42] to: #[43])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[43] to: #[43]) with: (Range from: #[42] to: #[42]))) = (Array with: (Range from: #[42] to: #[43])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[10 43] to: #[20 43]) with: (Range from: #[10 42] to: #[20 42]))) = (Array with: (Range from: #[10 42] to: #[20 43])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[43 57 10 43] to: #[43 57 20 43]) with: (Range from: #[43 57 10 42] to: #[43 57 20 42]))) = (Array with: (Range from: #[43 57 10 42] to: #[43 57 20 43])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[43 57 10 40] to: #[43 57 20 80]) with: (Range from: #[43 57 21 40] to: #[43 57 70 80]))) = (Array with: (Range from: #[43 57 10 40] to: #[43 57 70 80])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[43 57 10 40] to: #[43 57 20 80]) with: (Range from: #[43 58 10 40] to: #[43 77 20 80]))) = (Array with: (Range from: #[43 57 10 40] to: #[43 77 20 80])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[21 57 10 40] to: #[43 57 20 80]) with: (Range from: #[44 57 10 40] to: #[244 57 20 80]))) = (Array with: (Range from: #[21 57 10 40] to: #[244 57 20 80])).
	self assert: (CMap sortedCodespaceranges: (Array with: (Range from: #[21 57 10 40] to: #[43 57 20 80]) with: (Range from: #[44 57 10 81] to: #[244 57 20 90]))) = (Array with: (Range from: #[21 57 10 40] to: #[43 57 20 80]) with: (Range from: #[44 57 10 81] to: #[244 57 20 90])).
%
method: CMapTests
testCodespaceJoining
	self assert: (CMap sortedCodespaceranges: (Array
		with: ((Code bytes: #[0]) to: (Code bytes: #[127]))
		with: ((Code bytes: #[128]) to: (Code bytes: #[255])))) = (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))
%
method: CMapTests
testCodespaceJoining2
	self assert: (CMap sortedCodespaceranges: ((OrderedCollection new: 6)
		add: ((Code bytes: #[221]) to: (Code bytes: #[240]));
		add: ((Code bytes: #[32]) to: (Code bytes: #[127]));
		add: ((Code bytes: #[10]) to: (Code bytes: #[30]));
		add: ((Code bytes: #[210]) to: (Code bytes: #[220]));
		add: ((Code bytes: #[128]) to: (Code bytes: #[200]));
		add: ((Code bytes: #[3]) to: (Code bytes: #[9]));
		yourself)) = (Array
			with: ((Code bytes: #[3]) to: (Code bytes: #[30]))
			with: ((Code bytes: #[32]) to: (Code bytes: #[200]))
			with: ((Code bytes: #[210]) to: (Code bytes: #[240])))
%
category: 'testing decoding'
method: CMapTests
testBfMappingsCharacterAt
	| mappings1 mappings2 |
	mappings1 := BfMappings
		fromMappings: (Array with: (Code bytes: #[22]) --> 65)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255]))).
	self assert: (mappings1 characterAt: (Code bytes: #[22])) = $A.
	self assert: (mappings1 characterAt: (Code bytes: #[21])) isNil.
	self assert: (mappings1 characterAt: (Code bytes: #[23])) isNil.
	self assert: (mappings1 characterAt: (Code bytes: #[1 21])) isNil.
	mappings2 := BfMappings
		fromMappings: (Array
			with: (Code bytes: #[21]) --> 50
			with: ((Code bytes: #[22]) to: (Code bytes: #[42])) --> 65)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255]))).
	self assert: (mappings2 characterAt: (Code bytes: #[21])) = $2.
	self assert: (mappings2 characterAt: (Code bytes: #[22])) = $A.
	self assert: (mappings2 characterAt: (Code bytes: #[42])) = $U.
	self assert: (mappings2 characterAt: (Code bytes: #[20])) isNil.
	self assert: (mappings2 characterAt: (Code bytes: #[43])) isNil.
	self assert: (mappings2 characterAt: (Code bytes: #[1 22])) isNil
%
method: CMapTests
testCIDMappingsCidAt
	| mappings1 mappings2 |
	mappings1 := CIDMappings
		fromMappings: (Array with: (Code bytes: #[22]) --> 10)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255]))).
	self assert: (mappings1 cidAt: (Code bytes: #[22])) = 10.
	self assert: (mappings1 cidAt: (Code bytes: #[21])) isNil.
	self assert: (mappings1 cidAt: (Code bytes: #[23])) isNil.
	self assert: (mappings1 cidAt: (Code bytes: #[1 21])) isNil.
	mappings2 := CIDMappings
		fromMappings: (Array
			with: (Code bytes: #[21]) --> 10
			with: ((Code bytes: #[22]) to: (Code bytes: #[42])) --> 9)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255]))).
	self assert: ((CIDMappings
		fromMappings: (Array
			with: (Code bytes: #[21]) --> 10
			with: ((Code bytes: #[22]) to: (Code bytes: #[42])) --> 10)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))) cidAt: (Code bytes: #[21])) = 10.
	self assert: (mappings2 cidAt: (Code bytes: #[22])) = 9.
	self assert: (mappings2 cidAt: (Code bytes: #[42])) = 29.
	self assert: (mappings2 cidAt: (Code bytes: #[20])) isNil.
	self assert: (mappings2 cidAt: (Code bytes: #[43])) isNil.
	self assert: (mappings2 cidAt: (Code bytes: #[1 22])) isNil
%
method: CMapTests
testCodeMappingDestinationCodeAt
	self assert: ((Code bytes: #[22]) --> 10 destinationAt: (Code bytes: #[22])) = 10.
	"out of range - no errors"
	self assert: ((Code bytes: #[22]) --> 10 destinationAt: (Code bytes: #[20])) = 10.
	self assert: ((Code bytes: #[22]) --> 10 destinationAt: (Code bytes: #[0])) = 10.
	self assert: ((Code bytes: #[22]) --> 10 destinationAt: (Code bytes: #[255])) = 10.
	self assert: ((Code bytes: #[22]) --> 10 destinationAt: (Code bytes: #[255 255])) = 10
%
method: CMapTests
testNotdefMappingsCidAt
	| mappings1 mappings2 |
	mappings1 := NotdefMappings
		fromMappings: (Array with: (Code bytes: #[22]) --> 10)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255]))).
	self assert: (mappings1 cidAt: (Code bytes: #[22])) = 10.
	self assert: (mappings1 cidAt: (Code bytes: #[21])) isNil.
	self assert: (mappings1 cidAt: (Code bytes: #[23])) isNil.
	self assert: (mappings1 cidAt: (Code bytes: #[1 21])) isNil.
	mappings2 := NotdefMappings
		fromMappings: (Array
			with: (Code bytes: #[21]) --> 10
			with: ((Code bytes: #[22]) to: (Code bytes: #[42])) --> 9)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255]))).
	self assert: (mappings2 cidAt: (Code bytes: #[21])) = 10.
	self assert: (mappings2 cidAt: (Code bytes: #[22])) = 9.
	self assert: (mappings2 cidAt: (Code bytes: #[42])) = 9.
	self assert: (mappings2 cidAt: (Code bytes: #[20])) isNil.
	self assert: (mappings2 cidAt: (Code bytes: #[43])) isNil.
	self assert: (mappings2 cidAt: (Code bytes: #[1 22])) isNil
%
method: CMapTests
testRangeMappingDestinationCodeAt
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[22])) = 86.
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[42])) = 106.
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[32])) = 96.
	"out of range - no errors"
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[21])) = 85.
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[0])) = 64.
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[43])) = 107.
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[255])) = 319.
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86 destinationAt: (Code bytes: #[2 255])) = 831.
	"out of range - negative"
	self assert: (((Code bytes: #[22]) to: (Code bytes: #[42])) --> 0 destinationAt: (Code bytes: #[10])) = -12
%
category: 'testing neighbors'
method: CMapTests
testCharMappingIsNeighborOfCharMapping
	self assert: ((Code bytes: #[42]) --> 86 isNext: (Code bytes: #[43]) --> 87).
	self deny: ((Code bytes: #[42]) --> 86 isNext: (Code bytes: #[42]) --> 86).
	self deny: ((Code bytes: #[42]) --> 86 isNext: (Code bytes: #[43]) --> 85).
	self assert: ((Code bytes: #[0 42]) --> 86 isNext: (Code bytes: #[0 43]) --> 87).
	self deny: ((Code bytes: #[0 42]) --> 86 isNext: (Code bytes: #[0 42]) --> 86).
	self deny: ((Code bytes: #[0 42]) --> 86 isNext: (Code bytes: #[0 43]) --> 85).
	self deny: ((Code bytes: #[0 42]) --> 86 isNext: (Code bytes: #[1 42]) --> 87)
%
method: CMapTests
testCharMappingIsNeighborOfRangeMapping
	| mapping1 mapping2 |
	mapping1 := (Code bytes: #[42]) --> 106.
	self assert: (mapping1 isNext: ((Code bytes: #[43]) to: (Code bytes: #[48])) --> 107).
	self deny: (mapping1 isNext: ((Code bytes: #[42]) to: (Code bytes: #[48])) --> 107).
	self deny: (mapping1 isNext: ((Code bytes: #[43]) to: (Code bytes: #[48])) --> 106).
	mapping2 := (Code bytes: #[0 42]) --> 106.
	self assert: (mapping2 isNext: ((Code bytes: #[0 43]) to: (Code bytes: #[0 48])) --> 107).
	self deny: (mapping2 isNext: ((Code bytes: #[0 42]) to: (Code bytes: #[0 48])) --> 106).
	self deny: (mapping2 isNext: ((Code bytes: #[0 43]) to: (Code bytes: #[0 48])) --> 105).
	self deny: (mapping2 isNext: ((Code bytes: #[1 42]) to: (Code bytes: #[1 48])) --> 107).
	self deny: ((Code bytes: #[0 255]) --> 86 isNext: ((Code bytes: #[1 00]) to: (Code bytes: #[1 10])) --> 87)
%
method: CMapTests
testRangeMappingIsNeighborOfCharMapping
	| mapping1 mapping2 |
	mapping1 := ((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86.
	self assert: mapping1 lastDestination = 106.
	self assert: (mapping1 isNext: (Code bytes: #[43]) --> 107).
	self deny: (mapping1 isNext: (Code bytes: #[42]) --> 107).
	self deny: (mapping1 isNext: (Code bytes: #[43]) --> 106).
	mapping2 := ((Code bytes: #[0 22]) to: (Code bytes: #[0 42])) --> 86.
	self assert: mapping2 lastDestination = 106.
	self assert: (mapping2 isNext: (Code bytes: #[0 43]) --> 107).
	self deny: (mapping2 isNext: (Code bytes: #[0 42]) --> 106).
	self deny: (mapping2 isNext: (Code bytes: #[0 43]) --> 105).
	self deny: (mapping2 isNext: (Code bytes: #[1 42]) --> 107).
	self deny: (((Code bytes: #[0 250]) to: (Code bytes: #[0 255])) --> 86 isNext: (Code bytes: #[1 00]) --> 92)
%
method: CMapTests
testRangeMappingIsNeighborOfRangeMapping
	| mapping1 mapping2 |
	mapping1 := ((Code bytes: #[22]) to: (Code bytes: #[42])) --> 86.
	self assert: mapping1 lastDestination = 106.
	self assert: (mapping1 isNext: ((Code bytes: #[43]) to: (Code bytes: #[48])) --> 107).
	self deny: (mapping1 isNext: ((Code bytes: #[42]) to: (Code bytes: #[48])) --> 107).
	self deny: (mapping1 isNext: ((Code bytes: #[43]) to: (Code bytes: #[48])) --> 106).
	mapping2 := ((Code bytes: #[0 22]) to: (Code bytes: #[0 42])) --> 86.
	self assert: mapping2 lastDestination = 106.
	self assert: (mapping2 isNext: ((Code bytes: #[0 43]) to: (Code bytes: #[0 48])) --> 107).
	self deny: (mapping2 isNext: ((Code bytes: #[0 42]) to: (Code bytes: #[0 48])) --> 106).
	self deny: (mapping2 isNext: ((Code bytes: #[0 43]) to: (Code bytes: #[0 48])) --> 105).
	self deny: (mapping2 isNext: ((Code bytes: #[1 42]) to: (Code bytes: #[1 48])) --> 107).
	self deny: (((Code bytes: #[0 250]) to: (Code bytes: #[0 255])) --> 86 isNext: ((Code bytes: #[1 00]) to: (Code bytes: #[1 10])) --> 92)
%
category: 'testing order'
method: CMapTests
testCodeSmallerThanRange
	self assert: (Code bytes: #[0]) <= ((Code bytes: #[20]) to: (Code bytes: #[200])).
	self assert: (Code bytes: #[42]) <= ((Code bytes: #[42]) to: (Code bytes: #[44])).
	self assert: (Code bytes: #[42]) <= ((Code bytes: #[43]) to: (Code bytes: #[48])).
	self assert: (Code bytes: #[42 250]) <= ((Code bytes: #[43]) to: (Code bytes: #[48])).
	self assert: (Code bytes: #[42]) <= ((Code bytes: #[43 250]) to: (Code bytes: #[48 255])).
	self assert: (Code bytes: #[42]) <= ((Code bytes: #[250]) to: (Code bytes: #[255])).
	self deny: (Code bytes: #[255]) <= ((Code bytes: #[43]) to: (Code bytes: #[48])).
	self deny: (Code bytes: #[42]) <= ((Code bytes: #[40]) to: (Code bytes: #[42])).
	self deny: (Code bytes: #[42]) <= ((Code bytes: #[0]) to: (Code bytes: #[10])).
%
method: CMapTests
testRangeSmallerThanCode
	self assert: ((Code bytes: #[0]) to: (Code bytes: #[200])) <= (Code bytes: #[255]).
	self assert: ((Code bytes: #[40]) to: (Code bytes: #[42])) <= (Code bytes: #[42]).
	self assert: ((Code bytes: #[40]) to: (Code bytes: #[42])) <= (Code bytes: #[43]).
	self assert: ((Code bytes: #[40]) to: (Code bytes: #[42])) <= (Code bytes: #[255]).
	self assert: ((Code bytes: #[40 0]) to: (Code bytes: #[42 255])) <= (Code bytes: #[43]).
	self deny: ((Code bytes: #[40 0]) to: (Code bytes: #[42 255])) <= (Code bytes: #[40]).
	self deny: ((Code bytes: #[40]) to: (Code bytes: #[255])) <= (Code bytes: #[0]).
	self deny: ((Code bytes: #[40]) to: (Code bytes: #[42])) <= (Code bytes: #[39]).
	self deny: ((Code bytes: #[40]) to: (Code bytes: #[42])) <= (Code bytes: #[39 255]).
	self deny: ((Code bytes: #[40]) to: (Code bytes: #[42])) <= (Code bytes: #[0]).
	self deny: ((Code bytes: #[40]) to: (Code bytes: #[42])) <= (Code bytes: #[0 255]).
%
method: CMapTests
testSmaller
	self assert: (Code bytes: #[0]) < (Code bytes: #[255]).
	self deny: (Code bytes: #[42]) < (Code bytes: #[42]).
	self assert: (Code bytes: #[42]) < (Code bytes: #[43]).
	self assert: (Code bytes: #[42]) < (Code bytes: #[255]).
	self deny: (Code bytes: #[255]) < (Code bytes: #[0]).
	self deny: (Code bytes: #[42]) < (Code bytes: #[41]).
	self deny: (Code bytes: #[42]) < (Code bytes: #[0]).
%
method: CMapTests
testSmaller2
	self assert: (Code bytes: #[0 0]) < (Code bytes: #[255 255]).
	self deny: (Code bytes: #[42 42]) < (Code bytes: #[42 42]).
	self assert: (Code bytes: #[42 42]) < (Code bytes: #[43 43]).
	self assert: (Code bytes: #[42 42]) < (Code bytes: #[42 43]).
	self assert: (Code bytes: #[42 42]) < (Code bytes: #[43 42]).
	self assert: (Code bytes: #[0 42]) < (Code bytes: #[255 42]).
	self assert: (Code bytes: #[0 42]) < (Code bytes: #[255 255]).
	self deny: (Code bytes: #[255 255]) < (Code bytes: #[0 0]).
	self deny: (Code bytes: #[42 42]) < (Code bytes: #[41 41]).
	self deny: (Code bytes: #[42 42]) < (Code bytes: #[41 42]).
	self deny: (Code bytes: #[42 42]) < (Code bytes: #[42 41]).
	self deny: (Code bytes: #[42 42]) < (Code bytes: #[0 42]).
	self deny: (Code bytes: #[42 42]) < (Code bytes: #[0 255]).
	self assert: (Code bytes: #[42 42]) < (Code bytes: #[255 0]).
	self deny: (Code bytes: #[42 42]) < (Code bytes: #[0 0]).
%
method: CMapTests
testSmaller3
	self assert: (Code bytes: #[0 0 0]) < (Code bytes: #[255 255 255]).
	self deny: (Code bytes: #[42 42 42]) < (Code bytes: #[42 42 42]).
	self assert: (Code bytes: #[42 42 42]) < (Code bytes: #[42 42 43]).
	self assert: (Code bytes: #[42 42 42]) < (Code bytes: #[42 43 42]).
	self assert: (Code bytes: #[42 42 42]) < (Code bytes: #[43 42 42]).
	self deny: (Code bytes: #[255 255 255]) < (Code bytes: #[0 0 0]).
	self deny: (Code bytes: #[42 42 42]) < (Code bytes: #[42 42 41]).
	self deny: (Code bytes: #[42 42 42]) < (Code bytes: #[42 41 42]).
	self deny: (Code bytes: #[42 42 42]) < (Code bytes: #[41 42 42]).
	self deny: (Code bytes: #[42 42 42]) < (Code bytes: #[41 41 41]).
%
method: CMapTests
testSmaller4
	self assert: (Code bytes: #[0 0 0 0]) < (Code bytes: #[255 255 255 255]).
	self deny: (Code bytes: #[42 42 42 42]) < (Code bytes: #[42 42 42 42]).
	self assert: (Code bytes: #[42 42 42 42]) < (Code bytes: #[42 42 42 43]).
	self assert: (Code bytes: #[42 42 42 42]) < (Code bytes: #[42 42 43 42]).
	self assert: (Code bytes: #[42 42 42 42]) < (Code bytes: #[42 43 42 42]).
	self assert: (Code bytes: #[42 42 42 42]) < (Code bytes: #[43 42 42 42]).
	self deny: (Code bytes: #[255 255 255 255]) < (Code bytes: #[0 0 0 0]).
	self deny: (Code bytes: #[42 42 42 42]) < (Code bytes: #[42 42 42 41]).
	self deny: (Code bytes: #[42 42 42 42]) < (Code bytes: #[42 42 41 42]).
	self deny: (Code bytes: #[42 42 42 42]) < (Code bytes: #[42 41 42 42]).
	self deny: (Code bytes: #[42 42 42 42]) < (Code bytes: #[41 42 42 42]).
%
method: CMapTests
testSmallerDifferentLength
	self assert: (Code bytes: #[]) < (Code bytes: #[42]).
	self assert: (Code bytes: #[0 42]) < (Code bytes: #[42]).
	self assert: (Code bytes: #[42]) < (Code bytes: #[42 0]).
	self assert: (Code bytes: #[0 42]) < (Code bytes: #[42 65 74])
%
method: CMapTests
testSmallerThan
	self assert: (Code bytes: #[0]) <= (Code bytes: #[255]).
	self assert: (Code bytes: #[42]) <= (Code bytes: #[42]).
	self assert: (Code bytes: #[42]) <= (Code bytes: #[43]).
	self assert: (Code bytes: #[42]) <= (Code bytes: #[255]).
	self deny: (Code bytes: #[255]) <= (Code bytes: #[0]).
	self deny: (Code bytes: #[42]) <= (Code bytes: #[41]).
	self deny: (Code bytes: #[42]) <= (Code bytes: #[0]).
%
method: CMapTests
testSmallerThan2
	self assert: (Code bytes: #[0 0]) <= (Code bytes: #[255 255]).
	self assert: (Code bytes: #[42 42]) <= (Code bytes: #[42 42]).
	self assert: (Code bytes: #[42 42]) <= (Code bytes: #[43 43]).
	self assert: (Code bytes: #[42 42]) <= (Code bytes: #[42 43]).
	self assert: (Code bytes: #[42 42]) <= (Code bytes: #[43 42]).
	self assert: (Code bytes: #[0 42]) <= (Code bytes: #[255 42]).
	self assert: (Code bytes: #[0 42]) <= (Code bytes: #[255 255]).
	self deny: (Code bytes: #[255 255]) <= (Code bytes: #[0 0]).
	self deny: (Code bytes: #[42 42]) <= (Code bytes: #[41 41]).
	self deny: (Code bytes: #[42 42]) <= (Code bytes: #[41 42]).
	self deny: (Code bytes: #[42 42]) <= (Code bytes: #[42 41]).
	self deny: (Code bytes: #[42 42]) <= (Code bytes: #[0 42]).
	self deny: (Code bytes: #[42 42]) <= (Code bytes: #[0 255]).
	self assert: (Code bytes: #[42 42]) <= (Code bytes: #[255 0]).
	self deny: (Code bytes: #[42 42]) <= (Code bytes: #[0 0]).
%
method: CMapTests
testSmallerThan3
	self assert: (Code bytes: #[0 0 0]) <= (Code bytes: #[255 255 255]).
	self assert: (Code bytes: #[42 42 42]) <= (Code bytes: #[42 42 42]).
	self assert: (Code bytes: #[42 42 42]) <= (Code bytes: #[42 42 43]).
	self assert: (Code bytes: #[42 42 42]) <= (Code bytes: #[42 43 42]).
	self assert: (Code bytes: #[42 42 42]) <= (Code bytes: #[43 42 42]).
	self deny: (Code bytes: #[255 255 255]) <= (Code bytes: #[0 0 0]).
	self deny: (Code bytes: #[42 42 42]) <= (Code bytes: #[42 42 41]).
	self deny: (Code bytes: #[42 42 42]) <= (Code bytes: #[42 41 42]).
	self deny: (Code bytes: #[42 42 42]) <= (Code bytes: #[41 42 42]).
	self deny: (Code bytes: #[42 42 42]) <= (Code bytes: #[41 41 41]).
%
method: CMapTests
testSmallerThan4
	self assert: (Code bytes: #[0 0 0 0]) <= (Code bytes: #[255 255 255 255]).
	self assert: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[42 42 42 42]).
	self assert: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[42 42 42 43]).
	self assert: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[42 42 43 42]).
	self assert: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[42 43 42 42]).
	self assert: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[43 42 42 42]).
	self deny: (Code bytes: #[255 255 255 255]) <= (Code bytes: #[0 0 0 0]).
	self deny: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[42 42 42 41]).
	self deny: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[42 42 41 42]).
	self deny: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[42 41 42 42]).
	self deny: (Code bytes: #[42 42 42 42]) <= (Code bytes: #[41 42 42 42]).
%
method: CMapTests
testSmallerThanDifferentLength
	self assert: (Code bytes: #[]) <= (Code bytes: #[42]).
	self assert: (Code bytes: #[0 42]) <= (Code bytes: #[42]).
	self assert: (Code bytes: #[42]) <= (Code bytes: #[42 0]).
	self assert: (Code bytes: #[0 42]) <= (Code bytes: #[42 65 74])
%
category: 'testing ranges'
method: CMapTests
testRangeErrors
	self should: [(Code bytes: #[]) to: (Code bytes: #[42])] raise: Error.
	[(Code bytes: #[]) to: (Code bytes: #[42])] on: Error do: [:ex |
		self assert: ex messageText = 'The range is not valid'].
	self should: [(Code bytes: #[0 42]) to: (Code bytes: #[42])] raise: Error.
	[(Code bytes: #[0 42]) to: (Code bytes: #[42])] on: Error do: [:ex |
		self assert: ex messageText = 'The range is not valid'].
	self should: [(Code bytes: #[0 42]) to: (Code bytes: #[42 65 74])] raise: Error.
	[(Code bytes: #[0 42]) to: (Code bytes: #[42 65 74])] on: Error do: [:ex |
		self assert: ex messageText = 'The range is not valid'].
%
method: CMapTests
testRangeIncludes
	self assert: (((Code bytes: #[42]) to: (Code bytes: #[42])) includesCode: (Code bytes: #[42])).
	self deny: (((Code bytes: #[42]) to: (Code bytes: #[42])) includesCode: (Code bytes: #[41])).
	self deny: (((Code bytes: #[42]) to: (Code bytes: #[42])) includesCode: (Code bytes: #[43])).
	self assert: (((Code bytes: #[0]) to: (Code bytes: #[255])) includesCode: (Code bytes: #[42])).
	self assert: (((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) includesCode: (Code bytes: #[42 42])).
	self assert: (((Code bytes: #[42 42]) to: (Code bytes: #[43 42])) includesCode: (Code bytes: #[42 42])).
	self assert: (((Code bytes: #[42 42]) to: (Code bytes: #[42 43])) includesCode: (Code bytes: #[42 42])).
	self assert: (((Code bytes: #[42 42]) to: (Code bytes: #[43 43])) includesCode: (Code bytes: #[42 42])).
	self assert: (((Code bytes: #[0 0]) to: (Code bytes: #[255 255])) includesCode: (Code bytes: #[42 42])).
	self assert: (((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) includesCode: (Code bytes: #[42 42])).
	self deny: (((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) includesCode: (Code bytes: #[43 42])).
	self deny: (((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) includesCode: (Code bytes: #[42 43])).
	self deny: (((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) includesCode: (Code bytes: #[43 43])).
	self assert: (((Code bytes: #[0 0 0]) to: (Code bytes: #[255 255 255])) includesCode: (Code bytes: #[42 42 42])).
	self assert: (((Code bytes: #[42 42 42]) to: (Code bytes: #[42 42 42])) includesCode: (Code bytes: #[42 42 42])).
	self deny: (((Code bytes: #[42 42 42]) to: (Code bytes: #[42 42 42])) includesCode: (Code bytes: #[42 41 42])).
	self assert: (((Code bytes: #[0 0 0 0]) to: (Code bytes: #[255 255 255 255])) includesCode: (Code bytes: #[42 42 42 42])).
	self assert: (((Code bytes: #[42 42 42 42]) to: (Code bytes: #[42 42 42 42])) includesCode: (Code bytes: #[42 42 42 42])).
	self deny: (((Code bytes: #[42 42 42 42]) to: (Code bytes: #[42 42 42 42])) includesCode: (Code bytes: #[42 42 41 42])).
%
method: CMapTests
testRangeIncludesDifferentLength
	self deny: (((Code bytes: #[42]) to: (Code bytes: #[42])) includesCode: (Code bytes: #[])).
	self deny: (((Code bytes: #[42]) to: (Code bytes: #[42])) includesCode: (Code bytes: #[42 42])).
	self deny: (((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) includesCode: (Code bytes: #[42])).
	self deny: (((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) includesCode: (Code bytes: #[42 42 42])).
	self deny: (((Code bytes: #[42 42 42]) to: (Code bytes: #[42 42 42])) includesCode: (Code bytes: #[42 42])).
	self deny: (((Code bytes: #[42 42 42 42]) to: (Code bytes: #[42 42 42 42])) includesCode: (Code bytes: #[42 42 42])).
%
method: CMapTests
testRangeLength
	self assert: ((Code bytes: #[0]) to: (Code bytes: #[255])) length = 1.
	self assert: ((Code bytes: #[0 0]) to: (Code bytes: #[255 255])) length = 2.
	self assert: ((Code bytes: #[0 0 0]) to: (Code bytes: #[255 255 255])) length = 3.
	self assert: ((Code bytes: #[0 0 0 0]) to: (Code bytes: #[255 255 255 255])) length = 4.
	self assert: ((Code bytes: #[]) to: (Code bytes: #[])) length = 0.
%
method: CMapTests
testRangeNumberOfCodes
	self assert: ((Code bytes: #[0]) to: (Code bytes: #[255])) class == Range.
	self assert: ((Code bytes: #[42]) to: (Code bytes: #[42])) numberOfCodes = 1.
	self assert: ((Code bytes: #[42]) to: (Code bytes: #[43])) numberOfCodes = 2.
	self assert: ((Code bytes: #[42]) to: (Code bytes: #[255])) numberOfCodes = 214.
	self assert: ((Code bytes: #[0]) to: (Code bytes: #[255])) numberOfCodes = 256.
	self assert: ((Code bytes: #[42 42]) to: (Code bytes: #[42 42])) numberOfCodes = 1.
	self assert: ((Code bytes: #[42 42]) to: (Code bytes: #[42 43])) numberOfCodes = 2.
	self assert: ((Code bytes: #[42 42]) to: (Code bytes: #[43 42])) numberOfCodes = 2.
	self assert: ((Code bytes: #[42 42]) to: (Code bytes: #[43 43])) numberOfCodes = 4.
	self assert: ((Code bytes: #[42 42]) to: (Code bytes: #[255 42])) numberOfCodes = 214.
	self assert: ((Code bytes: #[42 42]) to: (Code bytes: #[42 255])) numberOfCodes = 214.
	self assert: ((Code bytes: #[42 42]) to: (Code bytes: #[255 255])) numberOfCodes = 45796.
	self assert: ((Code bytes: #[0 0]) to: (Code bytes: #[255 255])) numberOfCodes = 65536.
	self assert: ((Code bytes: #[0 0 0]) to: (Code bytes: #[255 255 255])) numberOfCodes = 16777216.
	self assert: ((Code bytes: #[42 42 42]) to: (Code bytes: #[42 42 42])) numberOfCodes = 1.
	self assert: ((Code bytes: #[0 0 0 0]) to: (Code bytes: #[255 255 255 255])) numberOfCodes = 4294967296.
	self assert: ((Code bytes: #[42 42 42 42]) to: (Code bytes: #[42 42 42 42])) numberOfCodes = 1.
%
method: CMapTests
testRangeOverlaps1
	self assert: ((Range from: #[42] to: #[42]) overlaps: (Range from: #[42] to: #[42])).
	self assert: ((Range from: #[0] to: #[42]) overlaps: (Range from: #[42] to: #[255])).
	self assert: ((Range from: #[0] to: #[255]) overlaps: (Range from: #[0] to: #[255])).
	self assert: ((Range from: #[0] to: #[255]) overlaps: (Range from: #[42] to: #[42])).
	self assert: ((Range from: #[42] to: #[42]) overlaps: (Range from: #[0] to: #[255])).
	self deny: ((Range from: #[0] to: #[42]) overlaps: (Range from: #[43] to: #[255])).
	self deny: ((Range from: #[42] to: #[42]) overlaps: (Range from: #[43] to: #[43])).
	self deny: ((Range from: #[43] to: #[43]) overlaps: (Range from: #[42] to: #[42])).
%
method: CMapTests
testRangeOverlaps12
	self assert: ((Range from: #[42] to: #[42]) overlaps: (Range from: #[42 42] to: #[42 42])).
	self assert: ((Range from: #[42 42] to: #[42 42]) overlaps: (Range from: #[42] to: #[42])).
%
method: CMapTests
testRangeOverlaps2
	self assert: ((Range from: #[42 42] to: #[42 42]) overlaps: (Range from: #[42 42] to: #[42 42])).
	self assert: ((Range from: #[42 0] to: #[42 42]) overlaps: (Range from: #[42 42] to: #[42 255])).
	self assert: ((Range from: #[0 42] to: #[42 42]) overlaps: (Range from: #[42 42] to: #[255 42])).
	self assert: ((Range from: #[42 0] to: #[42 255]) overlaps: (Range from: #[42 0] to: #[42 255])).
	self assert: ((Range from: #[0 42] to: #[255 42]) overlaps: (Range from: #[0 42] to: #[255 42])).
	self assert: ((Range from: #[42 0] to: #[42 255]) overlaps: (Range from: #[42 42] to: #[42 42])).
	self assert: ((Range from: #[0 42] to: #[255 42]) overlaps: (Range from: #[42 42] to: #[42 42])).
	self assert: ((Range from: #[42 42] to: #[42 42]) overlaps: (Range from: #[42 0] to: #[42 255])).
	self assert: ((Range from: #[42 42] to: #[42 42]) overlaps: (Range from: #[0 42] to: #[255 42])).
	self deny: ((Range from: #[42 0] to: #[42 42]) overlaps: (Range from: #[42 43] to: #[42 255])).
	self deny: ((Range from: #[0 42] to: #[42 42]) overlaps: (Range from: #[43 42] to: #[255 42])).
	self deny: ((Range from: #[42 42] to: #[42 42]) overlaps: (Range from: #[42 43] to: #[42 43])).
	self deny: ((Range from: #[42 43] to: #[42 43]) overlaps: (Range from: #[42 42] to: #[42 42])).
%
method: CMapTests
testRangeWith
	self assert: ((Code bytes: #[48]) --> 48 rangeWith: (Code bytes: #[49]) --> 49) = (((Code bytes: #[48]) to: (Code bytes: #[49])) --> 48).
	self assert: (((Code bytes: #[48]) to: (Code bytes: #[49])) --> 48 rangeWith: (Code bytes: #[50]) --> 50) = (((Code bytes: #[48]) to: (Code bytes: #[50])) --> 48).
	self assert: (((Code bytes: #[48]) to: (Code bytes: #[50])) --> 48 rangeWith: ((Code bytes: #[51]) to: (Code bytes: #[54])) --> 51) = (((Code bytes: #[48]) to: (Code bytes: #[54])) --> 48)
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: PostScript at: 1.
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: BfMappings
example
	^self
		fromMappings: ((OrderedCollection new)
			add: (Code bytes: #[0 3]) --> 32;
			add: (Code bytes: #[0 20]) --> 49;
			add: (Code bytes: #[0 36]) --> 65;
			add: (Code bytes: #[0 38]) --> 67;
			add: (Code bytes: #[0 39]) --> 68;
			add: (Code bytes: #[0 40]) --> 69;
			add: (Code bytes: #[0 42]) --> 71;
			add: (Code bytes: #[0 43]) --> 72;
			add: (Code bytes: #[0 46]) --> 75;
			add: (Code bytes: #[0 47]) --> 76;
			add: (Code bytes: #[0 48]) --> 77;
			add: (Code bytes: #[0 49]) --> 78;
			add: (Code bytes: #[0 51]) --> 80;
			add: (Code bytes: #[0 53]) --> 82;
			add: (Code bytes: #[0 54]) --> 83;
			add: (Code bytes: #[0 55]) --> 84;
			add: (Code bytes: #[0 56]) --> 85;
			add: (Code bytes: #[0 57]) --> 86;
			add: (Code bytes: #[0 59]) --> 88;
			add: (Code bytes: #[0 60]) --> 89;
			add: (Code bytes: #[0 66]) --> 95;
			add: (Code bytes: #[0 68]) --> 97;
			add: (Code bytes: #[0 69]) --> 98;
			add: (Code bytes: #[0 70]) --> 99;
			add: (Code bytes: #[0 71]) --> 100;
			add: (Code bytes: #[0 72]) --> 101;
			add: (Code bytes: #[0 73]) --> 102;
			add: (Code bytes: #[0 74]) --> 103;
			add: (Code bytes: #[0 75]) --> 104;
			add: (Code bytes: #[0 76]) --> 105;
			add: (Code bytes: #[0 79]) --> 108;
			add: (Code bytes: #[0 80]) --> 109;
			add: (Code bytes: #[0 81]) --> 110;
			add: (Code bytes: #[0 82]) --> 111;
			add: (Code bytes: #[0 83]) --> 112;
			add: (Code bytes: #[0 85]) --> 114;
			add: (Code bytes: #[0 86]) --> 115;
			add: (Code bytes: #[0 87]) --> 116;
			add: (Code bytes: #[0 88]) --> 117;
			add: (Code bytes: #[0 89]) --> 118;
			add: (Code bytes: #[0 90]) --> 119;
			add: (Code bytes: #[0 91]) --> 120;
			add: (Code bytes: #[0 92]) --> 121;
			yourself)
		in: (Array with: ((Code bytes: #[0 0]) to: (Code bytes: #[0 255])))
%
classmethod: BfMappings
exampleFromWrongCodespace
	^BfMappings
		fromMappings: ((OrderedCollection new: 11)
			add: (Code bytes: #[48]) --> 48;
			add: (Code bytes: #[49]) --> 49;
			add: (Code bytes: #[50]) --> 50;
			add: (Code bytes: #[51]) --> 51;
			add: (Code bytes: #[52]) --> 52;
			add: (Code bytes: #[53]) --> 53;
			add: (Code bytes: #[54]) --> 54;
			add: (Code bytes: #[55]) --> 55;
			add: (Code bytes: #[56]) --> 56;
			add: (Code bytes: #[57]) --> 57;
			add: (Code bytes: #[0 32]) --> 32;
			yourself)
		in: (Array with: ((Code bytes: #[0 0]) to: (Code bytes: #[255 255])))
%
classmethod: BfMappings
exampleFromWrongHebrewText
	"https://stackoverflow.com/questions/27252359/pdf-hebrew-convert-issue"

	| source |
	source := '/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CMapName /WrongMapping def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
2 beginbfchar
<0003> <0020>
<0010> <002D>
endbfchar
1 beginbfrange
<0014> <001A> [<0036> <0031> <0034> <0034> <0037> <0031> <0034>]
endbfrange
endcmap CMapName currentdict /CMap defineresource pop end end'.
	^CMap newWith: (((Interpreter run: source) resources at: #CMap) at: #WrongMapping)
%
classmethod: BfMappings
exampleOnlyChars
	^BfMappings
		fromMappings: ((OrderedCollection new: 43)
			add: (Code bytes: #[0 3]) --> 32;
			add: (Code bytes: #[0 20]) --> 49;
			add: (Code bytes: #[0 36]) --> 65;
			add: (Code bytes: #[0 38]) --> 67;
			add: (Code bytes: #[0 39]) --> 68;
			add: (Code bytes: #[0 40]) --> 69;
			add: (Code bytes: #[0 42]) --> 71;
			add: (Code bytes: #[0 43]) --> 72;
			add: (Code bytes: #[0 46]) --> 75;
			add: (Code bytes: #[0 47]) --> 76;
			add: (Code bytes: #[0 48]) --> 77;
			add: (Code bytes: #[0 49]) --> 78;
			add: (Code bytes: #[0 51]) --> 80;
			add: (Code bytes: #[0 53]) --> 82;
			add: (Code bytes: #[0 54]) --> 83;
			add: (Code bytes: #[0 55]) --> 84;
			add: (Code bytes: #[0 56]) --> 85;
			add: (Code bytes: #[0 57]) --> 86;
			add: (Code bytes: #[0 59]) --> 88;
			add: (Code bytes: #[0 60]) --> 89;
			add: (Code bytes: #[0 66]) --> 95;
			add: (Code bytes: #[0 68]) --> 97;
			add: (Code bytes: #[0 69]) --> 98;
			add: (Code bytes: #[0 70]) --> 99;
			add: (Code bytes: #[0 71]) --> 100;
			add: (Code bytes: #[0 72]) --> 101;
			add: (Code bytes: #[0 73]) --> 102;
			add: (Code bytes: #[0 74]) --> 103;
			add: (Code bytes: #[0 75]) --> 104;
			add: (Code bytes: #[0 76]) --> 105;
			add: (Code bytes: #[0 79]) --> 108;
			add: (Code bytes: #[0 80]) --> 109;
			add: (Code bytes: #[0 81]) --> 110;
			add: (Code bytes: #[0 82]) --> 111;
			add: (Code bytes: #[0 83]) --> 112;
			add: (Code bytes: #[0 85]) --> 114;
			add: (Code bytes: #[0 86]) --> 115;
			add: (Code bytes: #[0 87]) --> 116;
			add: (Code bytes: #[0 88]) --> 117;
			add: (Code bytes: #[0 89]) --> 118;
			add: (Code bytes: #[0 90]) --> 119;
			add: (Code bytes: #[0 91]) --> 120;
			add: (Code bytes: #[0 92]) --> 121;
			yourself)
		in: (Array with: ((Code bytes: #[0 0]) to: (Code bytes: #[255 255])))
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: ByteCodespace
example
	^ByteCodespace
		range: ((Code bytes: #[0]) to: (Code bytes: #[255]))
		mappings: (Array
			with: (Code bytes: #[31]) --> 10
			with: ((Code bytes: #[32]) to: (Code bytes: #[126])) --> 32)
%
category: '*PostScript CIDInit Testing-profiling'
classmethod: Category
profileTimeToLoadAllCMaps
	"this loads all 181 CMaps into the PostScript Interpreter - this is very slow and should not run as regular test case"
	"self profileTimeToLoadAllCMaps"

	[Interpreter run: '(*) {cvn /CMap findresource pop} 10 string /CMap resourceforall'] timeProfile
%
classmethod: Category
profileTimeToLoadUniCNS_UCS2_H
	"this loads the largest CMaps into the PostScript Interpreter"
	"self profileTimeToLoadUniCNS_UCS2_H"

	[100 timesRepeat: [Interpreter run: '/UniCNS-UCS2-H /CMap findresource']] timeProfile
%
classmethod: Category
showTimeToLoadAllCMaps
	"this loads all 181 CMaps into the PostScript Interpreter - this is very slow and should not run as regular test case"
	"self showTimeToLoadAllCMaps"

	| time |
	time := [Interpreter run: '(*) {cvn /CMap findresource pop} 10 string /CMap resourceforall'] timeToRun.
	Transcript
		cr;
		show: time printString
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: CharMapping
example
	^(Code bytes: #[42]) --> 86
%
classmethod: CharMapping
exampleName
	^(Code bytes: #[42]) --> #yen
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: CIDMappings
example
	^self
		fromMappings: (Array
			with: (Code bytes: #[0 0 0 160]) --> 1
			with: (Code bytes: #[0 0 0 161]) --> 22480
			with: (Code bytes: #[0 0 0 169]) --> 100
			with: (Code bytes: #[0 0 0 170]) --> 22484) , (Array
				with: (Range first: (Code bytes: #[0 0 0 32]) last: (Code bytes: #[0 0 0 126])) --> 1
				with: (Range first: (Code bytes: #[0 0 0 162]) last: (Code bytes: #[0 0 0 165])) --> 96
				with: (Range first: (Code bytes: #[0 0 0 166]) last: (Code bytes: #[0 0 0 168])) --> 22481
				with: (Range first: (Code bytes: #[0 0 0 171]) last: (Code bytes: #[0 0 0 172])) --> 11878)
		in: (Array with: ((Code bytes: #[0 0 0 0]) to: (Code bytes: #[255 255 255 255])))
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: CMap
allCMaps
	"this loads all 181 CMaps"
	"Tools.TimeProfiler profile: [self allCMaps]"
	"self allCMaps"

	^(Interpreter run: '(*) {cvn /CMap findresource} 10 string /CMap resourceforall') stack objects collect: [:dict |
		self newWith: dict]
%
classmethod: CMap
example
	| ps cmap |
	ps := Interpreter run: '/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo
<< /Registry (Adobe)
/Ordering (UCS) /Supplement 0 >> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000> <FFFF>
endcodespacerange
15 beginbfchar
<0003> <0020>
<000F> <002C>
<0010> <002D>
<0011> <002E>
<0013> <0030>
<0014> <0031>
<0015> <0032>
<0016> <0033>
<0017> <0034>
<0018> <0035>
<0019> <0036>
<001A> <0037>
<001B> <0038>
<001C> <0039>
<001D> <003A>
endbfchar
endcmap CMapName currentdict /CMap defineresource pop end end'.
	cmap := (ps resources at: #CMap) at: #'Adobe-Identity-UCS'.
	^self newWith: cmap
%
classmethod: CMap
exampleWrong
	"self exampleWrong"
	"the 3rd operator >find< is not PostScript. We can use the correct /findresource instead"

	| ps |
	ps := [Interpreter run: self exampleWrongSource] on: LookupError do: [:ex |
		(ex reason = #valueAt: asString and: [
		ex key = #find])
				ifTrue: [
				ex resume: (ex receiver valueAt: #findresource)]
				ifFalse: [
				ex pass]].
	^self newWith: ((ps resources at: #CMap) at: #F1)
%
classmethod: CMap
exampleWrongFixBefore
	"self exampleWrongFixBefore"
	"the 3rd operator >find< is not PostScript. We can define it as alias before"

	| source ps resources |
	source := self exampleWrongSource.
	ps := Interpreter new.
	resources := [(ps run: source) resources] on: LookupError do: [:ex |
		(ex reason = #valueAt: asString and: [
		ex key = #find])
				ifTrue: [
				| ps1 |
				ps1 := Interpreter run: '/find /findresource cvx def'.
				ex return: (ps1 run: source) resources]
				ifFalse: [
				ex pass]].
	^self newWith: ((resources at: #CMap) at: #F1)
%
classmethod: CMap
exampleWrongSource
	"the 3rd operator >find< is not PostScript. We can define it as alias before"

	^'/CIDInit/ProcSet
find begin 12 dict begin begincmap /CIDSystemInfo<</Registry(Adobe)
/Ordering(Identity)
/Supplement 0
>>
def
/CMapName/F1 def
1 begincodespacerange <0000> <FFFF> endcodespacerange
54 beginbfrange
<20> <20> <0020>
<21> <21> <0055>
<22> <22> <0073>
<23> <23> <0074>
<24> <24> <002D>
<25> <25> <0049>
<26> <26> <0044>
<27> <27> <0064>
<28> <28> <0065>
<29> <29> <0072>
<2A> <2A> <0053>
<2B> <2B> <0050>
<2C> <2C> <004B>
<2D> <2D> <007A>
<2E> <2E> <0075>
<2F> <2F> <004C>
<30> <30> <00FC>
<31> <31> <0062>
<32> <32> <0063>
<33> <33> <006B>
<34> <34> <0041>
<35> <35> <0047>
<36> <36> <003A>
<37> <37> <0045>
<38> <38> <0038>
<39> <39> <0031>
<3A> <3A> <0034>
<3B> <3B> <0030>
<3C> <3C> <0033>
<3D> <3D> <0036>
<3E> <3E> <0037>
<3F> <3F> <0042>
<40> <40> <0069>
<41> <41> <0052>
<42> <42> <0066>
<43> <43> <0061>
<44> <44> <0067>
<45> <45> <006E>
<46> <46> <0077>
<47> <47> <0068>
<48> <48> <0043>
<49> <49> <0076>
<4A> <4A> <006D>
<4B> <4B> <0048>
<4C> <4C> <006F>
<4D> <4D> <0032>
<4E> <4E> <0054>
<4F> <4F> <006C>
<50> <50> <002F>
<51> <51> <0039>
<52> <52> <0035>
<53> <53> <0078>
<54> <54> <004E>
<55> <55> <002E>
endbfrange
endcmap CMapName currentdict /CMap defineresource pop end end
'
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: Code
example
	^Code bytes: #[42]
%
classmethod: Code
example2
	^Code bytes: #[00 42]
%
classmethod: Code
example3
	^Code bytes: #[12 00 42]
%
classmethod: Code
example4
	^Code bytes: #[255 12 00 42]
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: IndexedCodespace
example
	^IndexedCodespace
		range: ((Code bytes: #[0 0]) to: (Code bytes: #[255 255]))
		codespaces: ((Array new: 256)
			at: 172 put: ByteCodespace example;
			yourself)
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: NotdefMappings
example
	^self
		fromMappings: (Array
			with: (Code bytes: #[255]) --> 1
			with: ((Code bytes: #[0]) to: (Code bytes: #[31])) --> 1)
		in: (Array with: ((Code bytes: #[0]) to: (Code bytes: #[255])))
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: Range
example
	^Range first: (Code bytes: #[0 0]) last: (Code bytes: #[255 255])
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: RangeMapping
example
	^(Range first: (Code bytes: #[0 0]) last: (Code bytes: #[0 55])) --> 42
%
classmethod: RangeMapping
exampleNames
	^(Range first: (Code bytes: #[0 50]) last: (Code bytes: #[0 55])) --> #(#yen #one #two #a #A #quotesingle)
%
category: '*PostScript CIDInit Testing-test instances'
classmethod: RegisteredCharacterCollection
example
	^RegisteredCharacterCollection registry: 'Adobe' ordering: 'Japan1' supplement: 1
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'PDFtalk Fonts tests'.
	dict at: #comment put: 'Tests for the basics of external font types
'.
	dict at: #isFunctional put: false.
	dict at: #notice put: ''.
	dict at: #packageName put: 'PDFtalk Fonts tests'.
	dict at: #storeVersion put: '2.3.0.0'.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components := (components at:  #'PDFtalk Testing') at: #codeComponents.
	components at: dict name put: dict.
%
DoIt
System myUserProfile insertDictionary: (PDFtalk at: #Fonts) at: 1.
%
# Define class FontProgramTests
DoIt
(PDFtalk at: #Tests)
	subclass: 'FontProgramTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: Fonts
%
DoIt
	FontProgramTests category: 'PDFtalk Fonts tests'.
	FontProgramTests namespacePath: #(#PDFtalk #Fonts).
%
# Define class PFMTests
DoIt
(PDFtalk at: #Tests)
	subclass: 'PFMTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: Fonts
%
DoIt
	PFMTests category: 'PDFtalk Fonts tests'.
	PFMTests namespacePath: #(#PDFtalk #Fonts).
%
# Define class FontEncodingTest
DoIt
(PDFtalk at: #Tests)
	subclass: 'FontEncodingTest'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: Fonts
%
DoIt
	FontEncodingTest category: 'PDFtalk Fonts tests'.
	FontEncodingTest namespacePath: #(#PDFtalk #Fonts).
%
# Define class CharacterDecodingTests
DoIt
(PDFtalk at: #Tests)
	subclass: 'CharacterDecodingTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: Fonts
%
DoIt
	CharacterDecodingTests category: 'PDFtalk Fonts tests'.
	CharacterDecodingTests namespacePath: #(#PDFtalk #Fonts).
%
# Define class FontMetricsTests
DoIt
(PDFtalk at: #Tests)
	subclass: 'FontMetricsTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: Fonts
%
DoIt
	FontMetricsTests category: 'PDFtalk Fonts tests'.
	FontMetricsTests namespacePath: #(#PDFtalk #Fonts).
%
# Define class AfmParsingTest
DoIt
(PDFtalk at: #Tests)
	subclass: 'AfmParsingTest'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: Fonts
%
DoIt
	AfmParsingTest category: 'PDFtalk Fonts tests'.
	AfmParsingTest namespacePath: #(#PDFtalk #Fonts).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: ((PDFtalk at: #Fonts) at: #OpenType) at: 1.
%
# Define class OpenTypeTests
DoIt
(PDFtalk at: #Tests)
	subclass: 'OpenTypeTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: OpenType
%
DoIt
	OpenTypeTests category: 'PDFtalk Fonts tests'.
	OpenTypeTests namespacePath: #(#PDFtalk #Fonts #OpenType).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: ((PDFtalk at: #Fonts) at: #CFF) at: 1.
%
# Define class CFFTests
DoIt
(PDFtalk at: #Tests)
	subclass: 'CFFTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: CFF
%
DoIt
	CFFTests category: 'PDFtalk Fonts tests'.
	CFFTests namespacePath: #(#PDFtalk #Fonts #CFF).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: (PDFtalk at: #Fonts) at: 1.
%
category: 'Testing'
method: AfmParsingTest
testCharMetric
	| bookString charMetric |
	bookString := 'C 102 ; WX 333 ; N f ; B 20 0 383 682 ; L i fi ; L l fl ;'.
	charMetric := AfmParser new charMetricFrom: bookString.
	self assert: charMetric class = CharacterMetric.
	self assert: charMetric c = 102.
	self assert: charMetric w = (333 @ 0).
	self assert: charMetric n = #f.
	self assert: charMetric b asSource = '(20 @ 0 corner: 383 @ 682)'.
	self assert: charMetric l asSource = '(Dictionary
	with: #i -> #fi
	with: #l -> #fl)'
%
method: AfmParsingTest
testEmptyLines
	| fontMetric |
	fontMetric := AdobeFontMetric fromAfm: 'StartFontMetrics 2.0

FontName MinimalTest

FontBBox -164 -224 1066 961

EndFontMetrics
' readStream.
	self assert: fontMetric class name = #AdobeFontMetric.
	self assert: fontMetric fileFormatVersion = '2.0'.
	self assert: fontMetric fontName = 'MinimalTest'.
	self assert: fontMetric fontBBox asSource = '(-164 @ -224 corner: 1066 @ 961)'.
	self assert: fontMetric familyName = 'MinimalTest'
%
method: AfmParsingTest
testFamilyName
	| fontMetric |
	fontMetric := AdobeFontMetric fromAfm: 'StartFontMetrics 2.0
Comment AFM Generated by Ghostscript/pf2afm
FontName HelveticaNeue-BoldCond
FullName Helvetica 77 Bold Condensed
FontBBox -164 -224 1066 961
EndFontMetrics' readStream.
	self assert: fontMetric class name = #AdobeFontMetric.
	self assert: fontMetric comment = 'AFM Generated by Ghostscript/pf2afm'.
	self assert: fontMetric fontName = 'HelveticaNeue-BoldCond'.
	self assert: fontMetric fullName = 'Helvetica 77 Bold Condensed'.
	self assert: fontMetric familyName = 'HelveticaNeue'
%
method: AfmParsingTest
testKernPairs
	| bookString kernPair |
	bookString := 'KPX V A -129'.
	kernPair := AfmParser new kernPairFrom: bookString.
	self assert: kernPair class name = #KernPair.
	self assert: kernPair firstCharacter = #V.
	self assert: kernPair secondCharacter = #A.
	self assert: kernPair kerning = (-129 @ 0)
%
method: AfmParsingTest
testKeyValue
	| parser kv |
	parser := AfmParser new.
	kv := parser keyAndValue: 'StartFontMetrics 2.0'.
	self assert: kv key = 'StartFontMetrics'.
	self assert: kv value = '2.0'.
	kv := parser keyAndValue: 'StartFontMetrics	2.0'.
	self assert: kv key = 'StartFontMetrics'.
	self assert: kv value = '2.0'.
	kv := parser keyAndValue: '	 	 StartFontMetrics	 	 	  	 	2.0 	 	'.
	self assert: kv key = 'StartFontMetrics'.
	self assert: kv value = '2.0'
%
method: AfmParsingTest
testMinimalAFM
	| fontMetric |
	fontMetric := AdobeFontMetric fromAfm: 'StartFontMetrics 2.0
FontName MinimalTest
FontBBox -164 -224 1066 961
EndFontMetrics' readStream.
	self assert: fontMetric class name = #AdobeFontMetric.
	self assert: fontMetric fileFormatVersion = '2.0'.
	self assert: fontMetric fontName = 'MinimalTest'.
	self assert: fontMetric familyName = 'MinimalTest'
%
method: AfmParsingTest
testMinimalUnorderedAFM
	self
		should: [
		AdobeFontMetric fromAfm: 'FullName MinimalTest
StartFontMetrics 2.0
EndFontMetrics' readStream]
		raise: Error.
	self
		should: [
		AdobeFontMetric fromAfm: 'StartFontMetrics 2.0
EndFontMetrics
FullName MinimalTest
' readStream]
		raise: Error.
	self
		should: [
		AdobeFontMetric fromAfm: 'StartFontMetrics 2.0
FullName MinimalTest
' readStream]
		raise: Error.
	self
		should: [
		AdobeFontMetric fromAfm: 'FullName MinimalTest
' readStream]
		raise: Error.
	self
		should: [
		AdobeFontMetric fromAfm: 'FullName MinimalTest
EndFontMetrics
' readStream]
		raise: Error
%
method: AfmParsingTest
testNames
	| fontMetric |
	fontMetric := AdobeFontMetric fromAfm: 'StartFontMetrics 2.0
Comment AFM Generated by Ghostscript/pf2afm
FontName HelveticaNeue-BoldCond
FullName Helvetica 77 Bold Condensed
FamilyName Helvetica Neue
FontBBox -164 -224 1066 961
EndFontMetrics' readStream.
	self assert: fontMetric class name = #AdobeFontMetric.
	self assert: fontMetric comment = 'AFM Generated by Ghostscript/pf2afm'.
	self assert: fontMetric fontName = 'HelveticaNeue-BoldCond'.
	self assert: fontMetric fullName = 'Helvetica 77 Bold Condensed'.
	self assert: fontMetric familyName = 'Helvetica Neue'
%
method: AfmParsingTest
testNoNameAFM
	| fontMetric |
	fontMetric := AdobeFontMetric fromAfm: 'StartFontMetrics 2.0
EndFontMetrics' readStream.
	self assert: fontMetric isNil
%
method: AfmParsingTest
testTimesRoman
	| afm |
	afm := AdobeFontMetric fromAfm: AdobeFontMetric abrevitatedTimesRomanString readStream.
	self assert: (afm isKindOf: AdobeFontMetric)
%
method: AfmParsingTest
testTwoComments
	| fontMetric |
	fontMetric := AdobeFontMetric fromAfm: 'StartFontMetrics 2.0
Comment AFM Generated by Ghostscript/pf2afm
FontName MinimalTest
Comment and now some extra comment
FontBBox -164 -224 1066 961
EndFontMetrics' readStream.
	self assert: fontMetric class name = #AdobeFontMetric.
	self assert: fontMetric comment = 'AFM Generated by Ghostscript/pf2afm
and now some extra comment'
%
category: 'tests'
method: CharacterDecodingTests
testAdobeExamples
	"see http://www.adobe.com/devnet/opentype/archives/glyph.html
	or http://www.adobe.com/devnet-archive/opentype/archives/glyph.html
	section 3"

	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #Lcommaaccent) size = 1.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #Lcommaaccent) first = 16r013B.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #Lcommaaccent) first asCharacter asSource = '$Ļ'.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #uni20AC0308) size = 2.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #uni20AC0308) asArray = #(16r20AC 16r0308).
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #uni20AC0308) first asCharacter asSource = '$€'.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #uni20AC0308) last asCharacter asSource = '$̈'.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #u1040C) size = 1.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #u1040C) first = 16r1040C.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #uniD801DC0C) isEmpty.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #uni20ac) isEmpty.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #'Lcommaaccent_uni20AC0308_u1040C.alternate') size = 4.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #'Lcommaaccent_uni20AC0308_u1040C.alternate') asArray = #(16r013B 16r20AC 16r0308 16r1040C).
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #foo) isEmpty.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #'.notdef') isEmpty
%
method: CharacterDecodingTests
testCharacterNames
	self assert: ((PostScript at: #CharacterNames) characterNamesAtUnicode: 16r013B) sorted = #(#Lcedilla #Lcommaaccent).
	self assert: ((FontBody named: 'Helvetica') characterNameAtUnicode: 16r013B) = #Lcommaaccent.
	self assert: ((PostScript at: #CharacterNames) characterNamesAtUnicode: 16r20AC) sorted = #(#euro #Euro).
	self assert: ((FontBody named: 'Helvetica') characterNameAtUnicode: 16r20AC) = #Euro.
	self assert: ((PostScript at: #CharacterNames) characterNamesAtUnicode: 16r0308) = #(#dieresiscmb).
	self assert: ((FontBody named: 'Helvetica') characterNameAtUnicode: 16r0308) = #'.notdef'.
	self assert: ((PostScript at: #CharacterNames) characterNamesAtUnicode: 16r1040C) = #(#u1040C).
	self assert: ((PostScript at: #CharacterNames) characterNamesAtUnicode: 16rD801) = #(#'.notdef').
	self assert: ((PostScript at: #CharacterNames) characterNamesAtUnicode: 16rDC0C) = #(#'.notdef').
	self assert: ((PostScript at: #CharacterNames) characterNamesAtUnicode: 16rFFFF) = #(#uniFFFF).
	self assert: ((FontBody named: 'Helvetica') characterNameAtUnicode: 16rFFFF) = #'.notdef'.
	self assert: ((PostScript at: #CharacterNames) unicodesForGlyphName: #uniFFFF) asArray = #(16rFFFF).
%
category: 'Testing'
method: FontEncodingTest
testDecoderDifferenceToISO8859_1
	| fontEncoder isoEncoder fontDecoderSet isoDecoderSet inFontButNotInIso inIsoButNotInFont inFontButNotInIsoString inIsoButNotInFontString |
	fontEncoder := (FontBody named: 'Helvetica') encoder.
	isoEncoder := (PDFtalk at: #CharacterMap) iso8859_1.
	fontDecoderSet := fontEncoder decoder asSet.
	isoDecoderSet := isoEncoder decoder asSet.
	inFontButNotInIso := fontDecoderSet reject: [:i | isoDecoderSet includes: i].
	inIsoButNotInFont := isoDecoderSet reject: [:i1 | fontDecoderSet includes: i1].
	inFontButNotInIsoString := String fromString: inFontButNotInIso asSortedCollection.
	inIsoButNotInFontString := String fromString: inIsoButNotInFont asSortedCollection.
	self assert: inFontButNotInIsoString = 'ŒœŠšŸŽžƒˆ˜–—‘’‚“”„†‡•…‰‹›€™￿'.
	self deny: inIsoButNotInFontString = ' 	

''` ¤¦­²³µ¹¼½¾Ð×ÝÞðýþ'
%
method: FontEncodingTest
testDifferenceToISO8859_1
	| fontEncoder isoEncoder fontEncoderDict isoEncoderDict inFontButNotInIso inIsoButNotInFont |
	fontEncoder := (FontBody named: 'Helvetica') encoder.
	isoEncoder := (PDFtalk at: #CharacterMap) iso8859_1.
	fontEncoderDict := fontEncoder instVarNamed: #encoder asString.
	isoEncoderDict := isoEncoder instVarNamed: #encoder asString.
	inFontButNotInIso := fontEncoderDict reject: [:i | isoEncoderDict includes: i].
	inIsoButNotInFont := isoEncoderDict reject: [:i1 | fontEncoderDict includes: i1].
	self assert: inFontButNotInIso isEmpty.
	self deny: inIsoButNotInFont isEmpty
%
method: FontEncodingTest
testSomeSymbolicEncodings
	| font |
	font := FontBody named: 'Helvetica'.
	self assert: (font encodeSymbolic: $Ä) = #Adieresis.
	self assert: (font encodeSymbolic: $ä) = #adieresis.
	self assert: (font encodeSymbolic: $Ö) = #Odieresis.
	self assert: (font encodeSymbolic: $ö) = #odieresis.
	self assert: (font encodeSymbolic: $Ü) = #Udieresis.
	self assert: (font encodeSymbolic: $ü) = #udieresis.
	self assert: (font encodeSymbolic: $ß) = #germandbls.
	self assert: (font encodeSymbolic: 16r20AC asCharacter) = #Euro.
	self assert: (font encodeSymbolic: $€) = #Euro
%
method: FontEncodingTest
testSymbolicEncoding
	| font decodingArray list wst psEncoding |
	font := FontBody named: 'Helvetica'.
	decodingArray := font encoder decoder.
	list := OrderedCollection new: 128.
	129 to: 256 do: [:char |
		| symb |
		symb := font encodeSymbolic: (decodingArray at: char).
		symb isNil
			ifTrue: [list add: #space]
			ifFalse: [list add: symb]].
	wst := WriteStream on: (String new: 1000).
	list do: [:symbol |
		wst nextPut: $/.
		wst nextPutAll: symbol asString].
	psEncoding := wst contents.
	self assert: psEncoding = '/Euro/space/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE/space/Zcaron/space/space/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark/scaron/guilsinglright/oe/space/zcaron/Ydieresis/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/space/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis'
%
method: FontEncodingTest
testSymbolicEncodingsSymbol
	| font |
	[font := FontBody named: 'Symbol'] on: LookupError do: [:ex |
		^self].
	self assert: (font encodeSymbolic: $Ä) isNil.
	self assert: (font encodeSymbolic: $ä) isNil.
	self assert: (font encodeSymbolic: $Ö) isNil.
	self assert: (font encodeSymbolic: $ö) isNil.
	self assert: (font encodeSymbolic: $Ü) isNil.
	self assert: (font encodeSymbolic: $ü) isNil.
	self assert: (font encodeSymbolic: $ß) isNil.
	self assert: (font encodeSymbolic: 16r20AC asCharacter) = #Euro.
	self assert: (font encodeSymbolic: $€) = #Euro
%
category: 'Testing'
method: FontMetricsTests
testCharMetricsHelvetica
	| fontMetric charMetric |
	fontMetric := (Font fontAt: #Helvetica) metrics.
	charMetric := fontMetric charMetricAt: 169.
	self assert: charMetric n = #copyright.
	self assert: charMetric c = 169.
	self assert: charMetric asCharacter = $©.
	self assert: charMetric asCharacter asInteger = 169.
	charMetric := fontMetric charMetricAt: 39.
	self assert: charMetric n = #quotesingle.
	self assert: charMetric c = 39.
	self assert: charMetric asCharacter = $'.
	self assert: charMetric asCharacter asInteger = 39.
	charMetric := fontMetric charMetricAt: 164.
	self assert: charMetric n = #currency.
	self assert: charMetric c = 164.
	self assert: charMetric asCharacter = $¤.
	self assert: charMetric asCharacter asInteger = 164.
%
method: FontMetricsTests
testCharMetricsTimesRoman
	| fontMetric charMetric |
	fontMetric := (Font fontAt: #'Times-Roman') metrics.
	charMetric := fontMetric charMetricAt: 169.
	self assert: charMetric n = #quotesingle.
	self assert: charMetric c = 169.
	self assert: charMetric asCharacter = $'.
	self assert: charMetric asCharacter asInteger = 16r0027.
	charMetric := fontMetric charMetricAt: 39.
	self assert: charMetric n = #quoteright.
	self assert: charMetric c = 39.
	self assert: charMetric asCharacter = $’.
	self assert: charMetric asCharacter asInteger = 16r2019.
	charMetric := fontMetric charMetricAt: 164.
	self assert: charMetric n = #fraction.
	self assert: charMetric c = 164.
	self assert: charMetric asCharacter = $⁄.
	self assert: charMetric asCharacter asInteger = 16r2044.
%
method: FontMetricsTests
testStringWidth
	self assert: (((Font fontAt: #Courier) widthOfString: 'abcdefghijqrstuvwxyz') * 10) asSource = '120'.
	self assert: (((Font fontAt: #Helvetica) widthOfString: 'abcdefghijqrstuvwxyz') * 10) asFloat asSource = '95.03'.
	self assert: (((Font fontAt: #'Times-Roman') widthOfString: 'abcdefghijqrstuvwxyz') * 10) asFloat asSource = '88.87'
%
category: 'tests'
method: FontProgramTests
testCharstringDecoding
	self assert: (FontProgram charstringDecoded: #[0 1 71 18 0 0 67 111]) = #[16 217 17 218 108 81 169 133].
	self assert: (FontProgram charstringEncoded: #[16 217 17 218 108 81 169 133]) = #[0 1 71 18 0 0 67 111].
	self assert: (FontProgram charstringDecoded: #[0 0 0 0 0 0 0 0]) = #[16 216 136 237 216 32 160 19].
	self assert: (FontProgram charstringEncoded: #[16 216 136 237 216 32 160 19]) = #[0 0 0 0 0 0 0 0].
%
method: FontProgramTests
testEexecDecoding
	self assert: (FontProgram eexecDecoded: #[0 1 71 18 0 0 67 111]) = #[217 218 140 33 182 145 148 117].
	self assert: (FontProgram eexecEncoded: #[217 218 140 33 182 145 148 117]) = #[0 1 71 18 0 0 67 111].
	self assert: (FontProgram eexecDecoded: #[0 0 0 0 0 0 0 0]) = #[217 219 253 89 34 97 140 67].
	self assert: (FontProgram eexecEncoded: #[217 219 253 89 34 97 140 67]) = #[0 0 0 0 0 0 0 0].
%
method: FontProgramTests
testPfa
	self assert: (FontProgram fromPfa: FontProgram example asPfa) = FontProgram example
%
category: 'tests'
method: PFMTests
testRead
	self shouldnt: [PFMHeader fromBytes: PFMHeader exampleBytes] raise: Error.
	self assert: (PFMHeader fromBytes: PFMHeader exampleBytes) = PFMHeader example.
	self shouldnt: [ExtTextMetrics fromBytes: ExtTextMetrics exampleBytes] raise: Error.
	self assert: (ExtTextMetrics fromBytes: ExtTextMetrics exampleBytes) = ExtTextMetrics example.
	self shouldnt: [PairKern fromBytes: PairKern exampleBytes] raise: Error.
	self assert: (PairKern fromBytes: PairKern exampleBytes) = PairKern example.
	self shouldnt: [PostScriptFontMetrics fromBytes: PostScriptFontMetrics exampleBytes] raise: Error.
	self assert: (PostScriptFontMetrics fromBytes: PostScriptFontMetrics exampleBytes) = PostScriptFontMetrics example.
%
method: PFMTests
testReadWrite
	self assert: (PFMHeader fromBytes: PFMHeader exampleBytes) asBytes = PFMHeader exampleBytes.
	self assert: (ExtTextMetrics fromBytes: ExtTextMetrics exampleBytes) asBytes = ExtTextMetrics exampleBytes.
	self assert: (PairKern fromBytes: PairKern exampleBytes) asBytes = PairKern exampleBytes.
	self assert: (PostScriptFontMetrics fromBytes: PostScriptFontMetrics exampleBytes) asBytes = PostScriptFontMetrics exampleBytes.
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: ((PDFtalk at: #Fonts) at: #OpenType) at: 1.
%
category: 'tests'
method: OpenTypeTests
testFontHeaderReadWrite
	self assert: FontHeader example asBytes size = 54.
	self assert: (FontHeader fromBytes: FontHeader example asBytes) asBytes = FontHeader example asBytes.
	self assert: FontHeader exampleDifferentDates asBytes size = 54.
	self assert: (FontHeader fromBytes: FontHeader exampleDifferentDates asBytes) = FontHeader exampleDifferentDates.
	self assert: (FontHeader fromBytes: FontHeader exampleDifferentDates asBytes) asBytes = FontHeader exampleDifferentDates asBytes.
	self assert: FontHeader exampleUnitsPerEm2000 asBytes size = 54.
	self assert: (FontHeader fromBytes: FontHeader exampleUnitsPerEm2000 asBytes) asBytes = FontHeader exampleUnitsPerEm2000 asBytes
%
method: OpenTypeTests
testGlyphNameMapping
	"no tabular glyphs (with Adobe notation of '*.tab' "

	| font |
	font := Font freeSansBold.
	self assert: font numGlyphs = 2469.
	0 to: font numGlyphs - 1 do: [:gid |
		self assert: (font glyphNamed: (font nameOfGlyph: gid)) id = gid].
	self assert: ((font tabularGlyphsFor: 'ABC') collect: #id) asArray = #(36 37 38).
	self assert: ((font tabularGlyphsFor: '0123456789') collect: #id) asArray = #(19 20 21 22 23 24 25 26 27 28).
	self assert: font tabularGlyphIds = #()
%
method: OpenTypeTests
testNames
	| font fontNames |
	font := Font freeSansBold.
	self assert: (font nameAt: 1) = 'FreeSans'.
	self assert: (font nameAt: 6) = 'FreeSansBold'.
	self assert: (font nameAt: 7) isNil.
	fontNames := font nameTable nameRecords select: [:nameRecord | nameRecord nameID = 2].
	self assert: (fontNames collect: #string) = #('Bold' 'получерен' 'tučné' 'fed' 'Fett' 'Έντονα' 'Bold' 'Negrita' 'Lihavoitu' 'Gras' 'Félkövér' 'Grassetto' 'Vet' 'Halvfet' 'Pogrubiony' 'Negrito' 'gros' 'Полужирный' 'Tučné' 'Fet' 'Kalın' 'huruf tebal' 'жирний' 'Krepko' 'treknraksts' 'pusjuodis' 'đậm' 'Lodia').
	fontNames := font nameTable nameRecords select: [:nameRecord | nameRecord nameID = 4].
	self assert: (fontNames collect: #string) = #(
'Free Sans Bold' 
'Free Sans получерен' 
'Free Sans tučné' 
'Free Sans fed' 
'Free Sans Fett' 
'Free Sans Έντονα' 
'Free Sans Bold' 
'Free Sans Negrita' 
'Free Sans Lihavoitu' 
'Free Sans Gras' 
'Free Sans Félkövér' 
'Free Sans Grassetto' 
'Free Sans Vet' 
'Free Sans Halvfet' 
'Free Sans Pogrubiony' 
'Free Sans Negrito' 
'Free Sans gros' 
'Free Sans Полужирный' 
'Free Sans Tučné' 
'Free Sans Fet' 
'Free Sans Kalın' 
'Free Sans huruf tebal' 
'Free Sans жирний' 
'Free Sans Krepko' 
'Free Sans treknraksts' 
'Free Sans pusjuodis' 
'Free Sans đậm' 
'Free Sans Lodia')
%
method: OpenTypeTests
testStringWidthWithUndefinedGlyphs
	| font string |
	font := Font freeSansBold.
	string := String
		with: 1 asCharacter
		with: 32 asCharacter
		with: 3 asCharacter
		with: $A.
	self shouldnt: [(font widthOfString: string) * 10] raise: Error
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
System myUserProfile insertDictionary: ((PDFtalk at: #Fonts) at: #CFF) at: 1.
%
category: 'tests'
method: CFFTests
testDictIntegers
	self assert: (Dict integerFrom: #[16r8B] readStream) = 0.
	self assert: (Dict integerFrom: #[16rEF] readStream) = 100.
	self assert: (Dict integerFrom: #[16r27] readStream) = -100.
	self assert: (Dict integerFrom: #[16rFA 16r7C] readStream) = 1000.
	self assert: (Dict integerFrom: #[16rFE 16r7C] readStream) = -1000.
	self assert: (Dict integerFrom: #[16r1C 16r27 16r10] readStream) = 10000.
	self assert: (Dict integerFrom: #[16r1C 16rD8 16rF0] readStream) = -10000.
	self assert: (Dict integerFrom: #[16r1D 16r00 16r01 16r86 16rA0] readStream) = 100000.
	self assert: (Dict integerFrom: #[16r1D 16rFF 16rFE 16r79 16r60] readStream) = -100000.
%
method: CFFTests
testDictReals
	self assert: (Dict realStringFrom: #[16r1E 16rE2 16rA2 16r5F] readStream) = '-2.25'.
	self assert: (Dict realFrom: #[16r1E 16rE2 16rA2 16r5F] readStream) = -2.25.
	self assert: (Dict realStringFrom: #[16r1E 16r0A 16r14 16r05 16r41 16rC3 16rFF] readStream) = '0.140541e-3'.
	self assert: (Dict realFrom: #[16r1E 16r0A 16r14 16r05 16r41 16rC3 16rFF] readStream) = 0.140541e-3.
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'PDFtalk tests'.
	dict at: #comment put: 'Tests'.
	dict at: #isFunctional put: false.
	dict at: #notice put: ''.
	dict at: #packageName put: 'PDFtalk tests'.
	dict at: #storeVersion put: '2.5.0.5'.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components := (components at:  #'PDFtalk Testing') at: #codeComponents.
	components at: dict name put: dict.
%
# Define class ByteStreamTests
DoIt
TestCase
	subclass: 'ByteStreamTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalkTesting
%
DoIt
	ByteStreamTests category: 'PDFtalk tests'.
%
DoIt
System myUserProfile insertDictionary: PDFtalk at: 1.
%
# Define class CrossReferenceTests
DoIt
Tests
	subclass: 'CrossReferenceTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	CrossReferenceTests category: 'PDFtalk tests'.
	CrossReferenceTests namespacePath: #(#PDFtalk).
%
# Define class TrailerTests
DoIt
Tests
	subclass: 'TrailerTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	TrailerTests category: 'PDFtalk tests'.
	TrailerTests namespacePath: #(#PDFtalk).
%
# Define class MatrixTests
DoIt
Tests
	subclass: 'MatrixTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	MatrixTests category: 'PDFtalk tests'.
	MatrixTests namespacePath: #(#PDFtalk).
%
# Define class ImageXTests
DoIt
Tests
	subclass: 'ImageXTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	ImageXTests category: 'PDFtalk tests'.
	ImageXTests comment: 'Tests for the PDF ImageX object'.
	ImageXTests namespacePath: #(#PDFtalk).
%
# Define class FontEncodingTests
DoIt
Tests
	subclass: 'FontEncodingTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	FontEncodingTests category: 'PDFtalk tests'.
	FontEncodingTests namespacePath: #(#PDFtalk).
%
# Define class BugReportTests
DoIt
Tests
	subclass: 'BugReportTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	BugReportTests category: 'PDFtalk tests'.
	BugReportTests namespacePath: #(#PDFtalk).
%
# Define class AttributeTests
DoIt
Tests
	subclass: 'AttributeTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	AttributeTests category: 'PDFtalk tests'.
	AttributeTests namespacePath: #(#PDFtalk).
%
# Define class PDFObjectTests
DoIt
Tests
	subclass: 'PDFObjectTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	PDFObjectTests category: 'PDFtalk tests'.
	PDFObjectTests namespacePath: #(#PDFtalk).
%
# Define class ObjectStreamTests
DoIt
Tests
	subclass: 'ObjectStreamTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	ObjectStreamTests category: 'PDFtalk tests'.
	ObjectStreamTests namespacePath: #(#PDFtalk).
%
# Define class StreamTests
DoIt
Tests
	subclass: 'StreamTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	StreamTests category: 'PDFtalk tests'.
	StreamTests namespacePath: #(#PDFtalk).
%
# Define class ReferenceTests
DoIt
Tests
	subclass: 'ReferenceTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	ReferenceTests category: 'PDFtalk tests'.
	ReferenceTests namespacePath: #(#PDFtalk).
%
# Define class ColorTests
DoIt
Tests
	subclass: 'ColorTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	ColorTests category: 'PDFtalk tests'.
	ColorTests namespacePath: #(#PDFtalk).
%
# Define class StringTests
DoIt
Tests
	subclass: 'StringTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	StringTests category: 'PDFtalk tests'.
	StringTests namespacePath: #(#PDFtalk).
%
# Define class TypecheckingTests
DoIt
Tests
	subclass: 'TypecheckingTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	TypecheckingTests category: 'PDFtalk tests'.
	TypecheckingTests namespacePath: #(#PDFtalk).
%
# Define class SimpleObjectTests
DoIt
Tests
	subclass: 'SimpleObjectTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	SimpleObjectTests category: 'PDFtalk tests'.
	SimpleObjectTests namespacePath: #(#PDFtalk).
%
# Define class TypingTests
DoIt
Tests
	subclass: 'TypingTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	TypingTests category: 'PDFtalk tests'.
	TypingTests namespacePath: #(#PDFtalk).
%
# Define class FileTests
DoIt
Tests
	subclass: 'FileTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	FileTests category: 'PDFtalk tests'.
	FileTests namespacePath: #(#PDFtalk).
%
# Define class ContentsTests
DoIt
Tests
	subclass: 'ContentsTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	ContentsTests category: 'PDFtalk tests'.
	ContentsTests namespacePath: #(#PDFtalk).
%
# Define class DocumentTests
DoIt
Tests
	subclass: 'DocumentTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	DocumentTests category: 'PDFtalk tests'.
	DocumentTests namespacePath: #(#PDFtalk).
%
# Define class LibraryTests
DoIt
Tests
	subclass: 'LibraryTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	LibraryTests category: 'PDFtalk tests'.
	LibraryTests namespacePath: #(#PDFtalk).
%
# Define class PagesTests
DoIt
Tests
	subclass: 'PagesTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	PagesTests category: 'PDFtalk tests'.
	PagesTests namespacePath: #(#PDFtalk).
%
# Define class NameTests
DoIt
Tests
	subclass: 'NameTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	NameTests category: 'PDFtalk tests'.
	NameTests namespacePath: #(#PDFtalk).
%
# Define class CatalogTests
DoIt
Tests
	subclass: 'CatalogTests'
	instVarNames: #()
	classVars: #()
	classInstVars: #()
	poolDictionaries: #()
	inDictionary: PDFtalk
%
DoIt
	CatalogTests category: 'PDFtalk tests'.
	CatalogTests namespacePath: #(#PDFtalk).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
category: 'tests'
method: ByteStreamTests
testStreamReading
	self assert: (ByteReadStream littleEndianOn: #[1 2 3 4]) next = 1.
	self assert: (ByteReadStream littleEndianOn: #[1 2 3 4]) nextShort = 16r201.
	self assert: (ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextShort = -16r1F10.
	self assert: (ByteReadStream littleEndianOn: #[1 2 3 4]) nextUnsignedShort = 16r201.
	self assert: (ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextUnsignedShort = 16re0f0.
	self assert: (ByteReadStream littleEndianOn: #[1 2 3 4]) nextLong = 16r4030201.
	self assert: (ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextLong = -16r3F2F1F10.
	self assert: (ByteReadStream littleEndianOn: #[1 2 3 4]) nextUnsignedLong = 16r4030201.
	self assert: (ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextUnsignedLong = 16rc0d0e0f0.
	self assert: (ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) nextLongLong = 16r807060504030201.
	self assert: (ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) nextLongLong = -16r7F6F5F4F3F2F1F10.
	self assert: (ByteReadStream bigEndianOn: #[1 2 3 4]) next = 1.
	self assert: (ByteReadStream bigEndianOn: #[1 2 3 4]) nextShort = 16r102.
	self assert: (ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextShort = -16rF20.
	self assert: (ByteReadStream bigEndianOn: #[1 2 3 4]) nextUnsignedShort = 16r102.
	self assert: (ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextUnsignedShort = 16rf0e0.
	self assert: (ByteReadStream bigEndianOn: #[1 2 3 4]) nextLong = 16r1020304.
	self assert: (ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextLong = -16rF1F2F40.
	self assert: (ByteReadStream bigEndianOn: #[1 2 3 4]) nextUnsignedLong = 16r1020304.
	self assert: (ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) nextUnsignedLong = 16rf0e0d0c0.
	self assert: (ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) nextLongLong = 16r102030405060708.
	self assert: (ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) nextLongLong = -16rF1F2F3F4F5F6F80.
%
method: ByteStreamTests
testStreamReadingPositionalBigEndian
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 1 do: #next) = 1.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 2 do: #next) = 2.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 3 do: #next) = 3.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 4 do: #next) = 4.
	self deny: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 4 do: #atEnd).
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 5 do: #next) isNil.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 5 do: #atEnd).
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 6 do: #next] raise: ArgumentError.
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 0 do: #next] raise: ArgumentError.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 1 do: #nextShort) = 16r102.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 2 do: #nextShort) = 16r203.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 3 do: #nextShort) = 16r304.
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 4 do: #nextShort] raise: EndOfStream.
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 0 do: #nextShort] raise: ArgumentError.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 1 do: #nextShort) = -16rF20.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 2 do: #nextShort) = -16r1F30.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 3 do: #nextShort) = -16r2F40.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 1 do: #nextUnsignedShort) = 16r102.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 2 do: #nextUnsignedShort) = 16r203.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4]) atPosition: 3 do: #nextUnsignedShort) = 16r304.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 1 do: #nextUnsignedShort) = 16rf0e0.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 2 do: #nextUnsignedShort) = 16re0d0.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 3 do: #nextUnsignedShort) = 16rd0c0.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 1 do: #nextLong) = 16r1020304.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 2 do: #nextLong) = 16r2030405.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 3 do: #nextLong) = 16r3040506.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 5 do: #nextLong) = 16r5060708.
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 6 do: #nextLong] raise: EndOfStream.
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 0 do: #nextLong] raise: ArgumentError.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 1 do: #nextLong) = -16rF1F2F40.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 3 do: #nextLong) = -16r2F3F4F60.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 5 do: #nextLong) = -16r4F5F6F80.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 1 do: #nextUnsignedLong) = 16r1020304.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 2 do: #nextUnsignedLong) = 16r2030405.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 3 do: #nextUnsignedLong) = 16r3040506.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 5 do: #nextUnsignedLong) = 16r5060708.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 1 do: #nextUnsignedLong) = 16rf0e0d0c0.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 3 do: #nextUnsignedLong) = 16rd0c0b0a0.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 5 do: #nextUnsignedLong) = 16rb0a09080.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 1 do: #nextLongLong) = 16r102030405060708.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 3 do: #nextLongLong) = 16r30405060708090a.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 5 do: #nextLongLong) = 16r5060708090a0b0c.
	self assert: ((ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 9 do: #nextLongLong) = 16r90A0B0C0D0E0F10.
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 10 do: #nextLongLong] raise: EndOfStream.
	self should: [(ByteReadStream bigEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 0 do: #nextLongLong] raise: ArgumentError.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80 16r70 16r60 16r50 16r40 16r30 16r20 16r10 0]) atPosition: 1 do: #nextLongLong) = -16rF1F2F3F4F5F6F80.
	self assert: ((ByteReadStream bigEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80 16r70 16r60 16r50 16r40 16r30 16r20 16r10 0]) atPosition: 9 do: #nextLongLong) = 16r7060504030201000.
%
method: ByteStreamTests
testStreamReadingPositionalLittleEndian
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 1 do: #next) = 1.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 2 do: #next) = 2.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 3 do: #next) = 3.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 4 do: #next) = 4.
	self deny: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 4 do: #atEnd).
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 5 do: #next) isNil.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 5 do: #atEnd).
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 6 do: #next] raise: ArgumentError.
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 0 do: #next] raise: ArgumentError.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 1 do: #nextShort) = 16r201.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 2 do: #nextShort) = 16r302.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 3 do: #nextShort) = 16r403.
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 4 do: #nextShort] raise: EndOfStream.
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 0 do: #nextShort] raise: ArgumentError.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 1 do: #nextShort) = -16r1F10.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 2 do: #nextShort) = -16r2F20.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 3 do: #nextShort) = -16r3F30.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 1 do: #nextUnsignedShort) = 16r201.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 2 do: #nextUnsignedShort) = 16r302.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4]) atPosition: 3 do: #nextUnsignedShort) = 16r403.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 1 do: #nextUnsignedShort) = 16re0f0.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 2 do: #nextUnsignedShort) = 16rd0e0.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0]) atPosition: 3 do: #nextUnsignedShort) = 16rc0d0.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 1 do: #nextLong) = 16r4030201.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 2 do: #nextLong) = 16r5040302.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 3 do: #nextLong) = 16r6050403.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 5 do: #nextLong) = 16r8070605.
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 6 do: #nextLong] raise: EndOfStream.
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 0 do: #nextLong] raise: ArgumentError.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 1 do: #nextLong) = -16r3F2F1F10.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 3 do: #nextLong) = -16r5F4F3F30.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 5 do: #nextLong) = -16r7F6F5F50.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 1 do: #nextUnsignedLong) = 16r4030201.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 2 do: #nextUnsignedLong) = 16r5040302.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 3 do: #nextUnsignedLong) = 16r6050403.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8]) atPosition: 5 do: #nextUnsignedLong) = 16r8070605.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 1 do: #nextUnsignedLong) = 16rc0d0e0f0.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 3 do: #nextUnsignedLong) = 16ra0b0c0d0.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80]) atPosition: 5 do: #nextUnsignedLong) = 16r8090a0b0.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 1 do: #nextLongLong) = 16r807060504030201.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 3 do: #nextLongLong) = 16ra09080706050403.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 5 do: #nextLongLong) = 16rc0b0a0908070605.
	self assert: ((ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 9 do: #nextLongLong) = 16r100F0E0D0C0B0A09.
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 10 do: #nextLongLong] raise: EndOfStream.
	self should: [(ByteReadStream littleEndianOn: #[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]) atPosition: 0 do: #nextLongLong] raise: ArgumentError.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80 16r70 16r60 16r50 16r40 16r30 16r20 16r10 0]) atPosition: 1 do: #nextLongLong) = -16r7F6F5F4F3F2F1F10.
	self assert: ((ByteReadStream littleEndianOn: #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80 16r70 16r60 16r50 16r40 16r30 16r20 16r10 0]) atPosition: 9 do: #nextLongLong) = 16r10203040506070.
%
method: ByteStreamTests
testStreamWriting
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPut: 1; yourself) contents = #[1].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutShort: 16r201; yourself) contents = #[1 2].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutShort: -16r1F10; yourself) contents = #[16rf0 16re0].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutUnsignedShort: 16r201; yourself) contents = #[1 2].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutUnsignedShort: 16re0f0; yourself) contents = #[16rf0 16re0].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutLong: 16r4030201; yourself) contents = #[1 2 3 4].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutLong: -16r3F2F1F10; yourself) contents = #[16rf0 16re0 16rd0 16rc0].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutUnsignedLong: 16r4030201; yourself) contents = #[1 2 3 4].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutUnsignedLong: 16rc0d0e0f0; yourself) contents = #[16rf0 16re0 16rd0 16rc0].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutLongLong: 16r807060504030201; yourself) contents = #[1 2 3 4 5 6 7 8].
	self assert: ((ByteWriteStream littleEndianOn: ByteArray new) nextPutLongLong: -16r7F6F5F4F3F2F1F10; yourself) contents = #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPut: 1; yourself) contents = #[1].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutShort: 16r102; yourself) contents = #[1 2].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutShort: -16rF20; yourself) contents = #[16rf0 16re0].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutUnsignedShort: 16r102; yourself) contents = #[1 2].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutUnsignedShort: 16rf0e0; yourself) contents = #[16rf0 16re0].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutLong: 16r1020304; yourself) contents = #[1 2 3 4].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutLong: -16rF1F2F40; yourself) contents = #[16rf0 16re0 16rd0 16rc0].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutUnsignedLong: 16r1020304; yourself) contents = #[1 2 3 4].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutUnsignedLong: 16rf0e0d0c0; yourself) contents = #[16rf0 16re0 16rd0 16rc0].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutLongLong: 16r102030405060708; yourself) contents = #[1 2 3 4 5 6 7 8].
	self assert: ((ByteWriteStream bigEndianOn: ByteArray new) nextPutLongLong: -16rF1F2F3F4F5F6F80; yourself) contents = #[16rf0 16re0 16rd0 16rc0 16rb0 16ra0 16r90 16r80].
%
DoIt
System myUserProfile insertDictionary: PDFtalk at: 1.
%
category: 'tests'
method: AttributeTests
testCatalog
	| dict |
	dict := (PDF classAt: #Catalog) example.
	self assert: dict attributeNames asArray = #(#Type #Version #Extensions #Pages #PageLabels #Names #Dests #ViewerPreferences #PageLayout #PageMode #Outlines #Threads #OpenAction #AA #URI #AcroForm #Metadata #StructTreeRoot #MarkInfo #Lang #SpiderInfo #OutputIntents #PieceInfo #OCProperties #Perms #Legal #Requirements #Collection #NeedsRendering #AF).
	self assert: (dict attributesPresent collect: #selector) asArray = #(#Type #Pages #PageLabels).
	self assert: (dict attributesRequired collect: #selector) asArray = #(#Type #Pages).
	self assert: dict hasRequiredAttributes.
	self assert: dict pdfVersion = Version pdf1_3.
	self assert: dict PageLabels = (PDF classAt: #NumberTree) nodeClass new.
	self assert: dict Pages = (PDF classAt: #Pages) new.
	self assert: dict Type asSmalltalkValue = #Catalog.
	self assert: dict Names isEmpty
%
method: AttributeTests
testCrossReferenceStream
	| dict |
	dict := (PDF classAt: #XRefStream) example.
	self assert: dict attributeNames asArray = #(#Length #Filter #DecodeParms #F #FFilter #FDecodeParms #DL #Type #Size #Index #Prev #W #Root #Info #ID).
	self assert: (dict attributesPresent collect: #selector) asArray = #(#Length #Filter #Type #Size #Index #W #Root).
	self assert: (dict attributesRequired collect: #selector) asArray = #(#Length #Type #Size #W #Root).
	self assert: dict hasRequiredAttributes.
	self assert: dict pdfVersion = Version pdf1_5.
	self assert: dict Filter = #ASCIIHexDecode asPDF.
	self assert: dict Index = #(0 11) asPDF.
	self assert: dict Length = 153 asPDF.
	self assert: dict Size = 11 asPDF.
	self assert: dict Type asSmalltalkValue = #XRef.
	self assert: dict W = #(1 2 2) asPDF
%
method: AttributeTests
testObjectStream
	| dict |
	dict := (PDF classAt: #ObjectStream) example.
	self assert: dict attributeNames asArray = #(#Length #Filter #DecodeParms #F #FFilter #FDecodeParms #DL #Type #N #First #Extends).
	self assert: (dict attributesPresent collect: #selector) asArray = #(#Length #Type #N #First).
	self assert: (dict attributesRequired collect: #selector) asArray = #(#Length #Type #N #First).
	self assert: dict hasRequiredAttributes.
	self assert: dict pdfVersion = Version pdf1_5.
	self assert: dict First = 15 asPDF.
	self assert: dict Length = 191 asPDF.
	self assert: dict N = 3 asPDF.
	self assert: dict Type asSmalltalkValue = #ObjStm.
	self should: [dict Size] raise: MessageNotUnderstood.
	self assert: dict Filter isEmpty
%
method: AttributeTests
testTrailer
	| dict |
	dict := (PDF classAt: #Trailer) example.
	self assert: dict attributeNames asArray = #(#Size #Prev #Root #Encrypt #Info #ID #XRefStm).
	self assert: (dict attributesPresent collect: #selector) asArray = #(#Size #Root #Info #ID).
	self assert: (dict attributesRequired collect: #selector) asArray = #(#Size #Root).
	self assert: dict hasRequiredAttributes.
	self assert: dict pdfVersion = Version pdf1_1.
	self assert: dict ID size = 2.
	self assert: (dict at: #Info) isDirect not.
	self assert: (dict at: #Root) isDirect not.
	self assert: dict Size = 22 asPDF.
	self should: [dict Length] raise: MessageNotUnderstood
%
category: 'tests'
method: BugReportTests
testFileHasTypeMismatch
	"make sure that
	- the example has a TypeMismatch at /FontDescriptor in Font /F1
	- the mismatched object has a reference in /FontFile3 with number 6
	- the mismatched object has a Stream in the reference /FontFile3"
	
	| pdf fontDescriptor |
	pdf := File exampleWithTypeMismatch.
	fontDescriptor := [((pdf firstPage Resources at: #Font) objectAt: #F1) at: #FontDescriptor] on: TypeError do: [:ex | ex resume].
	self assert: fontDescriptor class == TypeMismatch.
	self assert: (fontDescriptor myObject at: #FontFile3) class == Reference.
	self assert: (fontDescriptor myObject objectAt: #FontFile3) class == PDF Stream.
	self assert: (fontDescriptor myObject objectAt: #FontFile3) keys asArray sorted = #(#Filter #Length #Subtype).
%
method: BugReportTests
testMergedFilesWithTypeMismatch
	| cover toMerge pagesReference pages addPagesReference merged fontDescriptor |
	cover := File exampleHelloWorld.
	toMerge := File exampleWithTypeMismatch.
	pagesReference := cover root at: #Pages.
	pages := pagesReference referent.
	addPagesReference := toMerge root at: #Pages.
	addPagesReference referent at: #Parent put: pagesReference.
	pages at: #Kids put: (pages Kids with: addPagesReference).
	pages at: #Count put: pages count.
	merged := [cover asDocument] on: TypeError do: [:ex | ex resume].
	"write out to assign new reference numbers"
	merged bytesForFile: 'merged.pdf'.
	fontDescriptor := (((merged root pageAt: 2) Resources at: #Font) objectAt: #F1) at: #FontDescriptor.
	self assert: fontDescriptor class == TypeMismatch.
	self assert: (fontDescriptor myObject at: #FontFile3) class == Reference.
	self assert: (fontDescriptor myObject objectAt: #FontFile3) class == PDF Stream.
	self assert: (fontDescriptor myObject objectAt: #FontFile3) keys asArray sorted = #(#Filter #Length #Subtype)
%
category: 'tests'
method: CatalogTests
testAttributes
	| root |
	root := (PDF classAt: #Catalog) example.
	self assert: root Type asSmalltalkValue = #Catalog.
	self assert: root Pages = (PDF classAt: #Pages) new.
	self assert: root PageLabels = (PDF classAt: #NumberTree) nodeClass new.
	self assert: root Names isEmpty.
	self assert: root attributeNames asArray = #(#Type #Version #Extensions #Pages #PageLabels #Names #Dests #ViewerPreferences #PageLayout #PageMode #Outlines #Threads #OpenAction #AA #URI #AcroForm #Metadata #StructTreeRoot #MarkInfo #Lang #SpiderInfo #OutputIntents #PieceInfo #OCProperties #Perms #Legal #Requirements #Collection #NeedsRendering #AF).
	self assert: (root attributesPresent collect: #selector) asArray = #(#Type #Pages #PageLabels).
	self assert: (root attributesRequired collect: #selector) asArray = #(#Type #Pages).
	self assert: root pdfVersion = Version pdf1_3.
	self assert: root hasRequiredAttributes
%
method: CatalogTests
testAttributesWithoutPages
	| root |
	root := (PDF classAt: #Catalog) on: (Dictionary
		with: #Type -> #Catalog
		with: #PageLabels -> PDF Dictionary new newReference).
	self assert: root Type asSmalltalkValue = #Catalog.
	self should: [root Pages] raise: LookupError.
	self assert: (root at: #PageLabels) referent = (PDF classAt: #NumberTree) nodeClass new.
	self assert: root Names isEmpty.
	self assert: root attributeNames asArray = #(#Type #Version #Extensions #Pages #PageLabels #Names #Dests #ViewerPreferences #PageLayout #PageMode #Outlines #Threads #OpenAction #AA #URI #AcroForm #Metadata #StructTreeRoot #MarkInfo #Lang #SpiderInfo #OutputIntents #PieceInfo #OCProperties #Perms #Legal #Requirements #Collection #NeedsRendering #AF).
	self assert: (root attributesPresent collect: #selector) asArray = #(#Type #PageLabels).
	self assert: (root attributesRequired collect: #selector) asArray = #(#Type #Pages).
	self assert: root pdfVersion = Version pdf1_3.
	self assert: root hasRequiredAttributes not
%
method: CatalogTests
testAttributesWithoutType
	| root |
	root := (PDF classAt: #Catalog) on: (Dictionary
		with: #Pages -> (PDF classAt: #Pages) new newReference
		with: #PageLabels -> PDF Dictionary new).
	self should: [root Type] raise: LookupError.
	self assert: root Pages = (PDF classAt: #Pages) new.
	self assert: root PageLabels = (PDF classAt: #NumberTree) nodeClass new.
	self assert: root Names isEmpty.
	self assert: root attributeNames asArray = #(#Type #Version #Extensions #Pages #PageLabels #Names #Dests #ViewerPreferences #PageLayout #PageMode #Outlines #Threads #OpenAction #AA #URI #AcroForm #Metadata #StructTreeRoot #MarkInfo #Lang #SpiderInfo #OutputIntents #PieceInfo #OCProperties #Perms #Legal #Requirements #Collection #NeedsRendering #AF).
	self assert: (root attributesPresent collect: #selector) asArray = #(#Pages #PageLabels).
	self assert: (root attributesRequired collect: #selector) asArray = #(#Type #Pages).
	self assert: root pdfVersion = Version pdf1_3.
	self assert: root hasRequiredAttributes not
%
method: CatalogTests
testFullAttributes
	| root |
	root := (PDF classAt: #Catalog) exampleFull.
	self assert: root Type asSmalltalkValue = #Catalog.
	self assert: root Pages pdfType name = #Pages.
	self assert: root PageLabels isNil.
	self assert: root Names = (PDF classAt: #Names) new.
	self assert: root attributeNames asArray = #(#Type #Version #Extensions #Pages #PageLabels #Names #Dests #ViewerPreferences #PageLayout #PageMode #Outlines #Threads #OpenAction #AA #URI #AcroForm #Metadata #StructTreeRoot #MarkInfo #Lang #SpiderInfo #OutputIntents #PieceInfo #OCProperties #Perms #Legal #Requirements #Collection #NeedsRendering #AF).
	self assert: (root attributesPresent collect: #selector) asArray = #(#Type #Version #Extensions #Pages #Names #Dests #ViewerPreferences #PageLayout #PageMode #Outlines #Threads #OpenAction #AA #URI #AcroForm #StructTreeRoot #MarkInfo #Lang #SpiderInfo #OutputIntents #PieceInfo #OCProperties #Perms #Legal #Requirements #Collection #NeedsRendering).
	self assert: (root attributesRequired collect: #selector) asArray = #(#Type #Pages).
	self assert: root pdfVersion = Version pdf1_7.
	self assert: root hasRequiredAttributes
%
method: CatalogTests
testVersion
	self assert: (PDF classAt: #Catalog) exampleFull pdfVersion = Version pdf1_7
%
method: CatalogTests
testVersionConditionalPageLayoutSinglePage
	self assert: (((PDF classAt: #Catalog) example)
		at: #PageLayout put: #SinglePage;
		yourself) pdfVersion = Version pdf1_3
%
method: CatalogTests
testVersionConditionalPageLayoutTwoPageLeft
	self assert: (((PDF classAt: #Catalog) example)
		at: #PageLayout put: #TwoPageLeft;
		yourself) pdfVersion = Version pdf1_5
%
method: CatalogTests
testVersionConditionalPageLayoutTwoPageRight
	self assert: (((PDF classAt: #Catalog) example)
		at: #PageLayout put: #TwoPageRight;
		yourself) pdfVersion = Version pdf1_5
%
method: CatalogTests
testVersionConditionalPageModeUseAttachments
	self assert: (((PDF classAt: #Catalog) example)
		at: #PageMode put: #UseAttachments;
		yourself) pdfVersion = Version pdf1_6
%
method: CatalogTests
testVersionConditionalPageModeUseOC
	self assert: (((PDF classAt: #Catalog) example)
		at: #PageMode put: #UseOC;
		yourself) pdfVersion = Version pdf1_5
%
method: CatalogTests
testVersionConditionalPageModeUseOutlines
	self assert: (((PDF classAt: #Catalog) example)
		at: #PageMode put: #UseOutlines;
		yourself) pdfVersion = Version pdf1_3
%
category: 'Testing'
method: ColorTests
testBlending
	self assert: CmykColor black asPsComment = '0 0 0 1 (Black)'.
	self assert: CmykColor hks42 asPsComment = '1 0.55 0 0 (HKS42)'.
	self assert: (CmykColor black blendWith: CmykColor hks42) asPsComment = '0.5 0.275 0 0.5 (50c28m0y50k)'.
	self assert: (CmykColor black blendWith: CmykColor hks42) = (CmykColor hks42 blendWith: CmykColor black).
	self assert: CmykColor white asPsComment = '0 0 0 0 (White)'.
	self assert: (CmykColor white blendWith: CmykColor hks42) asPsComment = '0.5 0.275 0 0 (50c28m0y0k)'.
	self assert: (CmykColor white blendWith: CmykColor hks42) = (CmykColor hks42 blendWith: CmykColor white).
	self assert: ((CmykColor gray: 0.6) blendWith: (CmykColor gray: 0.2)) = (CmykColor gray: 0.4).
%
method: ColorTests
testMonochrome
	self assert: CmykColor black isMonochrome.
	self assert: CmykColor white isMonochrome.
	self assert: (CmykColor gray: 0.1) isMonochrome.
	self assert: (CmykColor fromColorValue: (ColorValue fromBytesRed: 212 green: 255 blue: 212)) isMonochrome not.
	self assert: (CmykColor cyan: 0 magenta: 0 yellow: 0 black: 0)  isMonochrome.
	self assert: (CmykColor cyan: 0 magenta: 0 yellow: 1 black: 0)  isMonochrome not.
	self assert: (CmykColor cyan: 0 magenta: 1 yellow: 0 black: 0)  isMonochrome not.
	self assert: (CmykColor cyan: 0 magenta: 1 yellow: 1 black: 0)  isMonochrome not.
	self assert: (CmykColor cyan: 1 magenta: 0 yellow: 0 black: 0)  isMonochrome not.
	self assert: (CmykColor cyan: 1 magenta: 0 yellow: 1 black: 0)  isMonochrome not.
	self assert: (CmykColor cyan: 1 magenta: 1 yellow: 0 black: 0)  isMonochrome not.
	self assert: (CmykColor cyan: 1 magenta: 1 yellow: 1 black: 0)  isMonochrome not.
%
method: ColorTests
testNames
	self assert: CmykColor black name = 'Black'.
	self assert: CmykColor black syntheticName = '0c0m0y100k'.
	self assert: CmykColor hks42 name = 'HKS42'.
	self assert: CmykColor hks42 syntheticName = '100c55m0y0k'.
	self assert: CmykColor hks8 name = 'HKS8'.
	self assert: CmykColor hks8 syntheticName = '0c50m100y0k'.
	self assert: CmykColor gray55 name isEmpty.
	self assert: CmykColor gray55 syntheticName = '0c0m0y55k'.
	self assert: (CmykColor gray: 0.55) name isEmpty.
	self assert: (CmykColor gray: 0.55) syntheticName = '0c0m0y55k'.
	self assert: (CmykColor gray: 0.01) name isEmpty.
	self assert: (CmykColor gray: 0.01) syntheticName = '0c0m0y1k'.
	self assert: (CmykColor gray: 0) name = 'White'.
	self assert: (CmykColor gray: 0) syntheticName = '0c0m0y0k'.
	self assert: (CmykColor gray: 1) name = 'Black'.
	self assert: (CmykColor gray: 1) syntheticName = '0c0m0y100k'.
	self assert: (CmykColor fromColorValue: ColorValue red) name isEmpty.
	self assert: (CmykColor fromColorValue: ColorValue red) syntheticName = '0c100m100y0k'.
	self assert: (CmykColor fromColorValue: ColorValue cyan) name isEmpty.
	self assert: (CmykColor fromColorValue: ColorValue cyan) syntheticName = '100c0m0y0k'.
	self assert: (CmykColor fromColorValue: ColorValue green) name isEmpty.
	self assert: (CmykColor fromColorValue: ColorValue green) syntheticName = '100c0m100y0k'.
%
method: ColorTests
testPsStrings
	self assert: CmykColor example asPsComment = '0.09 0.05 0.05 0 (BN Gray01)'.
	self assert: CmykColor black asPsComment = '0 0 0 1 (Black)'.
	self assert: CmykColor white asPsComment = '0 0 0 0 (White)'.
	self assert: CmykColor hks42 asPsComment = '1 0.55 0 0 (HKS42)'.
	self assert: CmykColor hks8 asPsComment = '0 0.5 1 0 (HKS8)'.
	self assert: CmykColor gray55 asPsComment = '0 0 0 0.55 (0c0m0y55k)'.
%
method: ColorTests
testSameColors
	self assert: (CmykColor hks8 isSameColor: CmykColor hks8).
	self assert: CmykColor hks8 = CmykColor hks8.
	self deny: (CmykColor hks8 isSameColor: CmykColor hks42).
	self deny: CmykColor hks8 = CmykColor hks42.
	self assert: (CmykColor hks8 isSameColor: (CmykColor name: 'HKS8' cyan: 0 magenta: 0.5 yellow: 1 black: 0)).
	self assert: CmykColor hks8 = (CmykColor name: 'HKS8' cyan: 0 magenta: 0.5 yellow: 1 black: 0).
%
category: 'tests'
method: ContentsTests
test
	self assert: (ContentParser onString: (PDF classAt: #Contents) example internal) readOperations size = 24.
	self assert: (ContentParser onString: (PDF classAt: #Contents) example internal) readOperations first printString = '2 J'.
	self assert: ((ContentParser onString: (PDF classAt: #Contents) example internal) readOperations first isKindOf: Operation).
	self assert: (ContentParser onString: (PDF classAt: #Contents) example internal) readOperations first operands = (Array with: 2 asPDF)
%
category: 'tests'
method: CrossReferenceTests
testReadReference
	self assert: (CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n ' , self stringLf) parser) = (UsedReference id: (ObjectId number: 0 generation: 73) value: 12345).
	self assert: (CrossReference
		read: 0
		from: (File readTesterOn: '1234567890 00000 n ' , self stringLf) parser) = (UsedReference id: (ObjectId number: 0) value: 1234567890).
	self assert: (CrossReference
		read: 0
		from: (File readTesterOn: '0000000003 00015 f ' , self stringLf) parser) = (FreeReference id: (ObjectId number: 0 generation: 15) value: 3).
	self assert: (CrossReference
		read: 0
		from: (File readTesterOn: '0000000000 65535 f ' , self stringLf) parser) = (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0).
	self assert: (CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n ' , (String with: Character cr)) parser) = (UsedReference id: (ObjectId number: 0 generation: 73) value: 12345).
	self assert: (CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n' , (String with: Character cr) , self stringLf) parser) = (UsedReference id: (ObjectId number: 0 generation: 73) value: 12345)
%
method: CrossReferenceTests
testReadReferenceErrors
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '00000123450 00073 n ' , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '00000123450 00073 n ' , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '000012345 00073 n ' , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '000012345 00073 n ' , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345	00073 n ' , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345	00073 n ' , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 0073 n ' , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 0073 n ' , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 000073 n ' , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 000073 n ' , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 00073 x ' , self stringLf) parser]
		raise: FileError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 x ' , self stringLf) parser] on: FileError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 00073	n ' , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073	n ' , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 00073 n	' , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n	' , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 00073 n' , self stringLf , ' ') parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n' , self stringLf , ' ') parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 00073 n' , self stringLf , self stringLf) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n' , self stringLf , self stringLf) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 00073 n' , (String with: Character cr) , (String with: Character cr)) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n' , (String with: Character cr) , (String with: Character cr)) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference'].
	self
		should: [
		CrossReference
			read: 0
			from: (File readTesterOn: '0000012345 00073 n' , self stringLf , (String with: Character cr)) parser]
		raise: ReadError.
	[
	CrossReference
		read: 0
		from: (File readTesterOn: '0000012345 00073 n' , self stringLf , (String with: Character cr)) parser] on: ReadError do: [:ex |
			self assert: ex description = 'Wrong format of cross-reference']
%
method: CrossReferenceTests
testReadSection
	self assert: (CrossReferenceSection readFrom: (File readTesterOn: CrossReferenceSection exampleString) parser) = CrossReferenceSection example.
%
method: CrossReferenceTests
testReadSubsection
	self assert: (CrossReferenceSubsection readFrom: (File readTesterOn: CrossReferenceSubsection exampleString) parser) = CrossReferenceSubsection example.
	self assert: (CrossReferenceSubsection readFrom: (File readTesterOn: CrossReferenceSubsection example pdfSource) parser) = CrossReferenceSubsection example.
%
method: CrossReferenceTests
testWriteReference
	self assert: (UsedReference id: (ObjectId number: 0) value: 123) valueString = '0000000123'.
	self assert: (UsedReference id: (ObjectId number: 0) value: 1234567890) valueString = '1234567890'.
	self assert: (UsedReference id: (ObjectId number: 0) value: 123456789) valueString = '0123456789'.
	self assert: (UsedReference id: (ObjectId number: 0) value: 12345) generationString = '00000'.
	self assert: (UsedReference id: (ObjectId number: 0 generation: 65535) value: 12345) generationString = '65535'.
	self assert: (UsedReference id: (ObjectId number: 0 generation: 73) value: 12345) generationString = '00073'.
	self assert: (UsedReference id: (ObjectId number: 0 generation: 73) value: 12345) pdfSource = ('0000012345 00073 n ' , self stringLf).
	self assert: (FreeReference id: (ObjectId number: 0 generation: 15) value: 3) pdfSource = ('0000000003 00015 f ' , self stringLf).
	self assert: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0) pdfSource = ('0000000000 65535 f ' , self stringLf)
%
method: CrossReferenceTests
testWriteSection
	self assert: (CrossReferenceSection readFrom: (File readTesterOn: 'xref', self stringLf, CrossReferenceSection example pdfSource) parser) = CrossReferenceSection example
%
category: 'tests'
method: DocumentTests
testAddPDFRaws
	| doc bytes docNew |
	doc := Document new.
	doc appendAllRawPagesFrom: File example.
	doc appendAllRawPagesFrom: (File readFrom: File exampleByteArray2 readStream).
	doc appendAllRawPagesFrom: File exampleHelloWorld.
	doc appendAllRawPagesFrom: (File readFrom: File exampleMinimalByteArray readStream).
	doc appendAllRawPagesFrom: (File readFrom: File exampleMinimalByteArrayWithFreeReference readStream).
	doc appendAllRawPagesFrom: (File readFrom: File exampleObjectStreamByteArray readStream).
	doc appendAllRawPagesFrom: (File readFrom: File exampleUpdate1ByteArray readStream).
	doc appendAllRawPagesFrom: (File readFrom: File exampleUpdate2ByteArray readStream).
	doc appendAllRawPagesFrom: (File readFrom: File exampleUpdate3ByteArray readStream).
	doc appendAllRawPagesFrom: (File readFrom: File exampleUpdate4ByteArray readStream).
	doc appendAllRawPagesFrom: (File readFrom: File exampleWithReferenceToReference readStream).
	doc appendAllRawPagesFrom: File exampleWithTypeMismatch.
	self should: [doc root pages] raise: MessageNotUnderstood.
	self assert: ((doc root at: #Pages) pdfObject at: #Count) = 12 asPDF.
	bytes := doc bytesForFile: 'test.pdf'.
	docNew := File readFrom: bytes readStream.
	self assert: docNew root pages size = 12.
	self assert: docNew root Pages Count = 12 asPDF.
%
method: DocumentTests
testAddPDFs
	| doc bytes docNew docDouble |
	doc := Document new.
	doc appendAllPagesFrom: File example.
	doc appendAllPagesFrom: (File readFrom: File exampleByteArray2 readStream).
	doc appendAllPagesFrom: File exampleHelloWorld.
	doc appendAllPagesFrom: (File readFrom: File exampleMinimalByteArray readStream).
	doc appendAllPagesFrom: (File readFrom: File exampleMinimalByteArrayWithFreeReference readStream).
	doc appendAllPagesFrom: (File readFrom: File exampleObjectStreamByteArray readStream).
	doc appendAllPagesFrom: (File readFrom: File exampleUpdate1ByteArray readStream).
	doc appendAllPagesFrom: (File readFrom: File exampleUpdate2ByteArray readStream).
	doc appendAllPagesFrom: (File readFrom: File exampleUpdate3ByteArray readStream).
	doc appendAllPagesFrom: (File readFrom: File exampleUpdate4ByteArray readStream).
	doc appendAllPagesFrom: (File readFrom: File exampleWithReferenceToReference readStream).
	doc appendAllPagesFrom: File exampleWithTypeMismatch.
	self assert: doc root pages size = 12.
	self assert: doc root Pages Count = 12 asPDF.
	bytes := doc bytesForFile: 'test.pdf'.
	docNew := File readFrom: bytes readStream.
	self assert: docNew root pages size = 12.
	self assert: docNew root Pages Count = 12 asPDF.
	docDouble := Document new.
	docDouble appendAllPagesFrom: (File readFrom: bytes readStream).
	docDouble appendAllPagesFrom: (File readFrom: bytes readStream).
	self assert: docDouble root pages size = 24.
	self assert: docDouble root Pages Count = 24 asPDF.
%
method: DocumentTests
testAppendPages
	| doc |
	doc := Document new.
	doc appendPages: (File example root at: #Pages).
	self assert: doc root Pages class = (PDF classAt: #Pages).
	self assert: doc root Pages Kids size = 1.
	self assert: doc root Pages Kids first class = (PDF classAt: #Pages).
	self assert: doc root Pages Kids first Kids size = 1.
	doc appendPages: (File exampleHelloWorld root at: #Pages).
	self assert: doc root Pages Kids size = 2.
	self assert: doc root Pages Kids first class = (PDF classAt: #Pages).
	self assert: doc root Pages Kids last class = (PDF classAt: #Pages).
	self assert: doc root Pages Kids first Kids size = 1.
	self assert: doc root Pages Kids first Kids first class = PDF Page.
	self assert: doc root Pages Kids last Kids size = 1.
	self assert: doc root Pages Kids last Kids first class = PDF Page
%
method: DocumentTests
testAppendRawPages
	| doc file1 file2 |
	doc := Document new.
	file1 := File example.
	(file1 root at: #Pages) readAllRawObjects.
	doc appendRawPages: (file1 root at: #Pages).
	self assert: doc root Pages class = PDF Dictionary.
	self assert: (doc root Pages at: #Kids) size = 1.
	self assert: ((doc root Pages at: #Kids) first at: #Type) = #Pages asPDF.
	self assert: (doc root Pages at: #Kids) first class = PDF Dictionary.
	self assert: ((doc root Pages at: #Kids) first at: #Kids) size = 1.
	self assert: (((doc root Pages at: #Kids) first at: #Kids) first at: #Type) = #Page asPDF.
	self assert: ((doc root Pages at: #Kids) first at: #Kids) first class = PDF Dictionary.
	file2 := File exampleHelloWorld.
	(file2 root at: #Pages) readAllRawObjects.
	doc appendRawPages: (file2 root at: #Pages).
	self assert: doc root Pages class = PDF Dictionary.
	self assert: (doc root Pages at: #Kids) size = 2.
	self assert: ((doc root Pages at: #Kids) first at: #Type) = #Pages asPDF.
	self assert: (doc root Pages at: #Kids) first class = PDF Dictionary.
	self assert: ((doc root Pages at: #Kids) last at: #Type) = #Pages asPDF.
	self assert: (doc root Pages at: #Kids) last class = PDF Dictionary.
	self assert: ((doc root Pages at: #Kids) first at: #Kids) size = 1.
	self assert: (((doc root Pages at: #Kids) first at: #Kids) first at: #Type) = #Page asPDF.
	self assert: ((doc root Pages at: #Kids) first at: #Kids) first class = PDF Dictionary.
	self assert: ((doc root Pages at: #Kids) last at: #Kids) size = 1.
	self assert: (((doc root Pages at: #Kids) last at: #Kids) first at: #Type) = #Page asPDF.
	self assert: ((doc root Pages at: #Kids) last at: #Kids) first class = PDF Dictionary
%
method: DocumentTests
testVersionUpdate
	| doc |
	doc := Document new.
	self assert: doc version isNil.
	self assert: (doc updateVersion: Version pdf1_4) = Version pdf1_4.
	self assert: doc version = Version pdf1_4.
	self assert: (doc updateVersion: Version pdf1_7) = Version pdf1_7.
	self assert: doc version = Version pdf1_7.
	self assert: (doc updateVersion: Version pdf1_3) = Version pdf1_7.
	self assert: doc version = Version pdf1_7.
%
category: 'tests'
method: FileTests
testRead
	| file |
	file := File readFrom: File exampleByteArray readStream.
	self assert: file header = (Header version: Version pdf1_2).
	self assert: file trailer Size = 7 asPDF.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file crossReferences = (CrossReferences
		crossReferenceSection: (CrossReferenceSection subsections: (Array with: (CrossReferenceSubsection
			firstNumber: 0
			entries: ((OrderedCollection new)
				add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
				add: (UsedReference id: (ObjectId number: 1) value: 15);
				add: (UsedReference id: (ObjectId number: 2) value: 64);
				add: (UsedReference id: (ObjectId number: 3) value: 147);
				add: (UsedReference id: (ObjectId number: 4) value: 372);
				add: (UsedReference id: (ObjectId number: 5) value: 230);
				add: (UsedReference id: (ObjectId number: 6) value: 462);
				asArray))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 7
			with: #Root -> (file referenceAt: (ObjectId number: 1)))).
	self assert: (file crossReferenceAtId: (file referenceAt: (ObjectId number: 1))) = (UsedReference id: (ObjectId number: 1) value: 15).
	self assert: (file referenceAt: (ObjectId number: 1)) baseObject content = (PDF Dictionary
		with: #Type -> #Catalog
		with: #Pages -> (file referenceAt: (ObjectId number: 2))) content.
	self assert: (file referenceAt: (ObjectId number: 2)) baseObject = (PDF Dictionary
		with: #Type -> #Pages
		with: #MediaBox -> #(0 0 792 612)
		with: #Kids -> (Array with: (file referenceAt: (ObjectId number: 3))) asPDF
		with: #Count -> 1).
	self assert: (file referenceAt: (ObjectId number: 3)) baseObject = (PDF Dictionary
		with: #Type -> #Page
		with: #Parent -> (file referenceAt: (ObjectId number: 2))
		with: #Resources -> (file referenceAt: (ObjectId number: 4))
		with: #Contents -> (Array with: (file referenceAt: (ObjectId number: 5))) asPDF).
	self assert: (file referenceAt: (ObjectId number: 4)) baseObject = (PDF Dictionary
		with: #ProcSet -> #(#PDF #Text)
		with: #Font -> (PDF Dictionary with: #F1 -> (file referenceAt: (ObjectId number: 6)))
		with: #XObject -> PDF Dictionary new).
	self assert: (file referenceAt: (ObjectId number: 5)) baseObject = (PDF Stream
		on: (Dictionary with: #Length -> 82)
		internal: 'BT
1 0 0 1 30 550 Tm
/F1 8 Tf
10 TL
0.0 g
(Hello, World! \(From PDFTester\))Tj
ET
' withLf).
	self assert: (file referenceAt: (ObjectId number: 6)) baseObject = (PDF Dictionary
		with: #Type -> #Font
		with: #Subtype -> #Type1
		with: #BaseFont -> #Courier)
%
method: FileTests
testReadAllPages
	| file |
	file := File readFrom: File exampleByteArray readStream.
	(file root at: #Pages) resolveAllReferences.
	self assert: file crossReferences usedReferences size = 6.
	self assert: file objects size = 6.
	self assert: (((file objects values collect: #pdfObject) collect: #class) collect: #name) sorted asArray = #(#Catalog #Contents #Page #Pages #Resources #StandardFont).
%
method: FileTests
testReadAllPagesBreathFirst
	| file |
	file := File readFrom: File exampleByteArray readStream.
	(file root at: #Pages) resolveAllReferencesBreathFirst.
	self assert: file crossReferences usedReferences size = 6.
	self assert: file objects size = 6.
	self assert: (((file objects values collect: #pdfObject) collect: #class) collect: #name) sorted asArray = #(#Catalog #Contents #Page #Pages #Resources #StandardFont).
%
method: FileTests
testReadAllPagesRaw
	"the objects are read without typing"

	| file |
	file := File readFrom: File exampleByteArray readStream.
	(file root at: #Pages) readAllRawObjects.
	self assert: file crossReferences usedReferences size = 6.
	self assert: file objects size = 6.
	self assert: (((file objects values collect: #pdfObject) collect: #class) collect: #name) sorted asArray = #(#Catalog #PDFDictionary #PDFDictionary #PDFDictionary #PDFDictionary #PDFStream)
%
method: FileTests
testReadAllRaw
	| file |
	file := File readFrom: File exampleByteArray readStream.
	(file root at: #Pages) readAllRawObjects.
	self assert: file crossReferences usedReferences size = 6.
	self assert: file objects size = 6.
	self assert: (((file objects values collect: #pdfObject) collect: #class) collect: #name) sorted asArray = #(#Catalog #PDFDictionary #PDFDictionary #PDFDictionary #PDFDictionary #PDFStream)
%
method: FileTests
testReadMinimalFile
	| file |
	file := File readFrom: File exampleMinimalByteArray readStream.
	self assert: file header = (Header version: Version pdf1_4).
	self assert: file trailer Size = 7 asPDF.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file crossReferences = (CrossReferences
		crossReferenceSection: (CrossReferenceSection subsections: (Array with: (CrossReferenceSubsection
			firstNumber: 0
			entries: ((OrderedCollection new)
				add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
				add: (UsedReference id: (ObjectId number: 1) value: 9);
				add: (UsedReference id: (ObjectId number: 2) value: 81);
				add: (UsedReference id: (ObjectId number: 3) value: 131);
				add: (UsedReference id: (ObjectId number: 4) value: 197);
				add: (UsedReference id: (ObjectId number: 5) value: 329);
				add: (UsedReference id: (ObjectId number: 6) value: 405);
				asArray))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 7
			with: #Root -> (file referenceAt: (ObjectId number: 1)))).
	self assert: (file crossReferenceAtId: (file referenceAt: (ObjectId number: 1))) = (UsedReference id: (ObjectId number: 1) value: 9).
	self assert: (file referenceAt: (ObjectId number: 1)) baseObject = ((PDF classAt: #Catalog)
		with: #Type -> #Catalog
		with: #Outlines -> (file referenceAt: (ObjectId number: 2))
		with: #Pages -> (file referenceAt: (ObjectId number: 3))).
	self assert: (file referenceAt: (ObjectId number: 2)) baseObject = (PDF Dictionary
		with: #Type -> #Outlines
		with: #Count -> 0).
	self assert: (file referenceAt: (ObjectId number: 3)) baseObject = (PDF Dictionary
		with: #Type -> #Pages
		with: #Kids -> (Array with: (file referenceAt: (ObjectId number: 4))) asPDF
		with: #Count -> 1).
	self assert: (file referenceAt: (ObjectId number: 4)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Page;
		at: #Parent put: (file referenceAt: (ObjectId number: 3));
		at: #MediaBox put: #(0 0 612 792);
		at: #Contents put: (file referenceAt: (ObjectId number: 5));
		at: #Resources
			put: (PDF Dictionary with: #ProcSet -> (file referenceAt: (ObjectId number: 6)));
		yourself).
	self assert: (file referenceAt: (ObjectId number: 5)) baseObject = (PDF Stream
		on: (Dictionary with: #Length -> 25)
		external: '(Page-marking operators)' , self stringLf).
	self assert: (file referenceAt: (ObjectId number: 6)) baseObject = (Array with: #PDF) asPDF
%
method: FileTests
testReadObjectStream
	| file |
	file := File readFrom: File exampleObjectStreamByteArray readStream.
	self assert: file header = (Header version: Version pdf1_5).
	self assert: file trailer size = 2.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file trailer Prev isNil.
	self assert: file crossReferences size = 7.
	self assert: file crossReferences Size = 11 asPDF.
	self assert: file crossReferences Type = #XRef asPDF.
	self assert: file crossReferences Index = #(0 11) asPDF.
	self assert: file crossReferences W = #(1 2 2) asPDF.
	self assert: file crossReferences subsections size = 1.
	self assert: file crossReferences subsections first = (CrossReferenceSubsection
		firstNumber: 0
		entries: ((OrderedCollection new)
			add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
			add: (UsedReference id: (ObjectId number: 1) value: 50);
			add: (UsedReference id: (ObjectId number: 2) value: 122);
			add: (UsedReference id: (ObjectId number: 3) value: 172);
			add: (UsedReference id: (ObjectId number: 4) value: 238);
			add: (UsedReference id: (ObjectId number: 5) value: 370);
			add: (UsedReference id: (ObjectId number: 6) value: 446);
			add: (StreamReference id: (ObjectId number: 7) value: 10);
			add: (StreamReference id: (ObjectId number: 8 generation: 1) value: 10);
			add: (StreamReference id: (ObjectId number: 9 generation: 2) value: 10);
			add: (UsedReference id: (ObjectId number: 10) value: 472);
			asArray)).
	self assert: (file referenceAt: (ObjectId number: 6)) baseObject = #(#PDF) asPDF.
	self assert: (file referenceAt: (ObjectId number: 7)) baseObject = (PDF Dictionary
		with: #Type -> #Font
		with: #Subtype -> #TrueType
		with: #FontDescriptor -> (file referenceAt: (ObjectId number: 12))).
	self assert: ((file referenceAt: (ObjectId number: 10)) baseObject isKindOf: PDF Stream).
	self assert: (file referenceAt: (ObjectId number: 10)) baseObject content = (PDF Dictionary
		with: #Type -> #ObjStm
		with: #Length -> 191
		with: #N -> 3
		with: #First -> 15) content.
	self assert: file crossReferences freeReferences asArray = (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0))
%
method: FileTests
testReadUpdate1
	| file |
	file := File readFrom: File exampleUpdate1ByteArray readStream.
	self assert: file header = (Header version: Version pdf1_4).
	self assert: file trailer Size = 12 asPDF.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file trailer Prev = 431 asPDF.
	self assert: file crossReferences = (CrossReferences
		crossReferenceSection: (CrossReferenceSection subsections: (Array
			with: (CrossReferenceSubsection
				firstNumber: 0
				entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
			with: (CrossReferenceSubsection
				firstNumber: 4
				entries: (Array with: (UsedReference id: (ObjectId number: 4) value: 640)))
			with: (CrossReferenceSubsection
				firstNumber: 7
				entries: ((OrderedCollection new)
					add: (UsedReference id: (ObjectId number: 7) value: 788);
					add: (UsedReference id: (ObjectId number: 8) value: 842);
					add: (UsedReference id: (ObjectId number: 9) value: 960);
					add: (UsedReference id: (ObjectId number: 10) value: 1080);
					add: (UsedReference id: (ObjectId number: 11) value: 1200);
					asArray))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 12
			with: #Root -> (file referenceAt: (ObjectId number: 1))
			with: #Prev -> 431)
		previous: (CrossReferences
			crossReferenceSection: (CrossReferenceSection subsections: (Array with: (CrossReferenceSubsection
				firstNumber: 0
				entries: ((OrderedCollection new)
					add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
					add: (UsedReference id: (ObjectId number: 1) value: 9);
					add: (UsedReference id: (ObjectId number: 2) value: 81);
					add: (UsedReference id: (ObjectId number: 3) value: 131);
					add: (UsedReference id: (ObjectId number: 4) value: 197);
					add: (UsedReference id: (ObjectId number: 5) value: 329);
					add: (UsedReference id: (ObjectId number: 6) value: 405);
					asArray))))
			trailer: ((PDF classAt: #Trailer)
				with: #Size -> 7
				with: #Root -> (file referenceAt: (ObjectId number: 1))))).
	self assert: (file referenceAt: (ObjectId number: 4)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Page;
		at: #Parent put: (file referenceAt: (ObjectId number: 3));
		at: #MediaBox put: #(0 0 612 792);
		at: #Contents put: (file referenceAt: (ObjectId number: 5));
		at: #Resources
			put: (PDF Dictionary with: #ProcSet -> (file referenceAt: (ObjectId number: 6)));
		at: #Annots put: (file referenceAt: (ObjectId number: 7));
		yourself).
	self assert: (file referenceAt: (ObjectId number: 7)) baseObject = (Array
		with: (file referenceAt: (ObjectId number: 8))
		with: (file referenceAt: (ObjectId number: 9))
		with: (file referenceAt: (ObjectId number: 10))
		with: (file referenceAt: (ObjectId number: 11))) asPDF.
	self assert: (file referenceAt: (ObjectId number: 8)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(44 616 162 735);
		at: #Contents put: ' Text #1 ';
		at: #Open put: true;
		yourself) content asPDF.
	self assert: (file referenceAt: (ObjectId number: 9)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(224 668 457 735);
		at: #Contents put: ' Text #2 ';
		at: #Open put: false;
		yourself).
	self assert: (file referenceAt: (ObjectId number: 10)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(239 393 328 622);
		at: #Contents put: ' Text #3 ';
		at: #Open put: true;
		yourself).
	self assert: (file referenceAt: (ObjectId number: 11)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(34 398 225 575);
		at: #Contents put: ' Text #4 ';
		at: #Open put: false;
		yourself)
%
method: FileTests
testReadUpdate2
	| file |
	file := File readFrom: File exampleUpdate2ByteArray readStream.
	self assert: file header = (Header version: Version pdf1_4).
	self assert: file trailer Size = 12 asPDF.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file trailer Prev = 1320 asPDF.
	self assert: file crossReferences = (CrossReferences
		crossReferenceSection: (CrossReferenceSection subsections: (Array
			with: (CrossReferenceSubsection
				firstNumber: 0
				entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
			with: (CrossReferenceSubsection
				firstNumber: 10
				entries: (Array with: (UsedReference id: (ObjectId number: 10) value: 1551)))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 12
			with: #Root -> (file referenceAt: (ObjectId number: 1))
			with: #Prev -> 1320)
		previous: (CrossReferences
			crossReferenceSection: (CrossReferenceSection subsections: (Array
				with: (CrossReferenceSubsection
					firstNumber: 0
					entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
				with: (CrossReferenceSubsection
					firstNumber: 4
					entries: (Array with: (UsedReference id: (ObjectId number: 4) value: 640)))
				with: (CrossReferenceSubsection
					firstNumber: 7
					entries: ((OrderedCollection new)
						add: (UsedReference id: (ObjectId number: 7) value: 788);
						add: (UsedReference id: (ObjectId number: 8) value: 842);
						add: (UsedReference id: (ObjectId number: 9) value: 960);
						add: (UsedReference id: (ObjectId number: 10) value: 1080);
						add: (UsedReference id: (ObjectId number: 11) value: 1200);
						asArray))))
			trailer: ((PDF classAt: #Trailer)
				with: #Size -> 12
				with: #Root -> (file referenceAt: (ObjectId number: 1))
				with: #Prev -> 431)
			previous: (CrossReferences
				crossReferenceSection: (CrossReferenceSection subsections: (Array with: (CrossReferenceSubsection
					firstNumber: 0
					entries: ((OrderedCollection new)
						add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
						add: (UsedReference id: (ObjectId number: 1) value: 9);
						add: (UsedReference id: (ObjectId number: 2) value: 81);
						add: (UsedReference id: (ObjectId number: 3) value: 131);
						add: (UsedReference id: (ObjectId number: 4) value: 197);
						add: (UsedReference id: (ObjectId number: 5) value: 329);
						add: (UsedReference id: (ObjectId number: 6) value: 405);
						asArray))))
				trailer: ((PDF classAt: #Trailer)
					with: #Size -> 7
					with: #Root -> (file referenceAt: (ObjectId number: 1)))))).
	self assert: (file referenceAt: (ObjectId number: 4)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Page;
		at: #Parent put: (file referenceAt: (ObjectId number: 3));
		at: #MediaBox put: #(0 0 612 792);
		at: #Contents put: (file referenceAt: (ObjectId number: 5));
		at: #Resources
			put: (PDF Dictionary with: #ProcSet -> (file referenceAt: (ObjectId number: 6)));
		at: #Annots put: (file referenceAt: (ObjectId number: 7));
		yourself).
	self assert: (file referenceAt: (ObjectId number: 7)) baseObject = (Array
		with: (file referenceAt: (ObjectId number: 8))
		with: (file referenceAt: (ObjectId number: 9))
		with: (file referenceAt: (ObjectId number: 10))
		with: (file referenceAt: (ObjectId number: 11))) asPDF.
	self assert: (file referenceAt: (ObjectId number: 10)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(239 393 328 622);
		at: #Contents put: ' Modified Text #3 ';
		at: #Open put: true;
		yourself).
	self assert: file crossReferences freeReferences asArray = (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0))
%
method: FileTests
testReadUpdate3
	| file |
	file := File readFrom: File exampleUpdate3ByteArray readStream.
	self assert: file header = (Header version: Version pdf1_4).
	self assert: file trailer Size = 12 asPDF.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file trailer Prev = 1680 asPDF.
	self assert: file crossReferences = (CrossReferences
		crossReferenceSection: (CrossReferenceSection subsections: (Array
			with: (CrossReferenceSubsection
				firstNumber: 0
				entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 8)))
			with: (CrossReferenceSubsection
				firstNumber: 7
				entries: (Array
					with: (UsedReference id: (ObjectId number: 7) value: 1809)
					with: (FreeReference id: (ObjectId number: 8 generation: 1) value: 9)
					with: (FreeReference id: (ObjectId number: 9 generation: 1) value: 0)))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 12
			with: #Root -> (file referenceAt: (ObjectId number: 1))
			with: #Prev -> 1680)
		previous: (CrossReferences
			crossReferenceSection: (CrossReferenceSection subsections: (Array
				with: (CrossReferenceSubsection
					firstNumber: 0
					entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
				with: (CrossReferenceSubsection
					firstNumber: 10
					entries: (Array with: (UsedReference id: (ObjectId number: 10) value: 1551)))))
			trailer: ((PDF classAt: #Trailer)
				with: #Size -> 12
				with: #Root -> (file referenceAt: (ObjectId number: 1))
				with: #Prev -> 1320)
			previous: (CrossReferences
				crossReferenceSection: (CrossReferenceSection subsections: (Array
					with: (CrossReferenceSubsection
						firstNumber: 0
						entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
					with: (CrossReferenceSubsection
						firstNumber: 4
						entries: (Array with: (UsedReference id: (ObjectId number: 4) value: 640)))
					with: (CrossReferenceSubsection
						firstNumber: 7
						entries: ((OrderedCollection new)
							add: (UsedReference id: (ObjectId number: 7) value: 788);
							add: (UsedReference id: (ObjectId number: 8) value: 842);
							add: (UsedReference id: (ObjectId number: 9) value: 960);
							add: (UsedReference id: (ObjectId number: 10) value: 1080);
							add: (UsedReference id: (ObjectId number: 11) value: 1200);
							asArray))))
				trailer: ((PDF classAt: #Trailer)
					with: #Size -> 12
					with: #Root -> (file referenceAt: (ObjectId number: 1))
					with: #Prev -> 431)
				previous: (CrossReferences
					crossReferenceSection: (CrossReferenceSection subsections: (Array with: (CrossReferenceSubsection
						firstNumber: 0
						entries: ((OrderedCollection new)
							add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
							add: (UsedReference id: (ObjectId number: 1) value: 9);
							add: (UsedReference id: (ObjectId number: 2) value: 81);
							add: (UsedReference id: (ObjectId number: 3) value: 131);
							add: (UsedReference id: (ObjectId number: 4) value: 197);
							add: (UsedReference id: (ObjectId number: 5) value: 329);
							add: (UsedReference id: (ObjectId number: 6) value: 405);
							asArray))))
					trailer: ((PDF classAt: #Trailer)
						with: #Size -> 7
						with: #Root -> (file referenceAt: (ObjectId number: 1))))))).
	self assert: (file referenceAt: (ObjectId number: 7)) baseObject = (Array
		with: (file referenceAt: (ObjectId number: 10))
		with: (file referenceAt: (ObjectId number: 11))) asPDF.
	self assert: (file referenceAt: (ObjectId number: 8)) baseObject = nil.
	self assert: (file referenceAt: (ObjectId number: 9)) baseObject = nil.
	self assert: file crossReferences freeReferences asArray = (Array
		with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 8)
		with: (FreeReference id: (ObjectId number: 8 generation: 1) value: 9)
		with: (FreeReference id: (ObjectId number: 9 generation: 1) value: 0))
%
method: FileTests
testReadUpdate4
	| file |
	file := File readFrom: File exampleUpdate4ByteArray readStream.
	self assert: file header = (Header version: Version pdf1_4).
	self assert: file trailer Size = 13 asPDF.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file trailer Prev = 1847 asPDF.
	self assert: file crossReferences = (CrossReferences
		crossReferenceSection: (CrossReferenceSection subsections: (Array
			with: (CrossReferenceSubsection
				firstNumber: 0
				entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
			with: (CrossReferenceSubsection
				firstNumber: 7
				entries: (Array
					with: (UsedReference id: (ObjectId number: 7) value: 2015)
					with: (UsedReference id: (ObjectId number: 8 generation: 1) value: 2078)
					with: (UsedReference id: (ObjectId number: 9 generation: 1) value: 2200)))
			with: (CrossReferenceSubsection
				firstNumber: 12
				entries: (Array with: (UsedReference id: (ObjectId number: 12) value: 2324)))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 13
			with: #Root -> (file referenceAt: (ObjectId number: 1))
			with: #Prev -> 1847)
		previous: (CrossReferences
			crossReferenceSection: (CrossReferenceSection subsections: (Array
				with: (CrossReferenceSubsection
					firstNumber: 0
					entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 8)))
				with: (CrossReferenceSubsection
					firstNumber: 7
					entries: (Array
						with: (UsedReference id: (ObjectId number: 7) value: 1809)
						with: (FreeReference id: (ObjectId number: 8 generation: 1) value: 9)
						with: (FreeReference id: (ObjectId number: 9 generation: 1) value: 0)))))
			trailer: ((PDF classAt: #Trailer)
				with: #Size -> 12
				with: #Root -> (file referenceAt: (ObjectId number: 1))
				with: #Prev -> 1680)
			previous: (CrossReferences
				crossReferenceSection: (CrossReferenceSection subsections: (Array
					with: (CrossReferenceSubsection
						firstNumber: 0
						entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
					with: (CrossReferenceSubsection
						firstNumber: 10
						entries: (Array with: (UsedReference id: (ObjectId number: 10) value: 1551)))))
				trailer: ((PDF classAt: #Trailer)
					with: #Size -> 12
					with: #Root -> (file referenceAt: (ObjectId number: 1))
					with: #Prev -> 1320)
				previous: (CrossReferences
					crossReferenceSection: (CrossReferenceSection subsections: (Array
						with: (CrossReferenceSubsection
							firstNumber: 0
							entries: (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0)))
						with: (CrossReferenceSubsection
							firstNumber: 4
							entries: (Array with: (UsedReference id: (ObjectId number: 4) value: 640)))
						with: (CrossReferenceSubsection
							firstNumber: 7
							entries: ((OrderedCollection new)
								add: (UsedReference id: (ObjectId number: 7) value: 788);
								add: (UsedReference id: (ObjectId number: 8) value: 842);
								add: (UsedReference id: (ObjectId number: 9) value: 960);
								add: (UsedReference id: (ObjectId number: 10) value: 1080);
								add: (UsedReference id: (ObjectId number: 11) value: 1200);
								asArray))))
					trailer: ((PDF classAt: #Trailer)
						with: #Size -> 12
						with: #Root -> (file referenceAt: (ObjectId number: 1))
						with: #Prev -> 431)
					previous: (CrossReferences
						crossReferenceSection: (CrossReferenceSection subsections: (Array with: (CrossReferenceSubsection
							firstNumber: 0
							entries: ((OrderedCollection new)
								add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
								add: (UsedReference id: (ObjectId number: 1) value: 9);
								add: (UsedReference id: (ObjectId number: 2) value: 81);
								add: (UsedReference id: (ObjectId number: 3) value: 131);
								add: (UsedReference id: (ObjectId number: 4) value: 197);
								add: (UsedReference id: (ObjectId number: 5) value: 329);
								add: (UsedReference id: (ObjectId number: 6) value: 405);
								asArray))))
						trailer: ((PDF classAt: #Trailer)
							with: #Size -> 7
							with: #Root -> (file referenceAt: (ObjectId number: 1)))))))).
	self assert: (file referenceAt: (ObjectId number: 7)) baseObject = ((OrderedCollection new)
		add: (file referenceAt: (ObjectId number: 10));
		add: (file referenceAt: (ObjectId number: 11));
		add: (file referenceAt: (ObjectId number: 8 generation: 1));
		add: (file referenceAt: (ObjectId number: 9 generation: 1));
		add: (file referenceAt: (ObjectId number: 12));
		asPDF).
	self assert: (file referenceAt: (ObjectId number: 8 generation: 1)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(58 657 172 742);
		at: #Contents put: ' New Text #1 ';
		at: #Open put: true;
		yourself).
	self assert: (file referenceAt: (ObjectId number: 9 generation: 1)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(389 459 570 537);
		at: #Contents put: ' New Text #2 ';
		at: #Open put: false;
		yourself).
	self assert: (file referenceAt: (ObjectId number: 8)) baseObject = nil.
	self assert: (file referenceAt: (ObjectId number: 9)) baseObject = nil.
	self assert: (file referenceAt: (ObjectId number: 12)) baseObject = ((PDF Dictionary new)
		at: #Type put: #Annot;
		at: #Subtype put: #Text;
		at: #Rect put: #(44 253 473 337);
		at: #Contents
			put: (' New Text #3' , (String with: 131 asCharacter) , 'a longer text annotation which we will continue onto a second line ') asPDF;
		at: #Open put: true;
		yourself).
	self assert: file crossReferences freeReferences asArray = (Array with: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0))
%
method: FileTests
testReadWithDeferredStreamLength
	| file |
	file := File readFrom: File exampleByteArray2 readStream.
	self assert: file header = (Header version: Version pdf1_2).
	self assert: file trailer Size = 8 asPDF.
	self assert: (file trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: file crossReferences = (CrossReferences
		crossReferenceSection: (CrossReferenceSection subsections: (Array with: (CrossReferenceSubsection
			firstNumber: 0
			entries: ((OrderedCollection new)
				add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
				add: (UsedReference id: (ObjectId number: 1) value: 15);
				add: (UsedReference id: (ObjectId number: 2) value: 64);
				add: (UsedReference id: (ObjectId number: 3) value: 147);
				add: (UsedReference id: (ObjectId number: 4) value: 320);
				add: (UsedReference id: (ObjectId number: 5) value: 230);
				add: (UsedReference id: (ObjectId number: 6) value: 411);
				add: (UsedReference id: (ObjectId number: 7) value: 1224);
				asArray))))
		trailer: ((PDF classAt: #Trailer)
			with: #Size -> 8
			with: #Root -> (file referenceAt: (ObjectId number: 1)))).
	self assert: (file crossReferenceAtId: (file referenceAt: (ObjectId number: 1))) = (UsedReference id: (ObjectId number: 1) value: 15).
	self assert: (file referenceAt: (ObjectId number: 1)) baseObject = ((PDF classAt: #Catalog)
		with: #Type -> #Catalog
		with: #Pages -> (file referenceAt: (ObjectId number: 2))).
	self assert: (file referenceAt: (ObjectId number: 2)) baseObject = (PDF Dictionary
		with: #Type -> #Pages
		with: #MediaBox -> #(0 0 792 612)
		with: #Kids -> (Array with: (file referenceAt: (ObjectId number: 3))) asPDF
		with: #Count -> 1).
	self assert: (file referenceAt: (ObjectId number: 3)) baseObject = (PDF Dictionary
		with: #Type -> #Page
		with: #Parent -> (file referenceAt: (ObjectId number: 2))
		with: #Resources -> (file referenceAt: (ObjectId number: 4))
		with: #Contents -> (Array with: (file referenceAt: (ObjectId number: 5))) asPDF).
	self assert: (file referenceAt: (ObjectId number: 4)) baseObject = (PDF Dictionary
		with: #ProcSet -> #(#PDF #Text)
		with: #Font -> PDF Dictionary new
		with: #XObject -> (PDF Dictionary with: #IM1 -> (file referenceAt: (ObjectId number: 6)))).
	self assert: (file referenceAt: (ObjectId number: 5)) baseObject = (PDF Stream
		on: (Valuemap with: #Length -> 30)
		internal: 'q
101 0 0 51 0 0  cm/IM1 Do
Q
' withLf).
	self assert: ((file referenceAt: (ObjectId number: 6)) baseObject isKindOf: PDF Stream).
	self assert: (file referenceAt: (ObjectId number: 6)) baseObject size = 7.
	self assert: (file referenceAt: (ObjectId number: 7)) baseObject = 663 asPDF
%
category: 'tests'
method: FontEncodingTests
testOpenTypePS
	| page |
	page := PDF Page newInBounds: (0 @ -5 corner: 120 @ 15) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textObjectDo: [
			renderer setFont: #FreeSansBold size: 16.
			renderer showString: 'Übertrag: 1.00 €']].
	self assert: page Contents internal = 'BT
/F1 16 Tf
(\334bertrag: 1.00 \200) Tj
ET
' withLf.
	self assert: (page Resources fonts objectAt: #F1) pdfSource = '<<	/Type /Font
	/Subtype /Type1
	/BaseFont /FreeSansBold
	/FontDescriptor 0 0 R
	/Widths [278 333 474 556 556 889 722 238 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 333 333 584 584 584 611 975 722 722 722 722 667 611 778 722 278 556 722 611 833 722 778 667 778 722 667 611 722 667 944 667 667 611 333 278 333 584 556 333 556 611 556 611 556 333 611 611 278 278 556 278 889 611 611 611 611 389 556 333 611 556 778 556 556 500 389 280 389 584 700 640 700 278 333 500 1000 556 556 333 1000 667 333 1000 700 611 700 700 278 278 500 500 350 556 1000 333 1000 556 333 953 700 500 667 278 333 556 556 556 556 280 556 333 737 370 556 584 333 737 333 606 584 351 351 333 611 556 278 333 300 365 556 869 869 869 611 722 722 722 722 722 722 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 556 556 556 556 556 278 278 278 278 611 611 611 611 611 611 611 584 611 611 611 611 611 556 611 556]
	/FirstChar 32
	/LastChar 255
	/Encoding /WinAnsiEncoding	>>' withLf.
	self assert: (page Resources fonts objectAt: #F1) FontDescriptor pdfSource = '<<	/Type /FontDescriptor
	/FontName /FreeSansBold
	/Flags 262176
	/FontBBox [-967 -460 1556 1072]
	/ItalicAngle 0
	/Ascent 800
	/Descent -200
	/CapHeight 730
	/StemV 166
	/FontFile3 0 0 R	>>' withLf
%
method: FontEncodingTests
testStandard
	| page |
	page := PDF Page newInBounds: (0 @ -5 corner: 120 @ 15) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 16.
			renderer showString: 'Übertrag: 1.00 €']].
	self assert: page Contents internal = 'BT
/F1 16 Tf
(\334bertrag: 1.00 \200) Tj
ET
' withLf.
	self assert: (page Resources fonts objectAt: #F1) pdfSource = '<<	/Type /Font
	/Subtype /Type1
	/BaseFont /Helvetica
	/Encoding /WinAnsiEncoding	>>' withLf
%
method: FontEncodingTests
testStandardTwoByteString
	| page |
	page := PDF Page newInBounds: (0 @ -5 corner: 120 @ 15) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 16.
			renderer showString: (Unicode16 withAll: (String with: 0 asCharacter))]].
	self assert: page Contents internal = 'BT
/F1 16 Tf
(\000) Tj
ET
' withLf.
	self assert: (page Resources fonts objectAt: #F1) pdfSource = '<<	/Type /Font
	/Subtype /Type1
	/BaseFont /Helvetica
	/Encoding /WinAnsiEncoding	>>' withLf
%
method: FontEncodingTests
testStandardUnknownCharacter
	| page |
	page := PDF Page newInBounds: (0 @ -5 corner: 120 @ 15) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 16.
			renderer showString: (String with: 0 asCharacter)]].
	self assert: page Contents internal = 'BT
/F1 16 Tf
(\000) Tj
ET
' withLf.
	self assert: (page Resources fonts objectAt: #F1) pdfSource = '<<	/Type /Font
	/Subtype /Type1
	/BaseFont /Helvetica
	/Encoding /WinAnsiEncoding	>>' withLf
%
method: FontEncodingTests
testType1
	| page |
	page := PDF Page newInBounds: (0 @ -5 corner: 120 @ 15) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textObjectDo: [
			renderer setFont: #NimbusSansLRegu size: 16.
			renderer showString: 'Übertrag: 1.00 €']].
	self assert: page Contents internal = 'BT
/F1 16 Tf
(\334bertrag: 1.00 \200) Tj
ET
' withLf.
	self assert: (page Resources fonts objectAt: #F1) pdfSource = '<<	/Type /Font
	/Subtype /Type1
	/BaseFont /NimbusSanL-Regu
	/FontDescriptor 0 0 R
	/Widths [278 278 355 556 556 889 667 191 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 584 556 1015 667 667 722 722 667 611 778 722 278 500 667 556 833 722 778 667 778 722 667 611 722 667 944 667 667 611 278 278 278 469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 833 556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 584 278 556 278 222 556 333 1000 556 556 333 1000 667 333 1000 278 611 278 278 222 221 333 333 350 556 1000 333 1000 500 333 944 278 500 667 278 333 556 556 556 556 260 556 333 737 370 556 584 278 737 333 606 584 351 351 333 556 537 278 333 351 365 556 869 869 869 611 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 666 666 611 556 556 556 556 556 556 889 500 556 556 556 556 278 278 278 278 556 556 556 556 556 556 556 584 611 556 556 556 556 500 555 500]
	/FirstChar 32
	/LastChar 255
	/Encoding /WinAnsiEncoding	>>' withLf.
	self assert: (page Resources fonts objectAt: #F1) FontDescriptor pdfSource = '<<	/Type /FontDescriptor
	/FontName /NimbusSanL-Regu
	/Flags 32
	/FontBBox [-174 -285 1001 953]
	/ItalicAngle 0
	/Ascent 729
	/Descent -218
	/CapHeight 729
	/StemV 88
	/FontFile 0 0 R	>>' withLf
%
category: 'tests'
method: ImageXTests
testFixedImageAsSource
	self assert: ImageXObject depth8Fixed asSource = (ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 369;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhO1$5nudb#XSi-)$:Gf1<(F:AIQJh5H\72J4oH.#nuB_;iWlVM%qg92HaUZ74&m`QpEcIV3se&.A`E
K;[O3m^aC"*Gem\RFN6J5F4Qalgu_YH]Z!T_FMf&&k??KM``90``@F&p#9A'')B/=Sl^_`VjoYHP>Rl7
qLb"FBMn]4''.gi:M32dC@E72K9>6O"!IdA%.0fZTl[\;,4X>''#\ZltVm!fZB.s\:a0bCRa)2b*KKGL
"G<N$SLr!),3*,>iml`3K,cFQt+?P<jS=89P--!),+[He""EWVDQ7@4>I!J35C:tlEGoToVmn"BW%sjg
ZVA8HJ+4JoVdO.kYAUufo<.VWJb&,Zl<baJId*,@0LeQ;]Y1#:0D.o;4Cb>Z5,<s;%7;;SSD02)HEb7''
s$g><)A,LHrGn6i]ec[E5Wh\/=?3"_?rs6$cNB=r55:`-N6J364n]E5QK^9"0lfoO8~>')) asSource
%
method: ImageXTests
testFixedMaskedImageAsSource
	self assert: ImageXObject depth8Masked asSource = (ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 1191;
			add: #Filter -> #FlateDecode;
			add: #Mask -> (ImageXObject
				on: ((Valuemap new: 9)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 32;
					add: #Height -> 32;
					add: #BitsPerComponent -> 1;
					add: #ImageMask -> true;
					add: #Decode -> #(1 0);
					add: #Length -> 42;
					add: #Filter -> #FlateDecode;
					yourself)
				externalBytes: #[120 218 99 96 0 2 251 255 32 220 80 255 255 255 1 32 126 0 196 31 128 248 7 16 255 1 226 127 64 252 31 25 3 213 82 13 3 0 144 20 79 228]) newReference;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhU-&D+ml0(rq%3psQ*kQtSf[[7rJI'',hElW"G>M5_?=i>aC4R#"(s"ZC0YUSb!d5\hB(\)H_C1(79
Wn91Y_F''/E`=NED+V&l>M@f$XV:JbIsDrk0*b_)bo6AH+bPH$\nl^ZV-M4Qi5Pf^OCUdH[OVl.3mnDJ
j&''ApQ`aO2pL*_Aj''+CL.)F"+%Z;ghZ?Ak]e%W-o''+qm+=j,d\oJeHMfa=7%llld*\V@#mpQMEIET
QpDuG1g:uMnQ2VqhFN)7Cm+V-ucCGJT@Tp3WCClCS^Albt1`?dWTR<4q_5+!8-Vnc\:,*V(rj9%8V/eU
Wfq"?aR@*3&bO(&pN?1&5,*`Z*fe^-b[j<B`ccF1?@e#Y<LrU]:>sq(\<L$Uc`H6]d(lXNJ:.^jN.VDX
XB2_`W77H"]''T@>4d$pZR9hrR\=0L=g13R+.2IeSXLlUoZ](P<b9uaEA*tb6M:@m#4naZ.B+aRZSLKm
"a+7DloE#gsud:`NMb0(1"(GBeB''+U97=K=iAFt>:B(r''3)mb,+t-kcJDeCN2oV7[4PiUqN!<bl>\k
>FLlpdu_Jg:)!&.^dE0j+W3(32^ZLE"j#%Go7RE\m/b.cCnfSY0!Ofe)nnN_S`uS+p64O6ms4SaC;Euc
-;pd&7T?Bh$jmE[XGbJ19rhgl?RLDleG`1T''t;Dn8iX.^WObgCYH(JEB7H=AN^M2HUQ@Pe4K:_kR%pe
Vkp5dU8"Bh[''[-E&oc%uP7mYU7)''=VnF-B0&t.4trD%!l8>I&YH?nC\ZONEhO/MJodaES16ASg%RYg
GGBo%joPKAJe"rrK:>%"m<;,''bZi."I#6ZeZnQDgD=*`3#XpD9o^n&1t^rjAATWel0K\jLS''W/sR&%
fQA)?t)3*j=S$KmbhFrJpk`[##difbhEq%T+_qOI7A=0kYiO&5kHdnROF6\/C?sUfgJTu5<Eb-G^*U^!
[$*BRgC#]W6@lqe''"'']?eElF^:)e`La)VRNK#H[%uZ3qG<m9Vb_["iOV,okghujqP^n!KaT(POT;?"
\PF''7Bgq5lfSCR+3Q4:uLZEejhAT.8M'',9.spqH(G)3l]8,688ZT<F_K>@#Ln`D-B5<l;tD&,ND8X_
(>#p/P1Lc@9nlI=6Noce*''hhS!Sik:^SaGZ6/G#\6N1kG"\_>?h+X5/an=ZPlPG(1UkRRMnYt7]g,D#
jO&l$(+m:$D3O*\MIkX>RImHIZ%cd3@kpm59E>[0.us(]=(JKh9KcCCfT#kLs+6+H-u*-I^`?A>@*<jF
1;Sp-<^/)hI(kd"%mO*m+e-,d^;/Krj&_acf$(sl*url`o4_D#<p3gl8(3Q]liL]p=UG`6mnKWKDrdDS
=@!+iN"j*1G`HUG;oHrHhHiUn:''>M:B3lj0G+A*iMR4jF2>k$htl>YJq4,Y!ueD"#dVg<Si0k9a)UG*
A,J;00kM9D8/GG0KoFtoJV//I_oDd;(P5[M5OhMLP8.!#<l9\CrpRg;=r2d0FoDhhap.e~>')) asSource
%
method: ImageXTests
testMappedImageAsSource
	self assert: ImageXObject depth6Mapped2 asSource = (ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 8;
			add: #Height -> 8;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 44
				bytes: #[208 153 40 255 255 255 248 190 32 173 138 41 243 168 0 249 237 144 169 133 33 187 154 90 112 97 67 241 171 24 175 126 12 153 106 0 213 158 43 140 131 116 217 179 55 254 251 224 177 138 23 175 131 0 246 201 46 230 204 150 185 147 38 196 158 53 255 200 43 208 147 30 220 213 198 246 182 21 215 171 68 218 188 53 248 210 65 249 203 49 250 207 54 112 95 63 243 175 7 122 120 119 181 181 181 247 230 172 120 109 88 172 126 19 244 232 173 223 190 54 120 104 71 174 141 39 252 229 82 226 160 0 154 119 32]);
			add: #Length -> 64;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 21 197 69 18 128 48 0 0 49 22 247 226 238 110 255 127 31 211 92 2 164 103 131 116 108 109 32 215 170 252 2 235 142 194 120 53 241 11 97 36 250 142 226 12 253 83 187 148 175 58 117 153 13 222 55 206 11 63 113 56 3 242]) asSource
%
method: ImageXTests
testMaskImageAsSource
	self assert: ImageXObject depth1Mask asSource = (ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 1;
			add: #ImageMask -> true;
			add: #Decode -> #(1 0);
			add: #Length -> 88;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 77 205 193 13 192 32 8 5 208 223 120 240 232 8 142 226 104 140 208 17 58 74 59 138 35 112 228 96 248 98 140 73 33 239 242 9 144 0 212 15 104 61 40 32 139 253 232 206 107 204 139 39 131 220 3 242 56 132 60 178 188 108 209 162 141 212 186 56 173 132 60 104 87 103 236 243 220 238 251 223 169 9 106 19 56 46]) asSource
%
method: ImageXTests
testMaskImagePrintAndRead
	self assert: ImageXObject depth1Mask = (self evaluate: ImageXObject depth1Mask asSource).
	self assert: ImageXObject depth1Mono = (self evaluate: ImageXObject depth1Mono asSource).
	self assert: ImageXObject depth2Fixed = (self evaluate: ImageXObject depth2Fixed asSource).
	self assert: ImageXObject depth2Mapped = (self evaluate: ImageXObject depth2Mapped asSource).
	self assert: ImageXObject depth2Mapped2 = (self evaluate: ImageXObject depth2Mapped2 asSource).
	self assert: ImageXObject depth3Fixed = (self evaluate: ImageXObject depth3Fixed asSource).
	self assert: ImageXObject depth3Mapped = (self evaluate: ImageXObject depth3Mapped asSource).
	self assert: ImageXObject depth3Mapped2 = (self evaluate: ImageXObject depth3Mapped2 asSource).
	self assert: ImageXObject depth3Mapped3 = (self evaluate: ImageXObject depth3Mapped3 asSource).
	self assert: ImageXObject depth4Fixed = (self evaluate: ImageXObject depth4Fixed asSource).
	self assert: ImageXObject depth4Mapped = (self evaluate: ImageXObject depth4Mapped asSource).
	self assert: ImageXObject depth4Mapped2 = (self evaluate: ImageXObject depth4Mapped2 asSource).
	self assert: ImageXObject depth5Mapped = (self evaluate: ImageXObject depth5Mapped asSource).
	self assert: ImageXObject depth6Fixed = (self evaluate: ImageXObject depth6Fixed asSource).
	self assert: ImageXObject depth6Mapped = (self evaluate: ImageXObject depth6Mapped asSource).
	self assert: ImageXObject depth6Mapped2 = (self evaluate: ImageXObject depth6Mapped2 asSource).
	self assert: ImageXObject depth7Mapped = (self evaluate: ImageXObject depth7Mapped asSource).
	self assert: ImageXObject depth7Mapped2 = (self evaluate: ImageXObject depth7Mapped2 asSource).
	self assert: ImageXObject depth8Fixed = (self evaluate: ImageXObject depth8Fixed asSource).
	self assert: ImageXObject depth8Mapped = (self evaluate: ImageXObject depth8Mapped asSource).
	self assert: ImageXObject depth8MappedGray = (self evaluate: ImageXObject depth8MappedGray asSource).
	self assert: ImageXObject depth8Mapped2 = (self evaluate: ImageXObject depth8Mapped2 asSource).
	self assert: ImageXObject depth9Fixed = (self evaluate: ImageXObject depth9Fixed asSource).
	self assert: ImageXObject depth10Fixed = (self evaluate: ImageXObject depth10Fixed asSource).
	self assert: ImageXObject depth15Fixed = (self evaluate: ImageXObject depth15Fixed asSource).
	self assert: ImageXObject depth24Fixed = (self evaluate: ImageXObject depth24Fixed asSource).
	"need to use #asSource because the references are not equal"
	self assert: ImageXObject depth32FixedAlpha asSource = (self evaluate: ImageXObject depth32FixedAlpha asSource) asSource.
	self assert: ImageXObject depth8Masked asSource = (self evaluate: ImageXObject depth8Masked asSource) asSource.
	self assert: ImageXObject depth24Masked asSource = (self evaluate: ImageXObject depth24Masked asSource) asSource.
%
category: 'tests'
method: LibraryTests
testVersion
	self assert: PDF libraryVersionString = '2.5'
%
category: 'tests'
method: MatrixTests
test
	| a b |
	self assert: (PDF classAt: #Matrix) identity printString = '[1 0 0 1 0 0]'.
	self assert: (PDF classAt: #Matrix) empty printString = '[1 0 0 1 0 0]'.
	a := (PDF classAt: #Matrix) on: #(3 5 2 6 9 8).
	self assert: a printString = '[3 5 2 6 9 8]'.
	b := (PDF classAt: #Matrix) on: #(2 5 3 4 9 5).
	self assert: b printString = '[2 5 3 4 9 5]'.
	self assert: (a concatenatedWith: b) = ((PDF classAt: #Matrix) on: #(21 35 22 34 51 82)).
	self assert: ((PDF classAt: #Matrix) translation: 10 @ 26) printString = '[1 0 0 1 10 26]'.
	self assert: (((PDF classAt: #Matrix) translation: 10 @ 26) concatenatedWith: (PDF classAt: #Matrix) identity) printString = '[1 0 0 1 10 26]'.
	self assert: ((PDF classAt: #Matrix) identity concatenatedWith: ((PDF classAt: #Matrix) translation: 10 @ 26)) printString = '[1 0 0 1 10 26]'.
	self assert: (((PDF classAt: #Matrix) translation: 10 @ 26) concatenatedWith: ((PDF classAt: #Matrix) translation: 200 @ 300)) printString = '[1 0 0 1 210 326]'.
	self assert: ((PDF classAt: #Matrix) scaling: 10 @ 26) printString = '[10 0 0 26 0 0]'.
	self assert: (((PDF classAt: #Matrix) scaling: 10 @ 26) concatenatedWith: ((PDF classAt: #Matrix) scaling: 200 @ 300)) printString = '[2000 0 0 7800 0 0]'.
	self assert: ((PDF classAt: #Matrix) xFrom: 10 @ 10 to: 200 @ 200) printString = '[190 190 -190 190 10 10]'.
	self assert: ((PDF classAt: #Matrix) rotation: 0) printString = '[1 0 0 1 0 0]'.
	self assert: ((PDF classAt: #Matrix) rotation: 90 degreesToRadians) printString = '[0 1 -1 0 0 0]'.
	self assert: ((PDF classAt: #Matrix) rotationDegrees: -90) printString = '[0 -1 1 0 0 0]'.
	self assert: ((PDF classAt: #Matrix) rotationDegrees: 180) printString = '[-1 0 0 -1 0 0]'.
	self assert: (((PDF classAt: #Matrix) rotationDegrees: 90) concatenatedWith: ((PDF classAt: #Matrix) scaling: 20 @ 30)) printString = '[0 30 -20 0 0 0]'.
	self assert: (((PDF classAt: #Matrix) rotationDegrees: 90) scaledBy: 20 @ 30) printString = '[0 30 -20 0 0 0]'.
	self assert: (((PDF classAt: #Matrix) rotationDegrees: 90) concatenatedWith: ((PDF classAt: #Matrix) translation: 20 @ 30)) printString = '[0 1 -1 0 20 30]'.
	self assert: (((PDF classAt: #Matrix) rotationDegrees: 90) translatedBy: 20 @ 30) printString = '[0 1 -1 0 20 30]'.
	self assert: ((((PDF classAt: #Matrix) rotationDegrees: 90) scaledBy: 20 @ 30) translatedBy: 20 @ 30) printString = '[0 30 -20 0 20 30]'.
%
category: 'tests'
method: NameTests
testSubclasses
	self assert: (PDF classAt: #Name) empty pdfSource = '/'.
	self assert: ((PDF classAt: #Name) on: '') pdfSource = '/'.
	self assert: (PDF classAt: #DeviceCMYK) empty pdfSource = '/DeviceCMYK'.
	self assert: (PDF classAt: #DeviceGray) empty pdfSource = '/DeviceGray'.
	self assert: (PDF classAt: #DeviceRGB) empty pdfSource = '/DeviceRGB'.
	self assert: (PDF classAt: #Identity) empty pdfSource = '/Identity'.
	self assert: Clip empty pdfSource = 'W'.
	self assert: ClipEvenOdd empty pdfSource = 'W*'.
%
category: 'tests'
method: ObjectStreamTests
testReadCrossReferences
	| stream file xrefStream |
	file := File readTesterOn: '<<	/Type /XRef
	/W [1 2 2]
	/Filter /ASCIIHexDecode
	/Size 11
	/Root 1 0 R
	/Length 154	>>
stream' , self stringLf , '
	00 0000 FFFF
	01 0032 0000
	01 007A 0000
	01 00AC 0000
	01 00EE 0000
	01 0172 0000
	01 01BE 0000
	02 000A 0000
	02 000A 0001
	02 000A 0002
	01 01D8 0000
' , self stringLf , 'endstream'.
	stream := file readObject.
	self assert: (stream isKindOf: PDF Stream).
	self assert: stream content = ((PDF Dictionary new)
		at: #Type put: #XRef;
		at: #W put: #(1 2 2);
		at: #Filter put: #ASCIIHexDecode;
		at: #Size put: 11;
		at: #Root put: (file referenceAt: (ObjectId number: 1));
		at: #Length put: 154;
		yourself) content.
	xrefStream := (PDF classAt: #XRefStream) newFrom: stream.
	self assert: (xrefStream isKindOf: (PDF classAt: #XRefStream)).
	self assert: xrefStream subsections size = 1.
	self assert: xrefStream subsections first = (CrossReferenceSubsection
		firstNumber: 0
		entries: ((OrderedCollection new)
			add: (FreeReference id: (ObjectId number: 0 generation: 65535) value: 0);
			add: (UsedReference id: (ObjectId number: 1) value: 50);
			add: (UsedReference id: (ObjectId number: 2) value: 122);
			add: (UsedReference id: (ObjectId number: 3) value: 172);
			add: (UsedReference id: (ObjectId number: 4) value: 238);
			add: (UsedReference id: (ObjectId number: 5) value: 370);
			add: (UsedReference id: (ObjectId number: 6) value: 446);
			add: (StreamReference id: (ObjectId number: 7) value: 10);
			add: (StreamReference id: (ObjectId number: 8 generation: 1) value: 10);
			add: (StreamReference id: (ObjectId number: 9 generation: 2) value: 10);
			add: (UsedReference id: (ObjectId number: 10) value: 472);
			asArray))
%
method: ObjectStreamTests
testReadObjectStream
	| stream file objStm |
	file := File readTesterOn: '<<	/Type /ObjStm
	/Length 191
	/N 3
	/First 15	>>
stream' , self stringLf , '7 0 8 63 9 123
<<	/Type /Font
	/Subtype /TrueType
	/FontDescriptor 12 0 R
>>

<<	/Type /FontDescriptor
	/Ascent 891
	/FontFile2 22 0 R
>>
<<	/Type /Font
	/Subtype /Type0
	/ToUnicode 10 0 R
>>' , self stringLf , 'endstream'.
	stream := file readObject.
	self assert: (stream isKindOf: PDF Stream).
	self assert: stream content = (PDF Dictionary
		with: #Type -> #ObjStm
		with: #Length -> 191
		with: #N -> 3
		with: #First -> 15) content.
	objStm := (PDF typeAt: #ObjectStream) specialized: stream.
	self assert: objStm offsets size = 3.
	self assert: (objStm readAt: 0 with: file) = (PDF Dictionary
		with: #Type -> #Font
		with: #Subtype -> #TrueType
		with: #FontDescriptor -> (file referenceAt: (ObjectId number: 12))).
	self assert: (objStm readAt: 1 with: file) = (PDF Dictionary
		with: #Type -> #FontDescriptor
		with: #Ascent -> 891
		with: #FontFile2 -> (file referenceAt: (ObjectId number: 22))).
	self assert: (objStm readAt: 2 with: file) = (PDF Dictionary
		with: #Type -> #Font
		with: #Subtype -> #Type0
		with: #ToUnicode -> (file referenceAt: (ObjectId number: 10))).
	self should: [objStm readAt: -1 with: file] raise: OffsetError.
	self should: [objStm readAt: 3 with: file] raise: OffsetError
%
category: 'tests'
method: PagesTests
testAddFirstPage
	| catalog page |
	catalog := Document new root.
	self assert: catalog Pages = (PDF classAt: #Pages) empty.
	self deny: (catalog at: #Pages) isDirect.
	self assert: catalog Pages Type = #Pages asPDF.
	self assert: catalog Pages Parent isEmpty.
	self deny: (catalog Pages hasKey: #Parent).
	self assert: catalog Pages Kids isEmpty.
	self assert: catalog Pages Count = 0 asPDF.
	page := PDF Page empty.
	self assert: page Type = #Page asPDF.
	catalog addPageTree: page.
	self assert: catalog Pages Count = 1 asPDF.
	self assert: catalog Pages Kids size = 1.
	self assert: catalog Pages Kids first == page.
	self deny: catalog Pages Kids content first isDirect.
	self assert: page Type = #Page asPDF.
	self deny: (page at: #Parent) isDirect.
	self assert: page Parent == catalog Pages.
	self assert: (page at: #Parent) == (catalog at: #Pages).
%
method: PagesTests
testAddFirstPageToPages
	"the first page of a document MUST be added via #root (Catalog)!
	Otherwise the references of catalog #Pages is different from the page #Parent"

	| catalog page |
	catalog := Document new root.
	page := PDF Page empty.
	catalog Pages addPageTree: page.
	self assert: catalog Pages Count = 1 asPDF.
	self assert: catalog Pages Kids size = 1.
	self assert: catalog Pages Kids first == page.
	self deny: catalog Pages Kids content first isDirect.
	self deny: (page at: #Parent) isDirect.
	self assert: page Parent == catalog Pages.
	self deny: (page at: #Parent) == (catalog at: #Pages).
%
method: PagesTests
testAddPages
	| catalog pages |
	catalog := Document new root.
	catalog addPageTree: PDF Page empty.
	pages := (PDF classAt: #Pages) empty.
	catalog Pages addPageTree: pages.
	self assert: catalog Pages Count = 1 asPDF.
	self assert: catalog Pages Kids size = 2.
	self deny: catalog Pages Kids content first = catalog Pages Kids content last.
	self deny: catalog Pages Kids content first isDirect.
	self deny: catalog Pages Kids content last isDirect.
	self assert: catalog Pages Kids content first content Parent == catalog Pages Kids content last content Parent.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog Pages Kids content last content at: #Parent).
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: catalog Pages Kids content last content Parent == catalog Pages.
	self assert: catalog Pages structureString = '(#())'.
	pages addPageTree: PDF Page empty.
	self assert: catalog Pages Count = 2 asPDF.
	self assert: catalog Pages Kids size = 2.
	self assert: catalog Pages Kids content first content Parent == catalog Pages Kids content last content Parent.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog Pages Kids content last content at: #Parent).
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: catalog Pages Kids content last content == pages.
	self assert: catalog Pages Kids content last content Kids first Parent == pages.
	self assert: catalog Pages structureString = '(#(#))'.
%
method: PagesTests
testAddPagesAndPage
	| catalog pages |
	catalog := Document new root.
	catalog addPageTree: PDF Page empty.
	pages := (PDF classAt: #Pages) empty.
	catalog Pages addPageTree: pages.
	self assert: catalog Pages Count = 1 asPDF.
	self assert: catalog Pages Kids size = 2.
	self deny: catalog Pages Kids content first = catalog Pages Kids content last.
	self deny: catalog Pages Kids content first isDirect.
	self deny: catalog Pages Kids content last isDirect.
	self assert: catalog Pages Kids content first content Parent == catalog Pages Kids content last content Parent.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog Pages Kids content last content at: #Parent).
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: catalog Pages Kids content last content Parent == catalog Pages.
	self assert: catalog Pages structureString = '(#())'.
	pages addPageTree: PDF Page empty.
	self assert: catalog Pages Count = 2 asPDF.
	self assert: catalog Pages Kids size = 2.
	self assert: catalog Pages Kids content first content Parent == catalog Pages Kids content last content Parent.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog Pages Kids content last content at: #Parent).
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: catalog Pages Kids content last content == pages.
	self assert: catalog Pages Kids content last content Kids first Parent == pages.
	self assert: catalog Pages structureString = '(#(#))'.
%
method: PagesTests
testAddPagesToCatalog
	| catalog pages |
	catalog := Document new root.
	pages := (PDF classAt: #Pages) empty.
	catalog addPageTree: pages.
	self assert: catalog Pages Count = 0 asPDF.
	self assert: catalog Pages Kids size = 1.
	self deny: catalog Pages Kids content first isDirect.
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog at: #Pages).
	self assert: catalog Pages structureString = '(())'.
	pages addPageTree: PDF Page empty.
	self assert: catalog Pages Count = 1 asPDF.
	self assert: catalog Pages Kids size = 1.
	self assert: catalog Pages Kids content first content Kids content first content Parent == catalog Pages Kids content first content.
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: catalog Pages Kids content last content == pages.
	self assert: catalog Pages Kids content last content Kids first Parent == pages.
	self assert: catalog Pages structureString = '((#))'.
%
method: PagesTests
testAddPagesWithPage
	| catalog pages |
	catalog := Document new root.
	catalog addPageTree: PDF Page empty.
	pages := (PDF classAt: #Pages) empty.
	pages addPageTree: PDF Page empty.
	catalog Pages addPageTree: pages.
	self assert: catalog Pages Count = 2 asPDF.
	self assert: catalog Pages Kids size = 2.
	self assert: catalog Pages Kids content first content Parent == catalog Pages Kids content last content Parent.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog Pages Kids content last content at: #Parent).
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: catalog Pages Kids content last content == pages.
	self assert: catalog Pages Kids content last content Kids first Parent == pages.
	self assert: catalog Pages structureString = '(#(#))'.
%
method: PagesTests
testAddSecondPage
	| catalog |
	catalog := Document new root.
	catalog addPageTree: PDF Page empty.
	catalog addPageTree: PDF Page empty.
	self assert: catalog Pages Count = 2 asPDF.
	self assert: catalog Pages Kids size = 2.
	self deny: catalog Pages Kids content first = catalog Pages Kids content last.
	self deny: catalog Pages Kids content first isDirect.
	self deny: catalog Pages Kids content last isDirect.
	self assert: catalog Pages Kids content first content Parent == catalog Pages Kids content last content Parent.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog Pages Kids content last content at: #Parent).
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
	self assert: catalog Pages structureString = '(##)'.
%
method: PagesTests
testAddSecondPageToPages
	| catalog |
	catalog := Document new root.
	catalog addPageTree: PDF Page empty.
	catalog Pages addPageTree: PDF Page empty.
	self assert: catalog Pages Count = 2 asPDF.
	self assert: catalog Pages Kids size = 2.
	self deny: catalog Pages Kids content first = catalog Pages Kids content last.
	self deny: catalog Pages Kids content first isDirect.
	self deny: catalog Pages Kids content last isDirect.
	self assert: catalog Pages Kids content first content Parent == catalog Pages Kids content last content Parent.
	self assert: (catalog Pages Kids content first content at: #Parent) == (catalog Pages Kids content last content at: #Parent).
	self assert: catalog Pages Kids content first content Parent == catalog Pages.
%
method: PagesTests
testNestedPages
	| root |
	root := Document exampleNestedPages root.
	self assert: root Pages structureString = '(#(###)#)'.
%
method: PagesTests
testPageAt
	| root |
	root := Document exampleNestedPages root.
	self assert: (root pageAt: 1) == root Pages Kids first.
	self assert: ((root pageAt: 1) at: #Number) = 1 asPDF.
	self assert: ((root pageAt: 2) at: #Number) = 2 asPDF.
	self assert: ((root pageAt: 3) at: #Number) = 3 asPDF.
	self assert: ((root pageAt: 4) at: #Number) = 4 asPDF.
	self assert: ((root pageAt: 5) at: #Number) = 5 asPDF.
	self should: [root pageAt: 0] raise: OffsetError.
	self should: [root pageAt: 6] raise: OffsetError.
%
method: PagesTests
testPageNumber
	| root i |
	root := Document exampleNestedPages root.
	"root := PDF pdfSpecification root."
	i := 0.
	root pagesDo: [:page |
		i := i + 1.
		self assert: page pageNumber = i].
%
category: 'tests'
method: PDFObjectTests
testRectangleNormalization
	| refRect |
	self assert: ((PDF classAt: #Rectangle) on: #(1 2 13 14)) printString = '[1 2 13 14]'.
	self assert: ((PDF classAt: #Rectangle) on: #(1 2 13 14)) normalized printString = '[1 2 13 14]'.
	self assert: ((PDF classAt: #Rectangle) on: #(13 14 1 2)) printString = '[13 14 1 2]'.
	self assert: ((PDF classAt: #Rectangle) on: #(13 14 1 2)) normalized printString = '[1 2 13 14]'.
	refRect := (PDF classAt: #Rectangle) on: (Array
		with: 1 asPDF newReference
		with: 2 asPDF newReference
		with: 13 asPDF newReference
		with: 14 asPDF newReference).
	self assert: refRect printString = '[0 0 R 0 0 R 0 0 R 0 0 R]'.
	self assert: (refRect content collect: #asSmalltalkValue) asSource = '#(1 2 13 14)'.
	refRect := (PDF classAt: #Rectangle) on: (Array
		with: 13 asPDF newReference
		with: 14 asPDF newReference
		with: 1 asPDF newReference
		with: 2 asPDF newReference).
	self assert: refRect printString = '[0 0 R 0 0 R 0 0 R 0 0 R]'.
	self assert: (refRect content collect: #asSmalltalkValue) asSource = '#(13 14 1 2)'.
	self assert: refRect normalized printString = '[0 0 R 0 0 R 0 0 R 0 0 R]'.
	self assert: (refRect normalized content collect: #asSmalltalkValue) asSource = '#(1 2 13 14)'
%
category: 'tests'
method: ReferenceTests
testMinimalFile
	| file |
	file := File readFrom: File exampleMinimalByteArray readStream.
	self assert: file header = (Header version: Version pdf1_4).
	self assert: file trailer = ((PDF classAt: #Trailer) on: (Valuemap
		with: #Size -> 7
		with: #Root -> (file referenceAt: (ObjectId number: 1)))).
	self assert: (file trailer content at: #Root) = (file referenceAt: (ObjectId number: 1)).
	self assert: (file trailer content at: #Root) isResolved not.
	self assert: (file trailer content at: #Root) content = ((PDF classAt: #Catalog) on: (Valuemap
		with: #Type -> #Catalog
		with: #Outlines -> (file referenceAt: (ObjectId number: 2))
		with: #Pages -> (file referenceAt: (ObjectId number: 3)))).
	self assert: (file trailer content at: #Root) isResolved.
	self assert: (file trailer content at: #Root) pdfObject = ((PDF classAt: #Catalog) on: (Valuemap
		with: #Type -> #Catalog
		with: #Outlines -> (file referenceAt: (ObjectId number: 2))
		with: #Pages -> (file referenceAt: (ObjectId number: 3)))).
	self assert: file trailer Size = 7 asPDF.
	self assert: file trailer Size pdfObject = 7 asPDF.
	self assert: (file crossReferenceAtId: (file referenceAt: (ObjectId number: 1))) = (UsedReference id: (ObjectId number: 1) value: 9).
	self assert: (file referenceAt: (ObjectId number: 1)) = (file referenceAt: (ObjectId number: 1)).
	self assert: (file referenceAt: (ObjectId number: 1)) baseObject = ((PDF classAt: #Catalog)
		with: #Type -> #Catalog
		with: #Outlines -> (file referenceAt: (ObjectId number: 2))
		with: #Pages -> (file referenceAt: (ObjectId number: 3))).
	self assert: (file referenceAt: (ObjectId number: 1)) referent = ((PDF classAt: #Catalog)
		with: #Type -> #Catalog
		with: #Outlines -> (file referenceAt: (ObjectId number: 2))
		with: #Pages -> (file referenceAt: (ObjectId number: 3)))
%
method: ReferenceTests
testMissingObject
	| file object doc bytes newFile outlines |
	file := File readFrom: File exampleMinimalByteArrayWithFreeReference readStream.
	self assert: (file trailer content at: #Root) pdfObject = ((PDF classAt: #Catalog) on: (Valuemap
		with: #Type -> #Catalog
		with: #Outlines -> (file referenceAt: (ObjectId number: 2))
		with: #Pages -> (file referenceAt: (ObjectId number: 3)))).
	self assert: (file crossReferenceAtId: (file referenceAt: (ObjectId number: 1))) = (UsedReference id: (ObjectId number: 1) value: 9).
	self assert: (file referenceAt: (ObjectId number: 1)) = (file referenceAt: (ObjectId number: 1)).
	self should: [(file referenceAt: (ObjectId number: 2)) baseObject] raise: FileError.
	object := [(file referenceAt: (ObjectId number: 2)) baseObject] on: FileError do: [:ex |
		ex resume].
	self assert: object printString = 'MissingObject(2 0/!Outlines)'.
	self assert: object myObject = (ObjectId number: 2).
	self assert: object types = (Array with: (DirectType onSymbol: #Outlines)).
	doc := file asDocument.
	bytes := doc bytesForFile: 'test.pdf'.
	newFile := File readFrom: bytes readStream.
	outlines := [newFile root Outlines] on: TypeError do: [:ex | ex resume].
	self assert: outlines printString = 'TypeMismatch(AsciiString/!Outlines)'.
	self assert: outlines myObject printString = '(The original object is missing. It should have been a !Outlines)'
%
method: ReferenceTests
testReferences
	| file |
	file := File readFrom: File exampleWithReferenceToReference readStream.
	self assert: (file referenceAt: (ObjectId number: 7)) isResolved not.
	self should: [(file referenceAt: (ObjectId number: 7)) referent] raise: TypeError.
	[(file referenceAt: (ObjectId number: 7)) referent] on: TypeError do: [:ex |
		self assert: ex description = 'References to References are not permitted.']
%
category: 'tests'
method: SimpleObjectTests
testArrayRead
	self assert: (File readTesterOn: '[]') readObject = #() asPDF.
	self assert: (File readTesterOn: '[ 	
]') readObject = (#() asPDF).
	self assert: (File readTesterOn: '[ 549 3.14 ( Ralph ) /SomeName ]') readObject = (Array
		with: 549
		with: 3.14
		with: ' Ralph '
		with: #SomeName) asPDF.
	self assert: (File readTesterOn: '[ 549 3.14 ( Ralph ) /SomeName ]') readObject = #(549 3.14 ' Ralph ' #SomeName) asPDF.
	self assert: (File readTesterOn: '[ 3.14 false ( Ralph ) << /a 549 /b 3.14 /c ( Ralph ) /SomeName true>> ]') readObject = (Array
		with: 3.14
		with: false
		with: ' Ralph '
		with: (PDF Dictionary
			with: #a -> 549
			with: #b -> 3.14
			with: #c -> ' Ralph '
			with: #SomeName -> true)) asPDF
%
method: SimpleObjectTests
testArrayReadErrors
	self should: [(File readTesterOn: '[') readObject] raise: ReadError.
	[(File readTesterOn: '[') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'End of Array (]) expected'].
	self should: [(File readTesterOn: '[ %abc') readObject] raise: ReadError.
	[(File readTesterOn: '[ %abc') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'End of Array (]) expected'].
	self should: [(File readTesterOn: '[ [] %abc') readObject] raise: ReadError.
	[(File readTesterOn: '[ [] %abc') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'End of Array (]) expected']
%
method: SimpleObjectTests
testArrayReadNested
	self assert: (File readTesterOn: '[[]]') readObject = (Array with: #()) asPDF.
	self assert: (File readTesterOn: '[ 	[]
]') readObject = (Array with: #()) asPDF.
	self assert: (File readTesterOn: '[ 549 3.14 ( Ralph ) [/SomeName] ]') readObject = (Array
		with: 549
		with: 3.14
		with: ' Ralph '
		with: (Array with: #SomeName)) asPDF.
	self assert: (File readTesterOn: '[ 3.14 [false [( Ralph )]] /SomeName ]') readObject = (Array
		with: 3.14
		with: (Array
			with: false
			with: (Array with: ' Ralph '))
		with: #SomeName) asPDF.
	self assert: (File readTesterOn: '[ 3.14 [false [( Ralph )]] /SomeName ]') readObject = (Array
		with: 3.14
		with: (Array
			with: false
			with: #(' Ralph '))
		with: #SomeName) asPDF.
	self assert: (File readTesterOn: '[ 3.14 [false [( Ralph )]] /SomeName ]') readObject = (Array
		with: 3.14
		with: #(false #(' Ralph '))
		with: #SomeName) asPDF.
	self assert: (File readTesterOn: '[ 3.14 [false [( Ralph )]] /SomeName ]') readObject = #(3.14 #(false #(' Ralph ')) #SomeName) asPDF
%
method: SimpleObjectTests
testArrayWrite
	self assert: PDF Array example pdfSource = '[549 3.14 false (Ralph) /SomeName]'.
	self assert: (File readTesterOn: PDF Array example pdfSource) readObject = PDF Array example
%
method: SimpleObjectTests
testBooleanRead
	| file first second |
	self assert: (File readTesterOn: ' true ') readObject = true.
	self assert: (File readTesterOn: ' false ') readObject = false.
	file := File readTesterOn: '/name false%with a comment'.
	first := file readObject.
	second := file readObject.
	self assert: first = #name asPDF.
	self assert: second = false.
	self assert: file readObject isNil
%
method: SimpleObjectTests
testBooleanWrite
	self assert: true asPDF pdfSource = 'true'.
	self assert: false asPDF pdfSource = 'false'
%
method: SimpleObjectTests
testConvertChars
	0 to: 255 do: [:i | self assert: i asCharacter asInteger = i]
%
method: SimpleObjectTests
testDate
	self assert: ((File readTesterOn: '(D:199812231952-08''00)') readObject isKindOf: (PDF classAt: #Date)).
	self assert: ((File readTesterOn: '(D:199812231952-08''00)') readObject asSmalltalkValue isKindOf: Timestamp).
	self assert: (File readTesterOn: '(D:199812231952-08''00)') readObject asSmalltalkValue = (Timestamp d: 24 m: 12 y: 1998 h: 3 m: 52) asLocal.
	self assert: (File readTesterOn: '(D:199812231952-08''00)') readObject asUTC = (File readTesterOn: '(D:19981224045200+01'')') readObject asUTC
%
method: SimpleObjectTests
testDictionaryAccess
	| dict |
	dict := PDF Dictionary example.
	self assert: (dict at: #Type) = #Example asPDF.
	self should: [dict Type] raise: MessageNotUnderstood.
	self should: [dict at: 'Null'] raise: LookupError.
	self assert: (dict at: #Type ifAbsent: [nil]) = #Example asPDF.
	self shouldnt: [dict at: #Null put: #Null] raise: Error.
	self assert: (dict at: #Null) = #Null asPDF.
	self should: [dict at: 'Null' put: 'Null'] raise: Error.
	[dict at: 'Null' put: 'Null'] on: Error do: [:ex |
		self assert: ex description = 'PDF dictionaries use only symbols as keys'].
	self shouldnt: [dict at: #Null put: nil] raise: Error.
	self should: [dict at: #Null] raise: LookupError.
	self assert: (dict at: #Null ifAbsent: [nil]) isNil.
	self shouldnt: [dict at: #Null put: nil] raise: Error.
	self should: [dict at: #Null] raise: LookupError.
	self assert: (dict at: #Null ifAbsent: [nil]) isNil
%
method: SimpleObjectTests
testDictionaryRead
	self assert: (File readTesterOn: '<<>>') readObject = PDF Dictionary new.
	self assert: (File readTesterOn: '<< 	
>>') readObject = PDF Dictionary new.
	self assert: (File readTesterOn: '<< /a 549 /b 3.14 /c ( Ralph ) /SomeName true>>') readObject = (PDF Dictionary
		with: #a -> 549
		with: #b -> 3.14
		with: #c -> ' Ralph '
		with: #SomeName -> true).
	self assert: (File readTesterOn: '<< / 3.14 /x#20y false /Name ( Ralph ) /A [/SomeName] >>') readObject = (PDF Dictionary
		with: #'' -> 3.14
		with: #'x y' -> false
		with: #Name -> ' Ralph '
		with: #A -> (Array with: #SomeName) asPDF)
%
method: SimpleObjectTests
testDictionaryReadErrors
	self should: [(File readTesterOn: '<<') readObject] raise: ReadError.
	[(File readTesterOn: '<<') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Read nil but $/ or $> expected'].
	self should: [(File readTesterOn: '<</a 549') readObject] raise: ReadError.
	[(File readTesterOn: '<</a 549') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Read nil but $/ or $> expected'].
	self should: [(File readTesterOn: '<<true 549') readObject] raise: ReadError.
	[(File readTesterOn: '<<true 549') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Read $t but $/ or $> expected'].
	self should: [(File readTesterOn: '<<1 549') readObject] raise: ReadError.
	[(File readTesterOn: '<<1 549') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Read $1 but $/ or $> expected'].
	self should: [(File readTesterOn: '<</a ') readObject] raise: ReadError.
	[(File readTesterOn: '<</a ') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Read nil but $/ or $> expected'].
	self should: [(File readTesterOn: '<</a <<>>') readObject] raise: ReadError.
	[(File readTesterOn: '<</a <<>>') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Read nil but $/ or $> expected']
%
method: SimpleObjectTests
testDictionaryReadNested
	self assert: (File readTesterOn: '<</<<>>>>') readObject = (PDF Dictionary with: #'' -> PDF Dictionary new).
	self assert: (File readTesterOn: '<< 	/  <<		>>
>>') readObject = (PDF Dictionary with: #'' -> PDF Dictionary new).
	self assert: (File readTesterOn: '<< /a 549 /dict <</b 3.14 /c ( Ralph )>> /SomeName true>>') readObject = (PDF Dictionary
		with: #a -> 549
		with: #dict -> (PDF Dictionary
			with: #b -> 3.14
			with: #c -> ' Ralph ')
		with: #SomeName -> true)
%
method: SimpleObjectTests
testDictionaryWrite
	self assert: PDF Dictionary example pdfSource = '<<	/Type /Example
	/Subtype /DictionaryExample
	/Version 0.01
	/IntegerItem 12
	/StringItem (a string)
	/Subdictionary <<
		/Item1 0.4
		/Item2 true
		/LastItem (not !)
		/VeryLastItem (OK)	>>	>>' withLf.
	self assert: (File readTesterOn: PDF Dictionary example pdfSource) readObject = PDF Dictionary example
%
method: SimpleObjectTests
testHeaderRead
	self assert: (File readTesterOn: '%PDF-1.2') parser readHeaderVersion = Version pdf1_2.
	self assert: (File readTesterOn: '%PDF-1.7') parser readHeaderVersion = Version pdf1_7.
	self assert: (File readTesterOn: '%PDF-1.0') parser readHeaderVersion = Version pdf1_0.
	self assert: (File readTesterOn: '%PDF-2.0') parser readHeaderVersion = Version pdf2_0.
	self assert: (File readTesterOn: '%PDF-1.12345') parser readHeaderVersion = (Version major: 1 minor: 12345).
	self assert: (File readTesterOn: '%PDF-1.2
 %âãÏÓ') parser readHeaderVersion = Version pdf1_2
%
method: SimpleObjectTests
testHeaderReadErrors
	self should: [(File readTesterOn: '%%PDF-1.0') parser readHeaderVersion] raise: ReadError.
	[(File readTesterOn: '%%PDF-1.0') parser readHeaderVersion] on: ReadError do: [:ex |
		self assert: ex description = '"%%PDF" is no PDF header! "%PDF-" expected.'].
	self should: [(File readTesterOn: 'PDF-1.0') parser readHeaderVersion] raise: ReadError.
	[(File readTesterOn: 'PDF-1.0') parser readHeaderVersion] on: ReadError do: [:ex |
		self assert: ex description = '"PDF-1" is no PDF header! "%PDF-" expected.']
%
method: SimpleObjectTests
testHeaderVersion
	self assert: Header example pdfVersion = Version pdf1_0.
	self assert: Header example version = Version pdf1_7.
	self assert: Header example version pdfSource = 'PDF-1.7'.
%
method: SimpleObjectTests
testHeaderWrite
	self assert: Header example pdfSource = '%PDF-1.7'.
	self assert: (Header version: (Version major: 1 minor: 12345)) pdfSource = '%PDF-1.12345'.
%
method: SimpleObjectTests
testNameLimits
	self shouldnt: [#abcdefghijklmnopqrstuvwxyz asPDF] raise: Error.
	self shouldnt: [(String new: 127 withAll: $X) asSymbol asPDF] raise: Error.
	self should: [(String new: 128 withAll: $X) asSymbol asPDF] raise: Error
%
method: SimpleObjectTests
testNameRead
	self assert: (File readTesterOn: '/ /Name1') readObject = #'' asPDF.
	self assert: (File readTesterOn: '/Name1') readObject = #Name1 asPDF.
	self assert: (File readTesterOn: '/ASomewhatLongerName') readObject = #ASomewhatLongerName asPDF.
	self assert: (File readTesterOn: '/A;Name_With-Various***Characters?') readObject = #'A;Name_With-Various***Characters?' asPDF.
	self assert: (File readTesterOn: '/1.2') readObject = #'1.2' asPDF.
	self assert: (File readTesterOn: '/$$') readObject = #'$$' asPDF.
	self assert: (File readTesterOn: '/@pattern') readObject = #'@pattern' asPDF.
	self assert: (File readTesterOn: '/.notdef') readObject = #'.notdef' asPDF.
	self assert: (File readTesterOn: '/lime#20Green') readObject = #'lime Green' asPDF.
	self assert: (File readTesterOn: '/paired#28#29parentheses') readObject = #'paired()parentheses' asPDF.
	self assert: (File readTesterOn: '/The_Key_of_F#23_Minor') readObject = #'The_Key_of_F#_Minor' asPDF.
	self assert: (File readTesterOn: '/A#42') readObject = #AB asPDF
%
method: SimpleObjectTests
testNameReadValues
	self assert: (File readTesterOn: '/') readObject asSmalltalkValue = #''.
	self assert: (File readTesterOn: '/Name1') readObject asSmalltalkValue = #Name1.
	self assert: (File readTesterOn: '/Name1 ') readObject asSmalltalkValue = #Name1.
	self assert: (File readTesterOn: '/Name1]') readObject asSmalltalkValue = #Name1.
	self assert: (File readTesterOn: '/Name1%') readObject asSmalltalkValue = #Name1.
	self assert: (File readTesterOn: '/Name1(') readObject asSmalltalkValue = #Name1.
	self assert: (File readTesterOn: '/Name1 /anotherName') readObject asSmalltalkValue = #Name1.
	self assert: (File readTesterOn: '/Name1
/anotherName') readObject asSmalltalkValue = #Name1.
	self assert: (File readTesterOn: '/ASomewhatLongerName') readObject asSmalltalkValue = #ASomewhatLongerName.
	self assert: (File readTesterOn: '/A;Name_With-Various***Characters?') readObject asSmalltalkValue = #'A;Name_With-Various***Characters?'.
	self assert: (File readTesterOn: '/1.2') readObject asSmalltalkValue = #'1.2'.
	self assert: (File readTesterOn: '/$$') readObject asSmalltalkValue = #'$$'.
	self assert: (File readTesterOn: '/@pattern') readObject asSmalltalkValue = #'@pattern'.
	self assert: (File readTesterOn: '/.notdef') readObject asSmalltalkValue = #'.notdef'.
	self assert: (File readTesterOn: '/lime#20Green') readObject asSmalltalkValue = #'lime Green'.
	self assert: (File readTesterOn: '/paired#28#29parentheses') readObject asSmalltalkValue = #'paired()parentheses'.
	self assert: (File readTesterOn: '/The_Key_of_F#23_Minor') readObject asSmalltalkValue = #'The_Key_of_F#_Minor'.
	self assert: (File readTesterOn: '/A#42') readObject asSmalltalkValue = #AB
%
method: SimpleObjectTests
testNameVersion
	self assert: (File readTesterOn: '/Name1') readObject pdfVersion = Version pdf1_0.
	self assert: (File readTesterOn: '/Name#A8') readObject pdfVersion = Version pdf1_2.
	self assert: (File readTesterOn: '123') readObject pdfVersion = Version pdf1_0.
	self assert: (File readTesterOn: '( This is a string )') readObject pdfVersion = Version pdf1_0
%
method: SimpleObjectTests
testNameWrite
	self assert: #'' asPDF pdfSource = '/'.
	self assert: #Name1 asPDF pdfSource = '/Name1'.
	self assert: #ASomewhatLongerName asPDF pdfSource = '/ASomewhatLongerName'.
	self assert: #'A;Name_With-Various***Characters?' asPDF pdfSource = '/A;Name_With-Various***Characters?'.
	self assert: #'1.2' asPDF pdfSource = '/1.2'.
	self assert: #'$$' asPDF pdfSource = '/$$'.
	self assert: #'@pattern' asPDF pdfSource = '/@pattern'.
	self assert: #'.notdef' asPDF pdfSource = '/.notdef'.
	self assert: #'lime Green' asPDF pdfSource = '/lime#20Green'.
	self assert: #'paired()parentheses' asPDF pdfSource = '/paired#28#29parentheses'.
	self assert: #'The_Key_of_F#_Minor' asPDF pdfSource = '/The_Key_of_F#23_Minor'.
	self assert: #AB asPDF pdfSource = '/AB'.
	self assert: #'A B' asPDF pdfSource = '/A#20B'
%
method: SimpleObjectTests
testNullRead
	| file first second |
	self assert: (File readTesterOn: ' null ') readObject = nil.
	self assert: (File readTesterOn: 'null%with a comment') readObject = nil.
	file := File readTesterOn: '/name null%with a comment'.
	first := file readObject.
	second := file readObject.
	self assert: first = #name asPDF.
	self assert: second = nil.
	self assert: file readObject isNil
%
method: SimpleObjectTests
testNullWrite
	self assert: nil pdfSource = 'null'
%
method: SimpleObjectTests
testNumberRead
	self assert: (File readTesterOn: '123') readObject = 123 asPDF.
	self assert: (File readTesterOn: ' 	123 	') readObject = 123 asPDF.
	self assert: (File readTesterOn: '43445') readObject = 43445 asPDF.
	self assert: (File readTesterOn: '+17') readObject = 17 asPDF.
	self assert: (File readTesterOn: '-98') readObject = -98 asPDF.
	self assert: (File readTesterOn: '0') readObject = 0 asPDF.
	self assert: (File readTesterOn: '34.5') readObject = 34.5 asPDF.
	self assert: (File readTesterOn: '-3.62') readObject = -3.62 asPDF.
	self assert: (File readTesterOn: '+123.6') readObject = 123.6 asPDF.
	self assert: (File readTesterOn: '4.') readObject printString = '4'.
	self assert: (File readTesterOn: '-.002') readObject = -0.002 asPDF.
	self assert: (File readTesterOn: '0.0') readObject = 0 asPDF.
	self assert: (File readTesterOn: '-0.0') readObject = 0 asPDF.
	self assert: (File readTesterOn: '0.0000012345') readObject printString = '0'.
	self deny: (File readTesterOn: '0.0000012345') readObject = 0 asPDF.
	self assert: (File readTesterOn: '0.0000012345') readObject content = 1.2345e-6.
%
method: SimpleObjectTests
testNumberWrite
	self assert: 123 asPDF pdfSource = '123'.
	self assert: 43445 asPDF pdfSource = '43445'.
	self assert: 17 asPDF pdfSource = '17'.
	self assert: -98 asPDF pdfSource = '-98'.
	self assert: 0 asPDF pdfSource = '0'.
	self assert: 0 negated asPDF pdfSource = '0'.
	self assert: 34.5 asPDF pdfSource = '34.5'.
	self assert: -3.62 asPDF pdfSource = '-3.62'.
	self assert: 123.6 asPDF pdfSource = '123.6'.
	self assert: 4 asPDF pdfSource = '4'.
	self assert: -0.002 asPDF pdfSource = '-0.002'.
	self assert: 0.123456789 asPDF pdfSource = '0.12346'.
	self assert: 0.00000123 asPDF pdfSource = '0'.
	self assert: (55 - 0.000005) asPDF pdfSource = '55'.
	self assert: (55 - 0.00000191) asPDF pdfSource = '55'.
	self assert: (55 - 0.00001) asPDF pdfSource = '54.99999'.
	self assert: (55 + 0.00001) asPDF pdfSource = '55.00001'.
	self assert: (55 + 0.000001) asPDF pdfSource = '55'.
%
method: SimpleObjectTests
testRead
	self assert: (File readTesterOn: ' null ') readObject = nil.
	self assert: (File readTesterOn: ' true ') readObject = true.
	self assert: (File readTesterOn: ' false ') readObject = false.
	self assert: (File readTesterOn: '123') readObject = (Number on: 123).
	self assert: (File readTesterOn: '123') readObject = 123 asPDF.
	self assert: (File readTesterOn: '43445') readObject = 43445 asPDF.
	self assert: (File readTesterOn: '+17') readObject = 17 asPDF.
	self assert: (File readTesterOn: '-98') readObject = -98 asPDF.
	self assert: (File readTesterOn: '0') readObject = 0 asPDF.
	self assert: (File readTesterOn: '34.5') readObject = 34.5 asPDF.
	self assert: (File readTesterOn: '-3.62') readObject = -3.62 asPDF.
	self assert: (File readTesterOn: '+123.6') readObject = 123.6 asPDF.
	self assert: (File readTesterOn: '4.') readObject printString = '4'.
	self assert: (File readTesterOn: '-.002') readObject = -0.002 asPDF.
	self assert: (File readTesterOn: '0.0') readObject = 0 asPDF.
	self assert: (File readTesterOn: '/') readObject = #'' asPDF.
	self assert: (File readTesterOn: '/Name1') readObject = #Name1 asPDF.
	self assert: (File readTesterOn: '  /Name1 ') readObject = #Name1 asPDF.
	self assert: (File readTesterOn: '/Name1]') readObject = #Name1 asPDF.
	self assert: (File readTesterOn: '/A;Name_With-Various***Characters?') readObject = #'A;Name_With-Various***Characters?' asPDF.
	self assert: (File readTesterOn: '/1.2') readObject = #'1.2' asPDF.
	self assert: (File readTesterOn: '/$$') readObject = #'$$' asPDF.
	self assert: (File readTesterOn: '/@pattern') readObject = #'@pattern' asPDF.
	self assert: (File readTesterOn: '/.notdef') readObject = #'.notdef' asPDF.
	self assert: (File readTesterOn: '/lime#20Green') readObject = #'lime Green' asPDF.
	self assert: (File readTesterOn: '/A#42') readObject = #AB asPDF.
	self assert: (File readTesterOn: '( This is a string )') readObject = ' This is a string ' asPDF.
	self assert: (File readTesterOn: '(Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ) .)') readObject = 'Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ) .' asPDF.
	self assert: (File readTesterOn: '()') readObject = String new asPDF.
	self assert: (File readTesterOn: '(Unbalanced parenthesis \(...\)\) quoted.)') readObject = 'Unbalanced parenthesis (...)) quoted.' asPDF.
	self assert: (File readTesterOn: '(This string contains \245two octal characters\307.)') readObject pdfSource = '(This string contains \245two octal characters\307.)'.
	self assert: (File readTesterOn: '  		
		(leading whitespace)') readObject = 'leading whitespace' asPDF.
	self assert: (File readTesterOn: '<4E6F762073686D6F7A206B6120706F702E>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '< 4E6F762073686D6F7A206B6120706F702E >') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<4e6f762073686d6f7a206b6120706f702e>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<4E6F76207	3686D6F7A20
6B6120706F7
02E>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<901FA3>') readObject = ((PDF classAt: #EncodedString) content: #[144 31 163])
%
method: SimpleObjectTests
testReadObjects
	| file first |
	self assert: (File readTesterOn: '/abc') readObject = #abc asPDF.
	self should: [(File readTesterOn: 'abc') readObject] raise: ReadError.
	[(File readTesterOn: 'abc') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Token "abc" not recognized'].
	file := File readTesterOn: '/abc% comment ( /% ) blah blah blah
123'.
	first := file readObject.
	self assert: first = #abc asPDF.
	self assert: file readObject = 123 asPDF
%
method: SimpleObjectTests
testReadTokens
	| rst |
	rst := (File readTesterOn: 'abc% comment ( /% ) blah blah blah
123') parser.
	self assert: rst nextToken = #abc.
	self assert: rst nextToken = '123'.
	rst := (File readTesterOn: ' /abc (bb()bb) [ true << <aa> false % ') parser.
	self assert: rst nextToken = '/'.
	self assert: rst nextToken = #abc.
	self assert: rst nextToken = '('.
	self assert: rst nextToken = #bb.
	self assert: rst nextToken = '('.
	self assert: rst nextToken = ')'.
	self assert: rst nextToken = #bb.
	self assert: rst nextToken = ')'.
	self assert: rst nextToken = '['.
	self assert: rst nextToken = #true.
	self assert: rst nextToken = '<<'.
	self assert: rst nextToken = '<'.
	self assert: rst nextToken = #aa.
	self assert: rst nextToken = '>'.
	self assert: rst nextToken = #false.
	self assert: rst atEnd not.
	self assert: rst nextToken isNil.
	self assert: rst atEnd
%
method: SimpleObjectTests
testSkipWhitespace
	| parser |
	parser := (File readTesterOn: '   ( This is a string )') parser.
	parser skipWhitespace.
	self assert: parser next = $(.
	parser := (File readTesterOn: '  		 ( This is a string )') parser.
	parser skipWhitespace.
	self assert: parser next = $(.
	parser := (File readTesterOn: '  	% blah blah blah...
	 ( This is a string )') parser.
	parser skipWhitespace.
	self assert: parser next = $(
%
category: 'tests'
method: StreamTests
testAddFilters
	| stream dict |
	dict := Valuemap new.
	stream := PDF Stream on: dict internal: 'abcdef'.
	self deny: (stream hasKey: #Filter).
	stream filter: #ASCIIHexDecode.
	self assert: stream Filter asSmalltalkValue = #ASCIIHexDecode.
	stream filter: nil.
	self deny: (stream hasKey: #Filter).
	stream addFilter: #FlateDecode.
	self assert: stream Filter asSmalltalkValue = #FlateDecode.
	stream addFilter: #ASCII85Decode.
	self assert: stream Filter asSmalltalkValue = #(#ASCII85Decode #FlateDecode).
	stream addFilter: #ASCIIHexDecode.
	self assert: stream Filter asSmalltalkValue = #(#ASCIIHexDecode #ASCII85Decode #FlateDecode).
	stream filter: #ASCIIHexDecode.
	self assert: stream Filter asSmalltalkValue = #ASCIIHexDecode
%
method: StreamTests
testASCII85
	self assert: ((PDF classAt: #ASCII85Decode) internal: (PDF classAt: #Filter) exampleString) external = (PDF classAt: #ASCII85Decode) exampleEncodedString.
	self assert: ((PDF classAt: #ASCII85Decode) external: (PDF classAt: #ASCII85Decode) exampleEncodedString) internal = (PDF classAt: #Filter) exampleString.
	self assert: ((PDF classAt: #ASCII85Decode) internal: 'Hello World!') external = '87cURD]i,"Ebo80~>'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '87cURD]i,"Ebo80~>') internal = 'Hello World!'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '87zURD]i,"Ebo80~>') internal class == ReadError.
	self assert: ((PDF classAt: #ASCII85Decode) external: '87zURD]i,"Ebo80~>') internal description = 'Illegal character in ASCII85 encoded string'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '87vURD]i,"Ebo80~>') internal class == ReadError.
	self assert: ((PDF classAt: #ASCII85Decode) external: '87vURD]i,"Ebo80~>') internal description = 'Illegal character in ASCII85 encoded string'.
	self assert: ((PDF classAt: #ASCII85Decode) internal: (String new: 4 withAll: 0 asCharacter)) external = 'z~>'.
	self assert: ((PDF classAt: #ASCII85Decode) external: 'z~>') internal = (String new: 4 withAll: 0 asCharacter).
	self assert: ((PDF classAt: #ASCII85Decode) external: 'z') internal = (String new: 4 withAll: 0 asCharacter).
	self assert: ((PDF classAt: #ASCII85Decode) internal: (String new: 3 withAll: 0 asCharacter)) external = '!!!!~>'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '!!!!~>') internal = (String new: 3 withAll: 0 asCharacter).
	self assert: ((PDF classAt: #ASCII85Decode) internal: (String new: 2 withAll: 0 asCharacter)) external = '!!!~>'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '!!!~>') internal = (String new: 2 withAll: 0 asCharacter).
	self assert: ((PDF classAt: #ASCII85Decode) internal: (String with: 0 asCharacter)) external = '!!~>'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '!!~>') internal = (String with: 0 asCharacter).
	self assert: ((PDF classAt: #ASCII85Decode) external: '!~>') internal class == ReadError.
	self assert: ((PDF classAt: #ASCII85Decode) external: '!~>') internal description = 'Decoding error in ASCII85 encoded string'.
	self assert: ((PDF classAt: #ASCII85Decode) internal: (String new: 4 withAll: 255 asCharacter)) external = 's8W-!~>'.
	self assert: ((PDF classAt: #ASCII85Decode) external: 's8W-!~>') internal = (String new: 4 withAll: 255 asCharacter).
	self assert: ((PDF classAt: #ASCII85Decode) external: 's8W-"~>') internal class == ReadError.
	self assert: ((PDF classAt: #ASCII85Decode) external: 's8W-"~>') internal description = 'Decoding error in ASCII85 encoded string'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '87cURD
	]i,"Ebo80~>') internal = 'Hello World!'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '
	87cUR
	D]i,"
	Ebo80
	~>') internal = 'Hello World!'.
	self assert: ((PDF classAt: #ASCII85Decode) external: '
	87cUR
	D]i,"
	Ebo80
	~
      >') internal = 'Hello World!'.
%
method: StreamTests
testASCIIHex
	self assert: ((PDF classAt: #ASCIIHexDecode) internal: (PDF classAt: #Filter) exampleString) external = (PDF classAt: #ASCIIHexDecode) exampleEncodedString.
	self assert: ((PDF classAt: #ASCIIHexDecode) external: (PDF classAt: #ASCIIHexDecode) exampleEncodedString) internal = (PDF classAt: #Filter) exampleString.
	self assert: ((PDF classAt: #ASCIIHexDecode) internal: 'abcdef') external = '616263646566>'.
	self assert: ((PDF classAt: #ASCIIHexDecode) internal: #[0 1 2 3 4 5] asString) external = '000102030405>'.
	self assert: ((PDF classAt: #ASCIIHexDecode) external: '616263646566') internal = 'abcdef'.
	self assert: ((PDF classAt: #ASCIIHexDecode) external: '616263646566>') internal = 'abcdef'.
	self assert: ((PDF classAt: #ASCIIHexDecode) external: '000102030405>') internal = #[0 1 2 3 4 5] asString.
	self assert: ((PDF classAt: #ASCIIHexDecode) external: '6') internal = ((PDF classAt: #ASCIIHexDecode) external: '60') internal
%
method: StreamTests
testAveragePredictor
	self assert: ((AveragePredictor offsetLeft: 1) predict: #[1 2 3] withUpperRow: #[0 0 0]) = #[1 2 2].
	self assert: ((AveragePredictor offsetLeft: 1) unpredict: #[1 2 2] withUpperRow: #[0 0 0]) = #[1 2 3].
	self assert: ((AveragePredictor offsetLeft: 1) predict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((AveragePredictor offsetLeft: 1) unpredict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((AveragePredictor offsetLeft: 1) predict: #[10 11 12] withUpperRow: #[6 5 4]) = #[7 4 5].
	self assert: ((AveragePredictor offsetLeft: 1) unpredict: #[7 4 5] withUpperRow: #[6 5 4]) = #[10 11 12].
	self assert: ((AveragePredictor offsetLeft: 1) predict: #[255 0 1] withUpperRow: #[10 11 12]) = #[250 123 251].
	self assert: ((AveragePredictor offsetLeft: 1) unpredict: #[250 123 251] withUpperRow: #[10 11 12]) = #[255 0 1].
	self assert: ((AveragePredictor offsetLeft: 1) predict: #[100 150 200] withUpperRow: #[200 150 100]) = #[0 25 75].
	self assert: ((AveragePredictor offsetLeft: 1) unpredict: #[0 25 75] withUpperRow: #[200 150 100]) = #[100 150 200].
	self assert: ((AveragePredictor offsetLeft: 2) predict: #[1 2 3 4 5 6] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 3 4 4].
	self assert: ((AveragePredictor offsetLeft: 2) unpredict: #[1 2 3 3 4 4] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 4 5 6].
	self assert: ((AveragePredictor offsetLeft: 3) predict: #[1 2 3 4 5 6] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 4 4 5].
	self assert: ((AveragePredictor offsetLeft: 3) unpredict: #[1 2 3 4 4 5] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 4 5 6].
	self assert: ((AveragePredictor offsetLeft: 1) predict: #[] withUpperRow: #[]) = #[].
	self assert: ((AveragePredictor offsetLeft: 1) unpredict: #[] withUpperRow: #[]) = #[].
%
method: StreamTests
testDecodingError
	| stream dict |
	dict := Valuemap new.
	dict at: #Length put: 20.
	dict at: #Filter put: #DCTDecode.
	stream := PDF Stream on: dict external: 'abcdefghijklmnopqrst'.
	self assert: stream size = 2.
	self assert: stream Length = 20 asPDF.
	self assert: stream Filter = #DCTDecode asPDF.
	self shouldnt: [stream internal] raise: Error.
	self assert: (stream internal isKindOf: Unsupported).
	self assert: stream internal description = 'DCTDecode is not supported (yet)'.
	self shouldnt: [stream internal] raise: Error
%
method: StreamTests
testEncodingError
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #DCTDecode.
	stream := PDF Stream on: dict internal: 'abcdef'.
	self assert: stream size = 2.
	self assert: stream Length = 0 asPDF.
	self assert: stream Filter = #DCTDecode asPDF.
	self shouldnt: [stream external] raise: Error.
	self assert: (stream external isKindOf: Unsupported).
	self assert: stream external description = 'DCTDecode is not supported (yet)'.
	self shouldnt: [stream external] raise: Error
%
method: StreamTests
testFlate
	self assert: ((PDF classAt: #FlateDecode) internal: (PDF classAt: #Filter) exampleString) external = (PDF classAt: #FlateDecode) exampleEncodedString.
	self assert: ((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedString) internal = (PDF classAt: #Filter) exampleString.
	self
		should: [
		((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringNoHeader) internal]
		raise: Exception.
	[
	((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringNoHeader) internal] on: Exception do: [:ex |
			self assert: ex description = 'UserDefinedError: Only DEFLATE (8) is permitted as compression method'].
	self
		should: [
		((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringNoChecksum) internal]
		raise: Exception.
	[
	((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringNoChecksum) internal] on: Exception do: [:ex |
			self assert: ex description = 'UserDefinedError: the ADLER32 checksum is not correct'].
	self
		should: [
		((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringWrongChecksum) internal]
		raise: Exception.
	[
	((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringWrongChecksum) internal] on: Exception do: [:ex |
			self assert: ex description = 'UserDefinedError: the ADLER32 checksum is not correct'].
	self
		should: [
		((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringWrongHeader) internal]
		raise: Exception.
	[
	((PDF classAt: #FlateDecode) external: (PDF classAt: #FlateDecode) exampleEncodedStringWrongHeader) internal] on: Exception do: [:ex |
			self assert: ex description = 'UserDefinedError: the checksum of the header is not correct']
%
method: StreamTests
testFlateDecodingEmpty
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #FlateDecode.
	stream := PDF Stream on: dict external: ''.
	self assert: stream size = 2.
	self assert: stream Length = 0 asPDF.
	self assert: stream Filter = #FlateDecode asPDF.
	self shouldnt: [stream internal] raise: Error.
	self assert: stream internal isEmpty
%
method: StreamTests
testFlateDecodingZippedEmptyGemstone
	"Gemstone zips an empty string to 6 bytes"

	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #FlateDecode.
	stream := PDF Stream on: dict external: #[120 218 0 0 0 1] asString.
	self assert: stream size = 2.
	self assert: stream Length = 6 asPDF.
	self assert: stream Filter = #FlateDecode asPDF.
	self shouldnt: [stream internal] raise: Error.
	self assert: stream internal isEmpty
%
method: StreamTests
testFlateDecodingZippedEmptyVisualWorks
	"VisualWorks zips an empty string to 8 bytes"

	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #FlateDecode.
	stream := PDF Stream on: dict external: #[120 218 3 0 0 0 0 1] asString.
	self assert: stream size = 2.
	self assert: stream Length = 8 asPDF.
	self assert: stream Filter = #FlateDecode asPDF.
	self shouldnt: [stream internal] raise: Error.
	self assert: stream internal isEmpty
%
method: StreamTests
testFlateEncodingEmpty
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #FlateDecode.
	stream := PDF Stream on: dict internal: ''.
	self assert: stream size = 2.
	self assert: (stream Length = 8 asPDF "in VisualWorks" or: [
	                 stream Length = 6 asPDF "in Gemstone"]).
	self assert: stream Filter = #FlateDecode asPDF.
	self shouldnt: [stream external] raise: Error.
	self assert: (stream external asByteArray first: 2) = #[120 218].
	self assert: (stream external asByteArray last: 4) = #[0 0 0 1]
%
method: StreamTests
testMultipleDecodingErrors
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#ASCII85Decode #CCITTFaxDecode).
	stream := PDF Stream on: dict external: '6t(-ZBleA=C1/6%@;I&tBl5%mAU&:~>'.
	self assert: stream size = 2.
	self assert: stream Length = 31 asPDF.
	self assert: stream Filter = #(#ASCII85Decode #CCITTFaxDecode) asPDF.
	self assert: stream external = '6t(-ZBleA=C1/6%@;I&tBl5%mAU&:~>'.
	self assert: stream internal class = Unsupported.
	self assert: stream filter size = 2.
	self assert: stream filter first class == (PDF classAt: #ASCII85Decode).
	self assert: stream filter first internal = 'Das ist ja mal ein Text'.
	self assert: stream filter first external = '6t(-ZBleA=C1/6%@;I&tBl5%mAU&:~>'.
	self assert: stream filter last class == (PDF classAt: #CCITTFaxDecode).
	self assert: stream filter last internal class = Unsupported.
	self assert: stream filter last external = 'Das ist ja mal ein Text'
%
method: StreamTests
testMultipleDecodingErrors2
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#CCITTFaxDecode #ASCII85Decode).
	stream := PDF Stream on: dict external: '6t(-ZBleA=C1/6%@;I&tBl5%mAU&:~>'.
	self assert: stream size = 2.
	self assert: stream Length = 31 asPDF.
	self assert: stream Filter = #(#CCITTFaxDecode #ASCII85Decode) asPDF.
	self assert: stream external = '6t(-ZBleA=C1/6%@;I&tBl5%mAU&:~>'.
	self assert: stream internal class = Unsupported.
	self assert: stream internal description = 'CCITTFaxDecode is not supported (yet)'.
	self assert: stream filter size = 2.
	self assert: stream filter first class == (PDF classAt: #CCITTFaxDecode).
	self assert: stream filter first external = '6t(-ZBleA=C1/6%@;I&tBl5%mAU&:~>'.
	self assert: stream filter first internal class = Unsupported.
	self assert: stream filter last class == (PDF classAt: #ASCII85Decode).
	self assert: stream filter last external class = Unsupported.
	self assert: stream filter last internal class = Unsupported.
	self assert: stream filter first internal = stream filter last external
%
method: StreamTests
testMultipleEncodingErrors
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#ASCII85Decode #CCITTFaxDecode).
	stream := PDF Stream on: dict internal: 'Das ist ja mal ein Text'.
	self assert: stream size = 2.
	self assert: stream Length = 0 asPDF.
	self assert: stream Filter = #(#ASCII85Decode #CCITTFaxDecode) asPDF.
	self assert: stream internal = 'Das ist ja mal ein Text'.
	self assert: stream external class = Unsupported.
	self assert: stream filter size = 2.
	self assert: stream filter first class == (PDF classAt: #ASCII85Decode).
	self assert: stream filter first internal class = Unsupported.
	self assert: stream filter first external class = Unsupported.
	self assert: stream filter last class == (PDF classAt: #CCITTFaxDecode).
	self assert: stream filter last internal = 'Das ist ja mal ein Text'.
	self assert: stream filter last external class = Unsupported
%
method: StreamTests
testMultipleEncodingErrors2
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#CCITTFaxDecode #ASCII85Decode).
	stream := PDF Stream on: dict internal: 'Das ist ja mal ein Text'.
	self assert: stream size = 2.
	self assert: stream Length = 0 asPDF.
	self assert: stream Filter = #(#CCITTFaxDecode #ASCII85Decode) asPDF.
	self assert: stream internal = 'Das ist ja mal ein Text'.
	self assert: stream external class = Unsupported.
	self assert: stream filter size = 2.
	self assert: stream filter first class == (PDF classAt: #CCITTFaxDecode).
	self assert: stream filter last class == (PDF classAt: #ASCII85Decode).
	self assert: stream filter last internal = 'Das ist ja mal ein Text'.
	self assert: stream filter last external = '6t(-ZBleA=C1/6%@;I&tBl5%mAU&:~>'.
	self assert: stream filter first internal = stream filter last external.
	self assert: stream filter first external class = Unsupported.
	self assert: stream filter first external description = 'CCITTFaxDecode is not supported (yet)'
%
method: StreamTests
testMultipleEncodings
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#ASCII85Decode #ASCIIHexDecode).
	stream := PDF Stream on: dict internal: 'Das ist ja mal ein Text'.
	self assert: stream size = 2.
	self assert: stream Length = 61 asPDF.
	self assert: stream Filter = #(#ASCII85Decode #ASCIIHexDecode) asPDF.
	self assert: stream internal = 'Das ist ja mal ein Text'.
	self assert: stream external = '1c.*F2`!3C2E<]P2`*9D2F05U1,(US2DI*W1,(UD2E<Za1,(RB2DmEQ2`*\~>'.
	self assert: (stream filter first isKindOf: (PDF classAt: #ASCII85Decode)).
	self assert: stream filter first external = stream external.
	self assert: stream filter first internal = '44617320697374206A61206D616C2065696E2054657874>'.
	self assert: (stream filter last isKindOf: (PDF classAt: #ASCIIHexDecode)).
	self assert: stream filter last external = stream filter first internal.
	self assert: stream filter last internal = stream internal
%
method: StreamTests
testMultipleEncodingsWithEmptyParameters
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#ASCII85Decode #ASCIIHexDecode).
	dict
		at: #DecodeParams
		put: (Array
			with: PDF Dictionary empty
			with: PDF Dictionary empty).
	stream := PDF Stream on: dict internal: 'Das ist ja mal ein Text'.
	self assert: stream external = '1c.*F2`!3C2E<]P2`*9D2F05U1,(US2DI*W1,(UD2E<Za1,(RB2DmEQ2`*\~>'
%
method: StreamTests
testMultipleEncodingsWithNullParameters
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#ASCII85Decode #ASCIIHexDecode).
	dict at: #DecodeParams put: #(nil nil).
	stream := PDF Stream on: dict internal: 'Das ist ja mal ein Text'.
	self assert: stream external = '1c.*F2`!3C2E<]P2`*9D2F05U1,(US2DI*W1,(UD2E<Za1,(RB2DmEQ2`*\~>'.
%
method: StreamTests
testMultipleEncodingsWithParameters
	| stream dict |
	dict := Valuemap new.
	dict at: #Filter put: #(#ASCII85Decode #ASCIIHexDecode).
	dict
		at: #DecodeParams
		put: (Array
			with: nil
			with: PDF Dictionary empty).
	stream := PDF Stream on: dict internal: 'Das ist ja mal ein Text'.
	self assert: stream external = '1c.*F2`!3C2E<]P2`*9D2F05U1,(US2DI*W1,(UD2E<Za1,(RB2DmEQ2`*\~>'
%
method: StreamTests
testNoPredictor
	self assert: ((NoPredictor offsetLeft: 1) predict: #[1 2 3] withUpperRow: #[0 0 0]) = #[1 2 3].
	self assert: ((NoPredictor offsetLeft: 1) unpredict: #[1 2 3] withUpperRow: #[0 0 0]) = #[1 2 3].
	self assert: ((NoPredictor offsetLeft: 1) predict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((NoPredictor offsetLeft: 1) unpredict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((NoPredictor offsetLeft: 1) predict: #[10 11 12] withUpperRow: #[6 5 4]) = #[10 11 12].
	self assert: ((NoPredictor offsetLeft: 1) unpredict: #[10 11 12] withUpperRow: #[6 5 4]) = #[10 11 12].
	self assert: ((NoPredictor offsetLeft: 1) predict: #[1 2 3] withUpperRow: #[10 11 12]) = #[1 2 3].
	self assert: ((NoPredictor offsetLeft: 1) unpredict: #[1 2 3] withUpperRow: #[10 11 12]) = #[1 2 3].
	self assert: ((NoPredictor offsetLeft: 1) predict: #[] withUpperRow: #[]) = #[].
	self assert: ((NoPredictor offsetLeft: 1) unpredict: #[] withUpperRow: #[]) = #[].
%
method: StreamTests
testPaethPredictor
	self assert: ((PaethPredictor offsetLeft: 1) predict: #[1 2 3] withUpperRow: #[0 0 0]) = #[1 1 1].
	self assert: ((PaethPredictor offsetLeft: 1) unpredict: #[1 1 1] withUpperRow: #[0 0 0]) = #[1 2 3].
	self assert: ((PaethPredictor offsetLeft: 1) predict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((PaethPredictor offsetLeft: 1) unpredict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((PaethPredictor offsetLeft: 1) predict: #[10 11 12] withUpperRow: #[6 5 4]) = #[4 1 1].
	self assert: ((PaethPredictor offsetLeft: 1) unpredict: #[4 1 1] withUpperRow: #[6 5 4]) = #[10 11 12].
	self assert: ((PaethPredictor offsetLeft: 1) predict: #[255 0 1] withUpperRow: #[10 11 12]) = #[245 1 1].
	self assert: ((PaethPredictor offsetLeft: 1) unpredict: #[245 1 1] withUpperRow: #[10 11 12]) = #[255 0 1].
	self assert: ((PaethPredictor offsetLeft: 1) predict: #[100 150 200] withUpperRow: #[200 150 100]) = #[156 50 100].
	self assert: ((PaethPredictor offsetLeft: 1) unpredict: #[156 50 100] withUpperRow: #[200 150 100]) = #[100 150 200].
	self assert: ((PaethPredictor offsetLeft: 2) predict: #[1 2 3 4 5 6] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 2 2 2 2].
	self assert: ((PaethPredictor offsetLeft: 2) unpredict: #[1 2 2 2 2 2] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 4 5 6].
	self assert: ((PaethPredictor offsetLeft: 3) predict: #[1 2 3 4 5 6] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 3 3 3].
	self assert: ((PaethPredictor offsetLeft: 3) unpredict: #[1 2 3 3 3 3] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 4 5 6].
	self assert: ((PaethPredictor offsetLeft: 1) predict: #[] withUpperRow: #[]) = #[].
	self assert: ((PaethPredictor offsetLeft: 1) unpredict: #[] withUpperRow: #[]) = #[].
%
method: StreamTests
testPDFVersion
	self assert: PDF Stream example pdfVersion = Version pdf1_0.
	self assert: PDF Stream example1_2 pdfVersion = Version pdf1_2.
	self assert: PDF Stream example1_5 pdfVersion = Version pdf1_5.
%
method: StreamTests
testRead
	self assert: (File readTesterOn: '<</Length 0>>stream' , self stringLf , 'endstream') readObject = (PDF Stream on: (Valuemap with: #Length -> 0) internal: '').
	self assert: (File readTesterOn: '<< /Length 68 >>		% was: (An indirect reference to object 8)
stream' , self stringLf , 'BT
	/F1 12 Tf
	72 712 Td
	( A stream with an indirect length ) Tj
ET' , self stringLf , 'endstream') readObject = (PDF Stream
			on: (Valuemap with: #Length -> 68)
			internal: 'BT
	/F1 12 Tf
	72 712 Td
	( A stream with an indirect length ) Tj
ET')
%
method: StreamTests
testReadErrors
	| file stream |
	self should: [(File readTesterOn: '<</Lenth 0>>stream' , self stringLf , 'endstream') readObject] raise: ReadError.
	[(File readTesterOn: '<</Lenth 0>>stream' , self stringLf , 'endstream') readObject] on: ReadError do: [:ex |
		self assert: ex description = 'The stream dictonary has no Length entry'].
	file := File readTesterOn: '<</Length 0>>stream' , (String with: Character cr) , 'endstream'.
	self should: [file readObject] raise: ReadError.
	file := File readTesterOn: '<</Length 0>>stream' , (String with: Character cr) , 'endstream'.
	[file readObject] on: ReadError do: [:ex | ex resume].
	self assert: file parser errors first description = 'Read "$e". "<Character lf>" expected'.
	file := File readTesterOn: '<</Length 0>>stream' , (String with: Character cr) , 'endstream'.
	stream := [file readObject] on: ReadError do: [:ex |
		self assert: ex description = 'Read "$e". "<Character lf>" expected'.
		ex resume].
	self assert: stream asSmalltalkValue = (PDF Dictionary with: #Length -> 0) asSmalltalkValue
%
method: StreamTests
testReadHexDecode
	| input stream |
	input := '<<
	/Filter /ASCIIHexDecode		% For readability in this example
	/Length 153
>>
stream' , self stringLf , '	00 0000 FFFF
	01 0032 0000
	01 007A 0000
	01 00AC 0000
	01 00EE 0000
	01 0172 0000
	01 01BE 0000
	02 000A 0000
	02 000A 0001
	02 000A 0002
	01 01D8 0000
endstream'.
	stream := (File readTesterOn: input) readObject.
	self assert: stream internal size = 55.
	self assert: (stream internal at: 1) asInteger = 0.
	self assert: (stream internal at: 2) asInteger = 0.
	self assert: (stream internal at: 3) asInteger = 0.
	self assert: (stream internal at: 4) asInteger = 255.
	self assert: (stream internal at: 5) asInteger = 255.
	self assert: (stream internal at: 51) asInteger = 1.
	self assert: (stream internal at: 52) asInteger = 1.
	self assert: (stream internal at: 53) asInteger = 216.
	self assert: (stream internal at: 54) asInteger = 0.
	self assert: (stream internal at: 55) asInteger = 0
%
method: StreamTests
testReadStreamWithBlank
	"found spaces after >stream< and LF in a Microsof bill - not sure if this is legal"
	self assert: (File readTesterOn: '<</Length 0>>stream' , self stringLf , 'endstream') readObject = (PDF Stream on: (Valuemap with: #Length -> 0) internal: '').
	self assert: (File readTesterOn: '<</Length 0>>stream' , (String with: Character cr), self stringLf , 'endstream') readObject = (PDF Stream on: (Valuemap with: #Length -> 0) internal: '').
	self assert: (File readTesterOn: '<</Length 0>>stream ' , self stringLf , 'endstream') readObject = (PDF Stream on: (Valuemap with: #Length -> 0) internal: '').
	self assert: (File readTesterOn: '<</Length 0>>stream ' , (String with: Character cr), self stringLf , 'endstream') readObject = (PDF Stream on: (Valuemap with: #Length -> 0) internal: '').
	self assert: (File readTesterOn: '<</Length 0>>stream      ' , self stringLf , 'endstream') readObject = (PDF Stream on: (Valuemap with: #Length -> 0) internal: '').
%
method: StreamTests
testStreamLengthTooSmall
	| stream file |
	file := File readTesterOn: '<</Length 9>>
stream
abcdefghij
endstream' withLf.
	self should: [stream := file readObject] raise: ExtraCharacterInStreamError.
	self assert: stream isNil
%
method: StreamTests
testStreamLengthTooSmallByTwo
	| stream file |
	file := File readTesterOn: '<</Length 9>>
stream
abcdefghijk
endstream' withLf.
	self
		should: [
		[stream := file readObject] on: FileError do: [:ex |
			self assert: ex class = ExtraCharacterInStreamError.
			self assert: ex messageText = 'Extra character in stream'.
			ex resume]]
		raise: ReadError.
	self assert: stream isNil.
	self assert: file parser errors isEmpty.
	self assert: file parser next = $k.
	file := File readTesterOn: '<</Length 9>>
stream
abcdefghijk
endstream' withLf.
	[[stream := file readObject] on: FileError do: [:ex | ex resume]] on: ReadError do: [:ex |
		self assert: ('Read #*k*. "endstream" expected' match: ex messageText)]
%
method: StreamTests
testStreamLengthTooSmallHandled
	| stream file |
	file := File readTesterOn: '<</Length 9>>
stream
abcdefghij
endstream' withLf.
	[stream := file readObject] on: FileError do: [:ex | 
		self assert: ex class = ExtraCharacterInStreamError.
		self assert: ex messageText = 'Extra character in stream'.
		ex resume].
	self assert: stream Length = 9 asPDF.
	self assert: stream internal = 'abcdefghi'.
	self assert: file parser errors isEmpty.
	self assert: file parser atEnd
%
method: StreamTests
testStreamLengthTooSmallHandledWithWhitespace
	| stream file |
	file := File readTesterOn: '<</Length 9>>
stream
abcdefghij
 
	  
endstream' withLf.
	[stream := file readObject] on: FileError do: [:ex | 
		self assert: ex class = ExtraCharacterInStreamError.
		self assert: ex messageText = 'Extra character in stream'.
		ex resume].
	self assert: stream Length = 9 asPDF.
	self assert: stream internal = 'abcdefghi'.
	self assert: file parser errors isEmpty.
	self assert: file parser atEnd
%
method: StreamTests
testSubPredictor
	self assert: ((SubPredictor offsetLeft: 1) predict: #[1 2 3] withUpperRow: #[0 0 0]) = #[1 1 1].
	self assert: ((SubPredictor offsetLeft: 1) unpredict: #[1 1 1] withUpperRow: #[0 0 0]) = #[1 2 3].
	self assert: ((SubPredictor offsetLeft: 1) predict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((SubPredictor offsetLeft: 1) unpredict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((SubPredictor offsetLeft: 1) predict: #[10 11 12] withUpperRow: #[6 5 4]) = #[10 1 1].
	self assert: ((SubPredictor offsetLeft: 1) unpredict: #[10 1 1] withUpperRow: #[6 5 4]) = #[10 11 12].
	self assert: ((SubPredictor offsetLeft: 1) predict: #[255 0 1] withUpperRow: #[10 11 12]) = #[255 1 1].
	self assert: ((SubPredictor offsetLeft: 1) unpredict: #[255 1 1] withUpperRow: #[10 11 12]) = #[255 0 1].
	self assert: ((SubPredictor offsetLeft: 2) predict: #[1 2 3 4 5 6] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 2 2 2 2].
	self assert: ((SubPredictor offsetLeft: 2) unpredict: #[1 2 2 2 2 2] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 4 5 6].
	self assert: ((SubPredictor offsetLeft: 3) predict: #[1 2 3 4 5 6] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 3 3 3].
	self assert: ((SubPredictor offsetLeft: 3) unpredict: #[1 2 3 3 3 3] withUpperRow: #[0 0 0 0 0 0]) = #[1 2 3 4 5 6].
	self assert: ((SubPredictor offsetLeft: 1) predict: #[] withUpperRow: #[]) = #[].
	self assert: ((SubPredictor offsetLeft: 1) unpredict: #[] withUpperRow: #[]) = #[].
%
method: StreamTests
testUpPredictor
	self assert: ((UpPredictor offsetLeft: 1) predict: #[1 2 3] withUpperRow: #[0 0 0]) = #[1 2 3].
	self assert: ((UpPredictor offsetLeft: 1) unpredict: #[1 2 3] withUpperRow: #[0 0 0]) = #[1 2 3].
	self assert: ((UpPredictor offsetLeft: 1) predict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((UpPredictor offsetLeft: 1) unpredict: #[0 0 0] withUpperRow: #[0 0 0]) = #[0 0 0].
	self assert: ((UpPredictor offsetLeft: 1) predict: #[10 11 12] withUpperRow: #[6 5 4]) = #[4 6 8].
	self assert: ((UpPredictor offsetLeft: 1) unpredict: #[4 6 8] withUpperRow: #[6 5 4]) = #[10 11 12].
	self assert: ((UpPredictor offsetLeft: 1) predict: #[1 2 3] withUpperRow: #[10 11 12]) = #[247 247 247].
	self assert: ((UpPredictor offsetLeft: 1) unpredict: #[247 247 247] withUpperRow: #[10 11 12]) = #[1 2 3].
	self assert: ((UpPredictor offsetLeft: 1) predict: #[] withUpperRow: #[]) = #[].
	self assert: ((UpPredictor offsetLeft: 1) unpredict: #[] withUpperRow: #[]) = #[].
%
method: StreamTests
testWrite
	self assert: PDF Stream example pdfSource = ('<<	/Length 68	>>' , self stringLf , 'stream' , self stringLf , 'BT
	/F1 12 Tf
	72 712 Td
	( A stream with an indirect length ) Tj
ET' , self stringLf , 'endstream').
	self assert: PDF Stream example pdfSource withLf = '<<	/Length 68	>>
stream
BT
	/F1 12 Tf
	72 712 Td
	( A stream with an indirect length ) Tj
ET
endstream' withLf.
	self assert: (File readTesterOn: PDF Stream example pdfSource) readObject = PDF Stream example
%
method: StreamTests
testZipPredictor
	self assert: ((ZipFilter testerWith: nil) unpredicted: #[0 1 2 3]) asByteArray = #[0 1 2 3].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 10
		with: #Columns -> 3)) unpredicted: #[0 1 2 3]) asByteArray = #[1 2 3].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 10
		with: #Columns -> 3)) predicted: #[1 2 3]) asByteArray = #[0 1 2 3].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 11
		with: #Columns -> 3)) unpredicted: #[1 1 1 1 1 4 1 1]) asByteArray = #[1 2 3 4 5 6].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 11
		with: #Columns -> 3)) predicted: #[1 2 3 4 5 6]) asByteArray = #[1 1 1 1 1 4 1 1].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 12
		with: #Columns -> 3)) unpredicted: #[2 1 2 3 2 3 3 3]) asByteArray = #[1 2 3 4 5 6].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 12
		with: #Columns -> 3)) predicted: #[1 2 3 4 5 6]) asByteArray = #[2 1 2 3 2 3 3 3].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 13
		with: #Columns -> 3)) unpredicted: #[3 1 2 2 3 4 2 2]) asByteArray = #[1 2 3 4 5 6].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 13
		with: #Columns -> 3)) predicted: #[1 2 3 4 5 6]) asByteArray = #[3 1 2 2 3 4 2 2].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 14
		with: #Columns -> 3)) unpredicted: #[4 1 1 1 4 3 1 1]) asByteArray = #[1 2 3 4 5 6].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 14
		with: #Columns -> 3)) predicted: #[1 2 3 4 5 6]) asByteArray = #[4 1 1 1 4 3 1 1].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 15
		with: #Columns -> 3)) unpredicted: #[0 1 2 3]) asByteArray = #[1 2 3].
	self assert: ((ZipFilter testerWith: (PDF Dictionary
		with: #Predictor -> 15
		with: #Columns -> 3)) predicted: #[1 2 3]) asByteArray = #[0 1 2 3]
%
category: 'tests'
method: StringTests
testEncryptedStringRead
	self assert: (File readEncryptedTesterOn: '( This is a string )') readObject = (PDF String content: ' This is a string ' asByteArray encrypted: true).
%
method: StringTests
testStringLimits
	self shouldnt: [ContentString content: (ByteArray new: 32767 withAll: $X asInteger)] raise: Error.
	self should: [ContentString content: (ByteArray new: 32768 withAll: $X asInteger)] raise: Error
%
method: StringTests
testStringLineBreaks
	self assert: (PDF String asPDFEndOfLines: ' This is a string ') = ' This is a string '.
	self assert: (PDF String asPDFEndOfLines: ' This is
a string ') = (' This is', self stringLf, 'a string ').
%
method: StringTests
testStringRead
	self assert: (File readTesterOn: '()') readObject = '' asPDF.
	self assert: (File readTesterOn: '( This is a string )') readObject = ' This is a string ' asPDF.
	self assert: (File readTesterOn: '(Strings may contain newlines
and such .)') readObject = 'Strings may contain newlines
and such .' asPDF.
	self assert: (File readTesterOn: '(Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ) .)') readObject = 'Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ) .' asPDF.
	self assert: (File readTesterOn: '()') readObject = String new asPDF.
	self assert: (File readTesterOn: '(It has zero ( 0 ) length .)') readObject = 'It has zero ( 0 ) length .' asPDF.
	self assert: (File readTesterOn: '(Unbalanced parenthesis \(...\)\) quoted.)') readObject = 'Unbalanced parenthesis (...)) quoted.' asPDF.
	self assert: (File readTesterOn: '(This string contains \245two octal characters\307.)') readObject pdfSource = '(This string contains \245two octal characters\307.)'.
	self assert: (File readTesterOn: '  		
		(leading whitespace)') readObject = 'leading whitespace' asPDF.
	self assert: (File readTesterOn: '<4E6F762073686D6F7A206B6120706F702E>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '  
		<4E6F762073686D6F7A206B6120706F702E>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '< 4E6F762073686D6F7A206B6120706F702E >') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<4e6f762073686d6f7a206b6120706f702e>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<4E6F76207	3686D6F7A20
6B6120706F7
02E>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<901FA3>') readObject = #[144 31 163] asString asPDF.
	self assert: (File readTesterOn: '<901FA>') readObject = #[144 31 160] asString asPDF.
	self assert: (File readTesterOn: '<5468697320537472696E67206973206C6F6E67657220616E6420627265616B73
20696E746F206C696E6573>') readObject = 'This String is longer and breaks into lines' asPDF.
	self assert: (File readTesterOn: '(Backslash with unknown directive \@ is ignored)') readObject = 'Backslash with unknown directive @ is ignored' asPDF
%
method: StringTests
testStringReadExamples
	self assert: (File readTesterOn: '( This is a string )') readObject = ' This is a string ' asPDF.
	self assert: (File readTesterOn: '(Strings may contain newlines
and such .)') readObject = 'Strings may contain newlines
and such .' asPDF.
	self assert: (File readTesterOn: '(Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ) .)') readObject = 'Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ) .' asPDF.
	self assert: (File readTesterOn: '(The following is an empty string .)') readObject = 'The following is an empty string .' asPDF.
	self assert: (File readTesterOn: '()') readObject = String new asPDF.
	self assert: (File readTesterOn: '(It has zero ( 0 ) length .)') readObject = 'It has zero ( 0 ) length .' asPDF
%
method: StringTests
testStringReadHex
	self assert: (File readTesterOn: '<4E6F762073686D6F7A206B6120706F702E>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '< 4E6F762073686D6F7A206B6120706F702E >') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<4e6f762073686d6f7a206b6120706f702e>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<4E6F76207	3686D6F7A20
6B6120706F7
02E>') readObject = 'Nov shmoz ka pop.' asPDF.
	self assert: (File readTesterOn: '<901FA3>') readObject = #[144 31 163] asString asPDF.
	self assert: (File readTesterOn: '<901FA>') readObject = #[144 31 160] asString asPDF.
	self assert: (File readTesterOn: '<5468697320537472696E67206973206C6F6E67657220616E6420627265616B73
20696E746F206C696E6573>') readObject = 'This String is longer and breaks into lines' asPDF
%
method: StringTests
testStringReadLineBreaks
	self assert: (File readTesterOn: '( This is a string )') readObject = ' This is a string ' asPDF.
	self assert: (File readTesterOn: '(These \
two strings \
are the same.)') readObject = 'These two strings are the same.' asPDF.
	self assert: (File readTesterOn: '(These \
two strings \
are the same.)') readObject = (File readTesterOn: '(These two strings are the same.)') readObject.
	self assert: (File readTesterOn: '(This string has an end-of-line at the end of it.
)') readObject = 'This string has an end-of-line at the end of it.
' asPDF.
	self assert: (File readTesterOn: '(So does this one.\n)') readObject = 'So does this one.
' asPDF.
	self assert: (File readTesterOn: '(So does this one.\r)') readObject = 'So does this one.
' asPDF
%
method: StringTests
testStringReadOctalCharacters
	self assert: (File readTesterOn: '(This string contains \245two octal characters\307.)') readObject pdfSource = '(This string contains \245two octal characters\307.)'.
	self assert: (File readTesterOn: '(\0053)') readObject = (String
		with: 5 asCharacter
		with: $3) asPDF.
	self assert: (File readTesterOn: '(\053)') readObject = '+' asPDF.
	self assert: (File readTesterOn: '(\53)') readObject = '+' asPDF
%
method: StringTests
testStringReadParenthesis
	self assert: (File readTesterOn: '(Strings may contain balanced parentheses ( ) and special characters ( * ! & } ^ % and so on ).)') readObject = 'Strings may contain balanced parentheses ( ) and special characters ( * ! & } ^ % and so on ).' asPDF.
	self assert: (File readTesterOn: '(It has zero ( 0 ) length.)') readObject = 'It has zero ( 0 ) length.' asPDF.
	self assert: (File readTesterOn: '(Unbalanced parenthesis are quoted \(.)') readObject = 'Unbalanced parenthesis are quoted (.' asPDF.
	self assert: (File readTesterOn: '(Unbalanced parenthesis are quoted \).)') readObject = 'Unbalanced parenthesis are quoted ).' asPDF.
	self assert: (File readTesterOn: '(Unbalanced parenthesis \(...\)\) quoted.)') readObject = 'Unbalanced parenthesis (...)) quoted.' asPDF.
	self assert: (File readTesterOn: '(Unbalanced parenthesis \(\(\(...\)\) quoted.)') readObject = 'Unbalanced parenthesis (((...)) quoted.' asPDF
%
method: StringTests
testStringWrite
	self assert: '' asPDF pdfSource = '()'.
	self assert: PDF String new pdfSource = '()'.
	self assert: PDF String empty pdfSource = '()'.
	self assert: 'This is a string' asPDF pdfSource = '(This is a string)'.
	self assert: 'Strings may contain newlines
and such.' asPDF pdfSource = ('(Strings may contain newlines' , self stringLf , 'and such.)').
	self assert: 'Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ).' asPDF pdfSource = ('(Strings may contain balanced parentheses ( ) and' , self stringLf , 'special characters ( * ! & } ^ % and so on ).)').
	self assert: 'The following is an empty string.' asPDF pdfSource = '(The following is an empty string.)'.
	self assert: String new asPDF pdfSource = '()'.
	self assert: 'It has zero ( 0 ) length.' asPDF pdfSource = '(It has zero ( 0 ) length.)'.
	self assert: (File readTesterOn: '(This string contains \245two octal characters\307.)') readObject pdfSource = '(This string contains \245two octal characters\307.)'.
	self assert: 'Unbalanced parenthesis (...)) quoted.' asPDF pdfSource = '(Unbalanced parenthesis \(...\)\) quoted.)'.
	self assert: 'Nov shmoz ka pop.' asPDF pdfHexSource = '<4E6F762073686D6F7A206B6120706F702E>'.
	self assert: #[144 31 163] asString asPDF pdfHexSource = '<901FA3>'.
	self assert: #[144 31 160] asString asPDF pdfHexSource = '<901FA0>'.
	self assert: 'This String is longer and breaks into lines' asPDF pdfHexSource = ('<5468697320537472696E67206973206C6F6E67657220616E6420627265616B73' , self stringLf , '20696E746F206C696E6573>')
%
method: StringTests
testStringWriteExamples
	self assert: 'This is a string' asPDF pdfSource = '(This is a string)'.
	self assert: 'Strings may contain newlines
and such.' asPDF pdfSource = ('(Strings may contain newlines' , self stringLf , 'and such.)').
	self assert: 'Strings may contain balanced parentheses ( ) and
special characters ( * ! & } ^ % and so on ).' asPDF pdfSource = ('(Strings may contain balanced parentheses ( ) and' , self stringLf , 'special characters ( * ! & } ^ % and so on ).)').
	self assert: 'The following is an empty string.' asPDF pdfSource = '(The following is an empty string.)'.
	self assert: String new asPDF pdfSource = '()'.
	self assert: 'It has zero ( 0 ) length.' asPDF pdfSource = '(It has zero ( 0 ) length.)'
%
method: StringTests
testStringWriteHex
	self assert: 'Nov shmoz ka pop.' asPDF pdfHexSource = '<4E6F762073686D6F7A206B6120706F702E>'.
	self assert: #[144 31 163] asString asPDF pdfHexSource = '<901FA3>'.
	self assert: #[144 31 160] asString asPDF pdfHexSource = '<901FA0>'.
	self assert: 'This String is longer and breaks into lines' asPDF pdfHexSource = ('<5468697320537472696E67206973206C6F6E67657220616E6420627265616B73' , self stringLf , '20696E746F206C696E6573>')
%
method: StringTests
testStringWriteOctalCharacters
	self assert: (File readTesterOn: '(This string contains \245two octal characters\307.)') readObject pdfSource = '(This string contains \245two octal characters\307.)'.
	self assert: (String
		with: 5 asCharacter
		with: $3) asPDF pdfSource = '(\0053)'.
	self assert: (PDF String content: #[128]) pdfSource = '(\200)'.
	self assert: (PDF String content: #[128]) class = PDF String.
	self assert: (String withAll: 'äöüßÄÖÜ') asPDF pdfSource = '(\344\366\374\337\304\326\334)'
%
method: StringTests
testStringWriteParenthesis
	self assert: 'Strings may contain balanced parentheses ( ) and special characters ( * ! & } ^ % and so on ).' asPDF pdfSource = '(Strings may contain balanced parentheses ( ) and special characters ( * ! & } ^ % and so on ).)'.
	self assert: 'It has zero ( 0 ) length.' asPDF pdfSource = '(It has zero ( 0 ) length.)'.
	self assert: 'Unbalanced parenthesis are quoted (.' asPDF pdfSource = '(Unbalanced parenthesis are quoted \(.)'.
	self assert: 'Unbalanced parenthesis are quoted ).' asPDF pdfSource = '(Unbalanced parenthesis are quoted \).)'.
	self assert: 'Unbalanced parenthesis (...)) quoted.' asPDF pdfSource = '(Unbalanced parenthesis \(...\)\) quoted.)'.
	self assert: 'Unbalanced parenthesis (((...)) quoted.' asPDF pdfSource = '(Unbalanced parenthesis \(\(\(...\)\) quoted.)'
%
method: StringTests
testTextstring
	self assert: (((PDF classAt: #Textstring) fromString: 'abc € § ß 123') isKindOf: (PDF classAt: #Textstring)).
	self assert: ((PDF classAt: #Textstring) content: #[26 31 128 129 130 131 132 133 134 136 137 139 140 141 142 143 144 145 146 150 151 152 157 160]) asString = 'ˆ˜•†‡…—–ƒ‹›‰„“”‘’‚™ŒŠŸš€'.
	self assert: ((PDF classAt: #Textstring) fromString: 'ˆ˜•†‡…—–ƒ‹›‰„“”‘’‚™ŒŠŸš€') content = #[26 31 128 129 130 131 132 133 134 136 137 139 140 141 142 143 144 145 146 150 151 152 157 160]
%
method: StringTests
testTextstringUnicode
	self assert: (#[254 255 0 84 0 101 0 120 0 116 0 32 0 66 0 111 0 120 0 58] asString asPDF isKindOf: (PDF classAt: #Textstring)).
	self assert: #[254 255 0 84 0 101 0 120 0 116 0 32 0 66 0 111 0 120 0 58] asString asPDF asString = 'Text Box:'.
	self assert: (((String with: 173 asCharacter with: 16rae asCharacter) , 'Text Box:') asPDF isKindOf: (PDF classAt: #EncodedString)).
	self assert: ((String with: 173 asCharacter with: 16rae asCharacter) , 'Text Box:') asPDF content = #[173 174 84 101 120 116 32 66 111 120 58]
%
category: 'tests'
method: TrailerTests
testCreationDate
	| trailer |
	trailer := (PDF classAt: #Trailer)
		with: #Size -> 4
		with: #Root -> (PDF Dictionary with: #Type -> #Catalog) newReference
		with: #Info -> (PDF classAt: #DocumentInformation) empty newReference.
	self assert: (trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: trailer Size = 4 asPDF.
	self assert: trailer Info class = (PDF classAt: #DocumentInformation).
	self assert: trailer Info CreationDate class = (PDF classAt: #Date).
	trailer Info at: #CreationDate put: (Timestamp d: 6 m: 2 y: 2012) asLocal.
	self assert: trailer Info CreationDate class = (PDF classAt: #Date).
	self assert: trailer Info CreationDate class = (PDF classAt: #Date).
	trailer Info at: #ModDate put: (Timestamp d: 6 m: 2 y: 2012) asLocal.
	self assert: trailer Info CreationDate class = (PDF classAt: #Date).
	"the FileIdentifier cannot be tested with timestamps, since they are written timezone specific"
	self assert: (trailer hashForFilename: 'test.pdf' andSize: 100) class = PDF String
%
method: TrailerTests
testMD5Hash
	self assert: (PDF String content: (Trailer new md5HashOf: 'Hello World - this is a MD5 teststring')) pdfHexSource = '<2816027FC2340BBEA7DED7ED134D47E4>'
%
method: TrailerTests
testNoCreationDate
	| trailer |
	trailer := (PDF classAt: #Trailer)
		with: #Size -> 4
		with: #Root -> (PDF Dictionary with: #Type -> #Catalog) newReference
		with: #Info -> (PDF classAt: #DocumentInformation) empty newReference.
	self assert: (trailer Root isKindOf: (PDF classAt: #Catalog)).
	self assert: trailer Size = 4 asPDF.
	self assert: trailer Info class = (PDF classAt: #DocumentInformation).
	self assert: trailer Info CreationDate class = (PDF classAt: #Date).
	trailer Info at: #CreationDate put: nil.
	self assert: trailer Info CreationDate isNil.
	self assert: trailer Info ModDate class = (PDF classAt: #Date).
	trailer Info at: #ModDate put: nil.
	self assert: trailer Info ModDate isNil.
	self assert: (trailer hashForFilename: 'test.pdf' andSize: 100) isNil
%
method: TrailerTests
testPDFVersion
	self assert: (PDF classAt: #Trailer) example pdfVersion = Version pdf1_1.
	self assert: (PDF classAt: #Trailer) exampleMinimal pdfVersion = Version pdf1_0.
%
method: TrailerTests
testProperties
	self assert: (PDF classAt: #Trailer) example Size = 22 asPDF.
	self assert: (((PDF classAt: #Trailer) example at: #Root) referent isKindOf: (PDF classAt: #Catalog)).
	self assert: ((PDF classAt: #Trailer) example at: #Info) referent = (PDF classAt: #DocumentInformation) new.
	self assert: (PDF classAt: #Trailer) example ID = ((PDF classAt: #FileIdentifier)
		with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject
		with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject).
	self assert: (PDF classAt: #Trailer) example Prev isNil.
	self assert: (PDF classAt: #Trailer) example Encrypt isEmpty
%
method: TrailerTests
testRead
	| file |
	file := File readTesterOn: (PDF classAt: #Trailer) exampleString.
	self assert: ((PDF classAt: #Trailer) readWith: file from: file parser) = ((PDF classAt: #Trailer)
		with: #Size -> 22
		with: #Root -> (file referenceAt: (ObjectId number: 2))
		with: #Info -> (file referenceAt: (ObjectId number: 1))
		with: #ID -> (Array
			with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject
			with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject) asPDF)
%
method: TrailerTests
testWrite
	| file trailerExample |
	file := File readTesterOn: (PDF classAt: #Trailer) exampleString.
	trailerExample := (PDF classAt: #Trailer)
		with: #Size -> 22
		with: #Root -> (file referenceAt: (ObjectId number: 2))
		with: #Info -> (file referenceAt: (ObjectId number: 1))
		with: #ID -> (Array
			with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject
			with: (File readTesterOn: '< 81b14aafa313db63dbd6f981e49f94f4 >') readObject) asPDF.
	self assert: ((PDF classAt: #Trailer) readWith: file from: file parser) = trailerExample.
	self assert: trailerExample pdfSource = '<<	/Size 22
	/Root 2 0 R
	/Info 1 0 R
	/ID [	<81B14AAFA313DB63DBD6F981E49F94F4>
		<81B14AAFA313DB63DBD6F981E49F94F4>]	>>' withLf.
	self assert: (PDF classAt: #Trailer) exampleMinimal pdfSource = '<<	/Size 22
	/Root 0 0 R	>>' withLf
%
category: 'tests'
method: TypecheckingTests
testArrayAttributes
	| pdf |
	pdf := (PDF classAt: #Separation) empty.
	self assert: pdf name = #Separation asPDF.
	self assert: pdf tintName = nil.
	self assert: pdf alternateSpace = nil.
	self assert: pdf tintTransform = nil.
	self assert: (pdf sortedAttributePragmas collect: #selector) asArray = #(#name #tintName #alternateSpace #tintTransform).
	self shouldnt: [pdf at: 2 put: #Red] raise: TypeError.
	self shouldnt: [pdf at: 3 put: #DeviceRGB] raise: TypeError.
	self shouldnt: [pdf at: 4 put: (PDF classAt: #ExponentialInterpolationFunction) empty] raise: TypeError.
	self assert: pdf hasRequiredAttributes
%
method: TypecheckingTests
testArraySubsumption
	self assert: ((Array with: PDF Dictionary new) asPDF compliesTo: (ArrayType onSymbol: #Dictionary)).
	self deny: ((Array with: PDF Stream new) asPDF compliesTo: (ArrayType onSymbol: #Dictionary)).
	self assert: ((Array with: (PDF classAt: #Names) new) asPDF compliesTo: (ArrayType onSymbol: #Dictionary)).
	self assert: ((Array
		with: PDF Dictionary new
		with: PDF Dictionary new
		with: PDF Dictionary new
		with: PDF Dictionary new) asPDF compliesTo: (ArrayType onSymbol: #Dictionary)).
	self deny: ((Array
		with: PDF Dictionary new
		with: PDF Dictionary new
		with: (PDF classAt: #Name) new
		with: PDF Dictionary new) asPDF compliesTo: (ArrayType onSymbol: #Dictionary)).
	self deny: ((Array with: PDF Stream new) asPDF compliesTo: (ArrayType onSymbol: #Dictionary)).
	self assert: ((Array with: PDF Dictionary new) asPDF asType: (ArrayType onSymbol: #Dictionary)) = (Array with: PDF Dictionary new) asPDF.
	self assert: ((Array with: PDF Dictionary new) asPDF asType: (ArrayType onSymbol: #Names)) = (Array with: (PDF classAt: #Names) new) asPDF
%
method: TypecheckingTests
testArrayTypeRectangle
	| pdf |
	pdf := (PDF classAt: #Rectangle) example.
	self assert: pdf hasRequiredAttributes.
	self assert: pdf llx = 549 asPDF.
	self assert: (pdf attributeTypesAt: 1) = (Array with: (ObjectType onSymbol: #Number)).
	self should: [pdf at: 1 put: 'abc'] raise: TypeError.
	self assert: ([pdf at: 1 put: 'abc'] on: TypeError do: [:ex | ex resume]) printString = 'TypeMismatch(AsciiString/Number)'.
	self shouldnt: [pdf at: 1 put: 42] raise: TypeError.
	self assert: pdf llx = 42 asPDF.
	self should: [(PDF classAt: #Rectangle) on: #(1 2 3 #a)] raise: TypeError.
	self assert: ([(PDF classAt: #Rectangle) on: #(1 2 3 #a)] on: TypeError do: [:ex | ex resume]) last printString = 'TypeMismatch(Name/Number)'.
	self should: [(PDF classAt: #Rectangle) on: #(1 2 3)] raise: TypeError.
	[(PDF classAt: #Rectangle) on: #(1 2 3)] on: TypeError do: [:ex |
		self assert: ex description = 'the size of the argument (3) does not match the required number of attributes (4)'].
	self should: [(PDF classAt: #Rectangle) on: #(1 2 3 4 5)] raise: TypeError.
	[(PDF classAt: #Rectangle) on: #(1 2 3 4 5)] on: TypeError do: [:ex |
		self assert: ex description = 'the size of the argument (5) does not match the required number of attributes (4)']
%
method: TypecheckingTests
testAttributes
	| pdf |
	pdf := (PDF classAt: #Catalog) new.
	self deny: pdf hasRequiredAttributes.
	self should: [pdf at: #Type put: 'abc'] raise: TypeError.
	self assert: ([pdf at: #Type put: 'abc'] on: TypeError do: [:ex | ex resume]) printString = 'TypeMismatch(AsciiString/Name)'.
	self shouldnt: [pdf at: #Type put: #Catalog] raise: TypeError.
	self assert: pdf Type = #Catalog asPDF.
	self assert: pdf Type asSmalltalkValue = #Catalog.
	self deny: pdf hasRequiredAttributes.
	self shouldnt: [pdf at: #Pages put: (PDF classAt: #Pages) new newReference] raise: Error.
	self assert: pdf Pages = (PDF classAt: #Pages) new.
	self shouldnt: [pdf at: #Pages put: nil] raise: Error.
	self should: [pdf Pages] raise: LookupError.
	self shouldnt: [pdf at: #Pages put: (PDF Dictionary with: #Type -> #Pages) newReference] raise: Error.
	self assert: (pdf Pages isKindOf: (PDF classAt: #Pages)).
	self assert: pdf Pages asSmalltalkValue = (Valuemap with: #Type -> #Pages).
	self assert: pdf hasRequiredAttributes.
	self assert: pdf Names isEmpty
%
method: TypecheckingTests
testClassSubsumption
	self assert: (PDF String new compliesTo: (ObjectType onSymbol: #String)).
	self assert: (PDF String new compliesTo: (ObjectType onSymbol: #Object)).
	self deny: (PDF String new compliesTo: (ObjectType onSymbol: #Name)).
	self assert: (PDF Dictionary new compliesTo: (ObjectType onSymbol: #Dictionary)).
	self assert: (TypedDictionary new compliesTo: (ObjectType onSymbol: #Dictionary)).
	self deny: (PDF Stream new compliesTo: (ObjectType onSymbol: #Dictionary)).
	self assert: ((PDF classAt: #Names) new compliesTo: (ObjectType onSymbol: #Dictionary)).
	self assert: ((PDF classAt: #NameTree) new compliesTo: (ObjectType onSymbol: #Dictionary)).
	self assert: ((PDF classAt: #NameTree) new compliesTo: (ObjectType onSymbol: #NameTree)).
	self assert: (PDF Dictionary new asType: (ObjectType onSymbol: #Names)) class = (PDF classAt: #Names).
	self deny: ((PDF classAt: #Names) new asType: (ObjectType onSymbol: #Dictionary)) isNil.
	self deny: (#() asPDF compliesTo: (ObjectType onSymbol: #Dictionary)).
	self deny: (1 asPDF compliesTo: (ObjectType onSymbol: #Dictionary)).
	self assert: (1 asPDF compliesTo: (ObjectType onSymbol: #Number)).
	self assert: (1.7 asPDF compliesTo: (ObjectType onSymbol: #Number)).
	self deny: (PDF String new compliesTo: (ObjectType onSymbol: #Number))
%
method: TypecheckingTests
testColourSpaceSpecialization
	self assert: #DeviceGray asPDF class = (PDF classAt: #Name).
	self assert: (#DeviceGray asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #DeviceGray).
	self assert: (#DeviceRGB asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #DeviceRGB).
	self assert: (#DeviceCMYK asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #DeviceCMYK).
	self assert: (#(#Pattern) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #Pattern).
	self assert: (#PatternX asPDF asType: (DirectType onSymbol: #ColourSpace)) isNil.
	self assert: ((Array with: #CalGray with: PDF Dictionary new) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #CalGray).
	self assert: ((Array with: #CalRGB with: PDF Dictionary new) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #CalRGB).
	self assert: ((Array with: #Lab with: PDF Dictionary new) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #Lab).
	self assert: ((Array with: #ICCBased with: (PDF Stream on: Dictionary new external: '  ')) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #ICCBased).
	self should: [(Array with: #DeviceN with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] raise: TypeError.
	self assert: (([(Array with: #DeviceN with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 2) printString = 'TypeMismatch(Null/[Name])'.
	self assert: (([(Array with: #DeviceN with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 3) printString = 'TypeMismatch(Null/DeviceColourSpace|CIEColourSpace)'.
	self assert: (([(Array with: #DeviceN with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 4) printString = 'TypeMismatch(Null/Function)'.
	self assert: ((Array with: #DeviceN with: #(#name) with: #DeviceCMYK with: (PDF classAt: #StichingFunction) empty) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #DeviceN).
	self should: [(Array with: #Indexed with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] raise: TypeError.
	self assert: (([(Array with: #Indexed with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 2) printString = 'TypeMismatch(Null/ColourSpace)'.
	self assert: (([(Array with: #Indexed with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 3) printString = 'TypeMismatch(Null/Integer)'.
	self assert: (([(Array with: #Indexed with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 4) printString = 'TypeMismatch(Null/Stream|String)'.
	self assert: ((Array with: #Indexed with: #DeviceCMYK with: 255 with: PDF Stream empty) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #Indexed).
	self should: [(Array with: #Separation with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] raise: TypeError.
	self assert: (([(Array with: #Separation with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 2) printString = 'TypeMismatch(Null/Name)'.
	self assert: (([(Array with: #Separation with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 3) printString = 'TypeMismatch(Null/DeviceColourSpace|CIEColourSpace)'.
	self assert: (([(Array with: #Separation with: nil with: nil with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] on: TypeError do: [:ex | ex resume]) at: 4) printString = 'TypeMismatch(Null/Function)'.
	self assert: ((Array with: #Separation with: #cyan with: #DeviceCMYK with: (PDF classAt: #StichingFunction) empty) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #Separation).
	self should: [(Array with: #Pattern with: nil) asPDF asType: (DirectType onSymbol: #ColourSpace)] raise: TypeError.
	self assert: ((Array with: #Pattern with: #DeviceCMYK) asPDF asType: (DirectType onSymbol: #ColourSpace)) class = (PDF classAt: #UncolouredPattern).
	self assert: (5 asPDF asType: (DirectType onSymbol: #ColourSpace)) isNil
%
method: TypecheckingTests
testColourSpaceSubsumption
	self assert: ((PDF classAt: #DeviceGray) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #DeviceRGB) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #DeviceCMYK) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #CalGray) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #CalRGB) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Lab) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #ICCBased) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #DeviceN) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Indexed) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Separation) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #UncolouredPattern) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Pattern) empty compliesTo: (DirectType onSymbol: #ColourSpace)).
	self deny: (5 asPDF compliesTo: (DirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #DeviceGray) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #DeviceRGB) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #DeviceCMYK) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #CalGray) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #CalRGB) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Lab) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #ICCBased) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #DeviceN) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Indexed) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Separation) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #UncolouredPattern) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self assert: ((PDF classAt: #Pattern) empty newReference compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self deny: ((PDF classAt: #DeviceCMYK) empty compliesTo: (IndirectType onSymbol: #ColourSpace)).
	self deny: (5 asPDF newReference compliesTo: (IndirectType onSymbol: #ColourSpace))
%
method: TypecheckingTests
testDirectSubsumption
	self assert: (5 asPDF compliesTo: (DirectType onSymbol: #Integer)).
	self deny: (5 asPDF newReference compliesTo: (DirectType onSymbol: #Integer)).
	self assert: (5 asPDF compliesTo: (DirectType onSymbol: #Number)).
	self deny: (PDF Stream new compliesTo: (DirectType onSymbol: #Number)).
	self assert: ((Array with: PDF Dictionary new) asPDF asType: (DirectType onSymbol: #Dictionary)) isNil.
	self assert: (PDF Dictionary new asType: (DirectType onSymbol: #Names)) class = (PDF classAt: #Names)
%
method: TypecheckingTests
testFunctionSpecialization
	| dict str |
	dict := PDF Dictionary new.
	str := PDF Stream new.
	str contents: 'abc'.
	str at: #FunctionType put: 0.
	self assert: (str asType: (DirectType onSymbol: #Function)) class = (PDF classAt: #SampledFunction).
	dict at: #FunctionType put: 2.
	self assert: (dict asType: (DirectType onSymbol: #Function)) class = (PDF classAt: #ExponentialInterpolationFunction).
	dict at: #FunctionType put: 3.
	self assert: (dict asType: (DirectType onSymbol: #Function)) class = (PDF classAt: #StichingFunction).
	str at: #FunctionType put: 4.
	self assert: (str asType: (DirectType onSymbol: #Function)) class = (PDF classAt: #PostScriptCalculatorFunction).
	str at: #FunctionType put: 1.
	self assert: (str asType: (DirectType onSymbol: #Function)) isNil.
	self assert: (5 asPDF asType: (DirectType onSymbol: #Function)) isNil.
	self assert: (dict newReference asType: (DirectType onSymbol: #Function)) isNil
%
method: TypecheckingTests
testFunctionSubsumption
	self assert: ((PDF classAt: #ExponentialInterpolationFunction) empty compliesTo: (DirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #StichingFunction) empty compliesTo: (DirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #PostScriptCalculatorFunction) empty compliesTo: (DirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #SampledFunction) empty compliesTo: (DirectType onSymbol: #Function)).
	self deny: (5 asPDF compliesTo: (DirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #ExponentialInterpolationFunction) empty newReference compliesTo: (IndirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #StichingFunction) empty newReference compliesTo: (IndirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #PostScriptCalculatorFunction) empty newReference compliesTo: (IndirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #SampledFunction) empty newReference compliesTo: (IndirectType onSymbol: #Function)).
	self deny: ((PDF classAt: #SampledFunction) empty compliesTo: (IndirectType onSymbol: #Function)).
	self deny: (5 asPDF newReference compliesTo: (IndirectType onSymbol: #Function)).
	self assert: ((PDF classAt: #ExponentialInterpolationFunction) empty newReference compliesTo: (ObjectType onSymbol: #Function)).
	self assert: ((PDF classAt: #StichingFunction) empty compliesTo: (ObjectType onSymbol: #Function)).
	self assert: ((PDF classAt: #PostScriptCalculatorFunction) empty newReference compliesTo: (ObjectType onSymbol: #Function)).
	self assert: ((PDF classAt: #SampledFunction) empty compliesTo: (ObjectType onSymbol: #Function)).
	self deny: (5 asPDF newReference compliesTo: (ObjectType onSymbol: #Function)).
	self assert: ((Array with: (PDF classAt: #ExponentialInterpolationFunction) empty) asPDF compliesTo: (ArrayType onSymbol: #Function)).
	self assert: ((Array with: (PDF classAt: #StichingFunction) empty newReference) asPDF compliesTo: (ArrayType onSymbol: #Function)).
	self assert: ((Array with: (PDF classAt: #PostScriptCalculatorFunction) empty) asPDF compliesTo: (ArrayType onSymbol: #Function)).
	self assert: ((Array with: (PDF classAt: #SampledFunction) empty newReference) asPDF compliesTo: (ArrayType onSymbol: #Function)).
	self assert: (#() asPDF compliesTo: (ArrayType onSymbol: #Function)).
	self deny: (5 asPDF newReference compliesTo: (ArrayType onSymbol: #Function)).
	self assert: ((PDF Dictionary with: #key -> (PDF classAt: #ExponentialInterpolationFunction) empty) asPDF compliesTo: (DictionaryType onSymbol: #Function)).
	self assert: ((PDF Dictionary with: #key -> (PDF classAt: #StichingFunction) empty newReference) asPDF compliesTo: (DictionaryType onSymbol: #Function)).
	self assert: ((PDF Dictionary with: #key -> (PDF classAt: #PostScriptCalculatorFunction) empty) asPDF compliesTo: (DictionaryType onSymbol: #Function)).
	self assert: ((PDF Dictionary with: #key -> (PDF classAt: #SampledFunction) empty newReference) asPDF compliesTo: (DictionaryType onSymbol: #Function)).
	self assert: (PDF Dictionary new compliesTo: (DictionaryType onSymbol: #Function)).
	self deny: (5 asPDF newReference compliesTo: (DictionaryType onSymbol: #Function))
%
method: TypecheckingTests
testIndirectSubsumption
	self assert: (5 asPDF newReference compliesTo: (IndirectType onSymbol: #Integer)).
	self deny: (5 asPDF compliesTo: (IndirectType onSymbol: #Integer)).
	self deny: (((PDF classAt: #Reference) referent: 5 asPDF newReference) compliesTo: (IndirectType onSymbol: #Integer)).
	self deny: (5 asPDF compliesTo: (IndirectType onSymbol: #Number)).
	self assert: (PDF Dictionary new newReference asType: (IndirectType onSymbol: #Dictionary)) referent class = PDF Dictionary.
	self assert: (PDF Dictionary new newReference asType: (IndirectType onSymbol: #Names)) referent class = (PDF classAt: #Names)
%
method: TypecheckingTests
testNameTreeSubsumption
	self assert: (((PDF classAt: #NameTree) with: #Names -> #('a' #a)) compliesTo: (NameTreeType onSymbol: #Name)).
	self assert: (((PDF classAt: #NameTree) with: #Names -> #('a' 'a')) compliesTo: (NameTreeType onSymbol: #String)).
	self assert: (((PDF classAt: #NameTree) with: #Names -> #()) compliesTo: (NameTreeType onSymbol: #Name)).
	self deny: (((PDF classAt: #NameTree) with: #Names -> #('a' #a 'b' 2)) compliesTo: (NameTreeType onSymbol: #Name)).
	self assert: (((PDF classAt: #NameTree) nodeClass with: #Kids -> (Array with: ((PDF classAt: #NameTree) leafClass with: #Names -> #('a' #a)))) compliesTo: (NameTreeType onSymbol: #Name)).
	self deny: (((PDF classAt: #NameTree) nodeClass with: #Kids -> (Array with: ((PDF classAt: #NameTree) leafClass with: #Names -> #('a' #a 'b' 2)))) compliesTo: (NameTreeType onSymbol: #Name)).
	self assert: (((PDF classAt: #NameTree) with: #Names -> #('a' #a asPDF newReference)) compliesTo: (NameTreeType onSymbol: #Name)).
%
method: TypecheckingTests
testShadingSpecialization
	| dict str |
	dict := PDF Dictionary new.
	dict at: #ShadingType put: 1.
	self assert: (dict asType: (DirectType onSymbol: #Shading)) class = (PDF classAt: #FunctionBasedShading).
	dict at: #ShadingType put: 2.
	self assert: (dict asType: (DirectType onSymbol: #Shading)) class = (PDF classAt: #AxialShading).
	dict at: #ShadingType put: 3.
	self assert: (dict asType: (DirectType onSymbol: #Shading)) class = (PDF classAt: #RadialShading).
	str := PDF Stream new.
	str contents: 'abc'.
	str at: #ShadingType put: 4.
	self assert: (str asType: (DirectType onSymbol: #Shading)) class = (PDF classAt: #FreeFormGouraudShadedMesh).
	str at: #ShadingType put: 5.
	self assert: (str asType: (DirectType onSymbol: #Shading)) class = (PDF classAt: #LatticeFormGouraudShadedMesh).
	str at: #ShadingType put: 6.
	self assert: (str asType: (DirectType onSymbol: #Shading)) class = (PDF classAt: #CoonsPatchMesh).
	str at: #ShadingType put: 7.
	self assert: (str asType: (DirectType onSymbol: #Shading)) class = (PDF classAt: #TensorProductPatchMesh).
	str at: #ShadingType put: 8.
	self assert: (str asType: (DirectType onSymbol: #Shading)) isNil.
	self assert: (5 asPDF asType: (DirectType onSymbol: #Shading)) isNil.
	self assert: (dict newReference asType: (DirectType onSymbol: #Shading)) isNil
%
method: TypecheckingTests
testShadingSubsumption
	self assert: ((PDF classAt: #FunctionBasedShading) empty compliesTo: (DirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #AxialShading) empty compliesTo: (DirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #RadialShading) empty compliesTo: (DirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #FreeFormGouraudShadedMesh) empty compliesTo: (DirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #LatticeFormGouraudShadedMesh) empty compliesTo: (DirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #CoonsPatchMesh) empty compliesTo: (DirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #TensorProductPatchMesh) empty compliesTo: (DirectType onSymbol: #Shading)).
	self deny: (5 asPDF compliesTo: (DirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #FunctionBasedShading) empty newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #AxialShading) empty newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #RadialShading) empty newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #FreeFormGouraudShadedMesh) empty newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #LatticeFormGouraudShadedMesh) empty newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #CoonsPatchMesh) empty newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #TensorProductPatchMesh) empty newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self deny: ((PDF classAt: #TensorProductPatchMesh) empty compliesTo: (IndirectType onSymbol: #Shading)).
	self deny: (5 asPDF newReference compliesTo: (IndirectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #FunctionBasedShading) empty newReference compliesTo: (ObjectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #AxialShading) empty compliesTo: (ObjectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #RadialShading) empty newReference compliesTo: (ObjectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #FreeFormGouraudShadedMesh) empty compliesTo: (ObjectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #LatticeFormGouraudShadedMesh) empty newReference compliesTo: (ObjectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #CoonsPatchMesh) empty compliesTo: (ObjectType onSymbol: #Shading)).
	self assert: ((PDF classAt: #TensorProductPatchMesh) empty newReference compliesTo: (ObjectType onSymbol: #Shading)).
	self deny: (5 asPDF newReference compliesTo: (ObjectType onSymbol: #Shading))
%
method: TypecheckingTests
testSuperTypeFunction
	| exponentialFunction stichingFunction shading |
	exponentialFunction := (PDF classAt: #ExponentialInterpolationFunction) empty.
	exponentialFunction at: #Domain put: #(0 1.0).
	exponentialFunction at: #N put: 2.5.
	exponentialFunction at: #C0 put: #(0 0 0 1).
	exponentialFunction at: #C1 put: #(0 0 0 0).
	stichingFunction := (PDF classAt: #StichingFunction) empty.
	stichingFunction at: #Domain put: #(0 1.0).
	stichingFunction at: #Bounds put: #().
	stichingFunction at: #Encode put: #(0 1.0).
	self shouldnt: [stichingFunction at: #Functions put: (Array with: exponentialFunction newReference)] raise: TypeError.
	shading := (PDF classAt: #AxialShading) empty.
	shading at: #Coords put: #(0 0 10 10).
	self shouldnt: [shading at: #Function put: stichingFunction newReference] raise: TypeError.
	self shouldnt: [shading at: #ColorSpace put: #DeviceCMYK] raise: TypeError.
%
method: TypecheckingTests
testTypeNames
	| pdf |
	pdf := (PDF classAt: #Catalog) new.
	pdf at: #Type put: #Catalog.
	pdf at: #Pages put: (PDF classAt: #Pages) new newReference.
	self assert: pdf hasRequiredAttributes.
	self assert: pdf Names isEmpty.
	self assert: (pdf attributeTypesAt: #Names) = (Array with: (ObjectType onSymbol: #Names)).
	self should: [pdf at: #Names put: 'abc'] raise: TypeError.
	self assert: ([(pdf at: #Names put: 'abc')] on: TypeError do: [:ex | ex resume]) printString = 'TypeMismatch(AsciiString/Names)'.
	self should: [pdf at: #Names put: #()] raise: TypeError.
	self assert: ([(pdf at: #Names put: #())] on: TypeError do: [:ex | ex resume]) printString = 'TypeMismatch(Array/Names)'.
	self shouldnt: [pdf at: #Names put: PDF Dictionary new] raise: TypeError.
	self assert: pdf Names = (PDF classAt: #Names) new.
	self should: [pdf at: #Names put: PDF Stream new] raise: TypeError.
	self assert: ([(pdf at: #Names put: PDF Stream new)] on: TypeError do: [:ex | ex resume]) printString = 'TypeMismatch(Stream/Names)'.
%
method: TypecheckingTests
testTypeReference
	| pdf |
	pdf := (PDF classAt: #ObjectStream) new.
	pdf at: #Type put: #ObjStm.
	pdf at: #Length put: 0.
	pdf at: #First put: 13.
	pdf at: #N put: 2.
	self assert: pdf hasRequiredAttributes.
	self
		shouldnt: [
		pdf at: #Extends put: (File new referenceAt: (ObjectId number: 1))]
		raise: TypeError.
	self should: [pdf at: #Extends put: 'abc'] raise: TypeError.
	self assert: ([pdf at: #Extends put: 'abc'] on: TypeError do: [:ex | ex resume]) printString = 'TypeMismatch(AsciiString/»ObjectStream)'
%
method: TypecheckingTests
testTypeTrailer
	| pdf |
	pdf := (PDF classAt: #Trailer) new.
	pdf at: #Size put: 7.
	self
		shouldnt: [
		pdf at: #Root put: (PDF Dictionary with: #Type -> #Catalog) newReference]
		raise: TypeError.
	self assert: pdf Root class = (PDF classAt: #Catalog).
	pdf at: #Root put: (File new referenceAt: (ObjectId number: 1)).
	self assert: pdf hasRequiredAttributes
%
category: 'tests'
method: TypingTests
testAllTerminalSubtypes
	self assert: ((PDF typeAt: #DeviceCMYK) allTerminalSubtypes collect: #name) asArray = #(#DeviceCMYK).
	self assert: ((PDF typeAt: #CIEColourSpace) allTerminalSubtypes collect: #name) sorted asArray = #(#CalGray #CalRGB #ICCBased #Lab).
	self assert: ((PDF typeAt: #DeviceColourSpace) allTerminalSubtypes collect: #name) sorted asArray = #(#DeviceCMYK #DeviceGray #DeviceRGB).
	self assert: ((PDF typeAt: #ColourSpace) allTerminalSubtypes collect: #name) sorted asArray = #(#CalGray #CalRGB #DeviceCMYK #DeviceGray #DeviceN #DeviceRGB #ICCBased #Indexed #Lab #Pattern #Separation #SimplePattern #UncolouredPattern)
%
method: TypingTests
testIsClassForArray
	self assert: ((PDF classAt: #CalGray) isClassForArray: (Array with: #CalGray with: 1) asPDF).
	self assert: ((PDF classAt: #CalRGB) isClassForArray: (Array with: #CalRGB with: 1) asPDF).
	self assert: ((PDF classAt: #ICCBased) isClassForArray: (Array with: #ICCBased with: 1) asPDF).
	self assert: ((PDF classAt: #Lab) isClassForArray: (Array with: #Lab with: 1) asPDF).
	"number of attributes must be right"
	self deny: ((PDF classAt: #Lab) isClassForArray: (Array with: #Lab) asPDF).
	self deny: ((PDF classAt: #Lab) isClassForArray: (Array with: #Lab with: 1 with: 1) asPDF).
	self deny: ((PDF classAt: #CalRGB) isClassForArray: (Array with: #Lab with: 1) asPDF).
	self assert: ((PDF classAt: #FileIdentifier) isClassForArray: (Array with: 1 with: 1) asPDF).
	self assert: ((PDF classAt: #DeviceN) isClassForArray: (Array with: #DeviceN with: 1 with: 1 with: 1) asPDF).
	self assert: ((PDF classAt: #Indexed) isClassForArray: (Array with: #Indexed with: 1 with: 1 with: 1) asPDF).
	self assert: ((PDF classAt: #Separation) isClassForArray: (Array with: #Separation with: 1 with: 1 with: 1) asPDF).
	self assert: ((PDF classAt: #UncolouredPattern) isClassForArray: (Array with: #Pattern with: 1) asPDF).
	self deny: ((PDF classAt: #DeviceN) isClassForArray: (Array new) asPDF).
%
method: TypingTests
testIsClassForDictionary
	self assert: ((PDF classAt: #ExponentialInterpolationFunction) isClassForDictionary: (Valuemap with: #FunctionType -> 2) asPDF).
	self assert: ((PDF classAt: #StichingFunction) isClassForDictionary: (Valuemap with: #FunctionType -> 3) asPDF).
	self deny: ((PDF classAt: #ExponentialInterpolationFunction) isClassForDictionary: (Valuemap with: #FunctionType -> -1) asPDF).
	self deny: ((PDF classAt: #ExponentialInterpolationFunction) isClassForDictionary: Valuemap new asPDF).
%
method: TypingTests
testIsClassForName
	self assert: ((PDF classAt: #DeviceCMYK) isClassForName: #DeviceCMYK asPDF).
	self assert: ((PDF classAt: #DeviceRGB) isClassForName: #DeviceRGB asPDF).
	self assert: ((PDF classAt: #Identity) isClassForName: #Identity asPDF).
	self deny: ((PDF classAt: #Name) isClassForName: #ABC asPDF).
	self deny: ((PDF classAt: #DeviceColourSpace) isClassForName: #DeviceRGB asPDF).
%
method: TypingTests
testIsClassForStream
	self assert: ((PDF classAt: #PostScriptCalculatorFunction) isClassForStream: (PDF Stream on: (Valuemap with: #FunctionType -> 4) external: '')).
	self assert: ((PDF classAt: #SampledFunction) isClassForStream: (PDF Stream on: (Valuemap with: #FunctionType -> 0) external: '')).
	self deny: ((PDF classAt: #SampledFunction) isClassForStream: (PDF Stream on: (Valuemap with: #FunctionType -> -1) external: '')).
	self deny: ((PDF classAt: #SampledFunction) isClassForStream: (PDF Stream on: Valuemap new external: '')).
%
method: TypingTests
testIsExemplarArrayOf
	self assert: (#(#CalGray 1) asPDF canBeExemplarOf: (PDF typeAt: #CalGray)).
	self assert: (#(#CalRGB 1) asPDF canBeExemplarOf: (PDF typeAt: #CalRGB)).
	self assert: (#(#ICCBased 1) asPDF canBeExemplarOf: (PDF typeAt: #ICCBased)).
	self assert: (#(#Lab 1) asPDF canBeExemplarOf: (PDF typeAt: #Lab)).
	"number of attributes must be right"
	self deny: (#(#Lab) asPDF canBeExemplarOf: (PDF typeAt: #Lab)).
	self deny: (#(#Lab 1 1) asPDF canBeExemplarOf: (PDF typeAt: #Lab)).
	self deny: (#(#Lab 1) asPDF canBeExemplarOf: (PDF typeAt: #ICCBased)).
	
	self assert: (#(1 1) asPDF canBeExemplarOf: (PDF typeAt: #FileIdentifier)).
	self assert: (#(#DeviceN 1 1 1) asPDF canBeExemplarOf: (PDF typeAt: #DeviceN)).
	self assert: (#(#Indexed 1 1 1) asPDF canBeExemplarOf: (PDF typeAt: #Indexed)).
	self assert: (#(#Separation 1 1 1) asPDF canBeExemplarOf: (PDF typeAt: #Separation)).
	self assert: (#(#Pattern 1) asPDF canBeExemplarOf: (PDF typeAt: #UncolouredPattern)).
	self deny: (#() asPDF canBeExemplarOf: (PDF typeAt: #DeviceN)).
%
method: TypingTests
testIsExemplarDictionaryOf
	self assert: ((Dictionary with: #FunctionType -> 2) asPDF canBeExemplarOf: (PDF typeAt: #ExponentialInterpolationFunction)).
	self assert: ((Dictionary with: #FunctionType -> 3) asPDF canBeExemplarOf: (PDF typeAt: #StichingFunction)).
	self deny: ((Dictionary with: #FunctionType -> 1) asPDF canBeExemplarOf: (PDF typeAt: #StichingFunction)).
	self deny: (Dictionary new asPDF canBeExemplarOf: (PDF typeAt: #SampledFunction)).
	self assert: ((Dictionary with: #ShadingType -> 1) asPDF canBeExemplarOf: (PDF typeAt: #FunctionBasedShading)).
	self assert: ((Dictionary with: #ShadingType -> 2) asPDF canBeExemplarOf: (PDF typeAt: #AxialShading)).
	self assert: ((Dictionary with: #ShadingType -> 3) asPDF canBeExemplarOf: (PDF typeAt: #RadialShading)).
	self deny: ((Dictionary with: #ShadingType -> 6) asPDF canBeExemplarOf: (PDF typeAt: #AxialShading)).
	self assert: ((Dictionary with: #S -> #URI) asPDF canBeExemplarOf: (PDF typeAt: #URI)).
	self assert: ((Dictionary with: #Subtype -> #Link) asPDF canBeExemplarOf: (PDF typeAt: #LinkAnnotation)).
	self assert: ((Dictionary with: #Subtype -> #Caret) asPDF canBeExemplarOf: (PDF typeAt: #CaretAnnotation)).
	self assert: ((Dictionary with: #Subtype -> #'3D') asPDF canBeExemplarOf: (PDF typeAt: #ThreeDAnnotation)).
	self deny: ((Dictionary with: #Type -> #Annot) asPDF canBeExemplarOf: (PDF typeAt: #Annot)).
	self assert: ((Dictionary with: #Type -> #Annot with: #Subtype -> #Link) asPDF canBeExemplarOf: (PDF typeAt: #Annot)).
	self assert: ((Dictionary with: #Subtype -> #Type1 with: #BaseFont -> #MyFont) asPDF canBeExemplarOf: (PDF typeAt: #Type1)).
	self assert: ((Dictionary with: #Subtype -> #Type0) asPDF canBeExemplarOf: (PDF typeAt: #Type0)).
	self assert: ((Dictionary with: #Subtype -> #Type3) asPDF canBeExemplarOf: (PDF typeAt: #Type3)).
	self deny: ((Dictionary with: #Subtype -> #Type3) asPDF canBeExemplarOf: (PDF typeAt: #Type1)).
	self assert: ((Dictionary with: #S -> #Transparency) asPDF canBeExemplarOf: (PDF typeAt: #TransparencyGroupAttributes)).
%
method: TypingTests
testIsExemplarNameOf
	self assert: (#DeviceCMYK asPDF canBeExemplarOf: (PDF typeAt: #DeviceCMYK)).
	self assert: (#DeviceRGB asPDF canBeExemplarOf: (PDF typeAt: #DeviceRGB)).
	self assert: (#DeviceGray asPDF canBeExemplarOf: (PDF typeAt: #DeviceGray)).
	self assert: (#Identity asPDF canBeExemplarOf: (PDF typeAt: #Identity)).
	
	self deny: (#Identity asPDF canBeExemplarOf: (PDF typeAt: #DeviceGray)).
	self deny: (#ABC asPDF canBeExemplarOf: (PDF typeAt: #Name)).
	self deny: (#DeviceRGB asPDF canBeExemplarOf: (PDF typeAt: #ColourSpace)).
%
method: TypingTests
testIsExemplarStreamOf
	self assert: ((PDF Stream on: (Dictionary with: #FunctionType -> 0) external: '') canBeExemplarOf: (PDF typeAt: #SampledFunction)).
	self assert: ((PDF Stream on: (Dictionary with: #FunctionType -> 4) external: '') canBeExemplarOf: (PDF typeAt: #PostScriptCalculatorFunction)).
	self deny: ((PDF Stream on: (Dictionary with: #FunctionType -> 1) external: '') canBeExemplarOf: (PDF typeAt: #SampledFunction)).
	self deny: ((PDF Stream on: Dictionary new external: '') canBeExemplarOf: (PDF typeAt: #SampledFunction)).
	self assert: ((PDF Stream on: (Dictionary with: #ShadingType -> 4) external: '') canBeExemplarOf: (PDF typeAt: #FreeFormGouraudShadedMesh)).
	self assert: ((PDF Stream on: (Dictionary with: #ShadingType -> 5) external: '') canBeExemplarOf: (PDF typeAt: #LatticeFormGouraudShadedMesh)).
	self assert: ((PDF Stream on: (Dictionary with: #ShadingType -> 6) external: '') canBeExemplarOf: (PDF typeAt: #CoonsPatchMesh)).
	self assert: ((PDF Stream on: (Dictionary with: #ShadingType -> 7) external: '') canBeExemplarOf: (PDF typeAt: #TensorProductPatchMesh)).
	self deny: ((PDF Stream on: (Dictionary with: #ShadingType -> 6) external: '') canBeExemplarOf: (PDF typeAt: #TensorProductPatchMesh)).
	self assert: ((PDF Stream on: (Dictionary with: #Subtype -> #Form) external: '') canBeExemplarOf: (PDF typeAt: #FormXObject)).
	self assert: ((PDF Stream on: (Dictionary with: #Subtype -> #Image) external: '') canBeExemplarOf: (PDF typeAt: #ImageXObject)).
	self assert: ((PDF Stream on: (Dictionary with: #Subtype -> #PS) external: '') canBeExemplarOf: (PDF typeAt: #PostScriptXObject)).
	self assert: ((PDF Stream on: (Dictionary with: #Subtype -> #Form with: #Group -> 1) external: '') canBeExemplarOf: (PDF typeAt: #Group)).
	self assert: ((PDF Stream on: (Dictionary with: #Subtype -> #Form with: #Group -> (Dictionary with: #S -> #Transparency)) external: '') canBeExemplarOf: (PDF typeAt: #TransparencyGroup)).
%
method: TypingTests
testPdfType
	self assert: PDF basicNew pdfType printString = 'Object(PDF)'.
	self assert: PDF Dictionary new pdfType printString = 'Dictionary(PDFDictionary)'.
	self assert: PDF Stream new pdfType printString = 'Stream(PDFStream)'.
	self assert: PDF Array new pdfType printString = 'Array(PDFArray)'.
	self assert: (PDF classAt: #Reference) new pdfType printString = 'Reference(Reference)'.
	self assert: nil pdfType printString = 'Null(UndefinedObject)'.
	self assert: false asPDF pdfType printString = 'Boolean(Boolean)'.
	self assert: 1 asPDF pdfType printString = 'Integer(Integer)'.
	self assert: 'string' asPDF pdfType printString = 'AsciiString(AsciiString)'.
	self assert: (PDF classAt: #Textstring) empty asPDF pdfType printString = 'Textstring(Textstring)'.
	self assert: Timestamp now asPDF pdfType printString = 'Date(PDFDate)'.
	self assert: (PDF classAt: #Name) new pdfType printString = 'Name(Name)'.
	self assert: (PDF classAt: #Matrix) new pdfType printString = 'Matrix(Matrix)'.
	self assert: (PDF classAt: #Identity) new pdfType printString = 'Identity(Identity)'.
	self assert: (PDF classAt: #FlateDecode) new pdfType printString = 'FlateDecode(FlateDecode)'.
	self assert: (PDF classAt: #Rectangle) new pdfType printString = 'Rectangle(Rectangle)'.
	self assert: #DeviceCMYK asPDF pdfType printString = 'Name(Name)'.
	self assert: (PDF classAt: #DeviceCMYK) new pdfType printString = 'DeviceCMYK(DeviceCMYK)'.
%
method: TypingTests
testSpecialized
	self assert: (((PDF typeAt: #DeviceCMYK) specialized: #DeviceCMYK asPDF) isKindOf: (PDF classAt: #DeviceCMYK)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #DeviceCMYK asPDF) isKindOf: (PDF classAt: #DeviceCMYK)).
%
method: TypingTests
testSpecializedActions
	self assert: (((PDF typeAt: #Action) specialized: (PDF classAt: #URI) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #URI)).
	self assert: (((PDF typeAt: #Action) specialized: (Dictionary with: #S -> #URI) asPDF) isKindOf: (PDF classAt: #URI)).
	self assert: (((PDF typeAt: #Action) specialized: (Dictionary with: #S -> #GoTo) asPDF) isKindOf: (PDF classAt: #Action)).
%
method: TypingTests
testSpecializedAnnotations
	self assert: (((PDF typeAt: #Annot) specialized: (PDF classAt: #LinkAnnotation) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #LinkAnnotation)).
	self assert: (((PDF typeAt: #Annot) specialized: (Dictionary with: #Subtype -> #Link) asPDF) isKindOf: (PDF classAt: #LinkAnnotation)).
	self assert: (((PDF typeAt: #Annot) specialized: (Dictionary with: #Subtype -> #Unknown) asPDF) isKindOf: (PDF classAt: #Annot)).
%
method: TypingTests
testSpecializedColors
	self assert: (((PDF typeAt: #DeviceCMYK) specialized: #DeviceCMYK asPDF) isKindOf: (PDF classAt: #DeviceCMYK)).
	self assert: (((PDF typeAt: #DeviceColourSpace) specialized: #DeviceCMYK asPDF) isKindOf: (PDF classAt: #DeviceCMYK)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #DeviceCMYK asPDF) isKindOf: (PDF classAt: #DeviceCMYK)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #DeviceRGB asPDF) isKindOf: (PDF classAt: #DeviceRGB)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #DeviceGray asPDF) isKindOf: (PDF classAt: #DeviceGray)).
	self assert: (((PDF typeAt: #CIEColourSpace) specialized: (Array with: #CalGray with: Dictionary new) asPDF) isKindOf: (PDF classAt: #CalGray)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: (Array with: #CalGray with: Dictionary new) asPDF) isKindOf: (PDF classAt: #CalGray)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: (Array with: #CalRGB with: Dictionary new) asPDF) isKindOf: (PDF classAt: #CalRGB)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: (Array with: #ICCBased with: (PDF classAt: #ICCProfileStream) new) asPDF) isKindOf: (PDF classAt: #ICCBased)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: (Array with: #Lab with: Dictionary new) asPDF) isKindOf: (PDF classAt: #Lab)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #(#DeviceN #(#Red) #DeviceCMYK #Identity) asPDF) isKindOf: (PDF classAt: #DeviceN)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #(#Indexed #DeviceCMYK 1 '') asPDF) isKindOf: (PDF classAt: #Indexed)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #(#Separation #All #DeviceCMYK #Identity) asPDF) isKindOf: (PDF classAt: #Separation)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #(#Pattern) asPDF) isKindOf: (PDF classAt: #Pattern)).
	self assert: (((PDF typeAt: #ColourSpace) specialized: #(#Pattern #DeviceCMYK) asPDF) isKindOf: (PDF classAt: #UncolouredPattern)).
%
method: TypingTests
testSpecializedFonts
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #CIDFontType0) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #CIDFontType0)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #CIDFontType2) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #CIDFontType2)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #CIDFont) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #CIDFont)).
	self assert: (((PDF typeAt: #CIDFont) specialized: (PDF classAt: #CIDFontType0) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #CIDFontType0)).
	self assert: (((PDF typeAt: #CIDFont) specialized: (PDF classAt: #CIDFontType2) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #CIDFontType2)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #Type0) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #Type0)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #Type1) example asSmalltalkValue asPDF) isKindOf: (PDF classAt: #Type1)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #MMType1) example asSmalltalkValue asPDF) isKindOf: (PDF classAt: #MMType1)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #StandardFont) example asSmalltalkValue asPDF) isKindOf: (PDF classAt: #StandardFont)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #TrueType) example asSmalltalkValue asPDF) isKindOf: (PDF classAt: #TrueType)).
	self assert: (((PDF typeAt: #Font) specialized: (PDF classAt: #Type3) empty asSmalltalkValue asPDF) isKindOf: (PDF classAt: #Type3)).
%
method: TypingTests
testSpecializedFunctions
	self assert: (((PDF typeAt: #Function) specialized: #Identity asPDF) isKindOf: (PDF classAt: #Identity)).
	self assert: (((PDF typeAt: #Function) specialized: (PDF classAt: #SampledFunction) example) isKindOf: (PDF classAt: #SampledFunction)).
	self assert: (((PDF typeAt: #Function) specialized: (PDF classAt: #ExponentialInterpolationFunction) example content asPDF) isKindOf: (PDF classAt: #ExponentialInterpolationFunction)).
	self assert: (((PDF typeAt: #Function) specialized: (PDF classAt: #StichingFunction) example content asPDF) isKindOf: (PDF classAt: #StichingFunction)).
	self assert: (((PDF typeAt: #Function) specialized: (PDF classAt: #PostScriptCalculatorFunction) example) isKindOf: (PDF classAt: #PostScriptCalculatorFunction)).
%
method: TypingTests
testSpecializedShadings
	self assert: (((PDF typeAt: #Shading) specialized: (Valuemap with: #ShadingType -> 1) asPDF) isKindOf: (PDF classAt: #FunctionBasedShading)).
	self assert: (((PDF typeAt: #Shading) specialized: (Valuemap with: #ShadingType -> 2) asPDF) isKindOf: (PDF classAt: #AxialShading)).
	self assert: (((PDF typeAt: #Shading) specialized: (Valuemap with: #ShadingType -> 3) asPDF) isKindOf: (PDF classAt: #RadialShading)).
	self assert: (((PDF typeAt: #Shading) specialized: (PDF Stream on: (Valuemap with: #ShadingType -> 4) external: '')) isKindOf: (PDF classAt: #FreeFormGouraudShadedMesh)).
	self assert: (((PDF typeAt: #Shading) specialized: (PDF Stream on: (Valuemap with: #ShadingType -> 5) external: '')) isKindOf: (PDF classAt: #LatticeFormGouraudShadedMesh)).
	self assert: (((PDF typeAt: #Shading) specialized: (PDF Stream on: (Valuemap with: #ShadingType -> 6) external: '')) isKindOf: (PDF classAt: #CoonsPatchMesh)).
	self assert: (((PDF typeAt: #Shading) specialized: (PDF Stream on: (Valuemap with: #ShadingType -> 7) external: '')) isKindOf: (PDF classAt: #TensorProductPatchMesh)).
%
method: TypingTests
testSubtype
	self assert: ((PDF typeAt: #Dictionary) isSubtypeOf: (PDF typeAt: #Object)).
	self deny: ((PDF typeAt: #Object) isSubtypeOf: (PDF typeAt: #Dictionary)).
	"a type is not subtype of itself"
	self deny: ((PDF typeAt: #Object) isSubtypeOf: (PDF typeAt: #Object)).
	self deny: ((PDF typeAt: #Dictionary) isSubtypeOf: (PDF typeAt: #Dictionary)).
	
	self assert: ((PDF typeAt: #Array) isSubtypeOf: (PDF typeAt: #Object)).
	self assert: ((PDF typeAt: #Rectangle) isSubtypeOf: (PDF typeAt: #Object)).
	self assert: ((PDF typeAt: #ColourSpace) isSubtypeOf: (PDF typeAt: #Object)).
	self assert: ((PDF typeAt: #DeviceCMYK) isSubtypeOf: (PDF typeAt: #ColourSpace)).
	self assert: ((PDF typeAt: #Pattern) isSubtypeOf: (PDF typeAt: #ColourSpace)).				"a Name"
	self assert: ((PDF typeAt: #UncolouredPattern) isSubtypeOf: (PDF typeAt: #ColourSpace)).		"an Array"
	self assert: ((PDF typeAt: #UncolouredPattern) isSubtypeOf: (PDF typeAt: #ColourSpace)).
	self assert: ((PDF typeAt: #UncolouredPattern) isSubtypeOf: (PDF typeAt: #Object)).
%
method: TypingTests
testTyped
	| functionType |
	functionType := ObjectType onSymbol: #Function.
	self assert: ((Dictionary with: #FunctionType -> 2) asPDF typed: (Array with: functionType)) pdfType name = #ExponentialInterpolationFunction.
	self assert: (#Identity asPDF typed: (Array with: functionType)) pdfType name = #Identity.
	self assert: ((PDF Stream on: (Dictionary with: #FunctionType -> 0) external: '') asPDF typed: (Array with: functionType)) pdfType name = #SampledFunction.
	self deny: ((Dictionary with: #FunctionType -> 2) asPDF compliesTo: functionType).
	self assert: (((Dictionary with: #FunctionType -> 2) asPDF typed: (Array with: functionType)) compliesTo: functionType)
%
method: TypingTests
testTypeOf
	self assert: ((PDF typeAt: #Dictionary) isTypeOf: (PDF typeAt: #Object)).
	self deny: ((PDF typeAt: #Object) isTypeOf: (PDF typeAt: #Dictionary)).
	"a type is type of itself"
	self assert: ((PDF typeAt: #Object) isTypeOf: (PDF typeAt: #Object)).
	self assert: ((PDF typeAt: #Dictionary) isTypeOf: (PDF typeAt: #Dictionary)).
	
	self assert: ((PDF typeAt: #Array) isTypeOf: (PDF typeAt: #Object)).
	self assert: ((PDF typeAt: #Rectangle) isTypeOf: (PDF typeAt: #Object)).
	self assert: ((PDF typeAt: #ColourSpace) isTypeOf: (PDF typeAt: #Object)).
	self assert: ((PDF typeAt: #DeviceCMYK) isTypeOf: (PDF typeAt: #ColourSpace)).
	self assert: ((PDF typeAt: #Pattern) isTypeOf: (PDF typeAt: #ColourSpace)).				"a Name"
	self assert: ((PDF typeAt: #UncolouredPattern) isTypeOf: (PDF typeAt: #ColourSpace)).		"an Array"
	self assert: ((PDF typeAt: #UncolouredPattern) isTypeOf: (PDF typeAt: #ColourSpace)).
	self assert: ((PDF typeAt: #UncolouredPattern) isTypeOf: (PDF typeAt: #Object)).
%
method: TypingTests
testTypingFlowArray
	| attributeType pdfObject typed |
	attributeType := ObjectType onSymbol: #ColourSpace.
	pdfObject := #(#DeviceN #(#Red) #DeviceCMYK #Identity) asPDF.
	typed := pdfObject typed: (Array with: attributeType).
	self assert: typed pdfType name = #DeviceN.
	self deny: (pdfObject compliesTo: attributeType).
	self assert: (typed compliesTo: attributeType).
	self deny: (attributeType specifiesArray: pdfObject).
	self assert: pdfObject pdfType name = #Array.
	self assert: attributeType type name = #ColourSpace.
	self deny: ((pdfObject pdfType) isTypeOf: attributeType type).
	
	self assert: (pdfObject asType: attributeType) pdfType name = #DeviceN.
	self assert: (attributeType specializedArray: pdfObject) pdfType name = #DeviceN.
	self assert: (attributeType specializedObject: pdfObject) pdfType name = #DeviceN.
	self assert: (attributeType type specialized: pdfObject) pdfType name = #DeviceN.
	self assert: ((attributeType type allTerminalSubtypes) collect: #name) sorted asArray = #(#CalGray #CalRGB #DeviceCMYK #DeviceGray #DeviceN #DeviceRGB #ICCBased #Indexed #Lab #Pattern #Separation #SimplePattern #UncolouredPattern).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #DeviceGray)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #DeviceRGB)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #DeviceCMYK)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Pattern)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Separation)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Indexed)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #UncolouredPattern)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Lab)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #ICCBased)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #CalGray)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #CalRGB)).
	self assert: (pdfObject canBeExemplarOf: (PDF typeAt: #DeviceN)).
	self assert: ((PDF classAt: #DeviceN) isClassForArray: pdfObject).
%
method: TypingTests
testTypingFlowDictionary
	| attributeType pdfObject typed |
	attributeType := ObjectType onSymbol: #Function.
	pdfObject := (Dictionary with: #FunctionType -> 2) asPDF.
	typed := pdfObject typed: (Array with: attributeType).
	self assert: typed pdfType name = #ExponentialInterpolationFunction.
	self deny: (pdfObject compliesTo: attributeType).
	self assert: (typed compliesTo: attributeType).
	self deny: (attributeType specifiesDictionary: pdfObject).
	self assert: pdfObject pdfType name = #Dictionary.
	self assert: attributeType type name = #Function.
	self deny: ((pdfObject pdfType) isTypeOf: attributeType type).
	
	self assert: (pdfObject asType: attributeType) pdfType name = #ExponentialInterpolationFunction.
	self assert: (attributeType specializedDictionary: pdfObject) pdfType name = #ExponentialInterpolationFunction.
	self assert: (attributeType specializedObject: pdfObject) pdfType name = #ExponentialInterpolationFunction.
	self assert: (attributeType type specialized: pdfObject) pdfType name = #ExponentialInterpolationFunction.
	self assert: ((attributeType type allTerminalSubtypes) collect: #name) sorted asArray = #(#ExponentialInterpolationFunction #Identity #PostScriptCalculatorFunction #SampledFunction #StichingFunction).
	self assert: (pdfObject canBeExemplarOf: (PDF typeAt: #ExponentialInterpolationFunction)).
	self assert: ((PDF classAt: #ExponentialInterpolationFunction) isClassForDictionary: pdfObject).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Identity)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #StichingFunction)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #PostScriptCalculatorFunction)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #SampledFunction)).
%
method: TypingTests
testTypingFlowName
	| attributeType pdfObject typed |
	attributeType := ObjectType onSymbol: #ColourSpace.
	pdfObject := #DeviceCMYK asPDF.
	typed := pdfObject typed: (Array with: attributeType).
	self assert: typed pdfType name = #DeviceCMYK.
	self deny: (pdfObject compliesTo: attributeType).
	self assert: (typed compliesTo: attributeType).
	self deny: (attributeType specifiesObject: pdfObject).
	self assert: pdfObject pdfType name = #Name.
	self assert: attributeType type name = #ColourSpace.
	self deny: ((pdfObject pdfType) isTypeOf: attributeType type).
	
	self assert: (pdfObject asType: attributeType) pdfType name = #DeviceCMYK.
	self assert: (attributeType specializedObject: pdfObject) pdfType name = #DeviceCMYK.
	self assert: (attributeType type specialized: pdfObject) pdfType name = #DeviceCMYK.
	self assert: ((attributeType type allTerminalSubtypes) collect: #name) sorted asArray = #(#CalGray #CalRGB #DeviceCMYK #DeviceGray #DeviceN #DeviceRGB #ICCBased #Indexed #Lab #Pattern #Separation #SimplePattern #UncolouredPattern).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #DeviceGray)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #DeviceRGB)).
	self assert: (pdfObject canBeExemplarOf: (PDF typeAt: #DeviceCMYK)).
	self assert: ((PDF classAt: #DeviceCMYK) isClassForName: pdfObject).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Pattern)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Separation)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Indexed)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #UncolouredPattern)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #Lab)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #ICCBased)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #CalGray)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #CalRGB)).
%
method: TypingTests
testTypingFlowNone
	"when there are no attribute types, the object is returned unchanged"
	| pdfObject |
	pdfObject := PDF Dictionary empty.
	self assert: (pdfObject typed: #()) pdfType name = #Dictionary.
	self assert: (pdfObject typed: #()) == pdfObject.
%
method: TypingTests
testTypingFlowStream
	| attributeType pdfObject typed |
	attributeType := ObjectType onSymbol: #Shading.
	pdfObject := (PDF Stream on: (Dictionary with: #ShadingType -> 6) external: '').
	typed := pdfObject typed: (Array with: attributeType).
	self assert: typed pdfType name = #CoonsPatchMesh.
	self deny: (pdfObject compliesTo: attributeType).
	self assert: (typed compliesTo: attributeType).
	self deny: (attributeType specifiesDictionary: pdfObject).
	self assert: pdfObject pdfType name = #Stream.
	self assert: attributeType type name = #Shading.
	self deny: ((pdfObject pdfType) isTypeOf: attributeType type).
	
	self assert: (pdfObject asType: attributeType) pdfType name = #CoonsPatchMesh.
	self assert: (attributeType specializedDictionary: pdfObject) pdfType name = #CoonsPatchMesh.
	self assert: (attributeType specializedObject: pdfObject) pdfType name = #CoonsPatchMesh.
	self assert: (attributeType type specialized: pdfObject) pdfType name = #CoonsPatchMesh.
	self assert: ((attributeType type allTerminalSubtypes) collect: #name) sorted asArray = #(#AxialShading #CoonsPatchMesh #FreeFormGouraudShadedMesh #FunctionBasedShading #LatticeFormGouraudShadedMesh #RadialShading #TensorProductPatchMesh).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #FreeFormGouraudShadedMesh)).
	self assert: (pdfObject canBeExemplarOf: (PDF typeAt: #CoonsPatchMesh)).
	self assert: ((PDF classAt: #CoonsPatchMesh) isClassForStream: pdfObject).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #AxialShading)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #RadialShading)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #TensorProductPatchMesh)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #LatticeFormGouraudShadedMesh)).
	self deny: (pdfObject canBeExemplarOf: (PDF typeAt: #FunctionBasedShading)).
%
method: TypingTests
testTypingImage

	| image stream attributeType |
	image := ImageXObject depth4Mapped.
	stream := PDF Stream on: image content internal: image internal.
	attributeType := ObjectType onSymbol: #XObject.
	self assert: ((stream typed: (Array with: attributeType)) isKindOf: XObject).
	self assert: ((stream asType: attributeType) isKindOf: XObject).
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
	| dict components |
	dict := SymbolDictionary new.
	dict name: #'PDFtalk Demonstrations'.
	dict at: #comment put: 'Examples for using PDFtalk'.
	dict at: #isFunctional put: true.
	dict at: #notice put: ''.
	dict at: #packageName put: 'PDFtalk Demonstrations'.
	dict at: #storeVersion put: '2.5.0.3'.
	components := (GsPackageLibrary packageNamed: #PDFtalkTesting) symbolDict at: #codeComponents.
	components at: dict name put: dict.
%
DoIt
System myUserProfile insertDictionary: PDFtalk at: 1.
%
category: '*PDFtalk Demonstrations-actions'
method: Document
saveAndShowAs: aFilenameString
	| dir |
	dir := (GsFile _expandEnvVariable: 'HOME' isClient: false) , '/'.
	self saveAs: dir , aFilenameString
%
category: '*PDFtalk Demonstrations-demo images'
classmethod: ImageXObject
balloonImage
	"generated with:
	self balloonImageCreated asMethod: #balloonImage in: #'demo images' package: 'PDFtalk Demonstrations' "

	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 17
				bytes: #[189 0 0 189 189 0 255 255 255 156 156 255 0 0 165 66 0 0 0 0 255 0 255 0 255 0 0 123 123 0 132 132 255 0 132 0 132 0 0 255 132 132 255 255 0 123 0 0 165 255 165 0 0 99]);
			add: #Length -> 92;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 141 207 193 18 128 32 8 4 80 164 68 36 212 248 255 159 141 73 205 142 238 129 153 183 167 5 113 39 217 179 68 116 167 116 169 78 30 226 5 0 232 32 121 160 148 81 56 10 179 248 133 216 237 196 42 66 203 88 107 16 210 215 104 220 125 118 78 211 52 54 118 6 178 111 144 114 8 205 126 123 99 206 182 245 24 62 61 108 4 121]
%
classmethod: ImageXObject
balloonInvertedImage
	^ImageXObject
		on: ((Valuemap new: 10)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 135;
			add: #Filter -> #FlateDecode;
			add: #Decode -> #(1 0 1 0 1 0);
			add: #Mask -> (ImageXObject
				on: ((Valuemap new: 9)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 16;
					add: #Height -> 16;
					add: #BitsPerComponent -> 1;
					add: #ImageMask -> true;
					add: #Decode -> #(1 0);
					add: #Length -> 35;
					add: #Filter -> #FlateDecode;
					yourself)
				externalBytes: #[120 218 99 96 96 96 96 62 192 255 65 254 135 253 31 8 148 255 33 255 131 255 3 251 3 230 3 64 41 6 0 206 4 12 157]) newReference;
			yourself)
		externalBytes: #[120 218 189 210 205 13 128 32 12 6 208 206 198 42 140 193 181 99 112 101 12 102 171 253 19 72 168 196 131 177 246 96 154 247 209 68 36 250 187 74 129 209 103 9 32 221 168 129 189 34 63 210 79 184 86 66 156 145 14 222 123 196 48 192 108 102 18 70 12 35 131 249 2 6 56 39 236 83 228 105 34 153 233 241 190 235 228 117 192 221 187 111 193 205 107 36 175 135 47 190 165 232 19 133 94 7 177 151 155 114 239 248 246 249 112 101 168 194 48 199 207 216 138 183 219 207 240 6 127 94 23 53 21 60 206]
%
classmethod: ImageXObject
balloonMaskedImage
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> (Indexed
				base: #DeviceRGB
				number: 17
				bytes: #[189 0 0 189 189 0 255 255 255 156 156 255 0 0 165 66 0 0 0 0 255 0 255 0 255 0 0 123 123 0 132 132 255 0 132 0 132 0 0 255 132 132 255 255 0 123 0 0 165 255 165 0 0 99]);
			add: #Length -> 92;
			add: #Filter -> #FlateDecode;
			add: #Mask -> (ImageXObject
				on: ((Valuemap new: 9)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 16;
					add: #Height -> 16;
					add: #BitsPerComponent -> 1;
					add: #ImageMask -> true;
					add: #Decode -> #(1 0);
					add: #Length -> 35;
					add: #Filter -> #FlateDecode;
					yourself)
				externalBytes: #[120 218 99 96 96 96 96 62 192 255 65 254 135 253 31 8 148 255 33 255 131 255 3 251 3 230 3 64 41 6 0 206 4 12 157]) newReference;
			yourself)
		externalBytes: #[120 218 141 207 193 18 128 32 8 4 80 164 68 36 212 248 255 159 141 73 205 142 238 129 153 183 167 5 113 39 217 179 68 116 167 116 169 78 30 226 5 0 232 32 121 160 148 81 56 10 179 248 133 216 237 196 42 66 203 88 107 16 210 215 104 220 125 118 78 211 52 54 118 6 178 111 144 114 8 205 126 123 99 206 182 245 24 62 61 108 4 121]
%
classmethod: ImageXObject
balloonMaskImage
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 16;
			add: #Height -> 16;
			add: #BitsPerComponent -> 1;
			add: #ImageMask -> true;
			add: #Decode -> #(1 0);
			add: #Length -> 35;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 99 96 96 96 96 62 192 255 65 254 135 253 31 8 148 255 33 255 131 255 3 251 3 230 3 64 41 6 0 206 4 12 157]
%
classmethod: ImageXObject
buttonAlphaImage
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 64;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 1148;
			add: #SMask -> (ImageXObject
				on: ((Valuemap new: 7)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 64;
					add: #Height -> 32;
					add: #BitsPerComponent -> 8;
					add: #ColorSpace -> #DeviceGray;
					add: #Length -> 2048;
					yourself)
				externalBytes: (ByteArray fromASCII85String: 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!"sKfDYaLs8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W&LSMpNKzz"-!3Ys8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W
	-!s8W-!s8W-!s8W-!s8W-!s8W-!s8@lYzzN;rqXs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s
	8W-!s8W-!s8W-!s8W-!s8W+Xz!!!!XrVuots8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W,t2ZNgX!!!"is8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!SH&Wi!!!#Ns8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!f)PdN!!!#ts8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!r;Zft!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!$!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!rr<$!!!!#ts8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!r;Zft!!!#Ns8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!f)PdN!!!"is8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W-!SH&Wi!!!!XrVuots8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
	s8W-!s8W-!s8W-!s8W,t2ZNgXzN;rqXs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-
	!s8W-!s8W-!s8W+Xzz"-!3Ys8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8
	W-!s8@lYzz!!"sKfDYaLs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W&LSMpNK
	zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz~>')) newReference;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhVQ;lVeI0''F+&VXFl*Q8.fP=9@4qs''cfS1W("''-/]A*L"cHD6K??GjU=Q[Q%Ord6c";%3LLcTC+
	=''51P9]064aRf/68m">6QJ@0jr#KJI/)gIoBs95g=ku]c?>6"CSe^&Li:<ZjoO+HG,^P2qRlNuBOk]9
	6R3Z@mA+sBL:46VV4$uFf-''*[?!W$5d=or-P''btrRtWW]<$X2dWAa6aX8dWZnVc@sdN"=uC"Jg_KN9
	n*PY\rAqg*Y^V+gS6h%''[I0$_9@.$)Dcd?5E%>VYo44?`6a"[jM86Bhfl7&>R8eLCiu<YL-i6P(.F6#
	&5%WR6m)<_H=o/OaAr''W''8UHC[g7LZf0O2FaGB@PSfEB!VeQZ''Z\8Ws)sbT*?>/DIW6VRIl2TBR"4
	KnN[V_J*#^Gje[6If74ZF<hl(5Y[B>==YknH/Xe+Fldj;b1`Hl02B''tZ6F.QS(,T642MfUqLY*UWLr2
	dslG4j]ID+GI]''jcbgu^"Lm/L#I@IpI+1b1T2,au,SVU2D;R.Y,f?S\''%BXV)R9BIuk+\n@3ic;s*]
	/oE;^!k]hdbNX-aQZJG_ifkpP''MtJ]OW8-P!9\6"^;RTF.h3s_<codVl(]e*m_4V`q=-!)D>I#^NcIG
	*5=_UP.?LEk:VKl?np*FD?Q`&*A7m3F6R/Yq/^2_4&oGRD)o?qjn+BYL08mY2Ct7"UR=TXO7pEbI=@R+
	''?A;23EgI!\EH`i^L''5\`10"QJfV#=bVYc:B_J3h@3>sl?ii%$LC4J"k2l$ScJG&0n''A@O,PUH/MI
	1Br0kagt&!uWQ0SA:K+;fb7B4`8B1Vcb=h_4&q*''8T.Ma=6WK@sWBU7%QTS5=$Tqh78#PJCjTDl";\j
	BufGZY0iBGqLq/''?5k7pM]Nbj"A?k--*J7(S`u''Nkik/k$]%f(PMZS4dIlWfq5uhY$rY0)9!1%K,J;
	6-Q7sOpPX>KEtooBU_r($FRhmWbS&4lo!35LW5l3R@UrY_$@1Ht4Mq&$5(/iW&`G0.-Ld?"U)qLGMNN;
	_;TU-,M$\lJfDU''%3:G0"^Rt3,Ik5M9N&7bXF7P9NNUcJ0?N6g5ES([@O"8""S>U;[Mm;O/!ABQLoC!
	bb5<9ehZVa)PEg>YOjL`eu@t2X-NCZPDLBdV\qL="eY`$2G\&E:D<uUAi0%JOCY<I$=Wj:VdH!0AD8b&
	LkK"M2rac"mPm)dDqrds_d0VNeW2*!kj7eZ\^k:`D;s"XHHaZrYjUYiZOGBC4L\omTKHNV#$^O`#Z5''
	=02iqTdaUEu)@7>2!<&+%Kmqu=en3F([&IsWB)^3Vdpo''GW!e%Ygq#7nFrmC[Y@m<2.GcV7+u2Dk>.Q
	[Algqmo2d<Dh_Aq>55S4p*mTH,,c4QL]M1eC2ll^T5&]XnCg0f:.9$g3D`VqRR''B2.rscT<(YrJ`l4X
	IPs*6D0BQ9[QOQj=^HaJ~>')
%
classmethod: ImageXObject
fixedDepth6Image
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 8;
			add: #Height -> 8;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 86;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 29 142 219 21 0 0 8 65 239 146 150 180 164 200 143 78 30 149 20 78 148 48 182 99 197 108 33 71 138 168 18 28 20 152 101 166 106 204 59 200 102 161 178 100 209 116 23 70 134 213 172 177 69 172 111 238 154 88 241 166 130 94 104 168 44 224 255 224 175 242 55 248 70 62 207 187 121 141 159 14 152 118 95 161]
%
classmethod: ImageXObject
pdfIconFigureImage
	^ImageXObject
		on: ((Valuemap new: 8)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 1186;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhU-&D+ml0(ru5Q^m@Lo`''b8JWbnIbRa?R%6]J<,";76dj0DAV1)NX+ONe1mka^Old!]nMe%jsI[_N
	#6?:"_LS<2,ZBuF0pQ@K$7=A''%/"kn=,qtFE)"RC<sP5Y"5jQX5Lrgn2&o:0muqXslfLT?VFY?rBd\[
	e,>fpN"h4<CED$$/''GY65:C$lBBW9<Y1eUZ63QTu=m3UIRh<P/`a/Z"(g^UIlhYL5m5k9M"B.MsEHHW
	;"(.o=fW"RHtH`Zn"&CA*;-EGO2g]''@X70CP,#QnbopDPK@Jp#3FU(8iAi''4)oj:H''6Fnn>E,-WDk
	[qamPt#WPh3&6=E*''E,>RR;4266p[5k'']<!_AImumkPt2rd6p+qG\ql0BW[aQ7LZnpN0c1usPEI]%;
	U))9cD@E7MMh2nBc-a*JN#fcT:1ABY?\?SjkSoBCt<-C*Za(KA]p9s)bjaL59`L$SbB+B'',)$F6hJI]
	%Y\@952M]hi&Z8<UX]E*SX1.+03mE_-QQqZYTm$pg@;g<EVpT/Uh@RL''>s`5eCN2o\\&>diUqLe7RfF
	#4.#N#`g9Tfd,)IR1>.Ig5#GE1NcY''nF[n^uS/8H8SBEd=p+0CujdKq!12kn=3''=jC@>mV3&>=c=,-
	06$)JT6qQ<)M+nF3@1[TOe!H_[=,77Y,8bm!1]p?_lF-O9XobY5D+c''qk6o0l^2UTgtX6sW3O7/)Nj''
	;9kY>$<C*.S<?,.k<+Na'':;IO^C]P)c;C[rpL8*8Pf(BSQuY6@$k9:pXs?bkK`$8r1::&?]Yhn<ha3#
	HUM$]UtoiFUR2''PU9GD8DH''S6;\Sq5''@dZM+fZig-b;t#+P=@2CCiPsW(qU)B;0.8T87@uh&n0m''
	":5XIm9=Q%N''JL+KR["(PuO,$AQB]&/>TH"juL$77<a[SL=855SXiY9V`iS,<A3a&Q(HKe+q=M)]g%A
	=HLTop>0E@`X+,Q9(h8n-.*Mf[CEF-FuuFSIUcmJMW_n:iS\"''7hC%F\9E&EZQQa3]bi%<_%H:RqX\@
	!\E)^^E?Ve6O@<e>I#d6=o%C)q?Wl''OrSdt!2AEmog,2p5%f/_L_nkO%k0I%/F)c1Us/OW=d0BR#YL0
	SP:ALoj6g)4p`4irL^h7LBIa9(BU%9''X?T`''\63OT)0^qq:F02SE''d)GhgGuAo0T5I@In^BQd@aMp
	&HqcnPQX[T$&-\U''`@4E4>)?A>//TK^Dp9)S"Gb9obSGAY$PB]heqV!3j,Jt=i=lcnN?8ake:7OT.;S
	8J9foR/=W_ea''^a@_#YiC:j-a%I-K?*Z[^Z[`92-&l1KEr$L;Zhg]JX/*;(2;n(t^*/,N!MI\IKNQdP
	;2DU+5G2t>E:pmIO(Y.GX%rS@>E5''Xj3r$R">"IKGq\G0!]K"59!Y&A`.4i''C9_#Y!I6j-ZZ7o,VgS
	`fhAnM,K_O;Kb^A>BSbJ7?N;Xh_b7X5U7,!/C8/rWuu<@OfrDpi+4P]spc%64g<F^B*\4A''+~>')
%
classmethod: ImageXObject
pdfIconImage
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 8;
			add: #ColorSpace -> #DeviceRGB;
			add: #Length -> 1191;
			add: #Filter -> #FlateDecode;
			add: #Mask -> (ImageXObject
				on: ((Valuemap new: 9)
					add: #Subtype -> #Image;
					add: #Type -> #XObject;
					add: #Width -> 32;
					add: #Height -> 32;
					add: #BitsPerComponent -> 1;
					add: #ImageMask -> true;
					add: #Decode -> #(1 0);
					add: #Length -> 42;
					add: #Filter -> #FlateDecode;
					yourself)
				externalBytes: #[120 218 99 96 0 2 251 255 32 220 80 255 255 255 1 32 126 0 196 31 128 248 7 16 255 1 226 127 64 252 31 25 3 213 82 13 3 0 144 20 79 228]) newReference;
			yourself)
		externalBytes: (ByteArray fromASCII85String: 'GhU-&D+ml0(rq%3psQ*kQtSf[[7rJI'',hElW"G>M5_?=i>aC4R#"(s"ZC0YUSb!d5\hB(\)H_C1(79
	Wn91Y_F''/E`=NED+V&l>M@f$XV:JbIsDrk0*b_)bo6AH+bPH$\nl^ZV-M4Qi5Pf^OCUdH[OVl.3mnDJ
	j&''ApQ`aO2pL*_Aj''+CL.)F"+%Z;ghZ?Ak]e%W-o''+qm+=j,d\oJeHMfa=7%llld*\V@#mpQMEIET
	QpDuG1g:uMnQ2VqhFN)7Cm+V-ucCGJT@Tp3WCClCS^Albt1`?dWTR<4q_5+!8-Vnc\:,*V(rj9%8V/eU
	Wfq"?aR@*3&bO(&pN?1&5,*`Z*fe^-b[j<B`ccF1?@e#Y<LrU]:>sq(\<L$Uc`H6]d(lXNJ:.^jN.VDX
	XB2_`W77H"]''T@>4d$pZR9hrR\=0L=g13R+.2IeSXLlUoZ](P<b9uaEA*tb6M:@m#4naZ.B+aRZSLKm
	"a+7DloE#gsud:`NMb0(1"(GBeB''+U97=K=iAFt>:B(r''3)mb,+t-kcJDeCN2oV7[4PiUqN!<bl>\k
	>FLlpdu_Jg:)!&.^dE0j+W3(32^ZLE"j#%Go7RE\m/b.cCnfSY0!Ofe)nnN_S`uS+p64O6ms4SaC;Euc
	-;pd&7T?Bh$jmE[XGbJ19rhgl?RLDleG`1T''t;Dn8iX.^WObgCYH(JEB7H=AN^M2HUQ@Pe4K:_kR%pe
	Vkp5dU8"Bh[''[-E&oc%uP7mYU7)''=VnF-B0&t.4trD%!l8>I&YH?nC\ZONEhO/MJodaES16ASg%RYg
	GGBo%joPKAJe"rrK:>%"m<;,''bZi."I#6ZeZnQDgD=*`3#XpD9o^n&1t^rjAATWel0K\jLS''W/sR&%
	fQA)?t)3*j=S$KmbhFrJpk`[##difbhEq%T+_qOI7A=0kYiO&5kHdnROF6\/C?sUfgJTu5<Eb-G^*U^!
	[$*BRgC#]W6@lqe''"'']?eElF^:)e`La)VRNK#H[%uZ3qG<m9Vb_["iOV,okghujqP^n!KaT(POT;?"
	\PF''7Bgq5lfSCR+3Q4:uLZEejhAT.8M'',9.spqH(G)3l]8,688ZT<F_K>@#Ln`D-B5<l;tD&,ND8X_
	(>#p/P1Lc@9nlI=6Noce*''hhS!Sik:^SaGZ6/G#\6N1kG"\_>?h+X5/an=ZPlPG(1UkRRMnYt7]g,D#
	jO&l$(+m:$D3O*\MIkX>RImHIZ%cd3@kpm59E>[0.us(]=(JKh9KcCCfT#kLs+6+H-u*-I^`?A>@*<jF
	1;Sp-<^/)hI(kd"%mO*m+e-,d^;/Krj&_acf$(sl*url`o4_D#<p3gl8(3Q]liL]p=UG`6mnKWKDrdDS
	=@!+iN"j*1G`HUG;oHrHhHiUn:''>M:B3lj0G+A*iMR4jF2>k$htl>YJq4,Y!ueD"#dVg<Si0k9a)UG*
	A,J;00kM9D8/GG0KoFtoJV//I_oDd;(P5[M5OhMLP8.!#<l9\CrpRg;=r2d0FoDhhap.e~>')
%
classmethod: ImageXObject
pdfIconMaskImage
	^ImageXObject
		on: ((Valuemap new: 9)
			add: #Subtype -> #Image;
			add: #Type -> #XObject;
			add: #Width -> 32;
			add: #Height -> 32;
			add: #BitsPerComponent -> 1;
			add: #ImageMask -> true;
			add: #Decode -> #(1 0);
			add: #Length -> 42;
			add: #Filter -> #FlateDecode;
			yourself)
		externalBytes: #[120 218 99 96 0 2 251 255 32 220 80 255 255 255 1 32 126 0 196 31 128 248 7 16 255 1 226 127 64 252 31 25 3 213 82 13 3 0 144 20 79 228]
%
category: '*PDFtalk Demonstrations-actions'
method: Page
saveAndShowAs: aFilenameString
	| document |
	document := Document new.
	document root addPage: self.
	document saveAndShowAs: aFilenameString
%
category: '*PDFtalk Demonstrations-demos'
classmethod: PDF
allDemos_appendPDFs
	"shows how to add all pages of a PDF to another.
	We take all pdfs from the current directory which start with 'demo' and append them all to a new document"
	"PDF allDemos_appendPDFs"

	| doc files |
	doc := Document new.
	files := GsFile
		contentsOfDirectory: (GsFile _expandEnvVariable: 'HOME' isClient: false)
		onClient: false.
	(files select: [:path | '*/demo*.pdf' match: path]) sorted do: [:path |
		| file |
		file := GsFile openReadOnServer: path.
		doc appendAllPagesFrom: (File readFrom: file)].
	doc saveAndShowAs: 'allDemos_appendPDFs.pdf'
%
classmethod: PDF
demo01_HelloWorld
	"PDF demo01_HelloWorld"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 70 @ 20) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer fillColor: CmykColor black.
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 10.
			renderer add: (NextLineRelative operands: #(10 5)).
			renderer showString: 'Hello World']].
	page saveAndShowAs: 'demo01_HelloWorld.pdf'
%
classmethod: PDF
demo01_minimalPDF
	"bare bones for showing the internals (dont worry - most of that is abstracted away (see next demos)"
	"self demo01_minimalPDF"

	| root page trailer refs writer xrefs startxref fst |
	root := (PDF classAt: #Catalog) new.
	root at: #Type put: #Catalog.
	root at: #Pages put: (PDF classAt: #Pages) new newReference.
	root Pages at: #Type put: #Pages.
	root Pages at: #Kids put: #().
	root Pages at: #Count put: 0.
	page := PDF Page new.
	page at: #Type put: #Page.
	root Pages at: #Kids put: (root Pages Kids with: page newReference).
	root Pages at: #Count put: root Pages count.
	page at: #Parent put: (root at: #Pages).	"get the reference"
	trailer := (PDF classAt: #Trailer) new.
	trailer at: #Root put: root newReference.
	refs := trailer tracedReferences.
	trailer at: #Size put: refs size + 1.
	refs doWithIndex: [:reference :id | reference assignNewNumber: id].
	writer := Writer new.
	writer writeVersionHeader: (Version highestVersionIn: refs).
	xrefs := writer writeObjects: refs.
	startxref := writer position.
	writer writeCrossReferenceSection: xrefs.
	writer writeTrailer: trailer.
	writer writeStartxref: startxref.
	fst := GsFile
		open: (GsFile _expandEnvVariable: 'HOME' isClient: false) , '/demo01_minimalPDF.pdf'
		mode: 'wb'
		onClient: false.
	[fst nextPutAll: writer contents] ensure: [fst close]
%
classmethod: PDF
demo01a_normalPDF
	"usually adds /Info and /ID to the /Trailer"
	"self demo01a_normalPDF"

	| document |
	document := Document new.
	document root addPage: PDF Page empty.
	document saveAs: (GsFile _expandEnvVariable: 'HOME' isClient: false) , '/demo01a_normalPDF.pdf'
%
classmethod: PDF
demo02_graphics
	"PDF demo02_graphics"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer add: (SetStrokingCMYK operands: (CmykColor cyan: 0 magenta: 0.6 yellow: 1 black: 0) asPDFArray).
		renderer linewidth: 5.
		renderer moveTo: 10 @ 10.
		renderer lineTo: 60 @ 80.
		renderer stroke.
		renderer fillColor: (CmykColor cyan: 0.5 magenta: 0 yellow: 0 black: 0.5).
		renderer addRectangleLeft: 20 bottom: 20 width: 20 height: 40.
		renderer fill.
		renderer strokeColor: (CmykColor cyan: 0.4 magenta: 0.6 yellow: 0 black: 0).
		renderer dash: ((PDF classAt: #Dash) array: #(2 1) offset: 0).
		renderer linewidth: 3.
		renderer displayArcBBoxOrigin: 25 @ 45 extent: 30 @ 30 startAngle: 270 sweepAngle: 270.
		renderer stroke].
	page saveAndShowAs: 'demo02_graphics.pdf'
%
classmethod: PDF
demo03_text
	"PDF demo03_text"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 165 @ 30) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textRenderingMode: 0.
		renderer fillColor: (CmykColor cyan: 0 magenta: 0.6 yellow: 1 black: 0).
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 16.
			renderer add: (NextLineRelative operands: #(10 10)).
			renderer showString: 'Helvetica (Standard)']].
	page saveAndShowAs: 'demo03_text.pdf'
%
classmethod: PDF
demo03a_text_NonASCII
	"PDF demo03a_text_NonASCII"
	"no change. The normal Smalltalk strings can be used"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 150 @ 30) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textRenderingMode: 0.
		renderer fillColor: (CmykColor cyan: 0 magenta: 0.6 yellow: 1 black: 0).
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 16.
			renderer add: (NextLineRelative operands: #(5 10)).
			renderer showString: 'Übertrag: 1.00 € ©®']].
	page saveAndShowAs: 'demo03a_text_NonASCII.pdf'
%
classmethod: PDF
demo03b_text_FontCharactersTable
	"PDF demo03b_text_FontCharactersTable"

	| font page |
	font := #Helvetica.
	"
	font := #HelveticaBold.
	font := #HelveticaOblique.
	font := #HelveticaBoldOblique.
	font := #TimesRoman.
	font := #TimesBold.
	font := #TimesItalic.
	font := #TimesBoldItalic.
	font := #Courier.
	font := #CourierBold.
	font := #CourierOblique.
	font := #CourierBoldOblique.
	font := #Symbol.
	font := #ZapfDingbats.
	font := #NimbusSansLRegu.
	font := #FreeSansBold.
	"
	page := PDF Page newInBounds: (0 @ 0 corner: 400 @ 380) colorspace: (PDF classAt: #DeviceGray) new render: [:renderer |
		| line |
		line := renderer bounds extent y - 20.
		renderer setFont: #Helvetica size: 14.
		renderer textObjectDo: [
			renderer add: (NextLineRelative
				with: 5
				with: line).
			renderer showString: font printString , ' with WinAnsi encoding'].
		line := line - 20.
		renderer strokeColor: (ColorValue fromBytesRed: 170 green: 170 blue: 170).
		renderer linewidth: 0.5.
		renderer moveTo: (50 + 18) @ (line - 5).
		renderer lineTo: (50 + 18 + (16 * 20)) @ (line - 5).
		renderer moveTo: (50 + 18 + (16 * 20)) @ (line - 5).
		renderer lineTo: (50 + 18 + (16 * 20)) @ (line - (16 * 20) - 5).
		renderer stroke.
		renderer fillColor: (ColorValue fromBytesRed: 128 green: 128 blue: 128).
		0 to: 15 do: [:column |
			| left |
			left := (column + 1) * 20 + 50.
			renderer moveTo: (left - 2) @ (line - 5).
			renderer lineTo: (left - 2) @ (line - (16 * 20) - 5).
			renderer stroke.
			renderer textObjectDo: [
				renderer add: (NextLineRelative
					with: left + 3
					with: line).
				renderer showString: (column printStringRadix: 16)]].
		0 to: 15 do: [:row |
			| left |
			line := line - 20.
			left := 50.
			renderer moveTo: (left + 18) @ (line - 5).
			renderer lineTo: (left + 18 + (16 * 20)) @ (line - 5).
			renderer stroke.
			renderer setFont: #Helvetica size: 14.
			renderer fillColor: (ColorValue fromBytesRed: 128 green: 128 blue: 128).
			renderer textObjectDo: [
				renderer add: (NextLineRelative
					with: 10
					with: line).
				renderer showString: (row * 16 printStringRadix: 16) , ' - ' , ((row + 1) * 16 - 1 printStringRadix: 16)].
			renderer setFont: font size: 16.
			renderer fillColor: ColorValue black.
			0 to: 15 do: [:column |
				| char |
				left := left + 20.
				char := (row * 16 + column) asCharacter.
				renderer textObjectDo: [
					renderer add: (NextLineRelative
						with: left
						with: line).
					renderer showString: (String with: char)]]]].
	page saveAndShowAs: 'demo03b_text_FontCharactersTable.pdf'
%
classmethod: PDF
demo03c_text_DifferentFonts
	"PDF demo03c_text_DifferentFonts"
	"for each style, the appropriate font needs to be set"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 300 @ 30) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textObjectDo: [
			renderer add: (NextLineRelative operands: #(5 10)).
			renderer setFont: #Helvetica size: 16.
			renderer showString: 'normal'.
			renderer setFont: #'Helvetica-Bold' size: 16.
			renderer showString: 'bold'.
			renderer setFont: #'Helvetica-Oblique' size: 16.
			renderer showString: 'italic'.
			renderer setFont: #'Helvetica-BoldOblique' size: 16.
			renderer showString: 'boldItalic'.
			renderer setFont: #'Times-Roman' size: 16.
			renderer showString: 'Times'.
			renderer setFont: #'Times-BoldItalic' size: 16.
			renderer showString: 'boldItalic']].
	page saveAndShowAs: 'demo03c_text_DifferentFonts.pdf'
%
classmethod: PDF
demo03d_text_Underline
	"PDF demo03d_text_Underline"
	"Underline needs to be drawn as line"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 160 @ 30) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		| string scale underlineLinewidth underlinePosition stringWidth |
		string := 'Helvetica (Standard)'.
		scale := 16.
		renderer textObjectDo: [
			renderer add: (NextLineRelative operands: #(5 10)).
			renderer setFont: #Helvetica size: scale.
			renderer showString: string].
		underlineLinewidth := (((PDFtalk at: #Fonts) at: #Font) fontAt: #Helvetica) underlineThicknessInTextSpace * scale.
		renderer linewidth: underlineLinewidth.
		underlinePosition := (((PDFtalk at: #Fonts) at: #Font) fontAt: #Helvetica) underlinePositionInTextSpace * scale.
		renderer moveTo: 5 @ (10 + underlinePosition).
		stringWidth := ((((PDFtalk at: #Fonts) at: #Font) fontAt: #Helvetica) widthOfString: string) * scale.
		renderer lineTo: (5 + stringWidth) @ (10 + underlinePosition).
		renderer stroke].
	page saveAndShowAs: 'demo03d_text_Underline.pdf'
%
classmethod: PDF
demo03e_text_CopyrightAndTrademarkInAllFonts
	"PDF demo03e_text_CopyrightAndTrademarkInAllFonts"

	| page y |
	page := PDF Page newInBounds: (0 @ 0 corner: 300 @ 230) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		y := 230.
		((PDFtalk at: #Fonts) at: #StandardFont) definedFontKeys do: [:font |
			y := y - 15.
			renderer textObjectDo: [
				renderer setFont: #Helvetica size: 10.
				renderer add: (NextLineRelative
					with: 5
					with: y).
				renderer showString: font asString , ': '].
			renderer textObjectDo: [
				renderer setFont: font size: 10.
				renderer add: (NextLineRelative
					with: 110
					with: y).
				renderer showString: 'Copyright©, Trademark®']]].
	page saveAndShowAs: 'demo03e_text_CopyrightAndTrademarkInAllFonts.pdf'
%
classmethod: PDF
demo04_fonts
	"PDF demo04_fonts"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 260 @ 70) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		renderer textRenderingMode: 0.
		renderer fillColor: CmykColor black.
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 16.
			renderer add: (NextLineRelative operands: #(10 50)).
			renderer showString: 'Helvetica (Standard)'].
		renderer fillColor: (CmykColor cyan: 0.5 magenta: 0.6 yellow: 0 black: 0).
		renderer textObjectDo: [
			renderer setFont: #NimbusSansLRegu size: 16.
			renderer add: (NextLineRelative operands: #(10 30)).
			renderer showString: 'Nimbus Sans L Regular (Type-1)'].
		renderer fillColor: (CmykColor cyan: 0 magenta: 0.6 yellow: 1 black: 0).
		renderer textObjectDo: [
			renderer setFont: #FreeSansBold size: 16.
			renderer add: (NextLineRelative operands: #(10 10)).
			renderer showString: 'Free Sans Bold (OpenType(PS))']].
	page saveAndShowAs: 'demo04_fonts.pdf'
%
classmethod: PDF
demo04a_loadedFonts
	"PDF demo04a_loadedFonts"

	| numberOfFonts page height |
	numberOfFonts := ((PDFtalk at: #Fonts) at: #Font) loadedFonts size.
	height := numberOfFonts * 35 + 50.
	page := PDF Page newInBounds: (0 @ 0 corner: 400 @ height) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
		renderer textRenderingMode: 0.
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 18.
			renderer
				textMatrix: #(1 0 0 1 10), (Array with: height - 20);
				showString: 'Font list'.
			((PDFtalk at: #Fonts) at: #Font) loadedFonts keys asSortedCollection do: [:each |
				renderer add: (NextLineRelative operands: #(0 -20)).
				renderer setFont: #Helvetica size: 12.
				renderer showString: each asString.
				renderer setFont: each size: 12.
				renderer add: (NextLineRelative operands: #(0 -15)).
				renderer showString: 'The quick brown fox jumps over the lazy dog']]].
	page saveAndShowAs: 'demo04a_loadedFonts.pdf'
%
classmethod: PDF
demo04b_MICRDemo
	"PDF demo04b_MICRDemo"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 165 @ 30) colorspace: (PDF classAt: #DeviceCMYK) new render:  [:renderer |
		renderer textObjectDo: [
			renderer setFont: #MICRDemoCheckPrixa size: 14.
			renderer add: (NextLineRelative operands: #(10 10)).
			renderer showString: '01234567890 / ; : -']].
	page saveAndShowAs: 'demo04b_MICRDemo.pdf'
%
classmethod: PDF
demo05_transparency
	"PDF demo05_transparency"

	(PDF Page newInBounds: (0 @ 0 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		| transparentGState xObject |
		renderer setExtGState: (PDF classAt: #ExtGState) forTransparency.
		renderer fillColor: (CmykColor cyan: 0.5 magenta: 0 yellow: 0 black: 0.5).
		renderer addRectangleLeft: 20 bottom: 20 width: 20 height: 40.
		renderer fill.
		renderer strokeColor: (CmykColor cyan: 0.4 magenta: 0.6 yellow: 0 black: 0).
		renderer dash: ((PDF classAt: #Dash) array: #(2 1) offset: 0).
		renderer linewidth: 3.
		renderer displayArcBBoxOrigin: 25 @ 45 extent: 30 @ 30 startAngle: 270 sweepAngle: 270.
		renderer stroke.
		transparentGState := (PDF classAt: #ExtGState) forTransparency.
		transparentGState at: #BM put: #Multiply.
		transparentGState at: #CA put: 0.8.
		transparentGState at: #ca put: 0.8.
		renderer setExtGState: transparentGState.
		xObject := (PDF classAt: #TransparencyGroup) newInBounds: (7.5 @ 7.5 corner: 62.5 @ 82.5) colorspace: (PDF classAt: #DeviceCMYK) new in: renderer render: [:formRenderer |
			formRenderer strokeColor: (CmykColor cyan: 0 magenta: 0.6 yellow: 1 black: 0).
			formRenderer linewidth: 5.
			formRenderer dash: (PDF classAt: #Dash) empty.
			formRenderer moveTo: 10 @ 10.
			formRenderer lineTo: 60 @ 80.
			formRenderer stroke].
		renderer paintXObject: xObject]) saveAndShowAs: 'demo05_transparency.pdf'
%
classmethod: PDF
demo06_shading
	"PDF demo06_shading"

	(PDF Page newInBounds: (0 @ 0 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		| function axialShading |
		function := (PDF classAt: #ExponentialInterpolationFunction) empty.
		function at: #Domain put: #(0 1.0).
		function at: #N put: 1.
		function at: #C0 put: (CmykColor cyan: 0 magenta: 0.36 yellow: 0.6 black: 0) asPDFArray.
		function at: #C1 put: (CmykColor cyan: 0.6 magenta: 0 yellow: 0.6 black: 0) asPDFArray.
		axialShading := (PDF classAt: #AxialShading) empty.
		axialShading at: #ColorSpace put: #DeviceCMYK.
		axialShading at: #Coords put: (10 @ 0) asPDFArray , (90 @ 0) asPDFArray.
		axialShading at: #Function put: function newReference.
		renderer isolatedDo: [
			renderer addRectangleLeft: 10 bottom: 10 width: 80 height: 80.
			renderer setClippingPath.
			renderer paintShading: axialShading]]) saveAndShowAs: 'demo06_shading.pdf'
%
classmethod: PDF
demo07_shadingStiching
	"PDF demo07_shadingStiching"

	(PDF Page newInBounds: (0 @ 0 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		| function1 function2 stichingFunction axialShading |
		function1 := (PDF classAt: #ExponentialInterpolationFunction) empty.
		function1 at: #Domain put: #(0 1.0).
		function1 at: #N put: 0.5.
		function1 at: #C0 put: (CmykColor cyan: 0 magenta: 0.36 yellow: 0.6 black: 0) asPDFArray.
		function1 at: #C1 put: (CmykColor cyan: 0.6 magenta: 0 yellow: 0.6 black: 0) asPDFArray.
		function2 := (PDF classAt: #ExponentialInterpolationFunction) empty.
		function2 at: #Domain put: #(0 1.0).
		function2 at: #N put: 2.
		function2 at: #C0 put: (CmykColor cyan: 0.6 magenta: 0 yellow: 0.6 black: 0) asPDFArray.
		function2 at: #C1 put: (CmykColor cyan: 0.6 magenta: 0.36 yellow: 0 black: 0) asPDFArray.
		stichingFunction := (PDF classAt: #StichingFunction) empty.
		stichingFunction at: #Domain put: #(0 1.0).
		stichingFunction
			at: #Functions
			put: (Array
				with: function1 newReference
				with: function2 newReference).
		stichingFunction at: #Bounds put: #(0.5).
		stichingFunction at: #Encode put: #(0 1.0 0 1.0).
		axialShading := (PDF classAt: #AxialShading) empty.
		axialShading at: #ColorSpace put: #DeviceCMYK.
		axialShading at: #Coords put: #(0 0 1 0).
		axialShading at: #Function put: stichingFunction newReference.
		renderer isolatedDo: [
			renderer addRectangleLeft: 10 bottom: 10 width: 80 height: 80.
			renderer setClippingPath.
			renderer concat: (((PDF classAt: #Matrix) scaling: 80 @ 80) translatedBy: 10 @ 10).
			renderer paintShading: axialShading]]) saveAndShowAs: 'demo07_shadingStiching.pdf'
%
classmethod: PDF
demo08_shadingRadial
	"PDF demo08_shadingRadial"

	(PDF Page newInBounds: (0 @ 0 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		| function shading |
		function := (PDF classAt: #ExponentialInterpolationFunction) empty.
		function at: #Domain put: #(0 1.0).
		function at: #N put: 1.
		function at: #C0 put: (CmykColor cyan: 0 magenta: 0.36 yellow: 0.6 black: 0) asPDFArray.
		function at: #C1 put: (CmykColor cyan: 0.6 magenta: 0 yellow: 0.6 black: 0) asPDFArray.
		shading := (PDF classAt: #RadialShading) empty.
		shading at: #ColorSpace put: #DeviceCMYK.
		shading at: #Coords put: #(-0.3 0.3 0 0 0 1).
		shading at: #Function put: function newReference.
		renderer isolatedDo: [
			renderer addRectangleLeft: 10 bottom: 10 width: 80 height: 80.
			renderer setClippingPath.
			renderer concat: (((PDF classAt: #Matrix) scaling: 40 @ 40) translatedBy: 50 @ 50).
			renderer paintShading: shading]]) saveAndShowAs: 'demo08_shadingRadial.pdf'
%
classmethod: PDF
demo09_shadingGauss
	"PDF demo09_shadingGauss"
	"simulates the edge of an object filtered by a gaussian blur"

	(PDF Page newInBounds: (0 @ 0 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceGray) new render: [:renderer |
		| linearFunction linearShading splineFunction splineShading |
		linearFunction := (PDF classAt: #SampledFunction) empty.
		linearFunction at: #Domain put: #(0 1.0).
		linearFunction at: #Range put: #(0 1.0).
		linearFunction at: #Size put: #(14).
		linearFunction at: #BitsPerSample put: 8.
		linearFunction at: #Order put: 1.	"linear interpolation"
		linearFunction contents: #[0 2 6 17 37 68 107 148 187 218 238 249 253 255] asString.
		splineFunction := linearFunction copy.
		splineFunction at: #Order put: 3.	"cubic spline interpolation"
		linearShading := (PDF classAt: #AxialShading) empty.
		linearShading at: #ColorSpace put: #DeviceGray.
		linearShading at: #Coords put: #(0 0 1 0).
		linearShading at: #Function put: linearFunction newReference.
		splineShading := linearShading copy.
		splineShading at: #Function put: splineFunction newReference.
		renderer isolatedDo: [
			renderer addRectangleLeft: 10 bottom: 55 width: 80 height: 35.
			renderer setClippingPath.
			renderer concat: (((PDF classAt: #Matrix) scaling: 80 @ 80) translatedBy: 10 @ 55).
			renderer paintShading: linearShading].
		renderer isolatedDo: [
			renderer addRectangleLeft: 10 bottom: 10 width: 80 height: 35.
			renderer setClippingPath.
			renderer concat: (((PDF classAt: #Matrix) scaling: 80 @ 80) translatedBy: 10 @ 10).
			renderer paintShading: splineShading]]) saveAndShowAs: 'demo09_shadingGauss.pdf'
%
classmethod: PDF
demo10_transformationsNone
	"PDF demo10_transformationsNone"

	| page |
	page := PDF Page newInBounds: (-100 @ -100 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
		renderer moveTo: -100 @ 0; lineTo: 100 @ 0; stroke.	"draws a line at y = 0"
		renderer moveTo: 0 @ -100; lineTo: 0 @ 100; stroke.	"draws a line at x = 0"
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 1.
			renderer textMatrix: #(4 0 0 4 50 50); showString: '(50 50)'.	"bigger font"
			renderer textMatrix: #(2 0 0 2 -50 50); showString: '(-50 50)'.
			renderer textMatrix: #(2 0 0 2 50 -50); showString: '(50 -50)'.
			renderer textMatrix: #(2 0 0 2 -50 -50); showString: '(-50 -50)']].
	page saveAndShowAs: 'demo10_transformationsNone.pdf'
%
classmethod: PDF
demo10a_transformationsFlipVertically
	"PDF demo10a_transformationsFlipVertically"

	| page |
	page := PDF Page newInBounds: (-100 @ -100 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
            renderer concat: ((PDF classAt: #Matrix) scaling: 1 @ -1).
		renderer moveTo: -100 @ 0; lineTo: 100 @ 0; stroke.	"draws a line at y = 0"
		renderer moveTo: 0 @ -100; lineTo: 0 @ 100; stroke.	"draws a line at x = 0"
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 1.
			renderer textMatrix: #(4 0 0 4 50 50); showString: '(50 50)'.	"bigger font"
			renderer textMatrix: #(2 0 0 2 -50 50); showString: '(-50 50)'.
			renderer textMatrix: #(2 0 0 2 50 -50); showString: '(50 -50)'.
			renderer textMatrix: #(2 0 0 2 -50 -50); showString: '(-50 -50)']].
	page saveAndShowAs: 'demo10a_transformationsFlipVertically.pdf'
%
classmethod: PDF
demo10b_transformationsFlipHorizontally
	"PDF demo10b_transformationsFlipHorizontally"

	| page |
	page := PDF Page newInBounds: (-100 @ -100 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
            renderer concat: ((PDF classAt: #Matrix) scaling: -1 @ 1).
		renderer moveTo: -100 @ 0; lineTo: 100 @ 0; stroke.	"draws a line at y = 0"
		renderer moveTo: 0 @ -100; lineTo: 0 @ 100; stroke.	"draws a line at x = 0"
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 1.
			renderer textMatrix: #(4 0 0 4 50 50); showString: '(50 50)'.	"bigger font"
			renderer textMatrix: #(2 0 0 2 -50 50); showString: '(-50 50)'.
			renderer textMatrix: #(2 0 0 2 50 -50); showString: '(50 -50)'.
			renderer textMatrix: #(2 0 0 2 -50 -50); showString: '(-50 -50)']].
	page saveAndShowAs: 'demo10b_transformationsFlipHorizontally.pdf'
%
classmethod: PDF
demo10c_transformationsFlipDiagonal
	"PDF demo10c_transformationsFlipDiagonal"

	| page |
	page := PDF Page newInBounds: (-100 @ -100 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
            renderer concat: ((PDF classAt: #Matrix) scaling: -1 @ -1).
		renderer moveTo: -100 @ 0; lineTo: 100 @ 0; stroke.	"draws a line at y = 0"
		renderer moveTo: 0 @ -100; lineTo: 0 @ 100; stroke.	"draws a line at x = 0"
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 1.
			renderer textMatrix: #(4 0 0 4 50 50); showString: '(50 50)'.	"bigger font"
			renderer textMatrix: #(2 0 0 2 -50 50); showString: '(-50 50)'.
			renderer textMatrix: #(2 0 0 2 50 -50); showString: '(50 -50)'.
			renderer textMatrix: #(2 0 0 2 -50 -50); showString: '(-50 -50)']].
	page saveAndShowAs: 'demo10c_transformationsFlipDiagonal.pdf'
%
classmethod: PDF
demo10d_transformationsFlipVerticallyTranslateOrigin
	"PDF demo10d_transformationsFlipVerticallyTranslateOrigin"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 100 @ -100) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
            renderer concat: ((PDF classAt: #Matrix) scaling: 1 @ -1).
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 1.
	            renderer textMatrix: #(2 0 0 -2 10 10); showString: '(10 10)'.
      	      renderer textMatrix: #(2 0 0 -2 10 20); showString: '(10 20)'.
            	renderer textMatrix: #(2 0 0 -2 10 30); showString: '(10 30)'.
	            renderer textMatrix: #(2 0 0 -2 10 40); showString: '(10 40)'.
      	      renderer textMatrix: #(2 0 0 -2 20 10); showString: '(20 10)'.
            	renderer textMatrix: #(2 0 0 -2 20 20); showString: '(20 20)'.
	            renderer textMatrix: #(2 0 0 -2 20 30); showString: '(20 30)'.
      	      renderer textMatrix: #(2 0 0 -2 20 40); showString: '(20 40)']].
	page saveAndShowAs: 'demo10d_transformationsFlipVerticallyTranslateOrigin.pdf'
%
classmethod: PDF
demo11_URI_Link
	"PDF demo11_URI_Link"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 150 @ 30) colorspace: (PDF classAt: #DeviceCMYK) new render: [:renderer |
		| link action |
		renderer textRenderingMode: 0.
		renderer fillColor: (CmykColor cyan: 0 magenta: 0.6 yellow: 1 black: 0).
		renderer textObjectDo: [
			renderer setFont: #Helvetica size: 16.
			renderer add: (NextLineRelative operands: #(5 10)).
			renderer showString: 'Web link to Adobe'].
		link := (PDF classAt: #LinkAnnotation) empty.
		link at: #Rect put: #(4 7 136 24).
		link at: #Border put: #(0 0 0).
		action := (PDF classAt: #URI) empty.
		action at: #URI put: 'http://www.adobe.com'.
		link at: #A put: action.
		renderer addAnnotation: link].
	page saveAndShowAs: 'demo11_URI_Link.pdf'
%
classmethod: PDF
demo12_copyPagesToNewPDF
	"PDF demo12_copyPagesToNewPDF"
	"return the path to the extracted PDF to be used in other demos"

	| extractedDocument filename targetFilename inputStream |
	extractedDocument := Document new.
	"put the specification into the $HOME path on the server"
	filename := (GsFile _expandEnvVariable: 'HOME' isClient: false) , '/PDF32000_2008.pdf'.
	targetFilename := (filename allButLast: 4) , '[extracted10to20].pdf'.
	inputStream := GsFile openReadOnServer: filename.
	[
	| root |
	root := (File readFrom: inputStream) root.
	10 to: 20 do: [:pageNumber |
		extractedDocument root addPage: (root pageAt: pageNumber) copyIsolatedWithNewReferences].
	extractedDocument saveAs: targetFilename] ensure: [
			inputStream close].
	^targetFilename
%
classmethod: PDF
demo13_splitPDF
	"PDF demo13_splitPDF"
	"Thanks to Holger Kleinsorgen who posted the basic solution to the vwnc list"

	| filename inputStream inputPDF pageNumber |
	filename := self demo12_copyPagesToNewPDF.
	inputStream := GsFile openReadOnServer: filename.
	[
	inputPDF := File readFrom: inputStream.
	pageNumber := 1.
	inputPDF root pagesDo: [:page |
		| targetFilename onePageDocument |
		onePageDocument := Document new.
		onePageDocument root addPage: page copyIsolatedWithNewReferences.
		targetFilename := (filename asString allButLast: 4) , '_' , pageNumber printString , '.pdf'.
		onePageDocument saveAs: targetFilename.
		pageNumber := pageNumber + 1]] ensure: [
			inputStream close]
%
classmethod: PDF
demo14_addAnnotation
	"PDF demo14_addAnnotation"

	| filename inputStream clone |
	filename := self demo12_copyPagesToNewPDF.
	inputStream := GsFile openReadOnServer: filename.
	clone := (File readFrom: inputStream) asDocument.
	[
	clone root pagesDo: [:page |
		| newAnnotation popupAnnotation popupAnnotationRef |
		newAnnotation := (PDF classAt: #TextAnnotation) empty.
		newAnnotation at: #Rect put: (50 @ 500 extent: 200 @ 40).
		"add some optional attribute"
		newAnnotation at: #Contents put: 'The text of the annotation'.
		newAnnotation at: #T put: 'Title of the text annotation'.
		popupAnnotation := (PDF classAt: #PopupAnnotation) empty.
		popupAnnotation at: #Rect put: (80 @ 550 extent: 200 @ 100).
		popupAnnotationRef := popupAnnotation newReference.
		newAnnotation at: #Popup put: popupAnnotationRef.
		page
			at: #Annots
			put: ((page Annots with: newAnnotation newReference) with: popupAnnotationRef)].
	clone saveAs: (filename asString allButLast: 4) , '_Annotated.pdf'] ensure: [
			inputStream close]
%
classmethod: PDF
demo20_ImagesUsage
	"PDF demo20_ImagesUsage"

	| page |
	page := PDF Page newInBounds: (0 @ 0 corner: 100 @ 100) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
		renderer isolatedDo: [
			renderer concat: (((PDF classAt: #Matrix) scaling: 32 @ 32) translatedBy: 34 @ 34).
			renderer paintXObject: ImageXObject depth8Masked]].
	page saveAndShowAs: 'demo20_ImagesUsage.pdf'
%
classmethod: PDF
demo21_Images
	"Demo for what you can do with images in PDF.
	Demonstrates also how to use images as values stored in methods: look at ImageXObject class>>#addDemoImageMethods"
	"PDF demo21_Images"

	| a4 page |
	a4 := 595 @ 842.
	page := PDF Page newInBounds: (0 @ 0 corner: a4) colorspace: (PDF classAt: #DeviceRGB) new render: [:renderer |
		| left m m2 p image alpha |
		left := 10.
		m := 2 @ 0.
		m2 := m + m.
		p := left @ 170.
		renderer fillColor: (ColorValue fromBytesRed: 230 green: 230 blue: 230).
		renderer addRectangleLeft: 20 bottom: 20 width: a4 x - 40 height: a4 y - 40.
		renderer fill.
		renderer fillColor: ColorValue black.
		renderer concat: ((PDF classAt: #Matrix) scaling: 4 @ 4).
		image := ImageXObject pdfIconFigureImage.
		p := (renderer paintImage: image caption: 'Image' in: (p extent: image extent)) + m.
		image := ImageXObject pdfIconMaskImage.
		image at: #ColorSpace put: #DeviceGray.
		image at: #ImageMask put: nil.
		p := (renderer paintImage: image caption: '+ Mask' in: (p extent: image extent)) + m2.
		image := ImageXObject pdfIconImage.
		renderer paintImage: image caption: '= Icon' in: (p extent: image extent).
		p := left @ (p y - 40).
		image := ImageXObject balloonImage.
		p := (renderer paintImage: image caption: 'Image' in: (p extent: image extent * 2)) + m.
		image := ImageXObject balloonMaskImage.
		image at: #ColorSpace put: #DeviceGray.
		image at: #ImageMask put: nil.
		p := (renderer paintImage: image caption: '+ Mask' in: (p extent: image extent * 2)) + m2.
		image := ImageXObject balloonMaskedImage.
		renderer paintImage: image caption: '= OpaqueImage' in: (p extent: image extent * 2).
		p := left @ (p y - 40).
		image := ImageXObject pdfIconImage.
		renderer isolatedDo: [
			renderer concat: ((((PDF classAt: #Matrix) scaling: image extent) rotatedByDegrees: 35) translatedBy: p + (12 @ -6)).
			renderer paintXObject: image].
		renderer showString: 'rotated' at: p - (0 @ 4).
		p := p + (image width @ 0 + (m2 + m2)).
		image := ImageXObject balloonMaskedImage.
		image at: #Interpolate put: true.
		p := (renderer paintImage: image caption: 'interpolated' in: (p extent: image extent * 2)) + m2.
		image := ImageXObject balloonInvertedImage.
		renderer paintImage: image caption: 'inverted' in: (p extent: image extent * 2).
		p := left @ (p y - 40).
		image := ImageXObject fixedDepth6Image.
		p := (renderer paintImage: image caption: 'Image' in: (p extent: image extent * 3)) + m2.
		image at: #Interpolate put: true.
		p := (renderer paintImage: image caption: 'interpolated' in: (p extent: image extent * 3)) + m2.
		renderer paintImage: image caption: 'scaled' in: (p extent: image extent * (8 @ 4)).
		p := left @ (p y - 40).
		alpha := ImageXObject buttonAlphaImage.
		p := (renderer paintImage: alpha caption: 'AlphaImage' in: (p extent: alpha extent)) + m.
		renderer isolatedDo: [
			renderer concat: (((PDF classAt: #Matrix) scaling: alpha extent) translatedBy: p).
			renderer paintXObject: image.
			renderer paintXObject: alpha].
		renderer showString: 'on Background' at: p - (0 @ 4)].
	page saveAndShowAs: 'demo21_Images.pdf'
%
classmethod: PDF
runAllDemos
	"PDF runAllDemos"

	PDF demo01_HelloWorld.
	PDF demo01_minimalPDF.
	PDF demo01a_normalPDF.
	PDF demo02_graphics.
	PDF demo03_text.
	PDF demo03a_text_NonASCII.
	PDF demo03b_text_FontCharactersTable.
	PDF demo03c_text_DifferentFonts.
	PDF demo03d_text_Underline.
	PDF demo03e_text_CopyrightAndTrademarkInAllFonts.
	PDF demo04_fonts.
	PDF demo04a_loadedFonts.
	PDF demo04b_MICRDemo.
	PDF demo05_transparency.
	PDF demo06_shading.
	PDF demo07_shadingStiching.
	PDF demo08_shadingRadial.
	PDF demo09_shadingGauss.
	PDF demo10_transformationsNone.
	PDF demo10a_transformationsFlipVertically.
	PDF demo10b_transformationsFlipHorizontally.
	PDF demo10c_transformationsFlipDiagonal.
	PDF demo10d_transformationsFlipVerticallyTranslateOrigin.
	PDF demo11_URI_Link.
	PDF demo12_copyPagesToNewPDF.
	PDF demo13_splitPDF.
	PDF demo14_addAnnotation.
	PDF demo20_ImagesUsage.
	PDF demo21_Images.
	PDF allDemos_appendPDFs
%
category: '*PDFtalk Demonstrations-demos'
method: Renderer
paintImage: anImage caption: aString in: aRectangle
	"<Point>
	return the right position"

	self paintImage: anImage in: aRectangle.
	self showString: aString at: aRectangle origin - (0 @ 4).
	^aRectangle topRight
%
method: Renderer
paintImage: image in: rect
	self isolatedDo: [
		self concat: (((PDF classAt: #Matrix) scaling: rect extent) translatedBy: rect origin).
		self paintXObject: image]
%
method: Renderer
showString: aString at: aPoint
	self textObjectDo: [
		self textMatrix: #(1 0 0 1) , (Array
			with: aPoint x
			with: aPoint y).
		self setFont: #Helvetica size: 4.
		self showString: aString]
%
DoIt
System myUserProfile removeDictionaryAt: 1.
%
DoIt
	| start |
	UserGlobals removeKey: #FileInSymbolDictionary.
	start := UserGlobals removeKey: #FileInStartingTimestamp ifAbsent: [
		^'No starting timestamp; no duration available'].
	'Run duration: ' , (DateAndTime now - start) printString.
%
IfErr_clear
Commit
# 
# Finished file-in successfully
# 
